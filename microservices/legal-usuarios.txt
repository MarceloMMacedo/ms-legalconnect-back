```java
/mvnw text eol=lf
*.cmd text eol=crlf

```
```java
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

```
```java
# Read Me First

The following was discovered as part of building this project:

- The original package name 'br.com.legalconnect.auth.auth-service' is invalid and this project uses 'br.com.legalconnect.auth.auth_service' instead.

# Getting Started

### Reference Documentation

For further reference, please consider the following sections:

- [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
- [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.5.3/maven-plugin)
- [Create an OCI image](https://docs.spring.io/spring-boot/3.5.3/maven-plugin/build-image.html)
- [Flyway Migration](https://docs.spring.io/spring-boot/3.5.3/how-to/data-initialization.html#howto.data-initialization.migration-tool.flyway)
- [Spring Boot DevTools](https://docs.spring.io/spring-boot/3.5.3/reference/using/devtools.html)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.

docker run --name jusplatform_db -e POSTGRES_DB=jusplatform_db -e POSTGRES_USER=jususer -e POSTGRES_PASSWORD=juspassword -p 5432:5432 -d postgres

```
```java
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

```
```java
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

```
```java
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.5</version> <!-- Mantendo 3.2.5 para consistência com o Gateway, mas você pode usar
        3.2.12 se preferir -->
        <relativePath /> <!-- lookup parent from repository -->
    </parent>
    <groupId>br.com.legalconnect</groupId>
    <artifactId>legalconnect-auth-service</artifactId> <!-- Certifique-se de que o artifactId está correto para o auth-service -->
    <version>0.0.1-SNAPSHOT</version>
    <name>legalconnect-auth-service</name>
    <description>Authentication Microservice for LegalConnect</description>

    <properties>
        <java.version>17</java.version>
        <spring-cloud.version>2023.0.1</spring-cloud.version>

        <jjwt.version>0.11.5</jjwt.version> <!-- Mantido 0.12.5 para compatibilidade com a classe
        JwtUtil -->
        <flyway.version>11.8.2</flyway.version> <!-- CORRIGIDO: Define a versão do Flyway para 11.8.2 -->
        <lombok.version>1.18.30</lombok.version> <!-- Adicionado/Atualizado para garantir
        compatibilidade -->
        <org.mapstruct.version>1.5.5.Final</org.mapstruct.version> <!-- Adicionado/Atualizado para
        garantir compatibilidade -->
        <springdoc.version>2.5.0</springdoc.version> <!-- Atualizado para 2.5.0 para consistência com
        o Gateway -->
    </properties>

    <dependencies>
        <!-- Spring Boot Starters -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!-- Database -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!-- Flyway Core para migrações de banco de dados -->
        <!-- <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            A versão será gerenciada pela seção dependencyManagement
        </dependency> -->
        <!-- Flyway para PostgreSQL (necessário se você usa recursos específicos do PostgreSQL no
        Flyway) -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-database-postgresql</artifactId>
            <!-- A versão será gerenciada pela seção dependencyManagement -->
        </dependency>

        <!-- JWT Libraries -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>${jjwt.version}</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>${jjwt.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>${jjwt.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- MapStruct for DTO-Entity mapping -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>${org.mapstruct.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- common-lib (se aplicável, mantenha a versão correta) -->
        <dependency>
            <groupId>br.com.legalconnect.common</groupId>
            <artifactId>common-lib</artifactId>
            <version>1.0.0</version>
        </dependency>

        <!-- Lombok for boilerplate code reduction -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Spring Boot Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- OpenAPI/Swagger UI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc.version}</version>
        </dependency>

        <!-- Jackson for JSON processing (used by JwtAuthEntryPoint) -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>


    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- Adicionado/Atualizado: Força a versão do flyway-core para evitar conflitos de
            dependência transitiva -->
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-core</artifactId>
                <version>${flyway.version}</version>
            </dependency>
            <!-- Adicionado/Atualizado: Força a versão do flyway-database-postgresql para evitar
            conflitos de dependência transitiva -->
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-database-postgresql</artifactId>
                <version>${flyway.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!-- Plugin para MapStruct -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${org.mapstruct.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>0.2.0</version>
                        </path>
                    </annotationProcessorPaths>
                    <compilerArgs>
                        <arg>-Amapstruct.defaultComponentModel=spring</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
```
```java
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip

```
```java
{
  "configurations": [
    {
      "type": "java",
      "name": "Spring Boot-AuthServiceApplication<local-service>",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "mainClass": "br.com.legalconnect.AuthServiceApplication",
      "projectName": "local-service",
      "args": "",
      "envFile": "${workspaceFolder}/.env"
    },
    {
      "type": "java",
      "name": "Spring Boot-AuthServiceApplication<legalconnect-auth-service>",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "mainClass": "br.com.legalconnect.AuthServiceApplication",
      "projectName": "legalconnect-auth-service",
      "args": "",
      "envFile": "${workspaceFolder}/.env"
    }
  ]
}

```
```java
{
  "java.configuration.updateBuildConfiguration": "interactive"
}

```
```java
package br.com.legalconnect;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
// import org.springframework.context.annotation.ComponentScan; // REMOVA ESTA LINHA OU COMENTE-A
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@EnableDiscoveryClient
@SpringBootApplication(exclude = FlywayAutoConfiguration.class) // Remova o scanBasePackages aqui também, se já está no
                                                                // pacote raiz
@EntityScan(basePackages = {
        "br.com.legalconnect.user.entity",
        "br.com.legalconnect.auth.entity"
})
@EnableJpaRepositories(basePackages = {
        "br.com.legalconnect.user.repository",
        "br.com.legalconnect.auth.repository"
})
// REMOVA COMPLETAMENTE ESTE @ComponentScan, a menos que você tenha um motivo
// muito específico e saiba o que está fazendo
// @ComponentScan(basePackages = { "br.com.legalconnect.auth.service" })
public class AuthServiceApplication {

    private static final Logger log = LoggerFactory.getLogger(AuthServiceApplication.class);

    public static void main(String[] args) {
        SpringApplication.run(AuthServiceApplication.class, args);
        log.info("LegalConnectApplication iniciada com sucesso!");
    }
}
```
```java
package br.com.legalconnect.auth.config;

import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;

import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import reactor.core.publisher.Mono;

/**
 * @class JwtAuthEntryPoint
 * @brief Ponto de entrada de autenticação para requisições não autenticadas ou
 *        com falha de autenticação.
 *
 *        Esta classe implementa `AuthenticationEntryPoint` para lidar com
 *        requisições que
 *        chegam sem credenciais válidas ou com credenciais que falham na
 *        autenticação.
 *        Ela retorna uma resposta JSON padronizada com `HTTP 401 Unauthorized`
 *        e um
 *        `BaseResponse` contendo o código e mensagem de erro.
 */
@Component
public class JwtAuthEntryPoint implements WebFilter {

    private static final String TENANT_HEADER = "X-Tenant-ID";
    private static final String CORRELATION_HEADER = "X-Correlation-ID";

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
        return Mono.fromRunnable(() -> {
            // 1. Validação do Tenant ID
            String tenantId = exchange.getRequest().getHeaders().getFirst(TENANT_HEADER);
            if (tenantId == null || tenantId.isBlank()) {
                throw new BusinessException(ErrorCode.TENANT_NOT_FOUND, TENANT_HEADER + " header is required");
            }

            // 2. Validação do Correlation ID
            String correlationId = exchange.getRequest().getHeaders().getFirst(CORRELATION_HEADER);
            if (correlationId == null || correlationId.isBlank()) {
                throw new BusinessException(ErrorCode.USER_NOT_FOUND, CORRELATION_HEADER + " header is required");
            }
        }).then(chain.filter(exchange));
    }
}
```
```java
// auth-service/src/main/java/br/com/legalconnect/config/security/SecurityConfig.java
package br.com.legalconnect.auth.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource; // Importar CorsConfigurationSource
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import br.com.legalconnect.auth.service.JwtService; // Importar JwtService
import br.com.legalconnect.user.repository.UserRepository; // Importar UserRepository

/**
 * @class SecurityConfig
 * @brief Configuração de segurança principal para o microsserviço de
 *        autenticação.
 *
 *        Esta classe configura o Spring Security para usar JWTs para
 *        autenticação,
 *        define as regras de autorização para endpoints públicos e protegidos,
 *        e integra o filtro JWT personalizado.
 */
@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true) // Habilita segurança baseada em anotações como @PreAuthorize
public class SecurityConfig {

    private static final Logger log = LoggerFactory.getLogger(SecurityConfig.class);
    // @Autowired
    // private JwtAuthEntryPoint unauthorizedHandler;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private JwtService jwtService; // Injetar JwtService

    @Bean

    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    private static final String[] PUBLIC_ENDPOINTS = {
            "/api/v1/auth/**",
            "/api/v1/public/**",
            "/api/v1/users/register/**",
            "/api/v1/users/recover-password/**",
            "/api/v1/users/reset-password/**",
            "/actuator/**",
            "/h2-console/**",
            "/v3/api-docs/**",
            "/swagger-ui/**",
            "/swagger-ui.html",
            "/webjars/**"
    };

    /**
     * @brief Configura o provedor de autenticação.
     *
     *        Define o `UserDetailsService` e o `PasswordEncoder` a serem usados
     *        pelo Spring Security para autenticar usuários.
     *
     * @param userDetailsService O UserDetailsService (será injetado pelo Spring)
     * @return Uma instância de `DaoAuthenticationProvider`.
     */
    @Bean
    public DaoAuthenticationProvider authenticationProvider(UserDetailsService userDetailsService) {
        log.debug("Configurando DaoAuthenticationProvider.");
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }

    /**
     * @brief Obtém o `AuthenticationManager`.
     *
     *        O `AuthenticationManager` é usado para autenticar o objeto
     *        `Authentication`
     *        em métodos de login.
     *
     * @param authConfig A configuração de autenticação.
     * @return Uma instância de `AuthenticationManager`.
     * @throws Exception se ocorrer um erro ao obter o AuthenticationManager.
     */
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
        log.debug("Obtendo AuthenticationManager.");
        return authConfig.getAuthenticationManager();
    }

    /**
     * @brief Define o UserDetailsService personalizado.
     *
     *        Este bean é criado pelo Spring e injetará o UserRepository.
     * @return Uma instância de UserDetailsService.
     */
    @Bean
    public UserDetailsService userDetailsService() {
        log.debug("Criando bean UserDetailsService personalizado.");
        return username -> userRepository.findByEmail(username)
                .orElseThrow(() -> new UsernameNotFoundException("Usuário não encontrado: " + username));
    }

    /**
     * @brief Define o JwtAuthFilter como um bean.
     *
     *        Ao definir o filtro como um bean aqui, o Spring gerencia sua criação
     *        e injeção de dependências, quebrando a referência circular que ocorria
     *        quando ele era um @Component e injetado via @Autowired na
     *        SecurityConfig.
     *
     * @param jwtService         O serviço JWT injetado pelo Spring.
     * @param userDetailsService O serviço de detalhes do usuário injetado pelo
     *                           Spring.
     * @return Uma instância de JwtAuthFilter.
     */
    // @Bean
    // public JwtAuthFilter jwtAuthFilter(JwtService jwtService, UserDetailsService
    // userDetailsService) {
    // log.debug("Criando bean JwtAuthFilter.");
    // return new JwtAuthFilter(jwtService, userDetailsService);
    // }

    /**
     * @brief Configura a cadeia de filtros de segurança HTTP.
     *
     *        Define as regras de autorização para diferentes endpoints,
     *        configura a política de criação de sessão como `STATELESS` (essencial
     *        para JWT),
     *        e adiciona o filtro JWT personalizado antes do filtro de autenticação
     *        padrão do Spring Security.
     *
     * @param http O objeto `HttpSecurity` para configurar a segurança.
     * @return Uma instância de `SecurityFilterChain`.
     * @throws Exception se ocorrer um erro durante a configuração.
     */
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        log.info("Configurando SecurityFilterChain.");
        http
                .csrf(csrf -> csrf.disable())
                // Adicionar configuração CORS
                .cors(cors -> cors.configurationSource(corsConfigurationSource()))
                // .exceptionHandling(exception ->
                // exception.authenticationEntryPoint(unauthorizedHandler))
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers(PUBLIC_ENDPOINTS).permitAll()
                        .anyRequest().authenticated());

        http.authenticationProvider(authenticationProvider(userDetailsService()));

        // Usa o bean jwtAuthFilter que foi definido acima
        // http.addFilterBefore(jwtAuthFilter(jwtService, userDetailsService()),
        // UsernamePasswordAuthenticationFilter.class);

        http.headers(headers -> headers.frameOptions(frameOptions -> frameOptions.sameOrigin()));

        log.info("SecurityFilterChain configurada com sucesso.");
        return http.build();
    }
    // @Bean
    // public SecurityFilterChain securityFilterChain(HttpSecurity http) throws
    // Exception {
    // log.info("Configurando SecurityFilterChain.");
    // http
    // .csrf(csrf -> csrf.disable())
    // .exceptionHandling(exception ->
    // exception.authenticationEntryPoint(unauthorizedHandler))
    // .sessionManagement(session ->
    // session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
    // .authorizeHttpRequests(auth -> auth
    // .requestMatchers(PUBLIC_ENDPOINTS).permitAll()
    // .anyRequest().authenticated());

    // http.authenticationProvider(authenticationProvider(userDetailsService()));

    // // Usa o bean jwtAuthFilter que foi definido acima
    // http.addFilterBefore(jwtAuthFilter(jwtService, userDetailsService()),
    // UsernamePasswordAuthenticationFilter.class);

    // http.headers(headers -> headers.frameOptions(frameOptions ->
    // frameOptions.sameOrigin()));

    // log.info("SecurityFilterChain configurada com sucesso.");
    // return http.build();
    // }
    /**
     * @brief Configura o CorsConfigurationSource para permitir requisições CORS.
     *
     *        Define as origens permitidas, métodos HTTP, cabeçalhos e credenciais
     *        para as requisições CORS.
     * @return Uma instância de `CorsConfigurationSource`.
     */
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        log.debug("Configurando CorsConfigurationSource.");
        CorsConfiguration configuration = new CorsConfiguration();
        // Permitir todas as origens (em produção, especifique origens seguras, ex:
        // "http://localhost:3000")
        configuration.addAllowedOrigin("*");
        // Permitir todos os métodos HTTP (GET, POST, PUT, DELETE, etc.)
        configuration.addAllowedMethod("*");
        // Permitir todos os cabeçalhos
        configuration.addAllowedHeader("*");
        // Permitir envio de credenciais (cookies, headers de autorização)
        configuration.setAllowCredentials(true);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        // Aplicar esta configuração CORS a todos os caminhos (/**)
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}

```
```java
package br.com.legalconnect.auth.config;

import org.springframework.context.annotation.Bean;
import org.springframework.web.server.WebFilter;

public class WebConfig {
    private final JwtAuthEntryPoint jwtAuthEntryPoint;

    public WebConfig(JwtAuthEntryPoint jwtAuthEntryPoint) {
        this.jwtAuthEntryPoint = jwtAuthEntryPoint;
    }

    @Bean
    public WebFilter jwtAuthEntryPointFilter() {
        return jwtAuthEntryPoint;
    }

    @Bean
    public WebFilter corsFilter() {
        return (exchange, chain) -> {
            exchange.getResponse().getHeaders().add("Access-Control-Allow-Origin", "*");
            exchange.getResponse().getHeaders().add("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
            exchange.getResponse().getHeaders().add("Access-Control-Allow-Headers", "*");
            exchange.getResponse().getHeaders().add("Access-Control-Max-Age", "3600");

            if (exchange.getRequest().getMethod().name().equals("OPTIONS")) {
                exchange.getResponse().setStatusCode(org.springframework.http.HttpStatus.OK);
                return exchange.getResponse().setComplete();
            }

            return chain.filter(exchange);
        };
    }
}
```
```java
package br.com.legalconnect.auth.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.auth.dto.AuthResponse;
import br.com.legalconnect.auth.dto.LoginRequestDTO;
import br.com.legalconnect.auth.dto.RecoverPasswordRequest;
import br.com.legalconnect.auth.dto.RefreshTokenRequestDTO;
import br.com.legalconnect.auth.dto.ResetPasswordRequest;
import br.com.legalconnect.auth.dto.UserRegistrationRequest;
import br.com.legalconnect.auth.dto.UserResponseDTO;
import br.com.legalconnect.auth.service.AuthService;
import br.com.legalconnect.common.dto.BaseResponse;
import br.com.legalconnect.enums.StatusResponse;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

/**
 * "/api/v1/usuarios/redefinir-senha/solicitar",
 * "/api/v1/usuarios/redefinir-senha/confirmar",
 * 
 * @class AuthController
 * @brief Controlador REST para endpoints de autenticação.
 *        Gerencia as requisições de login e refresh de tokens JWT.
 */
@RestController
@RequestMapping("/api/v1/auth")
@RequiredArgsConstructor
public class AuthController {

        private static final Logger log = LoggerFactory.getLogger(AuthController.class);

        private final AuthService authService;

        /**
         * Endpoint para autenticação de usuário.
         * 
         * @param request DTO de requisição de login.
         * @return Resposta padronizada com tokens JWT.
         */
        @PostMapping("/login")
        public ResponseEntity<BaseResponse<AuthResponse>> authenticate(@Valid @RequestBody LoginRequestDTO request) {
                log.info("Requisição de login recebida para o e-mail: {}", request.getEmail());
                long startTime = System.currentTimeMillis();
                BaseResponse<AuthResponse> response = authService.authenticate(request);
                long endTime = System.currentTimeMillis();
                log.info("Login para o e-mail '{}' processado em {} ms. Status: {}", request.getEmail(),
                                (endTime - startTime),
                                "Sucesso");
                return ResponseEntity.ok(response);
        }

        /**
         * Endpoint para renovar o access token usando um refresh token.
         * 
         * @param request DTO de requisição de refresh token.
         * @return Resposta padronizada com novo access token.
         */
        @PostMapping("/refresh-token")
        public ResponseEntity<BaseResponse<AuthResponse>> refreshToken(
                        @Valid @RequestBody RefreshTokenRequestDTO request) {
                log.info("Requisição de refresh token recebida.");
                long startTime = System.currentTimeMillis();
                BaseResponse<AuthResponse> response = authService.refreshToken(request);
                long endTime = System.currentTimeMillis();
                log.info("Refresh token processado em {} ms. Status: {}", (endTime - startTime), "Sucesso");
                return ResponseEntity.ok(response);
        }

        /**
         * Endpoint para registro de um novo cliente.
         * 
         * @param request DTO de requisição de registro de usuário.
         * @return Resposta padronizada com DTO do usuário registrado.
         */
        @PostMapping("/clientes/registrar")
        public ResponseEntity<BaseResponse<UserResponseDTO>> registerClient(
                        @Valid @RequestBody UserRegistrationRequest request) {
                log.info("Requisição de registro de cliente recebida para o e-mail: {}", request.getEmail());
                long startTime = System.currentTimeMillis();
                UserResponseDTO registeredUser = authService.registerClient(request);
                long endTime = System.currentTimeMillis();
                log.info("Registro de cliente para o e-mail '{}' processado em {} ms. Status: Sucesso",
                                request.getEmail(),
                                (endTime - startTime));
                return ResponseEntity.ok(BaseResponse.<UserResponseDTO>builder()
                                .data(registeredUser)
                                .message("Cliente registrado com sucesso!")
                                .status(StatusResponse.SUCESSO)
                                .build());
        }

        /**
         * Endpoint para registro de um novo advogado.
         * 
         * @param request DTO de requisição de registro de usuário.
         * @return Resposta padronizada com DTO do usuário registrado.
         */
        @PostMapping("/advogados/registrar")
        public ResponseEntity<BaseResponse<UserResponseDTO>> registerAdvogado(
                        @Valid @RequestBody UserRegistrationRequest request) {
                log.info("Requisição de registro de advogado recebida para o e-mail: {}", request.getEmail());
                long startTime = System.currentTimeMillis();
                UserResponseDTO registeredUser = authService.registerAdvogado(request);
                long endTime = System.currentTimeMillis();
                log.info("Registro de advogado para o e-mail '{}' processado em {} ms. Status: Sucesso",
                                request.getEmail(),
                                (endTime - startTime));
                return ResponseEntity.ok(BaseResponse.<UserResponseDTO>builder()
                                .data(registeredUser)
                                .message("Advogado pré-registrado com sucesso! Aguardando aprovação.")
                                .status(StatusResponse.SUCESSO)
                                .build());
        }

        /**
         * Endpoint para registro de um novo sócio.
         * 
         * @param request DTO de requisição de registro de usuário.
         * @return Resposta padronizada com DTO do usuário registrado.
         */
        @PostMapping("/socios/registrar")
        public ResponseEntity<BaseResponse<UserResponseDTO>> registerSocio(
                        @Valid @RequestBody UserRegistrationRequest request) {
                log.info("Requisição de registro de sócio recebida para o e-mail: {}", request.getEmail());
                long startTime = System.currentTimeMillis();
                UserResponseDTO registeredUser = authService.registerSocio(request);
                long endTime = System.currentTimeMillis();
                log.info("Registro de sócio para o e-mail '{}' processado em {} ms. Status: Sucesso",
                                request.getEmail(),
                                (endTime - startTime));
                return ResponseEntity.ok(BaseResponse.<UserResponseDTO>builder()
                                .data(registeredUser)
                                .message("Sócio registrado com sucesso! Aguardando aprovação.")
                                .status(StatusResponse.SUCESSO)
                                .build());
        }

        /**
         * Endpoint para registro de um novo administrador da plataforma.
         * 
         * @param request DTO de requisição de registro de usuário.
         * @return Resposta padronizada com DTO do usuário registrado.
         */
        @PostMapping("/administradores/registrar")
        public ResponseEntity<BaseResponse<UserResponseDTO>> registerAdmin(
                        @Valid @RequestBody UserRegistrationRequest request) {
                log.info("Requisição de registro de administrador recebida para o e-mail: {}", request.getEmail());
                long startTime = System.currentTimeMillis();
                UserResponseDTO registeredUser = authService.registerAdmin(request);
                long endTime = System.currentTimeMillis();
                log.info("Registro de administrador para o e-mail '{}' processado em {} ms. Status: Sucesso",
                                request.getEmail(), (endTime - startTime));
                return ResponseEntity.ok(BaseResponse.<UserResponseDTO>builder()
                                .data(registeredUser)
                                .message("Administrador registrado com sucesso! Aguardando aprovação.")
                                .status(StatusResponse.SUCESSO)
                                .build());
        }

        /**
         * Endpoint para iniciar o processo de recuperação de senha.
         * 
         * @param request DTO contendo o e-mail do usuário.
         * @return Resposta padronizada de sucesso.
         */
        @PostMapping("/senhas/recuperar")
        public ResponseEntity<BaseResponse<Void>> recoverPassword(@Valid @RequestBody RecoverPasswordRequest request) {
                log.info("Requisição de recuperação de senha recebida para o e-mail: {}", request.getEmail());
                long startTime = System.currentTimeMillis();
                authService.recoverPassword(request.getEmail());
                long endTime = System.currentTimeMillis();
                log.info("Processo de recuperação de senha para o e-mail '{}' processado em {} ms. Status: Sucesso",
                                request.getEmail(), (endTime - startTime));
                return ResponseEntity.ok(BaseResponse.<Void>builder()
                                .message("Se o e-mail estiver cadastrado, um link de redefinição de senha foi enviado.")
                                .status(StatusResponse.SUCESSO)
                                .build());
        }

        /**
         * Endpoint para redefinir a senha usando um token.
         * 
         * @param request DTO contendo o token e a nova senha.
         * @return Resposta padronizada de sucesso.
         */
        @PostMapping("/senhas/redefinir")
        public ResponseEntity<BaseResponse<Void>> resetPassword(@Valid @RequestBody ResetPasswordRequest request) {
                log.info("Requisição de redefinição de senha recebida com token.");
                long startTime = System.currentTimeMillis();
                authService.resetPassword(request.getToken(), request.getNovaSenha());
                long endTime = System.currentTimeMillis();
                log.info("Redefinição de senha processada em {} ms. Status: Sucesso", (endTime - startTime));
                return ResponseEntity.ok(BaseResponse.<Void>builder()
                                .message("Senha redefinida com sucesso!")
                                .status(StatusResponse.SUCESSO)
                                .build());
        }
}
```
```java
package br.com.legalconnect.auth.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class AuthResponse
 * @brief DTO para a resposta de autenticação, contendo os tokens JWT.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AuthResponse {
    private String accessToken;
    private String refreshToken;
    private String tokenType = "Bearer";
    private Long expiresIn; // Tempo de expiração do access token em segundos
}
```
```java
package br.com.legalconnect.auth.dto;

import java.util.Map;

import lombok.Data;

@Data
public class EmailRequest {
    private String to;
    private String subject;
    private String htmlBody; // Para e-mails com HTML direto
    private String templateName; // Para e-mails com template Thymeleaf
    private Map<String, Object> templateVariables; // Variáveis para o template

}
```
```java
package br.com.legalconnect.auth.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class LoginRequestDTO
 * @brief DTO para a requisição de login.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class LoginRequestDTO {
    @NotBlank(message = "O e-mail é obrigatório.")
    @Email(message = "Formato de e-mail inválido.")
    private String email;

    @NotBlank(message = "A senha é obrigatória.")
    private String senha;
}
```
```java
package br.com.legalconnect.auth.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class RecoverPasswordRequest
 * @brief DTO para a requisição de recuperação de senha.
 *
 *        Contém o e-mail do usuário que solicitou a recuperação de senha.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class RecoverPasswordRequest {
    @NotBlank(message = "O e-mail é obrigatório.")
    @Email(message = "Formato de e-mail inválido.")
    private String email;
}
```
```java
package br.com.legalconnect.auth.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class RefreshTokenRequestDTO
 * @brief DTO para a requisição de refresh de token.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class RefreshTokenRequestDTO {
    @NotBlank(message = "O refresh token é obrigatório.")
    private String refreshToken;
}
```
```java
package br.com.legalconnect.auth.dto;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class ResetPasswordRequest
 * @brief DTO para a requisição de redefinição de senha.
 *
 *        Contém o token de redefinição e a nova senha do usuário.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class ResetPasswordRequest {
    @NotBlank(message = "O token de redefinição é obrigatório.")
    private String token;

    @NotBlank(message = "A nova senha é obrigatória.")
    @Size(min = 8, message = "A nova senha deve ter no mínimo 8 caracteres.")
    // Adicione regex para complexidade de senha se necessário (ex: maiúscula,
    // minúscula, número, caractere especial)
    private String novaSenha;
}
```
```java
package br.com.legalconnect.auth.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * @class UserProfileUpdate
 * @brief DTO para a requisição de atualização de perfil de usuário.
 *
 *        Contém os campos que podem ser atualizados no perfil de um usuário,
 *        incluindo validações para garantir a integridade dos dados.
 *        Os campos são opcionais, permitindo atualizações parciais.
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserProfileUpdate {

    @Size(max = 255, message = "O nome completo deve ter no máximo 255 caracteres.")
    private String nomeCompleto;

    @Email(message = "Formato de e-mail inválido.")
    @Size(max = 255, message = "O e-mail deve ter no máximo 255 caracteres.")
    private String email;

    @Size(max = 20, message = "O telefone deve ter no máximo 20 caracteres.")
    private String telefone;

    @Size(max = 255, message = "A URL da foto deve ter no máximo 255 caracteres.")
    private String fotoUrl;

    // Campos para alteração de senha (opcionais, mas devem ser fornecidos juntos)
    private String senhaAtual;
    @Size(min = 8, message = "A nova senha deve ter no mínimo 8 caracteres.")
    private String novaSenha;
    // Adicione regex para complexidade de senha se necessário
}
```
```java
package br.com.legalconnect.auth.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * @class UserRegistrationRequest
 * @brief DTO para a requisição de registro de um novo usuário.
 *
 *        Contém os dados necessários para registrar um novo usuário na
 *        plataforma,
 *        incluindo validações para garantir a integridade dos dados.
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserRegistrationRequest {

    @NotBlank(message = "O nome completo é obrigatório.")
    @Size(max = 255, message = "O nome completo deve ter no máximo 255 caracteres.")
    private String nomeCompleto;

    @NotBlank(message = "O e-mail é obrigatório.")
    @Email(message = "Formato de e-mail inválido.")
    @Size(max = 255, message = "O e-mail deve ter no máximo 255 caracteres.")
    private String email;

    @NotBlank(message = "O CPF é obrigatório.")
    @Pattern(regexp = "^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$", message = "Formato de CPF inválido. Use XXX.XXX.XXX-XX")
    private String cpf;

    @Size(max = 20, message = "O telefone deve ter no máximo 20 caracteres.")
    private String telefone;

    @NotBlank(message = "A senha é obrigatória.")
    @Size(min = 8, message = "A senha deve ter no mínimo 8 caracteres.")
    // Adicione regex para complexidade de senha se necessário (ex: maiúscula,
    // minúscula, número, caractere especial)
    private String senha;

    @NotBlank(message = "O tipo de usuário é obrigatório.")
    private String userType; // Adicionado para especificar o tipo de usuário (CLIENTE, ADVOGADO, SOCIO,
                             // PLATAFORMA_ADMIN)
}

```
```java
package br.com.legalconnect.auth.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * @class UserResponseDTO
 * @brief DTO para a resposta de um usuário.
 *
 *        Representa os dados de um usuário que são retornados pela API,
 *        incluindo informações básicas, tipo de usuário, status e roles.
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserResponseDTO {
    // private UUID id;
    private String nomeCompleto;
    private String email;
    private String cpf;
    private String telefone;
    private String fotoUrl;
    private String status; // Representação em String do enum UserStatus

}

```
```java
package br.com.legalconnect.auth.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Tenant
 * @brief Entidade que representa um tenant na arquitetura multi-tenant.
 *        Esta tabela reside no schema 'public' (global).
 */
@Entity
@Table(name = "tb_tenant") // A tabela tb_tenant reside no schema public (global)
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class Tenant extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 255)
    private String nome; // Nome do tenant (ex: "LegalConnect_EmpresaA")

    @Column(name = "schema_name", nullable = false, unique = true, length = 255)
    private String schemaName; // Nome do schema do banco de dados associado a este tenant
}
```
```java
package br.com.legalconnect.auth.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.auth.entity.Tenant;

/**
 * @interface TenantRepository
 * @brief Repositório para a entidade Tenant.
 */
@Repository
public interface TenantRepository extends JpaRepository<Tenant, UUID> {
    /**
     * Busca um tenant pelo nome do schema.
     * 
     * @param schemaName O nome do schema do tenant.
     * @return Um Optional contendo o tenant, se encontrado.
     */
    Optional<Tenant> findBySchemaName(String schemaName);

    Optional<Tenant> findById(UUID fromString);

}
```
```java
package br.com.legalconnect.auth.service;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import br.com.legalconnect.auth.dto.AuthResponse;
import br.com.legalconnect.auth.dto.LoginRequestDTO;
import br.com.legalconnect.auth.dto.RefreshTokenRequestDTO;
import br.com.legalconnect.auth.dto.UserProfileUpdate;
import br.com.legalconnect.auth.dto.UserRegistrationRequest;
import br.com.legalconnect.auth.dto.UserResponseDTO;
import br.com.legalconnect.auth.entity.Tenant;
import br.com.legalconnect.auth.repository.TenantRepository;
import br.com.legalconnect.common.dto.BaseResponse;
import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import br.com.legalconnect.common.exception.Roles;
import br.com.legalconnect.enums.StatusResponse;
import br.com.legalconnect.user.entity.PasswordResetToken;
import br.com.legalconnect.user.entity.Role;
import br.com.legalconnect.user.entity.User;
import br.com.legalconnect.user.entity.User.UserStatus;
import br.com.legalconnect.user.entity.User.UserType;
import br.com.legalconnect.user.repository.PasswordResetTokenRepository;
import br.com.legalconnect.user.repository.RoleRepository;
import br.com.legalconnect.user.repository.UserRepository;
import jakarta.mail.MessagingException;
import lombok.RequiredArgsConstructor;

/**
 * @class AuthService
 * @brief Serviço de lógica de negócios para autenticação e refresh de tokens.
 */
@Service
@RequiredArgsConstructor
public class AuthService {

    private static final Logger log = LoggerFactory.getLogger(AuthService.class);

    private final UserRepository userRepository;
    private final JwtService jwtService;

    private final AuthenticationManager authenticationManager;

    private final TenantRepository tenantRepository;

    private final PasswordEncoder passwordEncoder;

    private final RoleRepository roleRepository;

    private final RefreshTokenService refreshTokenService;

    private final PasswordResetTokenRepository passwordResetTokenRepository;

    private final EmailService emailService;

    private final UserMapper userMapper;

    @Value("${app.frontend.url}") // INJETAR A URL DO FRONTEND
    private String frontendBaseUrl;

    private long passwordResetExpirationMinutes;

    @Value("${application.tenant.default-id:00000000-0000-0000-0000-000000000001}")
    private String defaultTenantIds;

    /*
     * /
     * Autentica um usuário e gera tokens JWT.
     * Inclui id do usuário e id do tenant nos claims do JWT.
     * * @param request DTO de requisição de login.
     * 
     * @return DTO de resposta de login com tokens.
     * 
     * @throws ResponseStatusException se o usuário não for encontrado ou as
     * credenciais forem inválidas.
     */
    @Transactional
    public BaseResponse<AuthResponse> authenticate(LoginRequestDTO request) {
        log.debug("Iniciando autenticação para o e-mail: {}", request.getEmail());

        User user = userRepository.findByEmail(request.getEmail())
                .orElseThrow(() -> {
                    log.error("Usuário não encontrado no banco de dados para o e-mail: {}", request.getEmail());
                    return new BusinessException(ErrorCode.USER_NOT_FOUND,
                            "Usuário não encontrado com o e-mail: " + request.getEmail());
                });

        try {
            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(
                            request.getEmail(),
                            request.getSenha()));
            log.info("Credenciais válidas para o e-mail: {}", request.getEmail());
        } catch (Exception e) {
            log.warn("Falha na autenticação para o e-mail: {}. Erro: {}", request.getEmail(), e.getMessage());
            throw new BusinessException(ErrorCode.INVALID_CREDENTIALS, "Credenciais inválidas.");
        }

        // Adiciona id do usuário e id do tenant aos claims do JWT
        Map<String, Object> claims = new HashMap<>();
        claims.put("X-Correlation-ID", user.getId());
        if (user.getTenant() != null) {
            claims.put("X-Tenant-ID", user.getTenant().getSchemaName());
        }

        // Gera os tokens com os claims adicionais
        String jwtToken = jwtService.generateToken(claims, user);
        String refreshToken = jwtService.generateRefreshToken(user);
        log.info("Tokens JWT gerados para o usuário ID: {}, Tenant ID: {}", user.getId(),
                user.getTenant() != null ? user.getTenant().getId() : "N/A");

        // Adiciona informações ao MDC após autenticação bem-sucedida para logs
        // subsequentes
        MDC.put("X-Correlation-ID", String.valueOf(user.getId()));
        if (user.getTenant() != null) {
            MDC.put("X-Tenant-ID", String.valueOf(user.getTenant().getId()));
        }

        return BaseResponse.<AuthResponse>builder()
                .status(StatusResponse.SUCESSO)
                .message("Autenticação realizada com sucesso.")
                .timestamp(LocalDateTime.now())
                .data(AuthResponse.builder()
                        .accessToken(jwtToken)
                        .refreshToken(refreshToken)
                        .tokenType("Bearer")
                        .expiresIn(jwtService.extractExpiration(jwtToken).getTime() / 1000)
                        .build())
                .build();
    }

    /**
     * Renova o access token usando um refresh token.
     * * @param request DTO de requisição de refresh token.
     * 
     * @return DTO de resposta de login com novo access token.
     * @throws ResponseStatusException se o refresh token for inválido ou expirado.
     */
    @Transactional
    public BaseResponse<AuthResponse> refreshToken(RefreshTokenRequestDTO request) {
        log.debug("Iniciando processo de refresh token.");
        String userEmail = jwtService.extractUsername(request.getRefreshToken());

        if (userEmail == null) {
            log.warn("Refresh token não contém e-mail de usuário válido.");
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Refresh token inválido ou expirado.");
        }

        User user = userRepository.findByEmail(userEmail)
                .orElseThrow(() -> {
                    log.error("Usuário não encontrado para o e-mail do refresh token: {}", userEmail);
                    return new ResponseStatusException(HttpStatus.NOT_FOUND,
                            "Usuário não encontrado com o e-mail: " + userEmail);
                });

        if (jwtService.isTokenValid(request.getRefreshToken(), user)) {
            log.info("Refresh token válido para o usuário: {}", userEmail);
            // Ao gerar um novo access token, re-incluímos os claims de userId e tenantId
            Map<String, Object> claims = new HashMap<>();
            claims.put("userId", user.getId());
            if (user.getTenant() != null) {
                claims.put("tenantId", user.getTenant().getId());
            }
            String accessToken = jwtService.generateToken(claims, user);

            log.info("Novo access token gerado para o usuário ID: {}, Tenant ID: {}", user.getId(),
                    user.getTenant() != null ? user.getTenant().getId() : "N/A");

            // Adiciona informações ao MDC para logs subsequentes
            MDC.put("userId", String.valueOf(user.getId()));
            if (user.getTenant() != null) {
                MDC.put("tenantId", String.valueOf(user.getTenant().getId()));
            }

            return br.com.legalconnect.common.dto.BaseResponse.<AuthResponse>builder()
                    .status(StatusResponse.SUCESSO)
                    .message("Token atualizado com sucesso.")
                    .timestamp(LocalDateTime.now())
                    .data(AuthResponse.builder()
                            .accessToken(accessToken)
                            .refreshToken(request.getRefreshToken()) // Mantém o mesmo refresh token
                            .tokenType("Bearer")
                            .expiresIn(jwtService.extractExpiration(accessToken).getTime() / 1000)
                            .build())
                    .build();
        } else {
            log.warn("Refresh token inválido ou expirado para o usuário: {}", userEmail);
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Refresh token inválido ou expirado.");
        }
    }

    /**
     * @brief Registra um novo usuário na plataforma com base no tipo especificado.
     * @param request  DTO contendo os dados de registro do usuário.
     * @param userType O tipo de usuário a ser registrado (CLIENTE, ADVOGADO, SOCIO,
     *                 PLATAFORMA_ADMIN).
     * @return DTO do usuário registrado.
     * @throws BusinessException se o e-mail ou CPF já estiverem cadastrados, ou se
     *                           a role não for encontrada.
     */
    // @Transactional
    public UserResponseDTO registerUser(UserRegistrationRequest request, UserType userType) {
        log.info("Iniciando registro de novo usuário do tipo {} com e-mail: {}", userType, request.getEmail());

        // 1. Valida unicidade de e-mail e CPF
        if (userRepository.existsByEmail(request.getEmail())) {
            log.warn("Falha no registro: E-mail '{}' já cadastrado.", request.getEmail());
            throw new BusinessException(ErrorCode.EMAIL_ALREADY_REGISTERED);
        }
        if (userRepository.existsByCpf(request.getCpf())) {
            log.warn("Falha no registro: CPF '{}' já cadastrado.", request.getCpf());
            throw new BusinessException(ErrorCode.INVALID_CPF);
        }
        // 2. Busca o tenant padrão
        // 2. Busca o tenant padrão ou cria um novo se não existir
        Tenant defaultTenant = tenantRepository.findBySchemaName(defaultTenantIds)
                .orElseGet(() -> {
                    log.info("Tenant padrão não encontrado. Criando novo tenant com schema: {}", defaultTenantIds);
                    return tenantRepository.save(Tenant.builder()
                            .schemaName(defaultTenantIds)
                            .createdAt(LocalDateTime.now())
                            .updatedAt(LocalDateTime.now())
                            .nome("Tenant Padrão")
                            .build());
                });

        // 3. Cria a entidade User
        User user = userMapper.toEntity(request);
        user.setSenhaHash(passwordEncoder.encode(request.getSenha())); // Criptografa a senha
        user.setUserType(userType);
        user.setTenant(defaultTenant); // Associa ao tenant padrão

        // 4. Define o status inicial e atribui a role com base no tipo de usuário
        Role assignedRole;
        switch (userType) {
            case CLIENTE:
                user.setStatus(UserStatus.ACTIVE); // Clientes são ativos por padrão
                assignedRole = roleRepository.findByNome(Roles.ROLE_CLIENT)
                        .orElseThrow(() -> {
                            log.error("Falha no registro: Role CLIENTE não encontrada no banco de dados.");
                            return new BusinessException(ErrorCode.USER_NOT_FOUND, "Role CLIENTE não encontrada.");
                        });
                break;
            case ADVOGADO:
                user.setStatus(UserStatus.PENDING_APPROVAL); // Advogados aguardam aprovação
                assignedRole = roleRepository.findByNome(Roles.ROLE_ADVOCATE)
                        .orElseThrow(() -> {
                            log.error("Falha no registro: Role ADVOGADO não encontrada no banco de dados.");
                            return new BusinessException(ErrorCode.ADVOCATE_NOT_AVAILABLE,
                                    "Role ADVOGADO não encontrada.");
                        });
                break;
            case SOCIO:
                user.setStatus(UserStatus.PENDING); // Sócios aguardam aprovação inicial
                assignedRole = roleRepository.findByNome(Roles.ROLE_TENANT_ADMIN) // Exemplo: Sócio pode ser um ADMIN do
                                                                                  // Tenant
                        .orElseThrow(() -> {
                            log.error("Falha no registro: Role SOCIO (TENANT_ADMIN) não encontrada no banco de dados.");
                            return new BusinessException(ErrorCode.USER_NOT_FOUND, "Role SOCIO não encontrada.");
                        });
                break;
            case PLATAFORMA_ADMIN:
                user.setStatus(UserStatus.PENDING); // Administradores da plataforma aguardam aprovação
                assignedRole = roleRepository.findByNome(Roles.ROLE_ADMIN)
                        .orElseThrow(() -> {
                            log.error("Falha no registro: Role PLATAFORMA_ADMIN não encontrada no banco de dados.");
                            return new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                                    "Role PLATAFORMA_ADMIN não encontrada.");
                        });
                break;
            default:
                log.error("Tipo de usuário inválido para registro: {}", userType);
                throw new BusinessException(ErrorCode.INVALID_INPUT, "Tipo de usuário inválido.");
        }

        if (user.getRoles() == null) {
            user.setRoles(new HashSet<>());
        }
        user.getRoles().add(assignedRole);
        log.debug("Role {} atribuída ao usuário: {}", assignedRole.getNome(), user.getEmail());

        // 5. Salva o usuário no banco de dados
        user = userRepository.save(user);
        log.info("Usuário do tipo {} registrado com sucesso: {} (ID: {})", userType, user.getEmail(), user.getId());

        // TODO: Disparar evento para NotificationService para enviar e-mail de
        // boas-vindas/confirmação
        log.debug("E-mail de boas-vindas/confirmação enviado para: {}", user.getEmail());
        user = userRepository.save(user);
        return userMapper.toDto(user);
    }

    /**
     * @brief Registra um novo cliente na plataforma (RF048).
     * @param request DTO contendo os dados de registro do cliente.
     * @return DTO do usuário registrado.
     * @throws BusinessException se o e-mail ou CPF já estiverem cadastrados.
     */
    @Transactional
    public UserResponseDTO registerClient(UserRegistrationRequest request) {
        // Delega para o método genérico com UserType.CLIENTE
        return registerUser(request, UserType.CLIENTE);
    }

    /**
     * @brief Realiza o pré-cadastro de um novo advogado na plataforma (RF001).
     * @param request DTO contendo os dados de pré-registro do advogado.
     * @return DTO do usuário advogado pré-registrado.
     * @throws BusinessException se o e-mail, CPF ou número da OAB já estiverem
     *                           cadastrados.
     */
    @Transactional
    public UserResponseDTO registerAdvogado(UserRegistrationRequest request) {
        // Delega para o método genérico com UserType.ADVOGADO
        return registerUser(request, UserType.ADVOGADO);
    }

    /**
     * @brief Registra um novo sócio na plataforma.
     * @param request DTO contendo os dados de registro do sócio.
     * @return DTO do usuário sócio registrado.
     * @throws BusinessException se o e-mail ou CPF já estiverem cadastrados.
     */
    @Transactional
    public UserResponseDTO registerSocio(UserRegistrationRequest request) {
        // Delega para o método genérico com UserType.SOCIO
        return registerUser(request, User.UserType.CLIENTE);
    }

    /**
     * @brief Registra um novo administrador da plataforma.
     * @param request DTO contendo os dados de registro do administrador.
     * @return DTO do usuário administrador registrado.
     * @throws BusinessException se o e-mail ou CPF já estiverem cadastrados.
     */
    // @Transactional
    public UserResponseDTO registerAdmin(UserRegistrationRequest request) {
        // Delega para o método genérico com UserType.PLATAFORMA_ADMIN
        return registerUser(request, UserType.PLATAFORMA_ADMIN);
    }

    /**
     * @brief Inicia o processo de recuperação de senha (RF053).
     *
     *        Gera um token temporário e envia um e-mail com o link de redefinição.
     *
     * @param email O e-mail do usuário que solicitou a recuperação.
     * @throws BusinessException se o usuário não for encontrado.
     */
    // @Transactional
    public void recoverPassword(String email) {
        log.info("Solicitação de recuperação de senha para o e-mail: {}", email);
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> {
                    log.warn("Falha na recuperação de senha: Usuário não encontrado para o e-mail: {}", email);
                    return new BusinessException(ErrorCode.USER_NOT_FOUND, "Usuário não encontrado.");
                });

        // 1. Invalida qualquer token de redefinição anterior para este usuário
        passwordResetTokenRepository.findByUser(user).ifPresent(passwordResetTokenRepository::delete);

        // 2. Gera um novo token único e define a expiração
        String token = UUID.randomUUID().toString();
        Instant expiryDate = Instant.now().plus(60 * 12, ChronoUnit.MINUTES);

        final PasswordResetToken resetToken = passwordResetTokenRepository.findByUserAndUsado(user, true)
                .orElseGet(() -> {
                    PasswordResetToken newToken = PasswordResetToken.builder()
                            .token(token)
                            .user(user)
                            .expiraEm(expiryDate)
                            .usado(false)
                            .tentativas(0)
                            .build();
                    return passwordResetTokenRepository.save(newToken);
                });
        log.info("Token de redefinição de senha gerado e salvo para o usuário: {}", user.getEmail());

        // CONSTRUIR O LINK DE REDEFINIÇÃO DE SENHA
        String resetLink = frontendBaseUrl + "/reset-password?token=" + token; // Adapte a rota do seu frontend

        // CHAMAR O NOVO MÉTODO PARA ENVIAR O EMAIL
        try {
            // sendPasswordResetEmail(user.getEmail(), user.getNomeCompleto(), resetLink);
            // // Assumindo que User tem
            // getNome()
        } finally {
            log.error("Erro ao enviar e-mail de recuperação de senha para: {}", user.getEmail());
        }
        // TODO: [PRODUÇÃO] Enviar e-mail com o link de redefinição de senha
        // O link deve apontar para o frontend, contendo o token:
        // String resetLink =
        // "[https://seufrontend.com/reset-password?token=](https://seufrontend.com/reset-password?token=)"
        // + token;
        // notificationService.sendPasswordResetEmail(user.getEmail(), resetLink);
        log.info("E-mail de recuperação de senha enviado para: {} com token: {}", user.getEmail(), token);
    }

    /**
     * @brief Redefine a senha do usuário utilizando um token de recuperação
     *        (RF053).
     * @param token     O token de redefinição de senha.
     * @param novaSenha A nova senha a ser definida.
     * @throws BusinessException se o token for inválido/expirado/usado ou a senha
     *                           for
     *                           fraca.
     */
    // @Transactional
    public void resetPassword(String token, String novaSenha) {
        log.info("Tentativa de redefinição de senha com token.");

        // 1. Busca e valida o token
        PasswordResetToken resetToken = passwordResetTokenRepository.findByToken(token).get();
        if (resetToken == null) {
            log.warn("Falha na redefinição de senha: Token inválido ou não encontrado.");
            new BusinessException(ErrorCode.PASSWORD_RESET_TOKEN_INVALID,
                    "Falha na redefinição de senha: Token inválido ou não encontrado.");
        }

        if (resetToken.isUsado()) {
            log.warn("Falha na redefinição de senha: Token já utilizado para o usuário: {}",
                    resetToken.getUser().getEmail());
            throw new BusinessException(ErrorCode.PASSWORD_RESET_TOKEN_USED,
                    "Falha na redefinição de senha: Token já utilizado para o usuário");
        }
        var tentativas = resetToken.getTentativas();
        resetToken.setTentativas(tentativas + 1);

        passwordResetTokenRepository.save(resetToken);
        if (tentativas >= 3) {
            log.warn("Falha na redefinição de senha: Tentativas de redefinição excedidas para o usuário: {}",
                    resetToken.getUser().getEmail());
            throw new BusinessException(ErrorCode.PASSWORD_RESET_TOKEN_EXCEEDED,
                    "Falha na redefinição de senha: Tentativas de redefinição excedidas");
        }
        var inspiracao = resetToken.getExpiraEm();
        var inspiracao2 = Instant.now();
        if (inspiracao.isBefore(inspiracao2)) {
            log.warn("Falha na redefinição de senha: Token expirado para o usuário: {}",
                    resetToken.getUser().getEmail());
            resetToken.setUsado(true);
            passwordResetTokenRepository.save(resetToken);
            // passwordResetTokenRepository.delete(resetToken); // Opcional: deletar tokens
            // expirados
            throw new BusinessException(ErrorCode.PASSWORD_RESET_TOKEN_EXPIRED,
                    "Falha na redefinição de senha: Token expirado para o usuário");
        }

        // 2. Busca o usuário associado ao token
        User user = resetToken.getUser();
        log.debug("Usuário encontrado para redefinição de senha: {}", user.getEmail());

        // 3. Criptografa e atualiza a nova senha
        user.setSenhaHash(passwordEncoder.encode(novaSenha));
        userRepository.save(user);
        log.info("Senha redefinida com sucesso para o usuário: {}", user.getEmail());

        // 4. Invalida o token de redefinição (marca como usado)
        resetToken.setUsado(true);
        passwordResetTokenRepository.save(resetToken);
        log.debug("Token de redefinição de senha marcado como usado.");

        // 5. Invalida todos os refresh tokens do usuário para forçar novo login
        refreshTokenService.deleteByUser(user);
        log.debug("Refresh tokens invalidados para o usuário: {}", user.getEmail());

        // TODO: [PRODUÇÃO] Envia e-mail de confirmação de redefinição de senha
        // notificationService.sendPasswordResetConfirmationEmail(user.getEmail());
        log.debug("E-mail de confirmação de redefinição de senha enviado para: {}", user.getEmail());
    }

    /**
     * @brief Atualiza o perfil de um usuário (RF055).
     * @param userId        O ID do usuário a ser atualizado.
     * @param updateRequest DTO com os dados de atualização.
     * @return DTO do usuário atualizado.
     * @throws BusinessException se o usuário não for encontrado, e-mail/CPF já em
     *                           uso, ou senha atual inválida.
     */
    @Transactional
    public UserResponseDTO updateUserProfile(UUID userId, UserProfileUpdate updateRequest) {
        log.info("Tentativa de atualização de perfil para o usuário ID: {}", userId);
        User user = userRepository.findById(userId)
                .orElseThrow(() -> {
                    log.warn("Falha na atualização de perfil: Usuário não encontrado com ID: {}", userId);

                    return new BusinessException(ErrorCode.USER_NOT_FOUND,
                            "Falha na atualização de perfil: Usuário não encontrado com ID");
                });

        // Valida unicidade de e-mail, se o e-mail for alterado
        if (updateRequest.getEmail() != null && !updateRequest.getEmail().equals(user.getEmail())) {
            if (userRepository.existsByEmail(updateRequest.getEmail())) {
                log.warn("Falha na atualização de perfil: Novo e-mail '{}' já em uso.", updateRequest.getEmail());

                throw new BusinessException(ErrorCode.EMAIL_ALREADY_REGISTERED,
                        "Falha na atualização de perfil: Novo e-mail " + updateRequest.getEmail() + " já em uso.");
            }
            user.setEmail(updateRequest.getEmail());
            log.debug("E-mail do usuário {} atualizado para: {}", userId, updateRequest.getEmail());
        }

        // Atualiza outros campos do usuário
        userMapper.updateEntityFromDto(updateRequest, user);
        log.debug("Outros campos do perfil do usuário {} atualizados.", userId);

        // Lógica para alteração de senha
        if (updateRequest.getSenhaAtual() != null && updateRequest.getNovaSenha() != null) {
            log.info("Tentativa de alteração de senha para o usuário ID: {}", userId);
            if (!passwordEncoder.matches(updateRequest.getSenhaAtual(), user.getSenhaHash())) {
                log.warn("Falha na alteração de senha: Senha atual inválida para o usuário ID: {}", userId);

                throw new BusinessException(ErrorCode.PASSWORD_TOO_WEAK,
                        "Falha na alteração de senha: Senha atual inválida para o usuário ID");
            }
            user.setSenhaHash(passwordEncoder.encode(updateRequest.getNovaSenha()));
            // Invalida todos os refresh tokens do usuário para forçar novo login após a
            // mudança de senha
            refreshTokenService.deleteByUser(user);
            log.info("Senha do usuário {} alterada com sucesso. Refresh tokens invalidados.", userId);
        }

        user = userRepository.save(user);
        log.info("Perfil do usuário {} atualizado com sucesso.", userId);
        return userMapper.toDto(user);
    }

    /**
     * Método dedicado ao envio do e-mail de recuperação de senha.
     * Utiliza o template HTML e variáveis dinâmicas.
     *
     * @param to        Endereço de e-mail do destinatário.
     * @param userName  Nome do usuário para personalização do e-mail.
     * @param resetLink Link completo para a página de redefinição de senha no
     *                  frontend.
     */
    public void sendPasswordResetEmail(String to, String userName, String resetLink) {
        // PREPARAR VARIÁVEIS PARA O TEMPLATE DO EMAIL
        Map<String, Object> templateVariables = new HashMap<>();
        templateVariables.put("userName", userName);
        templateVariables.put("resetLink", resetLink);
        templateVariables.put("expirationMinutes", passwordResetExpirationMinutes);
        templateVariables.put("currentYear", Instant.now().atZone(ZoneId.of("America/Sao_Paulo")).getYear()); // Pega o
                                                                                                              // ano
                                                                                                              // atual
                                                                                                              // para
                                                                                                              // Parnaíba

        try {
            // ENVIAR O E-MAIL USANDO O SERVIÇO DE E-MAIL COM TEMPLATE
            emailService.sendTemplatedEmail(
                    to,
                    "Recuperação de Senha - [Seu Nome de Aplicação]", // Assunto do e-mail
                    "password-reset-email", // Nome do template HTML (sem .html)
                    templateVariables);
            log.info("E-mail de recuperação de senha enviado com sucesso para: {}", to);
        } catch (MessagingException e) {
            log.error("Erro ao enviar e-mail de recuperação de senha para {}: {}", to, e.getMessage(), e);
            // Opcional: Você pode relançar uma BusinessException ou tratar de outra forma
            throw new BusinessException(ErrorCode.INVALID_EMAIL, "Falha ao enviar e-mail de recuperação de senha.");
        }
    }
}
```
```java
package br.com.legalconnect.auth.service;

import java.nio.charset.StandardCharsets;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;

@Service
public class EmailService {

    @Autowired
    private JavaMailSender mailSender;

    @Autowired
    private TemplateEngine templateEngine; // Injetar o TemplateEngine do Thymeleaf

    // Método para enviar e-mail sem template Thymeleaf (HTML direto)
    public void sendHtmlEmail(String to, String subject, String htmlContent) throws MessagingException {
        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message, true, StandardCharsets.UTF_8.name());

        helper.setTo(to);
        helper.setSubject(subject);
        helper.setText(htmlContent, true); // O 'true' indica que o conteúdo é HTML

        mailSender.send(message);
    }

    // Método para enviar e-mail com template Thymeleaf
    public void sendTemplatedEmail(String to, String subject, String templateName,
            Map<String, Object> templateVariables) throws MessagingException {
        // Criar um contexto Thymeleaf e adicionar as variáveis
        Context context = new Context();
        context.setVariables(templateVariables);

        // Processar o template Thymeleaf
        String htmlContent = templateEngine.process(templateName, context);

        sendHtmlEmail(to, subject, htmlContent);
    }
}
```
```java
package br.com.legalconnect.auth.service;

import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import javax.crypto.SecretKey;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;

/**
 * @class JwtService
 * @brief Serviço para geração, validação e extração de informações de tokens
 *        JWT.
 */
@Service
public class JwtService {

    private static final Logger log = LoggerFactory.getLogger(JwtService.class);

    @Value("${application.security.jwt.secret-key}")
    private String secretKey;

    @Value("${application.security.jwt.expiration}")
    private long jwtExpiration;

    @Value("${application.security.jwt.refresh-expiration}")
    private long refreshExpiration;

    /**
     * Extrai o nome de usuário (subject) do token JWT.
     * 
     * @param token O token JWT.
     * @return O nome de usuário.
     */
    public String extractUsername(String token) {
        try {
            return extractClaim(token, Claims::getSubject);
        } catch (Exception e) {
            log.warn("Erro ao extrair username do token: {}", e.getMessage());
            return null;
        }
    }

    /**
     * Extrai uma claim específica do token JWT.
     * 
     * @param token          O token JWT.
     * @param claimsResolver Função para resolver a claim.
     * @param <T>            Tipo da claim.
     * @return O valor da claim.
     */
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    /**
     * Extrai o ID do usuário dos claims do token JWT.
     * 
     * @param token O token JWT.
     * @return O ID do usuário.
     */
    public Long extractUserId(String token) {
        try {
            return extractClaim(token, claims -> claims.get("userId", Long.class));
        } catch (Exception e) {
            log.warn("Erro ao extrair userId do token: {}", e.getMessage());
            return null;
        }
    }

    /**
     * Extrai o ID do tenant dos claims do token JWT.
     * 
     * @param token O token JWT.
     * @return O ID do tenant.
     */
    public Long extractTenantId(String token) {
        try {
            return extractClaim(token, claims -> claims.get("tenantId", Long.class));
        } catch (Exception e) {
            log.warn("Erro ao extrair tenantId do token: {}", e.getMessage());
            return null;
        }
    }

    /**
     * Gera um token JWT para um usuário.
     * 
     * @param userDetails Detalhes do usuário.
     * @return O token JWT gerado.
     */
    public String generateToken(UserDetails userDetails) {
        return generateToken(new HashMap<>(), userDetails);
    }

    /**
     * Gera um token JWT com claims extras para um usuário.
     * 
     * @param extraClaims Claims adicionais.
     * @param userDetails Detalhes do usuário.
     * @return O token JWT gerado.
     */
    public String generateToken(
            Map<String, Object> extraClaims,
            UserDetails userDetails) {
        log.debug("Gerando token JWT para o usuário: {}", userDetails.getUsername());
        return buildToken(extraClaims, userDetails, jwtExpiration);
    }

    /**
     * Gera um refresh token JWT para um usuário.
     * 
     * @param userDetails Detalhes do usuário.
     * @return O refresh token JWT gerado.
     */
    public String generateRefreshToken(
            UserDetails userDetails) {
        log.debug("Gerando refresh token para o usuário: {}", userDetails.getUsername());
        return buildToken(new HashMap<>(), userDetails, refreshExpiration);
    }

    /**
     * Constrói o token JWT.
     * 
     * @param extraClaims Claims adicionais.
     * @param userDetails Detalhes do usuário.
     * @param expiration  Tempo de expiração em milissegundos.
     * @return O token JWT construído.
     */
    private String buildToken(
            Map<String, Object> extraClaims,
            UserDetails userDetails,
            long expiration) {
        return Jwts
                .builder()
                .setClaims(extraClaims)
                .setSubject(userDetails.getUsername()) // O email do usuário será o subject
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + expiration))
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    @Value("${application.security.jwt.secret-key}")
    private String secret;

    // Modifique a geração da chave para:
    private final SecretKey getSigningKey() {
        byte[] keyBytes = this.secret.getBytes(StandardCharsets.UTF_8);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    // E na geração do token:
    public String generateToken(Map<String, Object> claims, UserDetails user, long expiration) {
        return Jwts.builder()
                .setClaims(claims)
                .setSubject(user.getUsername())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + expiration))
                .signWith(getSigningKey(), SignatureAlgorithm.HS256) // Forçar HS256
                .compact();
    }

    /**
     * Valida se um token JWT é válido para um determinado usuário.
     * 
     * @param token       O token JWT.
     * @param userDetails Detalhes do usuário.
     * @return True se o token é válido, false caso contrário.
     */
    public boolean isTokenValid(String token, UserDetails userDetails) {
        try {
            final String username = extractUsername(token);
            boolean isValid = (username != null && username.equals(userDetails.getUsername()))
                    && !isTokenExpired(token);
            if (!isValid) {
                log.warn("Validação de token falhou para usuário: {}. Token válido: {}, Token expirado: {}",
                        username, (username != null && username.equals(userDetails.getUsername())),
                        isTokenExpired(token));
            }
            return isValid;
        } catch (Exception e) {
            log.error("Erro durante a validação do token: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * Verifica se o token JWT expirou.
     * 
     * @param token O token JWT.
     * @return True se o token expirou, false caso contrário.
     */
    private boolean isTokenExpired(String token) {
        Date expiration = extractExpiration(token);
        boolean expired = expiration.before(new Date());
        if (expired) {
            log.debug("Token expirado em: {}", expiration);
        }
        return expired;
    }

    /**
     * Extrai a data de expiração do token JWT.
     * 
     * @param token O token JWT.
     * @return A data de expiração.
     */
    Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    /**
     * Extrai todas as claims do token JWT.
     * 
     * @param token O token JWT.
     * @return As claims do token.
     */
    private Claims extractAllClaims(String token) {
        return Jwts
                .parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    /**
     * Obtém a chave de assinatura para o JWT.
     * 
     * @return A chave de assinatura.
     */
    // private Key getSignInKey() {
    // byte[] keyBytes = Decoders.BASE64.decode(secretKey);
    // return Keys.hmacShaKeyFor(keyBytes);
    // }
}
```
```java
package br.com.legalconnect.auth.service;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Optional;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import br.com.legalconnect.user.entity.RefreshToken;
import br.com.legalconnect.user.entity.User;
import br.com.legalconnect.user.repository.RefreshTokenRepository;
import jakarta.persistence.EntityManager; // Importar EntityManager

/**
 * @class RefreshTokenService
 * @brief Serviço para gerenciamento de Refresh Tokens.
 *
 *        Responsável por criar, validar e invalidar refresh tokens, garantindo
 *        a
 *        renovação segura de sessões de usuário.
 */
@Service
public class RefreshTokenService {

    private static final Logger log = LoggerFactory.getLogger(RefreshTokenService.class);
    @Autowired
    private RefreshTokenRepository refreshTokenRepository;

    @Autowired // Injetar EntityManager
    private EntityManager entityManager;
    @Value("${application.security.jwt.refresh-expiration}")
    private long refreshTokenExpirationMs;

    /**
     * @brief Cria e salva um novo Refresh Token para um usuário.
     *
     * @param user O usuário para o qual o Refresh Token será criado.
     * @return O RefreshToken criado e persistido.
     */
    @Transactional
    public RefreshToken createRefreshToken(User user) {
        log.info("Criando refresh token para o usuário: {}", user.getEmail());
        // Invalida qualquer refresh token existente para este usuário para garantir
        // apenas um por vez
        refreshTokenRepository.findByUser(user).ifPresent(existingToken -> {
            log.debug("Deletando refresh token existente para o usuário: {}", user.getEmail());
            refreshTokenRepository.delete(existingToken);
            // Força o Hibernate a sincronizar a deleção com o banco de dados imediatamente
            entityManager.flush();
        });

        // Gera um novo token único
        String token = UUID.randomUUID().toString();
        Instant expiryDate = Instant.now().plus(refreshTokenExpirationMs, ChronoUnit.MILLIS);

        RefreshToken refreshToken = RefreshToken.builder()
                .user(user)
                .token(token)
                .expiraEm(expiryDate)
                .build();

        refreshToken = refreshTokenRepository.save(refreshToken);
        log.info("Refresh token criado e salvo com sucesso para o usuário: {}", user.getEmail());
        return refreshToken;
    }

    /**
     * @brief Busca um Refresh Token pelo seu valor.
     *
     * @param token O valor do Refresh Token.
     * @return Um `Optional` contendo o RefreshToken, se encontrado.
     */
    public Optional<RefreshToken> findByToken(String token) {
        log.debug("Buscando refresh token pelo valor: {}", token);
        return refreshTokenRepository.findByToken(token);
    }

    /**
     * @brief Verifica se um Refresh Token expirou.
     *
     * @param token O RefreshToken a ser verificado.
     * @return O RefreshToken se não estiver expirado.
     * @throws BusinessException se o Refresh Token estiver expirado.
     */
    public RefreshToken verifyExpiration(RefreshToken token) {
        log.debug("Verificando expiração do refresh token para o usuário: {}", token.getUser().getEmail());
        if (token.getExpiraEm().isBefore(Instant.now())) {
            refreshTokenRepository.delete(token); // Remove o token expirado
            entityManager.flush(); // Força o Hibernate a sincronizar a deleção
            log.warn("Refresh token expirado para o usuário: {}. Token deletado.", token.getUser().getEmail());
            throw new BusinessException(ErrorCode.REFRESH_TOKEN_EXPIRED,
                    "Refresh token expirado. Por favor, faça login novamente.");
        }
        log.debug("Refresh token para o usuário {} ainda é válido.", token.getUser().getEmail());
        return token;
    }

    /**
     * @brief Deleta um Refresh Token pelo seu valor.
     *
     * @param token O valor do Refresh Token a ser deletado.
     * @throws BusinessException se o Refresh Token não for encontrado.
     */
    @Transactional
    public void deleteByToken(String token) {
        log.info("Deletando refresh token pelo valor: {}", token);
        RefreshToken refreshToken = refreshTokenRepository.findByToken(token)
                .orElseThrow(() -> {
                    log.warn("Tentativa de deletar refresh token não encontrado: {}", token);

                    return new BusinessException(ErrorCode.INVALID_TOKEN, "Refresh token não encontrado.");
                });
        refreshTokenRepository.delete(refreshToken);
        entityManager.flush(); // Força o Hibernate a sincronizar a deleção
        log.info("Refresh token deletado com sucesso para o usuário: {}", refreshToken.getUser().getEmail());
    }

    /**
     * @brief Deleta um Refresh Token pelo usuário associado.
     *
     * @param user O usuário cujo Refresh Token será deletado.
     */
    @Transactional
    public void deleteByUser(User user) {
        log.info("Deletando refresh token para o usuário: {}", user.getEmail());
        refreshTokenRepository.findByUser(user).ifPresent(refreshToken -> {
            refreshTokenRepository.delete(refreshToken);
            entityManager.flush(); // Força o Hibernate a sincronizar a deleção
            log.info("Refresh token deletado com sucesso para o usuário: {}", user.getEmail());
        });
    }
}
```
```java
package br.com.legalconnect.auth.service;

import java.util.Set;
import java.util.stream.Collectors;

import org.mapstruct.Mapper;
import org.mapstruct.Named;
import org.mapstruct.ReportingPolicy;

import br.com.legalconnect.user.entity.Role;

/**
 * @interface RoleMapper
 * @brief Mapper para conversão entre a entidade `Role` e suas representações em
 *        String.
 *
 *        Esta interface utiliza MapStruct para gerar automaticamente o código
 *        de mapeamento.
 *        É usada principalmente para converter um `Set<Role>` em um
 *        `Set<String>` contendo
 *        os nomes das roles, o que é útil para DTOs de resposta de usuário.
 */
@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface RoleMapper {

    /**
     * @brief Mapeia uma entidade Role para o seu nome (String).
     * @param role A entidade Role.
     * @return O nome da role.
     */
    String toRoleName(Role role);

    /**
     * @brief Mapeia um conjunto de entidades Role para um conjunto de nomes de
     *        roles (String).
     * @param roles O conjunto de entidades Role.
     * @return Um conjunto de Strings contendo os nomes das roles.
     */
    @Named("roleSetToStringSet") // Nomeia este método para ser referenciado em outros mappers (ex: UserMapper)
    default Set<String> roleSetToStringSet(Set<Role> roles) {
        if (roles == null) {
            return null;
        }
        return roles.stream()
                .map(Role::getNome) // Mapeia cada Role para o seu nome
                .collect(Collectors.toSet()); // Coleta os nomes em um Set
    }
}

```
```java
package br.com.legalconnect.auth.service;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.Named;
import org.mapstruct.ReportingPolicy;

import br.com.legalconnect.auth.dto.UserProfileUpdate;
import br.com.legalconnect.auth.dto.UserRegistrationRequest;
import br.com.legalconnect.auth.dto.UserResponseDTO;
import br.com.legalconnect.user.entity.User;

/**
 * @interface UserMapper
 * @brief Mapper para conversão entre a entidade `User` e seus DTOs.
 *
 *        Utiliza MapStruct para gerar automaticamente o código de mapeamento,
 *        incluindo a conversão de `UserType`, `UserStatus` e `Set<Role>` para
 *        Strings.
 */
@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE, uses = { RoleMapper.class })
public interface UserMapper {

    UserResponseDTO toDto(User entity);

    @Named("localDateTimeToInstant")
    default Instant localDateTimeToInstant(LocalDateTime dateTime) {
        return dateTime != null ? dateTime.atZone(ZoneId.systemDefault()).toInstant() : null;
    }

    @Mapping(target = "id", ignore = true)
    @Mapping(target = "tenant", ignore = true) // Tenant é definido no serviço
    @Mapping(target = "roles", ignore = true) // Roles são definidas no serviço
    @Mapping(target = "senhaHash", ignore = true) // Senha é criptografada no serviço
    @Mapping(target = "userType", ignore = true) // userType é definido no serviço
    @Mapping(target = "status", ignore = true) // status é definido no serviço
    User toEntity(UserRegistrationRequest dto);

    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(target = "tenant", ignore = true)
    @Mapping(target = "roles", ignore = true)
    @Mapping(target = "senhaHash", ignore = true)
    @Mapping(target = "userType", ignore = true)
    @Mapping(target = "cpf", ignore = true)
    @Mapping(target = "status", ignore = true)
    void updateEntityFromDto(UserProfileUpdate dto, @MappingTarget User entity);

    default String mapUserType(User.UserType userType) {
        return userType != null ? userType.name() : null;
    }

    default String mapUserStatus(User.UserStatus userStatus) {
        return userStatus != null ? userStatus.name() : null;
    }

    // // Método para mapear Set<Role> para Set<String> de nomes de roles
    // @Named("roleSetToStringSet")
    // default Set<String> roleSetToStringSet(Set<Role> roles) {
    // if (roles == null) {
    // return null;
    // }
    // return roles.stream()
    // .map(Role::getNome)
    // .collect(Collectors.toSet());
    // }
}

```
```java
package br.com.legalconnect.user.controller;

import java.util.UUID;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.user.service.UserService;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/usuarios")
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;

    // - Listar usuários
    @GetMapping("existir/{id}")
    public ResponseEntity<Boolean> existsById(@PathVariable("id") UUID id) {
        Boolean userResponseDTO = userService.existsById(id);
        return ResponseEntity.ok(userResponseDTO);
    }

}

```
```java
package br.com.legalconnect.user.entity;

import java.time.Instant;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class PasswordResetToken
 * @brief Entidade que representa um token de redefinição de senha no banco de
 *        dados.
 *
 *        Este token é gerado quando um usuário solicita a recuperação de senha
 *        e é usado
 *        para validar a solicitação antes de permitir a alteração da senha.
 */
@Entity
@Table(name = "tb_password_reset_token")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class PasswordResetToken extends BaseEntity {

    @Column(name = "token", nullable = false, unique = true, columnDefinition = "TEXT")
    private String token; // O valor real do token de redefinição

    @OneToOne(targetEntity = User.class, fetch = FetchType.EAGER)
    @JoinColumn(nullable = false, name = "user_id")
    private User user; // Usuário ao qual este token está associado

    @Column(name = "expira_em", nullable = false)
    private Instant expiraEm; // Data e hora em que este token se tornará inválido

    @Column(name = "usado", nullable = false)
    private boolean usado; // Indica se o token já foi usado

    @Column(name = "tentativas", nullable = false, columnDefinition = "INT DEFAULT 0")
    private Integer tentativas; // Número de tentativas de uso do token
}
```
```java
package br.com.legalconnect.user.entity;

import java.time.Instant;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class RefreshToken
 * @brief Entidade que representa o Refresh Token no banco de dados.
 *
 *        Esta tabela de refresh tokens agora reside nos schemas de tenant.
 */
@Entity
@Table(name = "tb_refresh_token") // A tabela tb_refresh_token agora reside no schema do tenant
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class RefreshToken extends BaseEntity {

    @OneToOne(fetch = FetchType.LAZY) // Relacionamento um-para-um com User
    @JoinColumn(name = "user_id", nullable = false, unique = true) // Coluna de chave estrangeira
    private User user; // Usuário ao qual este refresh token está associado

    @Column(name = "token", nullable = false, unique = true, columnDefinition = "TEXT")
    private String token; // O valor real do refresh token

    @Column(name = "expira_em", nullable = false)
    private Instant expiraEm; // Data e hora em que este refresh token se tornará inválido
}
```
```java
package br.com.legalconnect.user.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Role
 * @brief Entidade para definir os papéis de acesso do usuário no sistema.
 *
 * Esta tabela de roles agora reside nos schemas de tenant, o que
 * significa
 * que cada tenant pode ter seus próprios conjuntos de roles ou roles com
 * IDs diferentes.
 */
@Entity
@Table(name = "tb_role") // A tabela tb_role agora reside no schema do tenant
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class Role extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 100)
    private String nome; // Nome descritivo e único do papel (ex: CLIENTE, ADVOGADO)

    @Column(name = "descricao", columnDefinition = "TEXT")
    private String descricao; // Uma descrição detalhada do papel
}
```
```java
package br.com.legalconnect.user.entity;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import br.com.legalconnect.auth.entity.Tenant;
import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class User
 * @brief Entidade base para todos os usuários (clientes, advogados,
 *        administradores de tenant, etc.).
 *
 *        Esta entidade representa um usuário na plataforma e está associada a
 *        um tenant
 *        específico. A tabela de usuário reside nos schemas de tenant.
 */
@Entity
@Table(name = "tb_user") // A tabela tb_user agora reside no schema do tenant
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class User extends BaseEntity implements UserDetails { // Implementa UserDetails

    private static final Logger log = LoggerFactory.getLogger(User.class);

    @ManyToOne(fetch = FetchType.LAZY) // Relacionamento muitos-para-um com Tenant
    // Referencia a tabela tb_tenant que está no schema public (global)
    @JoinColumn(name = "tenant_id", nullable = false, referencedColumnName = "id")
    private Tenant tenant; // Identificador do tenant ao qual o usuário pertence

    @Column(name = "nome_completo", nullable = false, length = 255)
    private String nomeCompleto; // Nome completo do usuário

    @Column(name = "email", nullable = false, unique = true, length = 255)
    private String email; // Endereço de e-mail principal do usuário (único por schema de tenant)

    @Column(name = "cpf", nullable = false, unique = true, length = 14)
    private String cpf; // Número do Cadastro de Pessoa Física do usuário (único por schema de tenant)

    @Column(name = "telefone", length = 20)
    private String telefone; // Número de telefone de contato do usuário

    @Column(name = "senha_hash", nullable = false, columnDefinition = "TEXT")
    private String senhaHash; // Representação criptografada (hashed) da senha do usuário

    @Column(name = "foto_url", columnDefinition = "TEXT")
    private String fotoUrl; // URL da foto de perfil do usuário no S3

    @Enumerated(EnumType.STRING)
    @Column(name = "user_type", nullable = false, length = 50)
    private UserType userType; // Categoria principal do usuário (ex: CLIENTE, ADVOGADO)

    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false, length = 50)
    private UserStatus status; // Status atual da conta do usuário (ex: ACTIVE, PENDING_APPROVAL)

    @ManyToMany(fetch = FetchType.EAGER) // Relacionamento muitos-para-muitos com Role
    @JoinTable(name = "tb_user_role", // Tabela de junção
            joinColumns = @JoinColumn(name = "user_id"), // Coluna que referencia User
            inverseJoinColumns = @JoinColumn(name = "role_id") // Coluna que referencia Role
    )
    private Set<Role> roles = new HashSet<>(); // Papéis/perfil de acesso do usuário

    /**
     * @enum UserType
     * @brief Enumeração para categorizar o tipo principal de um usuário.
     *        Define se o usuário é um cliente, advogado ou administrador da
     *        plataforma.
     */
    public enum UserType {
        CLIENTE, // Usuário final que busca serviços jurídicos
        ADVOGADO, // Profissional do direito que oferece serviços
        PLATAFORMA_ADMIN // Administrador da plataforma com privilégios totais
        , SOCIO
    }

    /**
     * @enum UserStatus
     * @brief Enumeração para representar o status atual da conta de um usuário.
     *        Define o estado operacional da conta do usuário na plataforma.
     */
    public enum UserStatus {
        ACTIVE, INACTIVE, PENDING_APPROVAL, REJECTED, PENDING
    }

    // --- Implementação de UserDetails ---

    /**
     * Retorna as autoridades concedidas ao usuário.
     * 
     * @return Coleção de GrantedAuthority.
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        log.trace("Obtendo autoridades para o usuário: {}", this.email);
        return this.roles.stream()
                .map(role -> new SimpleGrantedAuthority(role.getNome()))
                .collect(Collectors.toList());
    }

    /**
     * Retorna a senha usada para autenticar o usuário.
     * 
     * @return A senha criptografada.
     */
    @Override
    public String getPassword() {
        return this.senhaHash;
    }

    /**
     * Retorna o nome de usuário usado para autenticar o usuário.
     * Neste caso, o e-mail do usuário.
     * 
     * @return O e-mail do usuário.
     */
    @Override
    public String getUsername() {
        return this.email;
    }

    /**
     * Indica se a conta do usuário não expirou.
     * 
     * @return True se a conta é válida (não expirada), false caso contrário.
     */
    @Override
    public boolean isAccountNonExpired() {
        return true; // Adapte esta lógica conforme a necessidade do projeto (ex: baseado em data de
                     // expiração)
    }

    /**
     * Indica se a conta do usuário não está bloqueada.
     * 
     * @return True se a conta não está bloqueada, false caso contrário.
     */
    @Override
    public boolean isAccountNonLocked() {
        return this.status == UserStatus.ACTIVE; // A conta não está bloqueada se o status for ATIVO
    }

    /**
     * Indica se as credenciais do usuário (senha) não expiraram.
     * 
     * @return True se as credenciais são válidas (não expiradas), false caso
     *         contrário.
     */
    @Override
    public boolean isCredentialsNonExpired() {
        return true; // Adapte esta lógica conforme a necessidade do projeto (ex: baseado em política
                     // de troca de senha)
    }

    /**
     * Indica se o usuário está habilitado.
     * 
     * @return True se o usuário está habilitado, false caso contrário.
     */
    @Override
    public boolean isEnabled() {
        return this.status == UserStatus.ACTIVE; // O usuário está habilitado se o status for ATIVO
    }
}
```
```java
package br.com.legalconnect.user.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.user.entity.PasswordResetToken;
import br.com.legalconnect.user.entity.User; // Importar User

/**
 * @interface PasswordResetTokenRepository
 * @brief Repositório JPA para a entidade PasswordResetToken.
 *
 *        Fornece operações CRUD e métodos de consulta personalizados para
 *        gerenciar
 *        os tokens de redefinição de senha.
 */
@Repository
public interface PasswordResetTokenRepository extends JpaRepository<PasswordResetToken, UUID> {

    /**
     * @brief Busca um PasswordResetToken pelo seu valor de token.
     * @param token O valor String do token de redefinição.
     * @return Um Optional contendo o PasswordResetToken, se encontrado.
     */
    Optional<PasswordResetToken> findByToken(String token);

    /**
     * @brief Busca um PasswordResetToken associado a um usuário específico.
     * @param user O objeto User para o qual o token é procurado.
     * @return Um Optional contendo o PasswordResetToken, se encontrado.
     */
    Optional<PasswordResetToken> findByUser(User user);

    Optional<PasswordResetToken> findByUserAndUsado(User user, boolean b);
}
```
```java
package br.com.legalconnect.user.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.user.entity.RefreshToken;
import br.com.legalconnect.user.entity.User;

/**
 * @interface RefreshTokenRepository
 * @brief Repositório JPA para a entidade RefreshToken.
 *
 *        Fornece operações CRUD (Create, Read, Update, Delete) e métodos de
 *        consulta personalizados
 *        para gerenciar os tokens de atualização de sessão dos usuários.
 */
@Repository
public interface RefreshTokenRepository extends JpaRepository<RefreshToken, UUID> {

    /**
     * @brief Busca um RefreshToken pelo seu valor de token.
     * @param token O valor String do refresh token.
     * @return Um Optional contendo o RefreshToken, se encontrado.
     */
    Optional<RefreshToken> findByToken(String token);

    /**
     * @brief Busca um RefreshToken associado a um usuário específico.
     * @param user O objeto User para o qual o refresh token é procurado.
     * @return Um Optional contendo o RefreshToken, se encontrado.
     */
    Optional<RefreshToken> findByUser(User user);

    /**
     * @brief Deleta um RefreshToken pelo seu valor de token.
     * @param token O valor String do refresh token a ser deletado.
     */
    void deleteByToken(String token);
}
```
```java
package br.com.legalconnect.user.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.user.entity.Role;

@Repository
public interface RoleRepository extends JpaRepository<Role, UUID> {

    Optional<Role> findByNome(String roleClient);

}

```
```java
package br.com.legalconnect.user.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.user.entity.User;

/**
 * @interface UserRepository
 * @brief Repositório para a entidade User.
 */
@Repository
public interface UserRepository extends JpaRepository<User, UUID> {

    /**
     * Busca um usuário pelo seu e-mail.
     * 
     * @param email O e-mail do usuário.
     * @return Um Optional contendo o usuário, se encontrado.
     */
    Optional<User> findByEmail(String email);

    boolean existsByEmail(String email);

    boolean existsByCpf(String cpf);
}
```
```java
package br.com.legalconnect.user.service;

import java.util.UUID;

import org.springframework.stereotype.Service;

import br.com.legalconnect.user.repository.UserRepository;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UserService {
    private final UserRepository userRepository;

    public Boolean existsById(UUID id) {
        return userRepository.existsById(id);

    }
}

```
```java
package br.com.legalconnect.util;

public class Util {
    public static String sanitizeTenantId(String tenantId) {
        // Remove caracteres que não são letras, números ou underscore
        String cleaned = tenantId.replaceAll("[^a-zA-Z0-9]", "_");
        return cleaned;
    }
}

```
```java
# src/main/resources/application.properties
# ===================================================================
# Configurações Gerais da Aplicação Spring Boot
# ===================================================================

# Nome da aplicação (usado em logs e monitoramento)
spring.application.name=auth-service

 
# Desabilita o management server caso esteja ativo e conflitando (opcional)
# management.endpoints.web.exposure.include=*

# Habilita o Eureka Client
eureka.client.enabled=true
# URL do servidor Eureka onde o auth-service irá se registrar
server.port=${PORT:0}
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.instance.preferIpAddress=true
eureka.instance.lease-renewal-interval-in-seconds=30
# Configurações do SpringDoc OpenAPI
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packagesToScan=br.com.legalconnect
springdoc.pathsToMatch=/api/v1/**
springdoc.swagger-ui.url=/v3/api-docs
# Additional Swagger configuration
springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.swagger-ui.display-request-duration=true

# ===================================================================
# Configurações do Banco de Dados PostgreSQL
# ===================================================================

# URL de conexão com o banco de dados PostgreSQL
# O microsserviço de autenticação se conecta ao banco de dados global (public)
spring.datasource.url=jdbc:postgresql://localhost:5432/jusplatform_db

# Nome de usuário do banco de dados
spring.datasource.username=jususer

# Senha do banco de dados
spring.datasource.password=juspassword

# Driver JDBC para PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# Configurações do pool de conexões (HikariCP é o padrão no Spring Boot)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# ===================================================================
# Configurações do JPA e Hibernate
# ===================================================================

# Dialeto do Hibernate para PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Exibir queries SQL no console (para desenvolvimento)
# Desabilita a geração automática de DDL pelo Hibernate na inicialização principal.
# A criação de DDL para os esquemas de tenant será feita programaticamente pelo TenantSchemaService.
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
# Removido: spring.jpa.properties.hibernate.default_schema=public
# Esta configuração forçava o Hibernate a usar o schema 'public' para DDL, o que não é desejado para entidades multi-tenant.


# ===================================================================
# Configurações de Segurança (JWT)
# ===================================================================

# Chave secreta para assinar e verificar os JWTs.
# **IMPORTANTE**: Esta chave deve ser longa, complexa e armazenada de forma segura (ex: HashiCorp Vault, variáveis de ambiente).
# Nunca exponha esta chave em um repositório público!
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Tempo de expiração do JWT em milissegundos (ex: 3600000ms = 1 hora)
application.security.jwt.expiration=360000000

# Tempo de expiração do Refresh Token em milissegundos (ex: 7 dias = 604800000ms)
application.security.jwt.refresh-expiration=604800000

# Força do encoder de senha (cost factor para BCrypt, padrão é 10)
# Um valor maior aumenta a segurança, mas também o tempo de hash.
application.security.password-encoder.strength=12

# ===================================================================
# Configurações de Logging (Logback)
# ===================================================================

# Nível de log padrão para a aplicação
logging.level.br.com.legalconnect=INFO
# Nível de log para o Spring Framework
logging.level.org.springframework=WARN

# Nível de log para Hibernate (queries SQL) - Desabilite em produção
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicExtractor=WARN

# Nível de log para o processo de DDL do Hibernate (agora menos relevante com Flyway)
logging.level.org.hibernate.hbm2ddl=WARN

# Nível de log para as conexões JDBC do Hibernate
logging.level.org.hibernate.engine.jdbc.connections=WARN

# Nível de log para o Flyway (muito importante para depurar migrações)
logging.level.org.flywaydb=INFO

# Adicione logs específicos para a configuração do JPA e Multi-Tenancy
logging.level.org.hibernate.jpa=INFO
logging.level.org.springframework.orm.jpa=INFO
logging.level.org.springframework.data.jpa=INFO
logging.level.org.hibernate.engine.jdbc.connections.spi=INFO

# ===================================================================
# Configurações de Multitenancy Específicas do Aplicativo
# ===================================================================

# ID do tenant padrão para usuários que não estão associados a um tenant específico (ex: clientes gerais)
# Este UUID deve corresponder a um registro na tabela tb_tenant no schema global (public).
application.tenant.default-id=00000000-0000-0000-0000-000000000001

# ===================================================================
# Configurações do Spring Boot Actuator
# ===================================================================

# Habilita todos os endpoints do Actuator (para monitoramento)
management.endpoints.web.exposure.include=*
# Define o caminho base para os endpoints do Actuator
management.endpoints.web.base-path=/actuator

# ===================================================================
# Configurações de CORS (Cross-Origin Resource Sharing)
# ===================================================================

# Configuração de CORS global (pode ser mais específica nos controladores)
# Esta configuração é um exemplo e pode ser ajustada conforme a necessidade.
# Em produção, 'allowed-origins' deve ser restrito aos domínios do seu frontend.
# spring.web.cors.allowed-origins=*
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
# spring.web.cors.allowed-headers=*
# spring.web.cors.allow-credentials=false
# spring.web.cors.max-age=3600
# ===================================================================
# Configurações do Flyway
# ===================================================================
spring.flyway.enabled=true
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=1
# ===================================================================
# Configurações de Cache (Exemplo com Caffeine, adicione a dependência se usar)
# ===================================================================

# spring.cache.type=caffeine
# spring.cache.cache-names=users,refreshTokens
# spring.cache.caffeine.spec=expireAfterWrite=60m,maximumSize=500

# ===================================================================
# Propriedades de Aplicação Customizadas
# ===================================================================

# Exemplo de uma propriedade customizada
# app.feature.new-registration-enabled=true

# ===================================================================
# Configurações para Proxy Reverso (Nginx)
# ===================================================================

# Habilita o processamento dos cabeçalhos X-Forwarded-* enviados por proxies.
# Isso garante que a aplicação veja o IP real do cliente, o protocolo original (HTTP/HTTPS)
# e o host original, em vez dos detalhes do proxy (Nginx).
server.forward-headers-strategy=FRAMEWORK
spring.main.allow-bean-definition-overriding=true
# Configuração do Outlook SMTP
spring.mail.username=marcelo.llm@outlook.com
spring.mail.password=qlbzudmmytioxztj
spring.mail.from=marcelo.llm@outlook.com
spring.mail.protocol=smtp

# Propriedades avançadas

spring.mail.host=smtp.office365.com
spring.mail.port=587 
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=15000
spring.mail.properties.mail.smtp.timeout=15000
spring.mail.properties.mail.smtp.writetimeout=15000

# Propriedade para o Thymeleaf (se estiver usando)
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false
# (Opcional, mas útil para debug)
spring.mail.properties.mail.debug=true
app.frontend.url=http://localhost:4200

```
```java
-- src/main/resources/db/migration/V1__Create_All_Initial_Schema.sql

-- Seus comentários iniciais ou informações sobre o script
-- Este script cria todas as tabelas iniciais para o sistema LegalConnect.
-- Ele unifica as definições de schemas de usuários/tenants com as entidades de negócio.

---

-- Tabela tb_tenant
-- Entidade que representa um tenant (ambiente isolado para escritórios/advogados).
CREATE TABLE tb_tenant (
    id UUID PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    nome VARCHAR(255) NOT NULL,
    schema_name VARCHAR(63) NOT NULL UNIQUE,
    status VARCHAR(50) NOT NULL
);

COMMENT ON TABLE tb_tenant IS 'Entidade que representa um tenant (ambiente isolado para escritórios/advogados).';
COMMENT ON COLUMN tb_tenant.id IS 'Identificador único do tenant.';
COMMENT ON COLUMN tb_tenant.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_tenant.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_tenant.nome IS 'Nome descritivo do tenant (ex: "JusPlatform Principal").';
COMMENT ON COLUMN tb_tenant.schema_name IS 'Nome do esquema do banco de dados para multitenancy.';
COMMENT ON COLUMN tb_tenant.status IS 'Status operacional atual do tenant (ex: ACTIVE, INACTIVE, PENDING_ACTIVATION, SUSPENDED).';

-- Índices para tb_tenant
CREATE INDEX idx_tenant_schema_name ON tb_tenant (schema_name);
CREATE INDEX idx_tenant_status ON tb_tenant (status);

---

-- Tabela tb_role
-- Entidade para definir os papéis de acesso do usuário no sistema.
-- Unificada a partir das duas definições, mantendo created_at e updated_at.
CREATE TABLE tb_role (
    id UUID PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    nome VARCHAR(100) NOT NULL UNIQUE,
    descricao TEXT
);

COMMENT ON TABLE tb_role IS 'Entidade para definir os papéis de acesso do usuário no sistema.';
COMMENT ON COLUMN tb_role.id IS 'Identificador único do papel.';
COMMENT ON COLUMN tb_role.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_role.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_role.nome IS 'Nome descritivo e único do papel (ex: CLIENTE, ADVOGADO).';
COMMENT ON COLUMN tb_role.descricao IS 'Uma descrição detalhada do papel.';

-- Índices para tb_role
CREATE INDEX idx_role_nome ON tb_role (nome);

---

-- Tabela tb_user
-- Entidade base para todos os usuários (clientes, advogados, administradores de tenant, etc.).
CREATE TABLE tb_user (
    id UUID PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    tenant_id UUID NOT NULL, -- Chave estrangeira para tb_tenant
    nome_completo VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE, -- Unique por tenant/schema ou globalmente? Se global, pode ser um problema de multitenancy. Assumindo global por enquanto.
    cpf VARCHAR(14) NOT NULL UNIQUE,   -- Unique por tenant/schema ou globalmente? Assumindo global por enquanto.
    telefone VARCHAR(20),
    senha_hash TEXT NOT NULL,
    foto_url TEXT,
    user_type VARCHAR(50) NOT NULL,
    status VARCHAR(50) NOT NULL,
    CONSTRAINT fk_user_tenant FOREIGN KEY (tenant_id) REFERENCES tb_tenant (id)
);

COMMENT ON TABLE tb_user IS 'Entidade base para todos os usuários (clientes, advogados, administradores de tenant, etc.).';
COMMENT ON COLUMN tb_user.id IS 'Identificador único do usuário.';
COMMENT ON COLUMN tb_user.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_user.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_user.tenant_id IS 'Identificador do tenant ao qual o usuário pertence.';
COMMENT ON COLUMN tb_user.nome_completo IS 'Nome completo do usuário.';
COMMENT ON COLUMN tb_user.email IS 'Endereço de e-mail principal do usuário (único por schema de tenant).';
COMMENT ON COLUMN tb_user.cpf IS 'Número do Cadastro de Pessoa Física do usuário (único por schema de tenant).';
COMMENT ON COLUMN tb_user.telefone IS 'Número de telefone de contato do usuário.';
COMMENT ON COLUMN tb_user.senha_hash IS 'Representação criptografada (hashed) da senha do usuário.';
COMMENT ON COLUMN tb_user.foto_url IS 'URL da foto de perfil do usuário no S3.';
COMMENT ON COLUMN tb_user.user_type IS 'Categoria principal do usuário (ex: CLIENTE, ADVOGADO, PLATAFORMA_ADMIN).';
COMMENT ON COLUMN tb_user.status IS 'Status atual da conta do usuário (ex: ACTIVE, INACTIVE, PENDING_APPROVAL, REJECTED).';

-- Índices para tb_user
CREATE INDEX idx_user_tenant_id ON tb_user (tenant_id);
CREATE INDEX idx_user_email ON tb_user (email);
CREATE INDEX idx_user_cpf ON tb_user (cpf);
CREATE INDEX idx_user_type ON tb_user (user_type);
CREATE INDEX idx_user_status ON tb_user (status);

---

-- Tabela de junção tb_user_role
-- Tabela de junção para o relacionamento muitos-para-muitos entre User e Role.
CREATE TABLE tb_user_role (
    user_id UUID NOT NULL,
    role_id UUID NOT NULL,
    PRIMARY KEY (user_id, role_id),
    CONSTRAINT fk_user_role_user FOREIGN KEY (user_id) REFERENCES tb_user (id),
    CONSTRAINT fk_user_role_role FOREIGN KEY (role_id) REFERENCES tb_role (id)
);

COMMENT ON TABLE tb_user_role IS 'Tabela de junção para o relacionamento muitos-para-muitos entre User e Role.';
COMMENT ON COLUMN tb_user_role.user_id IS 'ID do usuário.';
COMMENT ON COLUMN tb_user_role.role_id IS 'ID do papel.';

-- Índices para tb_user_role
CREATE INDEX idx_user_role_user_id ON tb_user_role (user_id);
CREATE INDEX idx_user_role_role_id ON tb_user_role (role_id);

---

-- Tabela tb_refresh_token
-- Entidade que representa o Refresh Token no banco de dados.
-- Unificada a partir das duas definições, mantendo created_at e updated_at.
CREATE TABLE tb_refresh_token (
    id UUID PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    user_id UUID NOT NULL UNIQUE,
    token TEXT NOT NULL UNIQUE,
    expira_em TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    CONSTRAINT fk_refresh_token_user FOREIGN KEY (user_id) REFERENCES tb_user (id)
);

COMMENT ON TABLE tb_refresh_token IS 'Entidade que representa o Refresh Token no banco de dados.';
COMMENT ON COLUMN tb_refresh_token.id IS 'Identificador único do refresh token.';
COMMENT ON COLUMN tb_refresh_token.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_refresh_token.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_refresh_token.user_id IS 'Usuário ao qual este refresh token está associado.';
COMMENT ON COLUMN tb_refresh_token.token IS 'O valor real do refresh token.';
COMMENT ON COLUMN tb_refresh_token.expira_em IS 'Data e hora em que este refresh token se tornará inválido.';

-- Índices para tb_refresh_token
CREATE INDEX idx_refresh_token_user_id ON tb_refresh_token (user_id);
CREATE INDEX idx_refresh_token_expira_em ON tb_refresh_token (expira_em);

---

-- Tabela tb_password_reset_token
-- Entidade que representa um token de redefinição de senha.
CREATE TABLE tb_password_reset_token (
    id UUID PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    token TEXT NOT NULL UNIQUE,
    user_id UUID NOT NULL,
    expira_em TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    usado BOOLEAN NOT NULL DEFAULT FALSE,
    CONSTRAINT fk_password_reset_user FOREIGN KEY (user_id) REFERENCES tb_user (id)
);

COMMENT ON TABLE tb_password_reset_token IS 'Entidade que representa um token de redefinição de senha.';
COMMENT ON COLUMN tb_password_reset_token.id IS 'Identificador único do token de redefinição.';
COMMENT ON COLUMN tb_password_reset_token.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_password_reset_token.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_password_reset_token.token IS 'O valor real do token de redefinição.';
COMMENT ON COLUMN tb_password_reset_token.user_id IS 'Usuário ao qual este token de redefinição está associado.';
COMMENT ON COLUMN tb_password_reset_token.expira_em IS 'Data e hora em que este token se tornará inválido.';
COMMENT ON COLUMN tb_password_reset_token.usado IS 'Indica se o token já foi utilizado para redefinir a senha.';

-- Índices para tb_password_reset_token
CREATE INDEX idx_password_reset_token_user_id ON tb_password_reset_token (user_id);
CREATE INDEX idx_password_reset_token_expira_em ON tb_password_reset_token (expira_em);
CREATE INDEX idx_password_reset_token_usado ON tb_password_reset_token (usado);

---

-- Tabela tb_empresa
-- Criação da tabela tb_empresa para dados de empresas.
CREATE TABLE tb_empresa (
    id UUID NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    cnpj VARCHAR(18) NOT NULL UNIQUE,
    email_contato VARCHAR(255) NULL,
    nome_fantasia VARCHAR(255) NOT NULL,
    razao_social VARCHAR(255) NOT NULL,
    CONSTRAINT tb_empresa_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE tb_empresa IS 'Entidade que representa uma empresa.';
COMMENT ON COLUMN tb_empresa.id IS 'Identificador único da empresa.';
COMMENT ON COLUMN tb_empresa.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_empresa.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_empresa.cnpj IS 'CNPJ da empresa (único).';
COMMENT ON COLUMN tb_empresa.email_contato IS 'Email de contato da empresa.';
COMMENT ON COLUMN tb_empresa.nome_fantasia IS 'Nome fantasia da empresa.';
COMMENT ON COLUMN tb_empresa.razao_social IS 'Razão social da empresa.';

-- Índices para tb_empresa
CREATE INDEX idx_empresa_cnpj ON tb_empresa (cnpj);

---

-- Tabela tb_plano
-- Criação da tabela tb_plano para detalhes de planos de assinatura.
CREATE TABLE tb_plano (
    id UUID NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    nome VARCHAR(100) NOT NULL UNIQUE,
    descricao TEXT NULL,
    preco_mensal NUMERIC(10, 2) NOT NULL,
    preco_anual NUMERIC(10, 2) NOT NULL,
    acesso_relatorios_avancados BOOLEAN NOT NULL,
    is_default BOOLEAN NOT NULL,
    limite_servicos_agendaveis INT NULL,
    periodo_teste_dias INT NULL,
    permite_pedidos_orcamento BOOLEAN NOT NULL,
    visibilidade_destaque VARCHAR(50) NOT NULL,
    CONSTRAINT tb_plano_pkey PRIMARY KEY (id),
    CONSTRAINT tb_plano_visibilidade_destaque_check CHECK (visibilidade_destaque IN ('PADRAO', 'PREMIUM', 'DESTAQUE_MAXIMO'))
);

COMMENT ON TABLE tb_plano IS 'Entidade que representa os diferentes planos de assinatura.';
COMMENT ON COLUMN tb_plano.id IS 'Identificador único do plano.';
COMMENT ON COLUMN tb_plano.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_plano.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_plano.nome IS 'Nome do plano (único).';
COMMENT ON COLUMN tb_plano.descricao IS 'Descrição detalhada do plano.';
COMMENT ON COLUMN tb_plano.preco_mensal IS 'Preço mensal do plano.';
COMMENT ON COLUMN tb_plano.preco_anual IS 'Preço anual do plano.';
COMMENT ON COLUMN tb_plano.acesso_relatorios_avancados IS 'Indica se o plano inclui acesso a relatórios avançados.';
COMMENT ON COLUMN tb_plano.is_default IS 'Indica se este é o plano padrão.';
COMMENT ON COLUMN tb_plano.limite_servicos_agendaveis IS 'Limite de serviços agendáveis para o plano.';
COMMENT ON COLUMN tb_plano.periodo_teste_dias IS 'Período de teste em dias, se aplicável.';
COMMENT ON COLUMN tb_plano.permite_pedidos_orcamento IS 'Indica se o plano permite pedidos de orçamento.';
COMMENT ON COLUMN tb_plano.visibilidade_destaque IS 'Nível de visibilidade de destaque do plano.';

-- Índices para tb_plano
CREATE INDEX idx_plano_nome ON tb_plano (nome);
CREATE INDEX idx_plano_is_default ON tb_plano (is_default);

---

-- Tabela tb_pessoa
-- Entidade base para pessoas físicas (clientes, profissionais, administradores de plataforma).
CREATE TABLE tb_pessoa (
    id UUID PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    user_id UUID NOT NULL UNIQUE, -- Chave estrangeira para tb_user
    nome_completo VARCHAR(255) NOT NULL,
    cpf VARCHAR(14) NOT NULL UNIQUE,
    data_nascimento DATE NULL,
    CONSTRAINT fk_pessoa_user FOREIGN KEY (user_id) REFERENCES tb_user (id)
);

COMMENT ON TABLE tb_pessoa IS 'Entidade base para pessoas físicas (clientes, profissionais, administradores de plataforma).';
COMMENT ON COLUMN tb_pessoa.id IS 'Identificador único da pessoa.';
COMMENT ON COLUMN tb_pessoa.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_pessoa.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_pessoa.user_id IS 'ID do usuário associado a esta pessoa.';
COMMENT ON COLUMN tb_pessoa.nome_completo IS 'Nome completo da pessoa.';
COMMENT ON COLUMN tb_pessoa.cpf IS 'CPF da pessoa (único).';
COMMENT ON COLUMN tb_pessoa.data_nascimento IS 'Data de nascimento da pessoa.';

-- Índices para tb_pessoa
CREATE INDEX idx_pessoa_user_id ON tb_pessoa (user_id);
CREATE INDEX idx_pessoa_cpf ON tb_pessoa (cpf);

---

-- Tabela tb_administrador
-- Entidade para administradores da plataforma. Herda de tb_pessoa.
CREATE TABLE tb_administrador (
    id UUID PRIMARY KEY, -- Chave estrangeira para tb_pessoa
    status VARCHAR(255) NULL, -- Ex: 'ATIVO', 'INATIVO'
    CONSTRAINT fk_administrador_pessoa FOREIGN KEY (id) REFERENCES tb_pessoa (id)
);

COMMENT ON TABLE tb_administrador IS 'Entidade que representa um administrador da plataforma.';
COMMENT ON COLUMN tb_administrador.id IS 'Identificador único do administrador (chave estrangeira para tb_pessoa).';
COMMENT ON COLUMN tb_administrador.status IS 'Status do administrador.';

---

-- Tabela tb_cliente
-- Entidade para clientes. Herda de tb_pessoa.
CREATE TABLE tb_cliente (
    id UUID PRIMARY KEY, -- Chave estrangeira para tb_pessoa
    status VARCHAR(255) NULL, -- Ex: 'ATIVO', 'INATIVO', 'PENDENTE'
    tipo VARCHAR(255) NULL,   -- Ex: 'PESSOA_FISICA', 'PESSOA_JURIDICA'
    CONSTRAINT fk_cliente_pessoa FOREIGN KEY (id) REFERENCES tb_pessoa (id)
);

COMMENT ON TABLE tb_cliente IS 'Entidade que representa um cliente.';
COMMENT ON COLUMN tb_cliente.id IS 'Identificador único do cliente (chave estrangeira para tb_pessoa).';
COMMENT ON COLUMN tb_cliente.status IS 'Status do cliente.';
COMMENT ON COLUMN tb_cliente.tipo IS 'Tipo de cliente (Pessoa Física ou Jurídica).';

---

-- Tabela tb_profissional
-- Entidade para profissionais (advogados). Herda de tb_pessoa.
CREATE TABLE tb_profissional (
    id UUID PRIMARY KEY, -- Chave estrangeira para tb_pessoa
    plano_id UUID NOT NULL, -- Chave estrangeira para tb_plano
    empresa_id UUID NULL, -- Opcional: para qual empresa o profissional está vinculado
    numero_oab VARCHAR(50) NOT NULL UNIQUE,
    status_profissional VARCHAR(50) NOT NULL,
    faz_parte_de_plano BOOLEAN NOT NULL,
    usa_marketplace BOOLEAN NOT NULL,
    CONSTRAINT fk_profissional_pessoa FOREIGN KEY (id) REFERENCES tb_pessoa (id),
    CONSTRAINT fk_profissional_plano FOREIGN KEY (plano_id) REFERENCES tb_plano (id),
    CONSTRAINT fk_profissional_empresa FOREIGN KEY (empresa_id) REFERENCES tb_empresa (id),
    CONSTRAINT tb_profissional_status_profissional_check CHECK (status_profissional IN ('ATIVO', 'LICENCIADO', 'SUSPENSO', 'EM_ANALISE'))
);

COMMENT ON TABLE tb_profissional IS 'Entidade que representa um profissional (advogado).';
COMMENT ON COLUMN tb_profissional.id IS 'Identificador único do profissional (chave estrangeira para tb_pessoa).';
COMMENT ON COLUMN tb_profissional.plano_id IS 'ID do plano de assinatura do profissional.';
COMMENT ON COLUMN tb_profissional.empresa_id IS 'ID da empresa à qual o profissional está vinculado (opcional).';
COMMENT ON COLUMN tb_profissional.numero_oab IS 'Número da OAB do profissional (único).';
COMMENT ON COLUMN tb_profissional.status_profissional IS 'Status atual do profissional.';
COMMENT ON COLUMN tb_profissional.faz_parte_de_plano IS 'Indica se o profissional faz parte de um plano.';
COMMENT ON COLUMN tb_profissional.usa_marketplace IS 'Indica se o profissional utiliza o marketplace.';

-- Índices para tb_profissional
CREATE INDEX idx_profissional_plano_id ON tb_profissional (plano_id);
CREATE INDEX idx_profissional_empresa_id ON tb_profissional (empresa_id);
CREATE INDEX idx_profissional_oab ON tb_profissional (numero_oab);

---

-- Tabela tb_user_profissionals_role (Correção do nome para clareza)
-- Tabela de junção para os papéis específicos de um profissional (se for diferente de tb_user_role).
-- NOTE: Se um "profissional" é apenas um "user" com um "user_type" específico,
-- e seus papéis já são geridos por `tb_user_role`, esta tabela pode ser redundante.
-- Mantendo-a aqui conforme o seu script original, mas considere a sua necessidade.
CREATE TABLE tb_profissional_role (
    profissional_id UUID NOT NULL, -- Renomeado para clareza
    role_id UUID NOT NULL,
    PRIMARY KEY (profissional_id, role_id),
    CONSTRAINT fk_profissional_role_profissional FOREIGN KEY (profissional_id) REFERENCES tb_profissional (id),
    CONSTRAINT fk_profissional_role_role FOREIGN KEY (role_id) REFERENCES tb_role (id)
);

COMMENT ON TABLE tb_profissional_role IS 'Tabela de junção para os papéis específicos de um profissional.';
COMMENT ON COLUMN tb_profissional_role.profissional_id IS 'ID do profissional.';
COMMENT ON COLUMN tb_profissional_role.role_id IS 'ID do papel.';

-- Índices para tb_profissional_role
CREATE INDEX idx_profissional_role_profissional_id ON tb_profissional_role (profissional_id);
CREATE INDEX idx_profissional_role_role_id ON tb_profissional_role (role_id);

---

-- Tabela tb_empresa_telefones
-- Tabela de telefones para empresas.
CREATE TABLE tb_empresa_telefones (
    empresa_id UUID NOT NULL,
    numero_telefone VARCHAR(20) NOT NULL, -- Telefone não pode ser NULL se for a lista de telefones de uma empresa.
    PRIMARY KEY (empresa_id, numero_telefone), -- Adicionado PRIMARY KEY composta para unicidade
    CONSTRAINT fk_empresa_telefones_empresa FOREIGN KEY (empresa_id) REFERENCES tb_empresa (id)
);

COMMENT ON TABLE tb_empresa_telefones IS 'Tabela para armazenar os números de telefone de uma empresa.';
COMMENT ON COLUMN tb_empresa_telefones.empresa_id IS 'ID da empresa.';
COMMENT ON COLUMN tb_empresa_telefones.numero_telefone IS 'Número de telefone da empresa.';

-- Índices para tb_empresa_telefones
CREATE INDEX idx_empresa_telefones_empresa_id ON tb_empresa_telefones (empresa_id);

---

-- Tabela tb_pessoa_telefones
-- Tabela de telefones para pessoas.
CREATE TABLE tb_pessoa_telefones (
    pessoa_id UUID NOT NULL,
    numero_telefone VARCHAR(20) NOT NULL, -- Telefone não pode ser NULL se for a lista de telefones de uma pessoa.
    PRIMARY KEY (pessoa_id, numero_telefone), -- Adicionado PRIMARY KEY composta para unicidade
    CONSTRAINT fk_pessoa_telefones_pessoa FOREIGN KEY (pessoa_id) REFERENCES tb_pessoa (id)
);

COMMENT ON TABLE tb_pessoa_telefones IS 'Tabela para armazenar os números de telefone de uma pessoa.';
COMMENT ON COLUMN tb_pessoa_telefones.pessoa_id IS 'ID da pessoa.';
COMMENT ON COLUMN tb_pessoa_telefones.numero_telefone IS 'Número de telefone da pessoa.';

-- Índices para tb_pessoa_telefones
CREATE INDEX idx_pessoa_telefones_pessoa_id ON tb_pessoa_telefones (pessoa_id);

---

-- Tabela tb_endereco
-- Tabela para endereços, associados a empresas ou pessoas.
CREATE TABLE tb_endereco (
    id UUID NOT NULL PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    empresa_id UUID NULL, -- Pode ser nulo se for endereço de pessoa
    pessoa_id UUID NULL,  -- Pode ser nulo se for endereço de empresa
    cep VARCHAR(9) NOT NULL,
    logradouro VARCHAR(255) NOT NULL,
    numero VARCHAR(20) NOT NULL,
    complemento VARCHAR(255) NULL,
    bairro VARCHAR(100) NOT NULL,
    cidade VARCHAR(100) NOT NULL,
    estado VARCHAR(2) NOT NULL,
    pais VARCHAR(50) NOT NULL,
    tipo_endereco VARCHAR(50) NOT NULL,
    CONSTRAINT chk_endereco_associacao CHECK (
        (empresa_id IS NOT NULL AND pessoa_id IS NULL) OR
        (empresa_id IS NULL AND pessoa_id IS NOT NULL) OR
        (empresa_id IS NULL AND pessoa_id IS NULL) -- Pode ser um endereço 'solto' ou associado em outro lugar
    ),
    CONSTRAINT tb_endereco_tipo_endereco_check CHECK (tipo_endereco IN ('RESIDENCIAL', 'COMERCIAL', 'ESCRITORIO', 'COBRANCA', 'ENTREGA', 'OUTRO')),
    CONSTRAINT fk_endereco_empresa FOREIGN KEY (empresa_id) REFERENCES tb_empresa (id),
    CONSTRAINT fk_endereco_pessoa FOREIGN KEY (pessoa_id) REFERENCES tb_pessoa (id)
);

COMMENT ON TABLE tb_endereco IS 'Entidade que representa um endereço físico, que pode ser associado a uma empresa ou pessoa.';
COMMENT ON COLUMN tb_endereco.id IS 'Identificador único do endereço.';
COMMENT ON COLUMN tb_endereco.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_endereco.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_endereco.empresa_id IS 'ID da empresa associada a este endereço (pode ser nulo).';
COMMENT ON COLUMN tb_endereco.pessoa_id IS 'ID da pessoa associada a este endereço (pode ser nulo).';
COMMENT ON COLUMN tb_endereco.cep IS 'CEP do endereço.';
COMMENT ON COLUMN tb_endereco.logradouro IS 'Nome da rua ou avenida.';
COMMENT ON COLUMN tb_endereco.numero IS 'Número do imóvel.';
COMMENT ON COLUMN tb_endereco.complemento IS 'Complemento do endereço (ex: apto, sala).';
COMMENT ON COLUMN tb_endereco.bairro IS 'Nome do bairro.';
COMMENT ON COLUMN tb_endereco.cidade IS 'Nome da cidade.';
COMMENT ON COLUMN tb_endereco.estado IS 'Sigla do estado (UF).';
COMMENT ON COLUMN tb_endereco.pais IS 'Nome do país.';
COMMENT ON COLUMN tb_endereco.tipo_endereco IS 'Tipo do endereço (RESIDENCIAL, COMERCIAL, etc.).';

-- Índices para tb_endereco
CREATE INDEX idx_endereco_empresa_id ON tb_endereco (empresa_id);
CREATE INDEX idx_endereco_pessoa_id ON tb_endereco (pessoa_id);
CREATE INDEX idx_endereco_cep ON tb_endereco (cep);
CREATE INDEX idx_endereco_cidade_estado ON tb_endereco (cidade, estado);


-- Configuração de permissões para o usuário 'jususer' (opcional, pode ser feito via configuração do ORM/datasource)
-- IMPORTANTE: O Flyway executa scripts como o usuário que você configurou no datasource.
-- Geralmente, permissões são gerenciadas pelo DBA ou por ferramentas de gerenciamento de usuários do banco.
-- Se 'jususer' for o usuário do datasource, ele já terá permissões por padrão.
-- Caso contrário, estas permissões podem ser úteis, mas é bom revisar o modelo de segurança.

-- REVOKE ALL ON ALL TABLES IN SCHEMA public FROM PUBLIC; -- Remova esta linha se não for gerenciar permissões globalmente
-- GRANT ALL ON ALL TABLES IN SCHEMA public TO jususer;   -- Remova esta linha se não for gerenciar permissões globalmente

-- Exemplo de como você faria para tabelas específicas, se necessário:
-- ALTER TABLE tb_tenant OWNER TO jususer;
-- GRANT ALL ON TABLE tb_tenant TO jususer;

-- Repita para outras tabelas conforme a necessidade, ou confie nas configurações padrão do ORM/datasource
-- e na administração de usuários do PostgreSQL.
```
```java
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title th:text="${subject}">Bem-vindo!</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f4f4f4;
        margin: 0;
        padding: 20px;
      }
      .container {
        max-width: 600px;
        margin: 0 auto;
        background: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }
      .header {
        text-align: center;
        padding-bottom: 20px;
        border-bottom: 1px solid #eee;
      }
      .header h1 {
        color: #007bff;
      }
      .content {
        padding: 20px 0;
      }
      .footer {
        text-align: center;
        padding-top: 20px;
        border-top: 1px solid #eee;
        font-size: 0.9em;
        color: #777;
      }
      .button {
        display: inline-block;
        background-color: #007bff;
        color: #ffffff;
        padding: 10px 20px;
        text-decoration: none;
        border-radius: 5px;
        margin-top: 20px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1 th:text="${title}">Olá!</h1>
      </div>
      <div class="content">
        <p>
          Prezado(a) <strong th:text="${userName}">Nome do Usuário</strong>,
        </p>
        <p>
          É com grande prazer que confirmamos seu cadastro em nossa plataforma.
        </p>
        <p>
          Seu e-mail de acesso é:
          <strong th:text="${userEmail}">email@example.com</strong>
        </p>
        <p th:text="${message}">
          Aproveite todas as funcionalidades que oferecemos!
        </p>

        <p style="text-align: center">
          <a
            th:href="${callToActionLink}"
            class="button"
            th:text="${callToActionText}"
            >Acessar Plataforma</a
          >
        </p>
      </div>
      <div class="footer">
        <p>
          Este é um e-mail de notificação automático. Por favor, não responda.
        </p>
        <p>
          &copy; <span th:text="${currentYear}">2025</span> Sua Empresa. Todos
          os direitos reservados.
        </p>
      </div>
    </div>
  </body>
</html>

```
```java
package br.com.legalconnect.auth.auth_service;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class AuthServiceApplicationTests {

	@Test
	void contextLoads() {
	}

}

```
```java
# src/main/resources/application.properties
# ===================================================================
# Configurações Gerais da Aplicação Spring Boot
# ===================================================================

# Nome da aplicação (usado em logs e monitoramento)
spring.application.name=auth-service

 
# Desabilita o management server caso esteja ativo e conflitando (opcional)
# management.endpoints.web.exposure.include=*

# Habilita o Eureka Client
eureka.client.enabled=true
# URL do servidor Eureka onde o auth-service irá se registrar
server.port=${PORT:0}
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.instance.preferIpAddress=true
eureka.instance.lease-renewal-interval-in-seconds=30
# Configurações do SpringDoc OpenAPI
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packagesToScan=br.com.legalconnect
springdoc.pathsToMatch=/api/v1/**
springdoc.swagger-ui.url=/v3/api-docs
# Additional Swagger configuration
springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.swagger-ui.display-request-duration=true

# ===================================================================
# Configurações do Banco de Dados PostgreSQL
# ===================================================================

# URL de conexão com o banco de dados PostgreSQL
# O microsserviço de autenticação se conecta ao banco de dados global (public)
spring.datasource.url=jdbc:postgresql://localhost:5432/jusplatform_db

# Nome de usuário do banco de dados
spring.datasource.username=jususer

# Senha do banco de dados
spring.datasource.password=juspassword

# Driver JDBC para PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# Configurações do pool de conexões (HikariCP é o padrão no Spring Boot)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# ===================================================================
# Configurações do JPA e Hibernate
# ===================================================================

# Dialeto do Hibernate para PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Exibir queries SQL no console (para desenvolvimento)
# Desabilita a geração automática de DDL pelo Hibernate na inicialização principal.
# A criação de DDL para os esquemas de tenant será feita programaticamente pelo TenantSchemaService.
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
# Removido: spring.jpa.properties.hibernate.default_schema=public
# Esta configuração forçava o Hibernate a usar o schema 'public' para DDL, o que não é desejado para entidades multi-tenant.


# ===================================================================
# Configurações de Segurança (JWT)
# ===================================================================

# Chave secreta para assinar e verificar os JWTs.
# **IMPORTANTE**: Esta chave deve ser longa, complexa e armazenada de forma segura (ex: HashiCorp Vault, variáveis de ambiente).
# Nunca exponha esta chave em um repositório público!
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Tempo de expiração do JWT em milissegundos (ex: 3600000ms = 1 hora)
application.security.jwt.expiration=360000000

# Tempo de expiração do Refresh Token em milissegundos (ex: 7 dias = 604800000ms)
application.security.jwt.refresh-expiration=604800000

# Força do encoder de senha (cost factor para BCrypt, padrão é 10)
# Um valor maior aumenta a segurança, mas também o tempo de hash.
application.security.password-encoder.strength=12

# ===================================================================
# Configurações de Logging (Logback)
# ===================================================================

# Nível de log padrão para a aplicação
logging.level.br.com.legalconnect=INFO
# Nível de log para o Spring Framework
logging.level.org.springframework=WARN

# Nível de log para Hibernate (queries SQL) - Desabilite em produção
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicExtractor=WARN

# Nível de log para o processo de DDL do Hibernate (agora menos relevante com Flyway)
logging.level.org.hibernate.hbm2ddl=WARN

# Nível de log para as conexões JDBC do Hibernate
logging.level.org.hibernate.engine.jdbc.connections=WARN

# Nível de log para o Flyway (muito importante para depurar migrações)
logging.level.org.flywaydb=INFO

# Adicione logs específicos para a configuração do JPA e Multi-Tenancy
logging.level.org.hibernate.jpa=INFO
logging.level.org.springframework.orm.jpa=INFO
logging.level.org.springframework.data.jpa=INFO
logging.level.org.hibernate.engine.jdbc.connections.spi=INFO

# ===================================================================
# Configurações de Multitenancy Específicas do Aplicativo
# ===================================================================

# ID do tenant padrão para usuários que não estão associados a um tenant específico (ex: clientes gerais)
# Este UUID deve corresponder a um registro na tabela tb_tenant no schema global (public).
application.tenant.default-id=00000000-0000-0000-0000-000000000001

# ===================================================================
# Configurações do Spring Boot Actuator
# ===================================================================

# Habilita todos os endpoints do Actuator (para monitoramento)
management.endpoints.web.exposure.include=*
# Define o caminho base para os endpoints do Actuator
management.endpoints.web.base-path=/actuator

# ===================================================================
# Configurações de CORS (Cross-Origin Resource Sharing)
# ===================================================================

# Configuração de CORS global (pode ser mais específica nos controladores)
# Esta configuração é um exemplo e pode ser ajustada conforme a necessidade.
# Em produção, 'allowed-origins' deve ser restrito aos domínios do seu frontend.
# spring.web.cors.allowed-origins=*
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
# spring.web.cors.allowed-headers=*
# spring.web.cors.allow-credentials=false
# spring.web.cors.max-age=3600
# ===================================================================
# Configurações do Flyway
# ===================================================================
spring.flyway.enabled=true
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=1
# ===================================================================
# Configurações de Cache (Exemplo com Caffeine, adicione a dependência se usar)
# ===================================================================

# spring.cache.type=caffeine
# spring.cache.cache-names=users,refreshTokens
# spring.cache.caffeine.spec=expireAfterWrite=60m,maximumSize=500

# ===================================================================
# Propriedades de Aplicação Customizadas
# ===================================================================

# Exemplo de uma propriedade customizada
# app.feature.new-registration-enabled=true

# ===================================================================
# Configurações para Proxy Reverso (Nginx)
# ===================================================================

# Habilita o processamento dos cabeçalhos X-Forwarded-* enviados por proxies.
# Isso garante que a aplicação veja o IP real do cliente, o protocolo original (HTTP/HTTPS)
# e o host original, em vez dos detalhes do proxy (Nginx).
server.forward-headers-strategy=FRAMEWORK
spring.main.allow-bean-definition-overriding=true
# Configuração do Outlook SMTP
spring.mail.username=marcelo.llm@outlook.com
spring.mail.password=qlbzudmmytioxztj
spring.mail.from=marcelo.llm@outlook.com
spring.mail.protocol=smtp

# Propriedades avançadas

spring.mail.host=smtp.office365.com
spring.mail.port=587 
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=15000
spring.mail.properties.mail.smtp.timeout=15000
spring.mail.properties.mail.smtp.writetimeout=15000

# Propriedade para o Thymeleaf (se estiver usando)
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false
# (Opcional, mas útil para debug)
spring.mail.properties.mail.debug=true
app.frontend.url=http://localhost:4200

```
```java
Êþº¾   = :  *br/com/legalconnect/AuthServiceApplication  java/lang/Object log Lorg/slf4j/Logger; <clinit> ()V Code
  
  org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>
     this ,Lbr/com/legalconnect/AuthServiceApplication; main ([Ljava/lang/String;)V
    *org/springframework/boot/SpringApplication    run b(Ljava/lang/Class;[Ljava/lang/String;)Lorg/springframework/context/ConfigurableApplicationContext; " -LegalConnectApplication iniciada com sucesso! $ & % org/slf4j/Logger ' ( info (Ljava/lang/String;)V args [Ljava/lang/String; MethodParameters 
SourceFile AuthServiceApplication.java RuntimeVisibleAnnotations BLorg/springframework/cloud/client/discovery/EnableDiscoveryClient; >Lorg/springframework/boot/autoconfigure/SpringBootApplication; exclude GLorg/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration; :Lorg/springframework/boot/autoconfigure/domain/EntityScan; basePackages br.com.legalconnect.user.entity br.com.legalconnect.auth.entity FLorg/springframework/data/jpa/repository/config/EnableJpaRepositories; #br.com.legalconnect.user.repository #br.com.legalconnect.auth.repository !                	   )      	¸ 
³ ±                      	   /     *· ±                        	    	   D     *¸ W² !¹ # ±              !  "         ) *   +    )    ,    - .   0  /   0  1[ c 2 3  4[ s 5s 6 7  4[ s 8s 9
```
```java
Êþº¾   = z  1br/com/legalconnect/auth/config/JwtAuthEntryPoint  java/lang/Object  (org/springframework/web/server/WebFilter 
TENANT_HEADER Ljava/lang/String; 
ConstantValue  X-Tenant-ID CORRELATION_HEADER  X-Correlation-ID <init> ()V Code
     LineNumberTable LocalVariableTable this 3Lbr/com/legalconnect/auth/config/JwtAuthEntryPoint; filter (Lorg/springframework/web/server/ServerWebExchange;Lorg/springframework/web/server/WebFilterChain;)Lreactor/core/publisher/Mono; 	Signature (Lorg/springframework/web/server/ServerWebExchange;Lorg/springframework/web/server/WebFilterChain;)Lreactor/core/publisher/Mono<Ljava/lang/Void;>;      run H(Lorg/springframework/web/server/ServerWebExchange;)Ljava/lang/Runnable;
 ! # " reactor/core/publisher/Mono $ % fromRunnable 3(Ljava/lang/Runnable;)Lreactor/core/publisher/Mono; ' ) ( -org/springframework/web/server/WebFilterChain  * Q(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
 ! , - . then <(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono; exchange 2Lorg/springframework/web/server/ServerWebExchange; chain /Lorg/springframework/web/server/WebFilterChain; MethodParameters lambda$0 5(Lorg/springframework/web/server/ServerWebExchange;)V 7 9 8 0org/springframework/web/server/ServerWebExchange : ; 
getRequest >()Lorg/springframework/http/server/reactive/ServerHttpRequest; = ? > :org/springframework/http/server/reactive/ServerHttpRequest @ A 
getHeaders (()Lorg/springframework/http/HttpHeaders;
 C E D $org/springframework/http/HttpHeaders F G getFirst &(Ljava/lang/String;)Ljava/lang/String;
 I K J java/lang/String L M isBlank ()Z O 6br/com/legalconnect/common/exception/BusinessException	 Q S R .br/com/legalconnect/common/exception/ErrorCode T U TENANT_NOT_FOUND 0Lbr/com/legalconnect/common/exception/ErrorCode; W X-Tenant-ID header is required
 N Y  Z F(Lbr/com/legalconnect/common/exception/ErrorCode;[Ljava/lang/String;)V	 Q \ ] U USER_NOT_FOUND _ #X-Correlation-ID header is required tenantId 
correlationId 
StackMapTable 
SourceFile JwtAuthEntryPoint.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; BootstrapMethods
 i k j "java/lang/invoke/LambdaMetafactory l m metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; h 
  q 4 5 p  InnerClasses v %java/lang/invoke/MethodHandles$Lookup x java/lang/invoke/MethodHandles Lookup !          	    
     	    
         /     *· ±                                    Z     +º   ¸  ,+¹ & ¶ +°           ! 	 -  !                 / 0     1 2  3   	 /   1  
 4 5     Å     a*¹ 6 ¹ < 
¶ BL+Æ 
+¶ H » NY² P½ IYVS· X¿*¹ 6 ¹ < 
¶ BM,Æ 
,¶ H » NY² [½ IY^S· X¿±           #  $  % 0 ) A * L + ` -       O `   A  a   b    ü  Iü  Iù   c    d e     f   g     n  o r s t   
  u w y 
```
```java
Êþº¾   =  .br/com/legalconnect/auth/config/SecurityConfig  java/lang/Object log Lorg/slf4j/Logger; userRepository 4Lbr/com/legalconnect/user/repository/UserRepository; RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; 
jwtService -Lbr/com/legalconnect/auth/service/JwtService; PUBLIC_ENDPOINTS [Ljava/lang/String; <clinit> ()V Code
    org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	      java/lang/String  /api/v1/auth/**  /api/v1/public/** ! /api/v1/users/register/** # !/api/v1/users/recover-password/** % /api/v1/users/reset-password/** ' /actuator/** ) /h2-console/** + /v3/api-docs/** - /swagger-ui/** / /swagger-ui.html 1 /webjars/**	  3 
  LineNumberTable LocalVariableTable <init>
  8 6  this 0Lbr/com/legalconnect/auth/config/SecurityConfig; passwordEncoder @()Lorg/springframework/security/crypto/password/PasswordEncoder; -Lorg/springframework/context/annotation/Bean; ? @org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder
 > 8 authenticationProvider (Lorg/springframework/security/core/userdetails/UserDetailsService;)Lorg/springframework/security/authentication/dao/DaoAuthenticationProvider; D 'Configurando DaoAuthenticationProvider. F H G org/slf4j/Logger I J debug (Ljava/lang/String;)V L Iorg/springframework/security/authentication/dao/DaoAuthenticationProvider
 K 8
 K O P Q setUserDetailsService E(Lorg/springframework/security/core/userdetails/UserDetailsService;)V
  S ; <
 K U V W setPasswordEncoder A(Lorg/springframework/security/crypto/password/PasswordEncoder;)V userDetailsService BLorg/springframework/security/core/userdetails/UserDetailsService; authProvider KLorg/springframework/security/authentication/dao/DaoAuthenticationProvider; MethodParameters authenticationManager ®(Lorg/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration;)Lorg/springframework/security/authentication/AuthenticationManager; 
Exceptions a java/lang/Exception c Obtendo AuthenticationManager.
 e g f gorg/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration h i getAuthenticationManager E()Lorg/springframework/security/authentication/AuthenticationManager; 
authConfig iLorg/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration; D()Lorg/springframework/security/core/userdetails/UserDetailsService; n .Criando bean UserDetailsService personalizado.   p q r loadUserByUsername t(Lbr/com/legalconnect/auth/config/SecurityConfig;)Lorg/springframework/security/core/userdetails/UserDetailsService; securityFilterChain (Lorg/springframework/security/config/annotation/web/builders/HttpSecurity;)Lorg/springframework/security/web/SecurityFilterChain; v !Configurando SecurityFilterChain. F x y J info  { | } 	customize 2()Lorg/springframework/security/config/Customizer;
    Horg/springframework/security/config/annotation/web/builders/HttpSecurity   csrf |(Lorg/springframework/security/config/Customizer;)Lorg/springframework/security/config/annotation/web/builders/HttpSecurity;   |  b(Lbr/com/legalconnect/auth/config/SecurityConfig;)Lorg/springframework/security/config/Customizer;
     cors  {
     sessionManagement  {
     authorizeHttpRequests
   X l
   A B
   A  (Lorg/springframework/security/authentication/AuthenticationProvider;)Lorg/springframework/security/config/annotation/web/builders/HttpSecurity;  {
     headers  ,SecurityFilterChain configurada com sucesso.
    ¡ ¢ build ()Ljava/lang/Object; ¤ 4org/springframework/security/web/SecurityFilterChain http JLorg/springframework/security/config/annotation/web/builders/HttpSecurity; corsConfigurationSource 8()Lorg/springframework/web/cors/CorsConfigurationSource; ª %Configurando CorsConfigurationSource. ¬ .org/springframework/web/cors/CorsConfiguration
 « 8 ¯ *
 « ± ² J addAllowedOrigin
 « ´ µ J addAllowedMethod
 « · ¸ J addAllowedHeader
 º ¼ » java/lang/Boolean ½ ¾ valueOf (Z)Ljava/lang/Boolean;
 « À Á Â setAllowCredentials (Ljava/lang/Boolean;)V Ä <org/springframework/web/cors/UrlBasedCorsConfigurationSource
 Ã 8 Ç /**
 Ã É Ê Ë registerCorsConfiguration E(Ljava/lang/String;Lorg/springframework/web/cors/CorsConfiguration;)V 
configuration 0Lorg/springframework/web/cors/CorsConfiguration; source >Lorg/springframework/web/cors/UrlBasedCorsConfigurationSource; lambda$0 O(Ljava/lang/String;)Lorg/springframework/security/core/userdetails/UserDetails; Ó Gorg/springframework/security/core/userdetails/UsernameNotFoundException	  Õ   × Ù Ø 2br/com/legalconnect/user/repository/UserRepository Ú Û findByEmail ((Ljava/lang/String;)Ljava/util/Optional;  Ý Þ ß get 1(Ljava/lang/String;)Ljava/util/function/Supplier;
 á ã â java/util/Optional ä å orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; ç 9org/springframework/security/core/userdetails/UserDetails username Ljava/lang/String; lambda$2 R(Lorg/springframework/security/config/annotation/web/configurers/CsrfConfigurer;)V
 í ï î Morg/springframework/security/config/annotation/web/configurers/CsrfConfigurer ð ñ disable J()Lorg/springframework/security/config/annotation/web/HttpSecurityBuilder; OLorg/springframework/security/config/annotation/web/configurers/CsrfConfigurer; LocalVariableTypeTable Lorg/springframework/security/config/annotation/web/configurers/CsrfConfigurer<Lorg/springframework/security/config/annotation/web/builders/HttpSecurity;>; lambda$3 R(Lorg/springframework/security/config/annotation/web/configurers/CorsConfigurer;)V
  ø § ¨
 ú ü û Morg/springframework/security/config/annotation/web/configurers/CorsConfigurer ý þ configurationSource (Lorg/springframework/web/cors/CorsConfigurationSource;)Lorg/springframework/security/config/annotation/web/configurers/CorsConfigurer; OLorg/springframework/security/config/annotation/web/configurers/CorsConfigurer; Lorg/springframework/security/config/annotation/web/configurers/CorsConfigurer<Lorg/springframework/security/config/annotation/web/builders/HttpSecurity;>; lambda$4 _(Lorg/springframework/security/config/annotation/web/configurers/SessionManagementConfigurer;)V	 >org/springframework/security/config/http/SessionCreationPolicy 	STATELESS @Lorg/springframework/security/config/http/SessionCreationPolicy;

 Zorg/springframework/security/config/annotation/web/configurers/SessionManagementConfigurer
 sessionCreationPolicy (Lorg/springframework/security/config/http/SessionCreationPolicy;)Lorg/springframework/security/config/annotation/web/configurers/SessionManagementConfigurer; session \Lorg/springframework/security/config/annotation/web/configurers/SessionManagementConfigurer; ¨Lorg/springframework/security/config/annotation/web/configurers/SessionManagementConfigurer<Lorg/springframework/security/config/annotation/web/builders/HttpSecurity;>; lambda$5 (Lorg/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry;)V
 org/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry requestMatchers '([Ljava/lang/String;)Ljava/lang/Object; lorg/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurer$AuthorizedUrl
 	permitAll ()Lorg/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry;
!" ¢ 
anyRequest
$% 
authenticated auth Lorg/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry; ×Lorg/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurer<Lorg/springframework/security/config/annotation/web/builders/HttpSecurity;>.AuthorizationManagerRequestMatcherRegistry; lambda$6 U(Lorg/springframework/security/config/annotation/web/configurers/HeadersConfigurer;)V  {
-/. Porg/springframework/security/config/annotation/web/configurers/HeadersConfigurer01 frameOptions (Lorg/springframework/security/config/Customizer;)Lorg/springframework/security/config/annotation/web/configurers/HeadersConfigurer; RLorg/springframework/security/config/annotation/web/configurers/HeadersConfigurer; Lorg/springframework/security/config/annotation/web/configurers/HeadersConfigurer<Lorg/springframework/security/config/annotation/web/builders/HttpSecurity;>; lambda$1 ](Ljava/lang/String;)Lorg/springframework/security/core/userdetails/UsernameNotFoundException; 789 makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String;
 Ò; 6 J lambda$7 h(Lorg/springframework/security/config/annotation/web/configurers/HeadersConfigurer$FrameOptionsConfig;)V
?A@ corg/springframework/security/config/annotation/web/configurers/HeadersConfigurer$FrameOptionsConfigBC 
sameOrigin T()Lorg/springframework/security/config/annotation/web/configurers/HeadersConfigurer; eLorg/springframework/security/config/annotation/web/configurers/HeadersConfigurer$FrameOptionsConfig; ±Lorg/springframework/security/config/annotation/web/configurers/HeadersConfigurer<Lorg/springframework/security/config/annotation/web/builders/HttpSecurity;>.FrameOptionsConfig; 
SourceFile SecurityConfig.java 6Lorg/springframework/context/annotation/Configuration; TLorg/springframework/security/config/annotation/web/configuration/EnableWebSecurity; ZLorg/springframework/security/config/annotation/method/configuration/EnableMethodSecurity; prePostEnabled    BootstrapMethods
OQP "java/lang/invoke/LambdaMetafactoryRS metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;N Ñ
 W Ð ÑV Ñ (Ljava/lang/Object;)VZ
 ] ê ë\ ëZ
 b õ öa öZ
 gfZ
 lkZ
 q)*p* ¢
 v45u K()Lorg/springframework/security/core/userdetails/UsernameNotFoundException;xZ
 |<={=
 $java/lang/invoke/StringConcatFactory8 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; UsuÃ¡rio nÃ£o encontrado:  InnerClasses %java/lang/invoke/MethodHandles$Lookup java/lang/invoke/MethodHandles Lookup ^org/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurer *AuthorizationManagerRequestMatcherRegistry 
AuthorizedUrl FrameOptionsConfig !               	     
       	     
    
            ¥      M¸ ³ ½ YSYSY SY"SY$SY&SY(SY*SY,SY	.SY
0S³ 2±    4   >    +  9  :  ;  <  = # > ( ? . @ 4 A : B @ C F D I 9 L E 5       6      /     *· 7±    4       ) 5        9 :    ; <  	     =      2     » >Y· @°    4       6 5        9 :    A B  	     =      o     !² C¹ E » KY· MM,+¶ N,*¶ R¶ T,°    4       R 
 S  T  U  V 5        ! 9 :     ! X Y    Z [  \    X    ] ^  _     ` 	     =      G     ² b¹ E +¶ d°    4   
    f 
 g 5        9 :      j k  \    j    X l  	     =      ?     ² m¹ E *º o  °    4   
    r 
 s 5        9 :    s t  _     ` 	     =      ®     V² u¹ w +º z  ¶ ~*º   ¶ º   ¶ º   ¶ W+**¶ ¶ ¶ W+º   ¶ W² ¹ w +¶ À £°    4   * 
    
       ¡ $ ¢ - ¦ : ¬ D ® N ¯ 5       V 9 :     V ¥ ¦  \    ¥    § ¨  	     =           =² ©¹ E » «Y· ­L+®¶ °+®¶ ³+®¶ ¶+¸ ¹¶ ¿» ÃY· ÅM,Æ+¶ È,°    4   & 	   Ô 
 Õ  Ø  Ú  Ü $ Þ , à 4 â ; ã 5        = 9 :    + Ì Í  4 	 Î Ï  Ð Ñ  _     Ò    O     *´ Ô+¹ Ö +º Ü  ¶ àÀ æ°    4   
    s 
 t 5        9 :      è é 
 ê ë     A     *¶ ì±    4        5         ò   ó         ô   õ ö     O     	+*¶ ÷¶ ù±    4        5       	 9 :     	  ÿ  ó       	   
     D     *²¶	±    4       ¡ 5          ó         
     [     *² 2¶À¶¶ À¶#±    4       ¢  £ 
 ¤ 5       &'   ó       &(  
)*     F     
*º+  ¶,±    4       ¬ 5       
 2   ó       
 3  
45     .     » ÒY*º6  ·:°    4       t 5     
<=     A     *¶>±    4       ¬ 5       0D   ó       0E   F   G 	    H  I  J KZLM   X 	T UXYT [^_T `cdT ehiT jmnT orsT twyT z}~    "    ?- 
```
```java
Êþº¾   =   )br/com/legalconnect/auth/config/WebConfig  java/lang/Object jwtAuthEntryPoint 3Lbr/com/legalconnect/auth/config/JwtAuthEntryPoint; <init> 6(Lbr/com/legalconnect/auth/config/JwtAuthEntryPoint;)V Code
     ()V	     LineNumberTable LocalVariableTable this +Lbr/com/legalconnect/auth/config/WebConfig; MethodParameters jwtAuthEntryPointFilter ,()Lorg/springframework/web/server/WebFilter; RuntimeVisibleAnnotations -Lorg/springframework/context/annotation/Bean; 
corsFilter      filter lambda$0 (Lorg/springframework/web/server/ServerWebExchange;Lorg/springframework/web/server/WebFilterChain;)Lreactor/core/publisher/Mono;  !   0org/springframework/web/server/ServerWebExchange " # getResponse ?()Lorg/springframework/http/server/reactive/ServerHttpResponse; % ' & ;org/springframework/http/server/reactive/ServerHttpResponse ( ) 
getHeaders (()Lorg/springframework/http/HttpHeaders; + Access-Control-Allow-Origin - *
 / 1 0 $org/springframework/http/HttpHeaders 2 3 add '(Ljava/lang/String;Ljava/lang/String;)V 5 Access-Control-Allow-Methods 7 GET, POST, PUT, DELETE, OPTIONS 9 Access-Control-Allow-Headers ; Access-Control-Max-Age = 3600  ? @ A 
getRequest >()Lorg/springframework/http/server/reactive/ServerHttpRequest; C E D :org/springframework/http/server/reactive/ServerHttpRequest F G 	getMethod '()Lorg/springframework/http/HttpMethod;
 I K J #org/springframework/http/HttpMethod L M name ()Ljava/lang/String; O OPTIONS
 Q S R java/lang/String T U equals (Ljava/lang/Object;)Z	 W Y X #org/springframework/http/HttpStatus Z [ OK %Lorg/springframework/http/HttpStatus; % ] ^ _ 
setStatusCode ,(Lorg/springframework/http/HttpStatusCode;)Z % a b c setComplete ()Lreactor/core/publisher/Mono; e g f -org/springframework/web/server/WebFilterChain  h Q(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono; exchange 2Lorg/springframework/web/server/ServerWebExchange; chain /Lorg/springframework/web/server/WebFilterChain; 
StackMapTable 
SourceFile WebConfig.java BootstrapMethods
 r t s "java/lang/invoke/LambdaMetafactory u v metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; q 
  z   y  InnerClasses  %java/lang/invoke/MethodHandles$Lookup  java/lang/invoke/MethodHandles Lookup !                	   F     
*· 
*+µ 
±           	  
 	         
       
                       	   /     *´ 
°                                    	   0     º   °                       
    	   Ü     *¹  ¹ $ *,¶ .*¹  ¹ $ 46¶ .*¹  ¹ $ 8,¶ .*¹  ¹ $ :<¶ .*¹ > ¹ B ¶ HN¶ P *¹  ² V¹ \ W*¹  ¹ ` °+*¹ d °       "       $  6  H  ^  m  y          i j      k l  m    û y  n    o p     w  x { | }   
  ~   
```
```java
Êþº¾   = ð  2br/com/legalconnect/auth/controller/AuthController  java/lang/Object log Lorg/slf4j/Logger; authService .Lbr/com/legalconnect/auth/service/AuthService; <clinit> ()V Code
 
   org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable authenticate Y(Lbr/com/legalconnect/auth/dto/LoginRequestDTO;)Lorg/springframework/http/ResponseEntity; 	Signature µ(Lbr/com/legalconnect/auth/dto/LoginRequestDTO;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/auth/dto/AuthResponse;>;>; RuntimeVisibleAnnotations 5Lorg/springframework/web/bind/annotation/PostMapping; value /login "RuntimeVisibleParameterAnnotations Ljakarta/validation/Valid; 5Lorg/springframework/web/bind/annotation/RequestBody; " 0RequisiÃ§Ã£o de login recebida para o e-mail: {}
 $ & % ,br/com/legalconnect/auth/dto/LoginRequestDTO ' ( getEmail ()Ljava/lang/String; * , + org/slf4j/Logger - . info '(Ljava/lang/String;Ljava/lang/Object;)V
 0 2 1 java/lang/System 3 4 currentTimeMillis ()J	  6  
 8 : 9 ,br/com/legalconnect/auth/service/AuthService  ; ](Lbr/com/legalconnect/auth/dto/LoginRequestDTO;)Lbr/com/legalconnect/common/dto/BaseResponse; = 8Login para o e-mail '{}' processado em {} ms. Status: {}
 ? A @ java/lang/Long B C valueOf (J)Ljava/lang/Long; E Sucesso * G - H ((Ljava/lang/String;[Ljava/lang/Object;)V
 J L K 'org/springframework/http/ResponseEntity M N ok =(Ljava/lang/Object;)Lorg/springframework/http/ResponseEntity; this 4Lbr/com/legalconnect/auth/controller/AuthController; request .Lbr/com/legalconnect/auth/dto/LoginRequestDTO; 	startTime J response -Lbr/com/legalconnect/common/dto/BaseResponse; endTime LocalVariableTypeTable ZLbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/auth/dto/AuthResponse;>; RuntimeVisibleTypeAnnotations MethodParameters refreshToken `(Lbr/com/legalconnect/auth/dto/RefreshTokenRequestDTO;)Lorg/springframework/http/ResponseEntity; ¼(Lbr/com/legalconnect/auth/dto/RefreshTokenRequestDTO;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/auth/dto/AuthResponse;>;>; /refresh-token a 'RequisiÃ§Ã£o de refresh token recebida. * c - d (Ljava/lang/String;)V
 8 f \ g d(Lbr/com/legalconnect/auth/dto/RefreshTokenRequestDTO;)Lbr/com/legalconnect/common/dto/BaseResponse; i -Refresh token processado em {} ms. Status: {} * k - l 9(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V 5Lbr/com/legalconnect/auth/dto/RefreshTokenRequestDTO; registerClient a(Lbr/com/legalconnect/auth/dto/UserRegistrationRequest;)Lorg/springframework/http/ResponseEntity; À(Lbr/com/legalconnect/auth/dto/UserRegistrationRequest;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/auth/dto/UserResponseDTO;>;>; /clientes/registrar s >RequisiÃ§Ã£o de registro de cliente recebida para o e-mail: {}
 u & v 4br/com/legalconnect/auth/dto/UserRegistrationRequest
 8 x n y f(Lbr/com/legalconnect/auth/dto/UserRegistrationRequest;)Lbr/com/legalconnect/auth/dto/UserResponseDTO; { KRegistro de cliente para o e-mail '{}' processado em {} ms. Status: Sucesso
 }  ~ +br/com/legalconnect/common/dto/BaseResponse   builder C()Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
    ?br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder   data U(Ljava/lang/Object;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;  Cliente registrado com sucesso!
     message U(Ljava/lang/String;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;	    (br/com/legalconnect/enums/StatusResponse   SUCESSO *Lbr/com/legalconnect/enums/StatusResponse;
     status m(Lbr/com/legalconnect/enums/StatusResponse;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
     build /()Lbr/com/legalconnect/common/dto/BaseResponse; 6Lbr/com/legalconnect/auth/dto/UserRegistrationRequest; registeredUser .Lbr/com/legalconnect/auth/dto/UserResponseDTO; registerAdvogado /advogados/registrar ¢ ?RequisiÃ§Ã£o de registro de advogado recebida para o e-mail: {}
 8 ¤  y ¦ LRegistro de advogado para o e-mail '{}' processado em {} ms. Status: Sucesso ¨ =Advogado prÃ©-registrado com sucesso! Aguardando aprovaÃ§Ã£o. 
registerSocio /socios/registrar ¬ =RequisiÃ§Ã£o de registro de sÃ³cio recebida para o e-mail: {}
 8 ® © y ° JRegistro de sÃ³cio para o e-mail '{}' processado em {} ms. Status: Sucesso ² 6SÃ³cio registrado com sucesso! Aguardando aprovaÃ§Ã£o. 
registerAdmin /administradores/registrar ¶ DRequisiÃ§Ã£o de registro de administrador recebida para o e-mail: {}
 8 ¸ ³ y º QRegistro de administrador para o e-mail '{}' processado em {} ms. Status: Sucesso ¼ =Administrador registrado com sucesso! Aguardando aprovaÃ§Ã£o. recoverPassword `(Lbr/com/legalconnect/auth/dto/RecoverPasswordRequest;)Lorg/springframework/http/ResponseEntity; ¡(Lbr/com/legalconnect/auth/dto/RecoverPasswordRequest;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/lang/Void;>;>; /senhas/recuperar Â ARequisiÃ§Ã£o de recuperaÃ§Ã£o de senha recebida para o e-mail: {}
 Ä & Å 3br/com/legalconnect/auth/dto/RecoverPasswordRequest
 8 Ç ½ d É ZProcesso de recuperaÃ§Ã£o de senha para o e-mail '{}' processado em {} ms. Status: Sucesso Ë NSe o e-mail estiver cadastrado, um link de redefiniÃ§Ã£o de senha foi enviado. 5Lbr/com/legalconnect/auth/dto/RecoverPasswordRequest; 
resetPassword ^(Lbr/com/legalconnect/auth/dto/ResetPasswordRequest;)Lorg/springframework/http/ResponseEntity; (Lbr/com/legalconnect/auth/dto/ResetPasswordRequest;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/lang/Void;>;>; /senhas/redefinir Ò :RequisiÃ§Ã£o de redefiniÃ§Ã£o de senha recebida com token.
 Ô Ö Õ 1br/com/legalconnect/auth/dto/ResetPasswordRequest × ( getToken
 Ô Ù Ú ( getNovaSenha
 8 Ü Í Ý '(Ljava/lang/String;Ljava/lang/String;)V ß ;RedefiniÃ§Ã£o de senha processada em {} ms. Status: Sucesso á Senha redefinida com sucesso! 3Lbr/com/legalconnect/auth/dto/ResetPasswordRequest; <init> 1(Lbr/com/legalconnect/auth/service/AuthService;)V RuntimeInvisibleAnnotations Llombok/Generated;
  è ã 
 
SourceFile AuthController.java 8Lorg/springframework/web/bind/annotation/RestController; 8Lorg/springframework/web/bind/annotation/RequestMapping; /api/v1/auth InnerClasses BaseResponseBuilder !                
  	 
     )      	¸ ³ ±           %                       [ s                 Ï 	    K² !+¶ #¹ ) ¸ /A*´ 5+¶ 7:¸ /7² <½ Y+¶ #SY e¸ >SYDS¹ F ¸ I°       & 	   1  2  3  4 ! 5 3 6 = 7 @ 5 E 8    4    K O P     K Q R   9 S T   / U V  ! * W T  X      / U Y  Z   	       [    Q    \ ]      ^        [ s _                ®     6² `¹ b ¸ /A*´ 5+¶ e:¸ /7² h e¸ >D¹ j ¸ I°           D 
 E  F  G  H 0 I    4    6 O P     6 Q m   ( S T    U V    W T  X       U Y  Z   	       [    Q    n o      p        [ s q                Ö     P² r+¶ t¹ ) ¸ /A*´ 5+¶ w:¸ /7² z+¶ t e¸ >¹ j ¸ |¶ ¶ ² ¶ ¶ ¸ I°       :    U  V  W  X ! Y & Z * [ 1 Y 6 \ 9 ] > ^ C _ I ` L \    4    P O P     P Q    > S T   4    ! / W T  Z   	       [    Q     o      p        [ s                  Ö     P² ¡+¶ t¹ ) ¸ /A*´ 5+¶ £:¸ /7² ¥+¶ t e¸ >¹ j ¸ |¶ §¶ ² ¶ ¶ ¸ I°       :    l  m  n  o ! p & q * r 1 p 6 s 9 t > u C v I w L s    4    P O P     P Q    > S T   4    ! / W T  Z   	       [    Q    © o      p        [ s ª                Ö     P² «+¶ t¹ ) ¸ /A*´ 5+¶ ­:¸ /7² ¯+¶ t e¸ >¹ j ¸ |¶ ±¶ ² ¶ ¶ ¸ I°       :           !  &  *  1  6  9  >  C  I  L     4    P O P     P Q    > S T   4    ! / W T  Z   	       [    Q    ³ o      p        [ s ´                Ò     P² µ+¶ t¹ ) ¸ /A*´ 5+¶ ·:¸ /7² ¹+¶ t e¸ >¹ j ¸ |¶ »¶ ² ¶ ¶ ¸ I°       6 
          !  &  1  6   9 ¡ > ¢ C £ I ¤ L      4    P O P     P Q    > S T   4    ! / W T  Z   	       [    Q    ½ ¾      ¿        [ s À                À     L² Á+¶ Ã¹ ) ¸ /A*´ 5+¶ Ã¶ Æ¸ /7² È+¶ Ã e¸ >¹ j ¸ |Ê¶ ² ¶ ¶ ¸ I°       2    ¯  °  ±  ² " ³ ' ´ 2 ³ 7 µ : ¶ ? · E ¸ H µ    *    L O P     L Q Ì   : S T  " * W T  Z   	       [    Q    Í Î      Ï        [ s Ð                ´     H² Ñ¹ b ¸ /A*´ 5+¶ Ó+¶ Ø¶ Û¸ /7² Þ e¸ >¹ ) ¸ |à¶ ² ¶ ¶ ¸ I°       * 
   Ã 
 Ä  Å  Æ " Ç 3 È 6 É ; Ê A Ë D È    *    H O P     H Q â   : S T  " & W T  Z   	       [    Q    ã ä  å     æ      >     
*· ç*+µ 5±           "        
 O P     
    [       é    ê      ë   ì  [ s í î   
   } ï 	
```
```java
Êþº¾   = G  =br/com/legalconnect/auth/dto/AuthResponse$AuthResponseBuilder  java/lang/Object accessToken Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; refreshToken 	tokenType 	expiresIn Ljava/lang/Long; <init> ()V Code
   
  LineNumberTable LocalVariableTable this ?Lbr/com/legalconnect/auth/dto/AuthResponse$AuthResponseBuilder; S(Ljava/lang/String;)Lbr/com/legalconnect/auth/dto/AuthResponse$AuthResponseBuilder;	     MethodParameters	   	 	   
  Q(Ljava/lang/Long;)Lbr/com/legalconnect/auth/dto/AuthResponse$AuthResponseBuilder;	      build -()Lbr/com/legalconnect/auth/dto/AuthResponse; $ )br/com/legalconnect/auth/dto/AuthResponse
 # & 
 ' I(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)V toString ()Ljava/lang/String;
 + - , java/lang/String . / valueOf &(Ljava/lang/Object;)Ljava/lang/String;   1 2 3 makeConcatWithConstants \(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile AuthResponse.java BootstrapMethods
 8 : 9 $java/lang/invoke/StringConcatFactory 2 ; (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 7 > YAuthResponse.AuthResponseBuilder(accessToken=, refreshToken=, tokenType=, expiresIn=) InnerClasses AuthResponseBuilder B %java/lang/invoke/MethodHandles$Lookup D java/lang/invoke/MethodHandles Lookup NestHost !                   	            
                          
              /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	       	   
              ;     *+µ *°                           
       
                 ;     *+µ *°                                     ! "             B     » #Y*´ *´ *´ *´ · %°                         ( )             C     *´ *´ *´ *´ ¸ *º 0  °                         4    5         6     <  = ?      # @ 	 A C E  F    #
```
```java
Êþº¾   = w  )br/com/legalconnect/auth/dto/AuthResponse  java/lang/Object accessToken Ljava/lang/String; refreshToken 	tokenType 	expiresIn Ljava/lang/Long; builder A()Lbr/com/legalconnect/auth/dto/AuthResponse$AuthResponseBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  =br/com/legalconnect/auth/dto/AuthResponse$AuthResponseBuilder
     <init> ()V LineNumberTable LocalVariableTable getAccessToken ()Ljava/lang/String;	     this +Lbr/com/legalconnect/auth/dto/AuthResponse; getRefreshToken	      getTokenType	  #   getExpiresIn ()Ljava/lang/Long;	  ' 	 
 setAccessToken (Ljava/lang/String;)V MethodParameters setRefreshToken setTokenType setExpiresIn (Ljava/lang/Long;)V equals (Ljava/lang/Object;)Z
  2 3 0 canEqual
  5 $ %
  7 / 0
  9  
  ;  
  = !  o Ljava/lang/Object; other this$expiresIn other$expiresIn this$accessToken other$accessToken this$refreshToken other$refreshToken this$tokenType other$tokenType 
StackMapTable hashCode ()I
  M J K PRIME I result 
$expiresIn $accessToken 
$refreshToken 
$tokenType toString
 W Y X java/lang/String Z [ valueOf &(Ljava/lang/Object;)Ljava/lang/String;   ] ^ _ makeConcatWithConstants \(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
   b Bearer I(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)V 
SourceFile AuthResponse.java BootstrapMethods
 h j i $java/lang/invoke/StringConcatFactory ^ k (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; g n EAuthResponse(accessToken=, refreshToken=, tokenType=, expiresIn=) InnerClasses AuthResponseBuilder r %java/lang/invoke/MethodHandles$Lookup t java/lang/invoke/MethodHandles Lookup NestMembers !                      	 
    	    
           (      » Y· °                      
           /     *´ °                            
           /     *´ °                         !   
           /     *´ "°                         $ %  
           /     *´ &°                         ( )  
           :     *+µ ±                              *       + )  
           :     *+µ ±                              *       , )  
           :     *+µ "±                              *       - .  
           :     *+µ &±                           	 
  *    	   / 0  
          |     ²+*¦ ¬+Á  ¬+À M,*¶ 1 ¬*¶ 4N,¶ 4:-Ç Æ § -¶ 6 ¬*¶ 8:,¶ 8:Ç Æ § 
¶ 6 ¬*¶ ::,¶ ::Ç Æ § 
¶ 6 ¬*¶ <:	,¶ <:
	Ç 
Æ § 
	
¶ 6 ¬¬               p    ²       ² > ?    @   $  A ?  *  B ?  G k C ?  M e D ?  l F E ?  r @ F ?   ! G ? 	   H ? 
 I   6 ü  ý   ý   	ý   	ý   	 *    >   3 0  
           9     +Á ¬                           @ ?  *    @   J K  
               p;<=*¶ 4N;h-Ç +§ -¶ L`=*¶ 8:;hÇ +§ ¶ L`=*¶ ::;hÇ +§ ¶ L`=*¶ <:;hÇ +§ ¶ L`=¬               H    p      m N O   k P O  
 f Q ?  # M R ?  > 2 S ?  Y  T ?  I   ª ÿ     ÿ     ÿ      ÿ      ÿ       ÿ       ÿ        ÿ          U   
           C     *¶ 8*¶ :*¶ <*¶ 4¸ Vº \  °                            
           =     *· `*aµ "±           
   
 
               c  
           z      *· `*aµ "*+µ *,µ *-µ "*µ &±              
     4                                   	 
  *          	   d    e f     l  m o       p 	 q s u  v     
```
```java
Êþº¾   = |  )br/com/legalconnect/auth/dto/EmailRequest  java/lang/Object to Ljava/lang/String; subject htmlBody templateName templateVariables Ljava/util/Map; 	Signature 5Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>; getTo ()Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; Code	     LineNumberTable LocalVariableTable this +Lbr/com/legalconnect/auth/dto/EmailRequest; 
getSubject	     getHtmlBody	     getTemplateName	  ! 	  getTemplateVariables ()Ljava/util/Map; 7()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;	  & 
  setTo (Ljava/lang/String;)V MethodParameters 
setSubject setHtmlBody setTemplateName setTemplateVariables (Ljava/util/Map;)V 8(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V LocalVariableTypeTable equals (Ljava/lang/Object;)Z
  4 5 2 canEqual
  7  
  9 1 2
  ;  
  =  
  ?  
  A " # o Ljava/lang/Object; other this$to other$to this$subject 
other$subject 
this$htmlBody other$htmlBody this$templateName other$templateName this$templateVariables other$templateVariables 
StackMapTable hashCode ()I
  S P Q PRIME I result $to $subject 	$htmlBody 
$templateName $templateVariables toString
 ^ ` _ java/lang/String a b valueOf &(Ljava/lang/Object;)Ljava/lang/String;   d e f makeConcatWithConstants n(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; <init> ()V
  j g h 
SourceFile EmailRequest.java BootstrapMethods
 o q p $java/lang/invoke/StringConcatFactory e r (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; n u NEmailRequest(to=, subject=, htmlBody=, templateName=, templateVariables=) InnerClasses x %java/lang/invoke/MethodHandles$Lookup z java/lang/invoke/MethodHandles Lookup !                      	     
       
                 /     *´ °                                       /     *´ °                                       /     *´ °                                       /     *´  °                         " #      $            /     *´ %°                         ' (             :     *+µ ±                              )       * (             :     *+µ ±                              )       + (             :     *+µ ±                              )       , (             :     *+µ  ±                           	   )    	   - .      /            L     *+µ %±                           
   0        
 
  )    
   1 2            À  
   ×+*¦ ¬+Á  ¬+À M,*¶ 3 ¬*¶ 6N,¶ 6:-Ç Æ § -¶ 8 ¬*¶ ::,¶ ::Ç Æ § 
¶ 8 ¬*¶ <:,¶ <:Ç Æ § 
¶ 8 ¬*¶ >:	,¶ >:
	Ç 
Æ § 
	
¶ 8 ¬*¶ @:,¶ @:Ç Æ § 
¶ 8 ¬¬                
   ×       × B C   Â D   $ ³ E C  * ­ F C  G  G C  M  H C  l k I C  r e J C   F K C 	  @ L C 
 ¶ ! M C  ¼  N C  O   A ü  ý   ý   	ý   	ý   	ý   	 )    B   5 2             9     +Á ¬                           D C  )    D   P Q            ä     ;<=*¶ 6N;h-Ç +§ -¶ R`=*¶ ::;hÇ +§ ¶ R`=*¶ <:;hÇ +§ ¶ R`=*¶ >:;hÇ +§ ¶ R`=*¶ @:;hÇ +§ ¶ R`=¬               R           T U    V U  
  W C  # h X C  > M Y C  Y 2 Z C  t  [ C  O   ã 
ÿ     ÿ     ÿ      ÿ      ÿ       ÿ       ÿ        ÿ        ÿ         ÿ           \              G     *¶ 6*¶ :*¶ <*¶ >*¶ @¸ ]º c  °                         g h             /     *· i±                         k    l m     s  t v   
  w y { 
```
```java
Êþº¾   = Y  ,br/com/legalconnect/auth/dto/LoginRequestDTO  java/lang/Object email Ljava/lang/String; RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message O e-mail Ã© obrigatÃ³rio. &Ljakarta/validation/constraints/Email; Formato de e-mail invÃ¡lido. RuntimeVisibleTypeAnnotations senha A senha Ã© obrigatÃ³ria. getEmail ()Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; Code	     LineNumberTable LocalVariableTable this .Lbr/com/legalconnect/auth/dto/LoginRequestDTO; getSenha	     setEmail (Ljava/lang/String;)V MethodParameters setSenha equals (Ljava/lang/Object;)Z
  % & # canEqual
  (  
  * " #
  ,   o Ljava/lang/Object; other 
this$email other$email 
this$senha other$senha 
StackMapTable hashCode ()I
  8 5 6 PRIME I result $email $senha toString   @ A B makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; <init> ()V
  F C D '(Ljava/lang/String;Ljava/lang/String;)V 
SourceFile LoginRequestDTO.java BootstrapMethods
 L N M $java/lang/invoke/StringConcatFactory A O (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; K R !LoginRequestDTO(email=, senha=) InnerClasses U %java/lang/invoke/MethodHandles$Lookup W java/lang/invoke/MethodHandles Lookup !                 	s 
   	s  
        	s 
    	s             	s  
   
     	s  
                /     *´ °           
                            /     *´ °           
                            :     *+µ ±           
                           !              :     *+µ ±           
                           " #             ô     h+*¦ ¬+Á  ¬+À M,*¶ $ ¬*¶ 'N,¶ ':-Ç Æ § -¶ ) ¬*¶ +:,¶ +:Ç Æ § 
¶ ) ¬¬           
    H    h       h - .   S /   $ D 0 .  * > 1 .  G ! 2 .  M  3 .  4     	ü  ý   ý   	      -   & #             9     +Á ¬           
                / .       /   5 6             Ü     :;<=*¶ 'N;h-Ç +§ -¶ 7`=*¶ +:;hÇ +§ ¶ 7`=¬           
    4    :      7 9 :   5 ; :  
 0 < .  #  = .  4   J ÿ     ÿ     ÿ      ÿ        >              8     *¶ '*¶ +º ?  °           
              C D             /     *· E±                         C G             M     *· E*+µ *,µ ±                                         	      H    I J     P  Q S   
  T V X 
```
```java
Êþº¾   = M  3br/com/legalconnect/auth/dto/RecoverPasswordRequest  java/lang/Object email Ljava/lang/String; RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message O e-mail Ã© obrigatÃ³rio. &Ljakarta/validation/constraints/Email; Formato de e-mail invÃ¡lido. RuntimeVisibleTypeAnnotations getEmail ()Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; Code	     LineNumberTable LocalVariableTable this 5Lbr/com/legalconnect/auth/dto/RecoverPasswordRequest; setEmail (Ljava/lang/String;)V MethodParameters equals (Ljava/lang/Object;)Z
      canEqual
  "  
  $   o Ljava/lang/Object; other 
this$email other$email 
StackMapTable hashCode ()I
  . + , PRIME I result $email toString   5 6 7 makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String; <init> ()V
  ; 8 9 
SourceFile RecoverPasswordRequest.java BootstrapMethods
 @ B A $java/lang/invoke/StringConcatFactory 6 C (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; ? F RecoverPasswordRequest(email=) InnerClasses I %java/lang/invoke/MethodHandles$Lookup K java/lang/invoke/MethodHandles Lookup !                 	s 
   	s  
        	s 
    	s                  /     *´ °                                       :     *+µ ±                                                   °     C+*¦ ¬+Á  ¬+À M,*¶  ¬*¶ !N,¶ !:-Ç Æ § -¶ # ¬¬               4    C       C % &   . '   $  ( &  *  ) &  *    ü  ý        %                  9     +Á ¬                           ' &      '   + ,                  ;<=*¶ !N;h-Ç +§ -¶ -`=¬               *           / 0    1 0  
  2 &  *   # ÿ     ÿ       3              4     
*¶ !º 4  °                   
      8 9             /     *· :±                         8              >     
*· :*+µ ±                   
       
           <    = >     D  E G   
  H J L 
```
```java
Êþº¾   = K  3br/com/legalconnect/auth/dto/RefreshTokenRequestDTO  java/lang/Object refreshToken Ljava/lang/String; RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message  O refresh token Ã© obrigatÃ³rio. RuntimeVisibleTypeAnnotations getRefreshToken ()Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; Code	     LineNumberTable LocalVariableTable this 5Lbr/com/legalconnect/auth/dto/RefreshTokenRequestDTO; setRefreshToken (Ljava/lang/String;)V MethodParameters equals (Ljava/lang/Object;)Z
     canEqual
     
  "   o Ljava/lang/Object; other this$refreshToken other$refreshToken 
StackMapTable hashCode ()I
  , ) * PRIME I result 
$refreshToken toString   3 4 5 makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String; <init> ()V
  9 6 7 
SourceFile RefreshTokenRequestDTO.java BootstrapMethods
 > @ ? $java/lang/invoke/StringConcatFactory 4 A (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; = D &RefreshTokenRequestDTO(refreshToken=) InnerClasses G %java/lang/invoke/MethodHandles$Lookup I java/lang/invoke/MethodHandles Lookup !                 	s 
    
     	s 
    
             /     *´ °                                       :     *+µ ±                                                   °     C+*¦ ¬+Á  ¬+À M,*¶  ¬*¶ N,¶ :-Ç Æ § -¶ ! ¬¬               4    C       C # $   . %   $  & $  *  ' $  (    ü  ý        #                 9     +Á ¬                           % $      %   ) *                  ;<=*¶ N;h-Ç +§ -¶ +`=¬               *           - .    / .  
  0 $  (   # ÿ     ÿ       1 
             4     
*¶ º 2  °                   
      6 7             /     *· 8±           
              6              >     
*· 8*+µ ±                   
       
           :    ; <     B  C E   
  F H J 
```
```java
Êþº¾   = [  1br/com/legalconnect/auth/dto/ResetPasswordRequest  java/lang/Object token Ljava/lang/String; RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message )O token de redefiniÃ§Ã£o Ã© obrigatÃ³rio. RuntimeVisibleTypeAnnotations 	novaSenha A nova senha Ã© obrigatÃ³ria. %Ljakarta/validation/constraints/Size; min    .A nova senha deve ter no mÃ­nimo 8 caracteres. getToken ()Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; Code	     LineNumberTable LocalVariableTable this 3Lbr/com/legalconnect/auth/dto/ResetPasswordRequest; getNovaSenha	     setToken (Ljava/lang/String;)V MethodParameters setNovaSenha equals (Ljava/lang/Object;)Z
  ' ( % canEqual
  *  
  , $ %
  .   o Ljava/lang/Object; other 
this$token other$token this$novaSenha other$novaSenha 
StackMapTable hashCode ()I
  : 7 8 PRIME I result $token 
$novaSenha toString   B C D makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; <init> ()V
  H E F '(Ljava/lang/String;Ljava/lang/String;)V 
SourceFile ResetPasswordRequest.java BootstrapMethods
 N P O $java/lang/invoke/StringConcatFactory C Q (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; M T *ResetPasswordRequest(token=, novaSenha=) InnerClasses W %java/lang/invoke/MethodHandles$Lookup Y java/lang/invoke/MethodHandles Lookup !                 	s 
    
     	s 
            	s 
   I  	s          	s 
    I  	s  
                /     *´ °                                       /     *´ °                           !             :     *+µ ±                              "       # !             :     *+µ ±                              "       $ %             ô     h+*¦ ¬+Á  ¬+À M,*¶ & ¬*¶ )N,¶ ):-Ç Æ § -¶ + ¬*¶ -:,¶ -:Ç Æ § 
¶ + ¬¬               H    h       h / 0   S 1   $ D 2 0  * > 3 0  G ! 4 0  M  5 0  6     	ü  ý   ý   	 "    /   ( %             9     +Á ¬                           1 0  "    1   7 8             Ü     :;<=*¶ )N;h-Ç +§ -¶ 9`=*¶ -:;hÇ +§ ¶ 9`=¬               4    :      7 ; <   5 = <  
 0 > 0  #  ? 0  6   J ÿ     ÿ     ÿ      ÿ        @              8     *¶ )*¶ -º A  °                         E F             /     *· G±                         E I             M     *· G*+µ *,µ ±                                     "   	      J    K L     R  S U   
  V X Z 
```
```java
Êþº¾   = E  Gbr/com/legalconnect/auth/dto/UserProfileUpdate$UserProfileUpdateBuilder  java/lang/Object nomeCompleto Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; email telefone fotoUrl 
senhaAtual 	novaSenha <init> ()V Code
     LineNumberTable LocalVariableTable this ILbr/com/legalconnect/auth/dto/UserProfileUpdate$UserProfileUpdateBuilder; ](Ljava/lang/String;)Lbr/com/legalconnect/auth/dto/UserProfileUpdate$UserProfileUpdateBuilder;	     MethodParameters	   	 	   
 	     	  "  	  $ 
  build 2()Lbr/com/legalconnect/auth/dto/UserProfileUpdate; ( .br/com/legalconnect/auth/dto/UserProfileUpdate
 ' *  + o(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V toString ()Ljava/lang/String;   / 0 1 makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile UserProfileUpdate.java BootstrapMethods
 6 8 7 $java/lang/invoke/StringConcatFactory 0 9 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 5 < uUserProfileUpdate.UserProfileUpdateBuilder(nomeCompleto=, email=, telefone=, fotoUrl=, senhaAtual=, novaSenha=) InnerClasses UserProfileUpdateBuilder @ %java/lang/invoke/MethodHandles$Lookup B java/lang/invoke/MethodHandles Lookup NestHost !                   	            
                                    
           	                 /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	       	   
              ;     *+µ *°                           
       
                 ;     *+µ *°                                                   ;     *+µ !*°                                     
              ;     *+µ #*°                           
       
   % &             J      » 'Y*´ *´ *´ *´ *´ !*´ #· )°                          , -             H     *´ *´ *´ *´ *´ !*´ #º .  °                         2    3         4     :  ; =      ' > 	 ? A C  D    '
```
```java
Êþº¾   = M  .br/com/legalconnect/auth/dto/UserProfileUpdate  java/lang/Object nomeCompleto Ljava/lang/String; RuntimeVisibleAnnotations %Ljakarta/validation/constraints/Size; max   ÿ message 3O nome completo deve ter no mÃ¡ximo 255 caracteres. RuntimeVisibleTypeAnnotations email &Ljakarta/validation/constraints/Email; Formato de e-mail invÃ¡lido. ,O e-mail deve ter no mÃ¡ximo 255 caracteres. telefone    -O telefone deve ter no mÃ¡ximo 20 caracteres. fotoUrl 1A URL da foto deve ter no mÃ¡ximo 255 caracteres. 
senhaAtual 	novaSenha min    .A nova senha deve ter no mÃ­nimo 8 caracteres. builder K()Lbr/com/legalconnect/auth/dto/UserProfileUpdate$UserProfileUpdateBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code " Gbr/com/legalconnect/auth/dto/UserProfileUpdate$UserProfileUpdateBuilder
 ! $ % & <init> ()V LineNumberTable LocalVariableTable getNomeCompleto ()Ljava/lang/String;	  ,   this 0Lbr/com/legalconnect/auth/dto/UserProfileUpdate; getEmail	  1   getTelefone	  4   
getFotoUrl	  7   
getSenhaAtual	  :   getNovaSenha	  =   setNomeCompleto (Ljava/lang/String;)V MethodParameters setEmail setTelefone 
setFotoUrl 
setSenhaAtual setNovaSenha
  $ o(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V 
SourceFile UserProfileUpdate.java InnerClasses UserProfileUpdateBuilder NestMembers !                 	I 
 s  
        	I 
 s             s    	I 
 s  
        s     	I 
 s             	I  s  
        	I  s             	I 
 s  
        	I 
 s                  I  s  
        I  s   	                (      » !Y· #°    '        (       ) *              /     *´ +°    '        (        - .    / *              /     *´ 0°    '        (        - .    2 *              /     *´ 3°    '        (        - .    5 *              /     *´ 6°    '        (        - .    8 *              /     *´ 9°    '        (        - .    ; *              /     *´ <°    '        (        - .    > ?              :     *+µ +±    '        (        - .         @       A ?              :     *+µ 0±    '        (        - .         @       B ?              :     *+µ 3±    '        (        - .         @       C ?              :     *+µ 6±    '        (        - .         @       D ?              :     *+µ 9±    '        (        - .         @       E ?              :     *+µ <±    '        (        - .         @       % &              /     *· F±    '        (        - .    % G                   &*· F*+µ +*,µ 0*-µ 3*µ 6*µ 9*µ <±    '        (   H    & - .     &      &      &      &      &      &    @                 H    I J   
  !  K 	 L     !
```
```java
Êþº¾   = E  Sbr/com/legalconnect/auth/dto/UserRegistrationRequest$UserRegistrationRequestBuilder  java/lang/Object nomeCompleto Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; email cpf telefone senha userType <init> ()V Code
     LineNumberTable LocalVariableTable this ULbr/com/legalconnect/auth/dto/UserRegistrationRequest$UserRegistrationRequestBuilder; i(Ljava/lang/String;)Lbr/com/legalconnect/auth/dto/UserRegistrationRequest$UserRegistrationRequestBuilder;	     MethodParameters	   	 	   
 	     	  "  	  $ 
  build 8()Lbr/com/legalconnect/auth/dto/UserRegistrationRequest; ( 4br/com/legalconnect/auth/dto/UserRegistrationRequest
 ' *  + o(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V toString ()Ljava/lang/String;   / 0 1 makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile UserRegistrationRequest.java BootstrapMethods
 6 8 7 $java/lang/invoke/StringConcatFactory 0 9 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 5 < wUserRegistrationRequest.UserRegistrationRequestBuilder(nomeCompleto=, email=, cpf=, telefone=, senha=, userType=) InnerClasses UserRegistrationRequestBuilder @ %java/lang/invoke/MethodHandles$Lookup B java/lang/invoke/MethodHandles Lookup NestHost !                   	            
                                    
           	                 /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	       	   
              ;     *+µ *°                           
       
                 ;     *+µ *°                                                   ;     *+µ !*°                                     
              ;     *+µ #*°                           
       
   % &             J      » 'Y*´ *´ *´ *´ *´ !*´ #· )°                          , -             H     *´ *´ *´ *´ *´ !*´ #º .  °                         2    3         4     :  ; =      ' > 	 ? A C  D    '
```
```java
Êþº¾   = V  4br/com/legalconnect/auth/dto/UserRegistrationRequest  java/lang/Object nomeCompleto Ljava/lang/String; RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message  O nome completo Ã© obrigatÃ³rio. %Ljakarta/validation/constraints/Size; max   ÿ 3O nome completo deve ter no mÃ¡ximo 255 caracteres. RuntimeVisibleTypeAnnotations email O e-mail Ã© obrigatÃ³rio. &Ljakarta/validation/constraints/Email; Formato de e-mail invÃ¡lido. ,O e-mail deve ter no mÃ¡ximo 255 caracteres. cpf O CPF Ã© obrigatÃ³rio. (Ljakarta/validation/constraints/Pattern; regexp ^\d{3}\.\d{3}\.\d{3}-\d{2}$ ,Formato de CPF invÃ¡lido. Use XXX.XXX.XXX-XX telefone    -O telefone deve ter no mÃ¡ximo 20 caracteres. senha A senha Ã© obrigatÃ³ria. min    )A senha deve ter no mÃ­nimo 8 caracteres. userType #O tipo de usuÃ¡rio Ã© obrigatÃ³rio. builder W()Lbr/com/legalconnect/auth/dto/UserRegistrationRequest$UserRegistrationRequestBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code + Sbr/com/legalconnect/auth/dto/UserRegistrationRequest$UserRegistrationRequestBuilder
 * - . / <init> ()V LineNumberTable LocalVariableTable getNomeCompleto ()Ljava/lang/String;	  5   this 6Lbr/com/legalconnect/auth/dto/UserRegistrationRequest; getEmail	  :   getCpf	  =   getTelefone	  @   getSenha	  C   getUserType	  F #  setNomeCompleto (Ljava/lang/String;)V MethodParameters setEmail setCpf setTelefone setSenha setUserType
  - o(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V 
SourceFile UserRegistrationRequest.java InnerClasses UserRegistrationRequestBuilder NestMembers !                 	s 
   I 
 	s          	s 
    I 
 	s         "    	s    	s    I 
 	s     (     	s     	s     I 
 	s             	s    s  	s          	s     s  	s             I  	s          I  	s             	s     I ! 	s "         	s      I ! 	s "  #          	s $    
     	s $  	 % &  '     (   )   (      » *Y· ,°    0        1       2 3  '     (   )   /     *´ 4°    0        1        6 7    8 3  '     (   )   /     *´ 9°    0        1        6 7    ; 3  '     (   )   /     *´ <°    0        1        6 7    > 3  '     (   )   /     *´ ?°    0        1        6 7    A 3  '     (   )   /     *´ B°    0        1        6 7    D 3  '     (   )   /     *´ E°    0        1        6 7    G H  '     (   )   :     *+µ 4±    0        1        6 7         I       J H  '     (   )   :     *+µ 9±    0        1        6 7         I       K H  '     (   )   :     *+µ <±    0        1        6 7         I       L H  '     (   )   :     *+µ ?±    0        1        6 7         I       M H  '     (   )   :     *+µ B±    0        1        6 7         I       N H  '     (   )   :     *+µ E±    0        1        6 7      #   I    #   . /  '     (   )   /     *· O±    0        1        6 7    . P  '     (   )        &*· O*+µ 4*,µ 9*-µ <*µ ?*µ B*µ E±    0        1   H    & 6 7     &      &      &      &      &      & #   I              #   Q    R S   
  *  T 	 U     *
```
```java
Êþº¾   = E  Cbr/com/legalconnect/auth/dto/UserResponseDTO$UserResponseDTOBuilder  java/lang/Object nomeCompleto Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; email cpf telefone fotoUrl status <init> ()V Code
     LineNumberTable LocalVariableTable this ELbr/com/legalconnect/auth/dto/UserResponseDTO$UserResponseDTOBuilder; Y(Ljava/lang/String;)Lbr/com/legalconnect/auth/dto/UserResponseDTO$UserResponseDTOBuilder;	     MethodParameters	   	 	   
 	     	  "  	  $ 
  build 0()Lbr/com/legalconnect/auth/dto/UserResponseDTO; ( ,br/com/legalconnect/auth/dto/UserResponseDTO
 ' *  + o(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V toString ()Ljava/lang/String;   / 0 1 makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile UserResponseDTO.java BootstrapMethods
 6 8 7 $java/lang/invoke/StringConcatFactory 0 9 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 5 < gUserResponseDTO.UserResponseDTOBuilder(nomeCompleto=, email=, cpf=, telefone=, fotoUrl=, status=) InnerClasses UserResponseDTOBuilder @ %java/lang/invoke/MethodHandles$Lookup B java/lang/invoke/MethodHandles Lookup NestHost !                   	            
                                    
           	                 /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	       	   
              ;     *+µ *°                           
       
                 ;     *+µ *°                                                   ;     *+µ !*°                                     
              ;     *+µ #*°                           
       
   % &             J      » 'Y*´ *´ *´ *´ *´ !*´ #· )°                          , -             H     *´ *´ *´ *´ *´ !*´ #º .  °                         2    3         4     :  ; =      ' > 	 ? A C  D    '
```
```java
Êþº¾   = =  ,br/com/legalconnect/auth/dto/UserResponseDTO  java/lang/Object nomeCompleto Ljava/lang/String; email cpf telefone fotoUrl status builder G()Lbr/com/legalconnect/auth/dto/UserResponseDTO$UserResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  Cbr/com/legalconnect/auth/dto/UserResponseDTO$UserResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getNomeCompleto ()Ljava/lang/String;	     this .Lbr/com/legalconnect/auth/dto/UserResponseDTO; getEmail	  !   getCpf	  $   getTelefone	  ' 	  
getFotoUrl	  * 
  	getStatus	  -   setNomeCompleto (Ljava/lang/String;)V MethodParameters setEmail setCpf setTelefone 
setFotoUrl 	setStatus
   o(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V 
SourceFile UserResponseDTO.java InnerClasses UserResponseDTOBuilder NestMembers !                      	     
          	  
             (      » Y· °                                 /     *´ °                                       /     *´  °                         "              /     *´ #°                         %              /     *´ &°                         (              /     *´ )°                         +              /     *´ ,°                         . /             :     *+µ ±                              0       1 /             :     *+µ  ±                              0       2 /             :     *+µ #±                              0       3 /             :     *+µ &±                           	   0    	   4 /             :     *+µ )±                           
   0    
   5 /             :     *+µ ,±                              0                     /     *· 6±                          7                  &*· 6*+µ *,µ  *-µ #*µ &*µ )*µ ,±               H    &       &      &      &      & 	     & 
     &    0          	  
     8    9 :   
    ; 	 <     
```
```java
Êþº¾   = J  4br/com/legalconnect/auth/entity/Tenant$TenantBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder nome Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; 
schemaName <init> ()V Code
   
  LineNumberTable LocalVariableTable this 6Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder; LocalVariableTypeTable >Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder<TC;TB;>; J(Ljava/lang/String;)Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder; 	Signature (Ljava/lang/String;)TB;	    
     self 8()Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder; MethodParameters	    	  ()TB; build *()Lbr/com/legalconnect/auth/entity/Tenant; ()TC; toString ()Ljava/lang/String;
  ( % &   * + , makeConcatWithConstants J(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  0 " # 
SourceFile Tenant.java ±<C:Lbr/com/legalconnect/auth/entity/Tenant;B:Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 6 8 7 $java/lang/invoke/StringConcatFactory + 9 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 5 < 3Tenant.TenantBuilder(super=, nome=, schemaName=) InnerClasses ? &br/com/legalconnect/auth/entity/Tenant 
TenantBuilder B )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder E %java/lang/invoke/MethodHandles$Lookup G java/lang/invoke/MethodHandles Lookup NestHost!                   	             
      A     *· 
±                                                        P     
*+µ *¶ °                   
       
           
            	                   P     
*+µ *¶ °                   
       
 	          
         	         !         " #      $          % &             N     *· '*´ *´ º )  °                                   D  -             %     *¶ °                 A " .             %     *¶ /°                   1    2     3         4     :  ; =      > @	  A C	 D F H  I    >
```
```java
Êþº¾   = $  8br/com/legalconnect/auth/entity/Tenant$TenantBuilderImpl  4br/com/legalconnect/auth/entity/Tenant$TenantBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this :Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilderImpl; self <()Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build *()Lbr/com/legalconnect/auth/entity/Tenant;  &br/com/legalconnect/auth/entity/Tenant
     9(Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder;)V 8()Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder;
     
SourceFile Tenant.java 	Signature Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder<Lbr/com/legalconnect/auth/entity/Tenant;Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilderImpl;>; InnerClasses 
TenantBuilder TenantBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = g  &br/com/legalconnect/auth/entity/Tenant  )br/com/legalconnect/common/dto/BaseEntity nome Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nullable     unique    length   ÿ 
schemaName schema_name <init> 9(Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder;)V 	Signature =(Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	    4br/com/legalconnect/auth/entity/Tenant$TenantBuilder  	  	  "  	  " LineNumberTable LocalVariableTable this (Lbr/com/legalconnect/auth/entity/Tenant; b 6Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder; LocalVariableTypeTable :Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder<**>; MethodParameters builder 8()Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder; <()Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder<**>; 1 8br/com/legalconnect/auth/entity/Tenant$TenantBuilderImpl
 0 3  4 ()V getNome ()Ljava/lang/String; 
getSchemaName setNome (Ljava/lang/String;)V 
setSchemaName
  3 '(Ljava/lang/String;Ljava/lang/String;)V equals (Ljava/lang/Object;)Z
  @ A > canEqual
 C E D java/lang/Object = >
  G 5 6
  I 7 6 o Ljava/lang/Object; other 	this$nome 
other$nome this$schemaName other$schemaName 
StackMapTable hashCode ()I
 C U R S PRIME I result $nome $schemaName 
SourceFile Tenant.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; 	tb_tenant InnerClasses 
TenantBuilder TenantBuilderImpl d ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder NestMembers !                 	s  
Z  Z 
 I             	s  
Z  Z 
 I                       \     *+· *+´ µ  *+´ !µ #±    $        %        & '      ( )  *        ( +  ,    (  	 - .      /            (      » 0Y· 2°    $        %       5 6             /     *´  °    $        %        & '    7 6             /     *´ #°    $        %        & '    8 9             :     *+µ  ±    $        %        & '         ,       : 9             :     *+µ #±    $        %        & '         ,        4             /     *· ;±    $        %        & '     <             M     *· ;*+µ  *,µ #±    $        %         & '               ,   	      = >             ÿ     r+*¦ ¬+Á  ¬+À M,*¶ ? ¬*+· B ¬*¶ FN,¶ F:-Ç Æ § -¶ B ¬*¶ H:,¶ H:Ç Æ § 
¶ B ¬¬    $        %   H    r & '     r J K   ] L '  . D M K  4 > N K  Q ! O K  W  P K  Q   ! 
ü  	ý  C Cý  C C	 ,    J   A >             9     +Á ¬    $        %        & '      L K  ,    L   R S             ß     =;<*· T=*¶ FN;h-Ç +§ -¶ T`=*¶ H:;hÇ +§ ¶ T`=¬    $        %   4    = & '    : V W   5 X W  
 0 Y K  &  Z K  Q   J ÿ    C ÿ    C ÿ    C C ÿ    C C   [    \      ]   ^  	s _ `       a	 0  b  c  e	 f      0
```
```java
Êþº¾   =   4br/com/legalconnect/auth/repository/TenantRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository findBySchemaName ((Ljava/lang/String;)Ljava/util/Optional; 	Signature R(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/auth/entity/Tenant;>; 
schemaName MethodParameters findById &(Ljava/util/UUID;)Ljava/util/Optional; P(Ljava/util/UUID;)Ljava/util/Optional<Lbr/com/legalconnect/auth/entity/Tenant;>; 
fromString ((Ljava/lang/Object;)Ljava/util/Optional; Code  java/util/UUID   
  LineNumberTable LocalVariableTable 
SourceFile TenantRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/auth/entity/Tenant;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
   	           A 
      +     *+À ¹  °                        	            
```
```java
Êþº¾   =(  ,br/com/legalconnect/auth/service/AuthService  java/lang/Object log Lorg/slf4j/Logger; userRepository 4Lbr/com/legalconnect/user/repository/UserRepository; 
jwtService -Lbr/com/legalconnect/auth/service/JwtService; authenticationManager CLorg/springframework/security/authentication/AuthenticationManager; tenantRepository 6Lbr/com/legalconnect/auth/repository/TenantRepository; passwordEncoder >Lorg/springframework/security/crypto/password/PasswordEncoder; roleRepository 4Lbr/com/legalconnect/user/repository/RoleRepository; refreshTokenService 6Lbr/com/legalconnect/auth/service/RefreshTokenService; passwordResetTokenRepository BLbr/com/legalconnect/user/repository/PasswordResetTokenRepository; emailService /Lbr/com/legalconnect/auth/service/EmailService; 
userMapper -Lbr/com/legalconnect/auth/service/UserMapper; frontendBaseUrl Ljava/lang/String; RuntimeVisibleAnnotations 4Lorg/springframework/beans/factory/annotation/Value; value ${app.frontend.url} passwordResetExpirationMinutes J defaultTenantIds E${application.tenant.default-id:00000000-0000-0000-0000-000000000001} ;$SWITCH_TABLE$br$com$legalconnect$user$entity$User$UserType [I <clinit> ()V Code
 + - , org/slf4j/LoggerFactory . / 	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	  1   LineNumberTable LocalVariableTable authenticate ](Lbr/com/legalconnect/auth/dto/LoginRequestDTO;)Lbr/com/legalconnect/common/dto/BaseResponse; 	Signature (Lbr/com/legalconnect/auth/dto/LoginRequestDTO;)Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/auth/dto/AuthResponse;>; :Lorg/springframework/transaction/annotation/Transactional; : *Iniciando autenticaÃ§Ã£o para o e-mail: {}
 < > = ,br/com/legalconnect/auth/dto/LoginRequestDTO ? @ getEmail ()Ljava/lang/String; B D C org/slf4j/Logger E F debug '(Ljava/lang/String;Ljava/lang/Object;)V	  H   J L K 2br/com/legalconnect/user/repository/UserRepository M N findByEmail ((Ljava/lang/String;)Ljava/util/Optional;   P Q R get M(Lbr/com/legalconnect/auth/dto/LoginRequestDTO;)Ljava/util/function/Supplier;
 T V U java/util/Optional W X orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; Z $br/com/legalconnect/user/entity/User	  \   ^ Oorg/springframework/security/authentication/UsernamePasswordAuthenticationToken
 < ` a @ getSenha
 ] c d e <init> '(Ljava/lang/Object;Ljava/lang/Object;)V g i h Aorg/springframework/security/authentication/AuthenticationManager 4 j f(Lorg/springframework/security/core/Authentication;)Lorg/springframework/security/core/Authentication; l &Credenciais vÃ¡lidas para o e-mail: {} B n o F info q 3Falha na autenticaÃ§Ã£o para o e-mail: {}. Erro: {}
 s u t java/lang/Exception v @ 
getMessage B x y z warn 9(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V | 6br/com/legalconnect/common/exception/BusinessException	 ~   .br/com/legalconnect/common/exception/ErrorCode   INVALID_CREDENTIALS 0Lbr/com/legalconnect/common/exception/ErrorCode;  java/lang/String  Credenciais invÃ¡lidas.
 {  d  F(Lbr/com/legalconnect/common/exception/ErrorCode;[Ljava/lang/String;)V  java/util/HashMap
   d (  X-Correlation-ID
 Y    getId ()Ljava/util/UUID;    
java/util/Map   put 8(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
 Y    	getTenant *()Lbr/com/legalconnect/auth/entity/Tenant;  X-Tenant-ID
 ¡ £ ¢ &br/com/legalconnect/auth/entity/Tenant ¤ @ 
getSchemaName	  ¦ 	 

 ¨ ª © +br/com/legalconnect/auth/service/JwtService « ¬ 
generateToken ^(Ljava/util/Map;Lorg/springframework/security/core/userdetails/UserDetails;)Ljava/lang/String;
 ¨ ® ¯ ° generateRefreshToken O(Lorg/springframework/security/core/userdetails/UserDetails;)Ljava/lang/String; ² 8Tokens JWT gerados para o usuÃ¡rio ID: {}, Tenant ID: {}
 ¡  µ N/A B · o z
  ¹ º » valueOf &(Ljava/lang/Object;)Ljava/lang/String;
 ½ ¿ ¾ 
org/slf4j/MDC  À '(Ljava/lang/String;Ljava/lang/String;)V
 Â Ä Ã +br/com/legalconnect/common/dto/BaseResponse Å Æ builder C()Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;	 È Ê É (br/com/legalconnect/enums/StatusResponse Ë Ì SUCESSO *Lbr/com/legalconnect/enums/StatusResponse;
 Î Ð Ï ?br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder Ñ Ò status m(Lbr/com/legalconnect/enums/StatusResponse;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; Ô %AutenticaÃ§Ã£o realizada com sucesso.
 Î Ö × Ø message U(Ljava/lang/String;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 Ú Ü Û java/time/LocalDateTime Ý Þ now ()Ljava/time/LocalDateTime;
 Î à á â 	timestamp \(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 ä æ å )br/com/legalconnect/auth/dto/AuthResponse Å ç A()Lbr/com/legalconnect/auth/dto/AuthResponse$AuthResponseBuilder;
 é ë ê =br/com/legalconnect/auth/dto/AuthResponse$AuthResponseBuilder ì í accessToken S(Ljava/lang/String;)Lbr/com/legalconnect/auth/dto/AuthResponse$AuthResponseBuilder;
 é ï ð í refreshToken ò Bearer
 é ô õ í 	tokenType
 ¨ ÷ ø ù extractExpiration $(Ljava/lang/String;)Ljava/util/Date;
 û ý ü java/util/Date þ ÿ getTime ()J      è
 java/lang/Long º (J)Ljava/lang/Long;
 é	
 	expiresIn Q(Ljava/lang/Long;)Lbr/com/legalconnect/auth/dto/AuthResponse$AuthResponseBuilder;
 é
 build -()Lbr/com/legalconnect/auth/dto/AuthResponse;
 Î data U(Ljava/lang/Object;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 Î
 /()Lbr/com/legalconnect/common/dto/BaseResponse; this .Lbr/com/legalconnect/auth/service/AuthService; request .Lbr/com/legalconnect/auth/dto/LoginRequestDTO; user &Lbr/com/legalconnect/user/entity/User; e Ljava/lang/Exception; claims Ljava/util/Map; jwtToken LocalVariableTypeTable 5Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>; 
StackMapTable% java/util/UUID' java/io/Serializable MethodParameters d(Lbr/com/legalconnect/auth/dto/RefreshTokenRequestDTO;)Lbr/com/legalconnect/common/dto/BaseResponse; (Lbr/com/legalconnect/auth/dto/RefreshTokenRequestDTO;)Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/auth/dto/AuthResponse;>;, $Iniciando processo de refresh token. B. E/ (Ljava/lang/String;)V
132 3br/com/legalconnect/auth/dto/RefreshTokenRequestDTO4 @ getRefreshToken
 ¨678 extractUsername &(Ljava/lang/String;)Ljava/lang/String;: 6Refresh token nÃ£o contÃ©m e-mail de usuÃ¡rio vÃ¡lido. B< y/> 6org/springframework/web/server/ResponseStatusException	@BA #org/springframework/http/HttpStatusCD UNAUTHORIZED %Lorg/springframework/http/HttpStatus;F $Refresh token invÃ¡lido ou expirado.
=H dI >(Lorg/springframework/http/HttpStatusCode;Ljava/lang/String;)V K QL 1(Ljava/lang/String;)Ljava/util/function/Supplier;
 ¨NOP isTokenValid P(Ljava/lang/String;Lorg/springframework/security/core/userdetails/UserDetails;)ZR )Refresh token vÃ¡lido para o usuÃ¡rio: {}T userIdV tenantIdX >Novo access token gerado para o usuÃ¡rio ID: {}, Tenant ID: {}Z Token atualizado com sucesso.\ 7Refresh token invÃ¡lido ou expirado para o usuÃ¡rio: {} B^ y F 5Lbr/com/legalconnect/auth/dto/RefreshTokenRequestDTO; 	userEmail registerUser (Lbr/com/legalconnect/auth/dto/UserRegistrationRequest;Lbr/com/legalconnect/user/entity/User$UserType;)Lbr/com/legalconnect/auth/dto/UserResponseDTO;d =Iniciando registro de novo usuÃ¡rio do tipo {} com e-mail: {}
f >g 4br/com/legalconnect/auth/dto/UserRegistrationRequest Jijk 
existsByEmail (Ljava/lang/String;)Zm .Falha no registro: E-mail '{}' jÃ¡ cadastrado.	 ~op  EMAIL_ALREADY_REGISTERED
frs @ getCpf Juvk existsByCpfx +Falha no registro: CPF '{}' jÃ¡ cadastrado.	 ~z{  INVALID_CPF	 } 
 	  #  4br/com/legalconnect/auth/repository/TenantRepository N findBySchemaName  Q M(Lbr/com/legalconnect/auth/service/AuthService;)Ljava/util/function/Supplier;
 T X 	orElseGet	    +br/com/legalconnect/auth/service/UserMapper toEntity ^(Lbr/com/legalconnect/auth/dto/UserRegistrationRequest;)Lbr/com/legalconnect/user/entity/User;	   
f ` <org/springframework/security/crypto/password/PasswordEncoder encode ,(Ljava/lang/CharSequence;)Ljava/lang/String;
 Y/ setSenhaHash
 Y ¡¢ setUserType 2(Lbr/com/legalconnect/user/entity/User$UserType;)V
 Y¤¥¦ 	setTenant +(Lbr/com/legalconnect/auth/entity/Tenant;)V
 ¨ %© ()[I
«­¬ -br/com/legalconnect/user/entity/User$UserType®¯ ordinal ()I	±³² /br/com/legalconnect/user/entity/User$UserStatus´µ ACTIVE 1Lbr/com/legalconnect/user/entity/User$UserStatus;
 Y·¸¹ 	setStatus 4(Lbr/com/legalconnect/user/entity/User$UserStatus;)V	 »  ½ *br/com/legalconnect/common/exception/Roles¿ ROLE_CLIENTÁÃÂ 2br/com/legalconnect/user/repository/RoleRepositoryÄ N 
findByNome Æ QÇ ()Ljava/util/function/Supplier;É $br/com/legalconnect/user/entity/Role	±ËÌµ PENDING_APPROVALÎ 
ROLE_ADVOCATE Æ	±ÑÒµ PENDINGÔ ROLE_TENANT_ADMIN Æ× 
ROLE_ADMIN ÆÚ ,Tipo de usuÃ¡rio invÃ¡lido para registro: {} BÜÝ F error	 ~ßà  
INVALID_INPUTâ Tipo de usuÃ¡rio invÃ¡lido.
 Yäåæ getRoles ()Ljava/util/Set;è java/util/HashSet
ç 
 Yëìí setRoles (Ljava/util/Set;)Vïñð 
java/util/Setòó add (Ljava/lang/Object;)Zõ "Role {} atribuÃ­da ao usuÃ¡rio: {}
È÷ø @ getNome
 Y > Bû E z Jýþÿ save &(Ljava/lang/Object;)Ljava/lang/Object; 7UsuÃ¡rio do tipo {} registrado com sucesso: {} (ID: {}) B o ((Ljava/lang/String;[Ljava/lang/Object;)V 4E-mail de boas-vindas/confirmaÃ§Ã£o enviado para: {}	
 toDto V(Lbr/com/legalconnect/user/entity/User;)Lbr/com/legalconnect/auth/dto/UserResponseDTO; 6Lbr/com/legalconnect/auth/dto/UserRegistrationRequest; userType /Lbr/com/legalconnect/user/entity/User$UserType; 
defaultTenant (Lbr/com/legalconnect/auth/entity/Tenant; assignedRole &Lbr/com/legalconnect/user/entity/Role; registerClient f(Lbr/com/legalconnect/auth/dto/UserRegistrationRequest;)Lbr/com/legalconnect/auth/dto/UserResponseDTO;	«
 CLIENTE
 ab registerAdvogado	«
 ADVOGADO 
registerSocio 
registerAdmin	« !
 PLATAFORMA_ADMIN recoverPassword$ 9SolicitaÃ§Ã£o de recuperaÃ§Ã£o de senha para o e-mail: {} K	 '  )+* @br/com/legalconnect/user/repository/PasswordResetTokenRepository,- 
findByUser <(Lbr/com/legalconnect/user/entity/User;)Ljava/util/Optional;
 /01 getClass ()Ljava/lang/Class; 345 accept a(Lbr/com/legalconnect/user/repository/PasswordResetTokenRepository;)Ljava/util/function/Consumer;
 T789 	ifPresent  (Ljava/util/function/Consumer;)V
$;<  
randomUUID
$>? @ toString
ACB java/time/Instant ÝD ()Ljava/time/Instant;      Ð	HJI java/time/temporal/ChronoUnitKL MINUTES Ljava/time/temporal/ChronoUnit;
ANOP plus 7(JLjava/time/temporal/TemporalUnit;)Ljava/time/Instant;)RST findByUserAndUsado =(Lbr/com/legalconnect/user/entity/User;Z)Ljava/util/Optional; 	V QW (Lbr/com/legalconnect/auth/service/AuthService;Ljava/lang/String;Lbr/com/legalconnect/user/entity/User;Ljava/time/Instant;)Ljava/util/function/Supplier;Y 2br/com/legalconnect/user/entity/PasswordResetToken[ BToken de redefiniÃ§Ã£o de senha gerado e salvo para o usuÃ¡rio: {}	 ]   
_`a makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;c 8Erro ao enviar e-mail de recuperaÃ§Ã£o de senha para: {}e ?E-mail de recuperaÃ§Ã£o de senha enviado para: {} com token: {} email token 
expiryDate Ljava/time/Instant; 
resetToken 4Lbr/com/legalconnect/user/entity/PasswordResetToken; 	resetLink 
resetPasswordo .Tentativa de redefiniÃ§Ã£o de senha com token. Bq o/)st N findByToken
 Tv Qw ()Ljava/lang/Object;y DFalha na redefiniÃ§Ã£o de senha: Token invÃ¡lido ou nÃ£o encontrado.	 ~{|  PASSWORD_RESET_TOKEN_INVALID
X~ isUsado ()Z HFalha na redefiniÃ§Ã£o de senha: Token jÃ¡ utilizado para o usuÃ¡rio: {}
X getUser (()Lbr/com/legalconnect/user/entity/User;	 ~  PASSWORD_RESET_TOKEN_USED DFalha na redefiniÃ§Ã£o de senha: Token jÃ¡ utilizado para o usuÃ¡rio
X 
getTentativas ()Ljava/lang/Integer;
 java/lang/Integer¯ intValue
 º (I)Ljava/lang/Integer;
X 
setTentativas (Ljava/lang/Integer;)V)ý ZFalha na redefiniÃ§Ã£o de senha: Tentativas de redefiniÃ§Ã£o excedidas para o usuÃ¡rio: {}	 ~ ¡  PASSWORD_RESET_TOKEN_EXCEEDED£ FFalha na redefiniÃ§Ã£o de senha: Tentativas de redefiniÃ§Ã£o excedidas
X¥¦D getExpiraEm
A¨©ª isBefore (Ljava/time/Instant;)Z¬ CFalha na redefiniÃ§Ã£o de senha: Token expirado para o usuÃ¡rio: {}
X®¯° setUsado (Z)V	 ~²³  PASSWORD_RESET_TOKEN_EXPIREDµ ?Falha na redefiniÃ§Ã£o de senha: Token expirado para o usuÃ¡rio· 3UsuÃ¡rio encontrado para redefiniÃ§Ã£o de senha: {}¹ 0Senha redefinida com sucesso para o usuÃ¡rio: {}» 3Token de redefiniÃ§Ã£o de senha marcado como usado.	 ½  
¿ÁÀ 4br/com/legalconnect/auth/service/RefreshTokenServiceÂÃ deleteByUser )(Lbr/com/legalconnect/user/entity/User;)VÅ .Refresh tokens invalidados para o usuÃ¡rio: {}Ç BE-mail de confirmaÃ§Ã£o de redefiniÃ§Ã£o de senha enviado para: {} 	novaSenha 
tentativas Ljava/lang/Integer; 
inspiracao inspiracao2 updateUserProfile p(Ljava/util/UUID;Lbr/com/legalconnect/auth/dto/UserProfileUpdate;)Lbr/com/legalconnect/auth/dto/UserResponseDTO;Ð ;Tentativa de atualizaÃ§Ã£o de perfil para o usuÃ¡rio ID: {} JÒÓÔ findById ((Ljava/lang/Object;)Ljava/util/Optional; Ö Q× /(Ljava/util/UUID;)Ljava/util/function/Supplier;
Ù >Ú .br/com/legalconnect/auth/dto/UserProfileUpdate
 ÜÝó equalsß >Falha na atualizaÃ§Ã£o de perfil: Novo e-mail '{}' jÃ¡ em uso. á`8
 Yãä/ setEmailæ )E-mail do usuÃ¡rio {} atualizado para: {}èéê updateEntityFromDto Y(Lbr/com/legalconnect/auth/dto/UserProfileUpdate;Lbr/com/legalconnect/user/entity/User;)Vì 3Outros campos do perfil do usuÃ¡rio {} atualizados.
Ùîï @ 
getSenhaAtual
Ùñò @ getNovaSenhaô 8Tentativa de alteraÃ§Ã£o de senha para o usuÃ¡rio ID: {}
 Yö÷ @ getSenhaHashùúû matches -(Ljava/lang/CharSequence;Ljava/lang/String;)Zý KFalha na alteraÃ§Ã£o de senha: Senha atual invÃ¡lida para o usuÃ¡rio ID: {}	 ~ÿ   PASSWORD_TOO_WEAK GFalha na alteraÃ§Ã£o de senha: Senha atual invÃ¡lida para o usuÃ¡rio ID FSenha do usuÃ¡rio {} alterada com sucesso. Refresh tokens invalidados. -Perfil do usuÃ¡rio {} atualizado com sucesso. Ljava/util/UUID; 
updateRequest 0Lbr/com/legalconnect/auth/dto/UserProfileUpdate; sendPasswordResetEmail 9(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 userNamel expirationMinutes	  ! " currentYear America/Sao_Paulo
 java/time/ZoneId of &(Ljava/lang/String;)Ljava/time/ZoneId;
A  atZone -(Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;
"$# java/time/ZonedDateTime%¯ getYear	 '  ) 2RecuperaÃ§Ã£o de Senha - [Seu Nome de AplicaÃ§Ã£o]+ password-reset-email
-/. -br/com/legalconnect/auth/service/EmailService01 sendTemplatedEmail H(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V3 =E-mail de recuperaÃ§Ã£o de senha enviado com sucesso para: {}5 ;Erro ao enviar e-mail de recuperaÃ§Ã£o de senha para {}: {}
7 u8 jakarta/mail/MessagingException B:Ý	 ~<=  
INVALID_EMAIL? 1Falha ao enviar e-mail de recuperaÃ§Ã£o de senha. to templateVariables !Ljakarta/mail/MessagingException;#(Lbr/com/legalconnect/user/repository/UserRepository;Lbr/com/legalconnect/auth/service/JwtService;Lorg/springframework/security/authentication/AuthenticationManager;Lbr/com/legalconnect/auth/repository/TenantRepository;Lorg/springframework/security/crypto/password/PasswordEncoder;Lbr/com/legalconnect/user/repository/RoleRepository;Lbr/com/legalconnect/auth/service/RefreshTokenService;Lbr/com/legalconnect/user/repository/PasswordResetTokenRepository;Lbr/com/legalconnect/auth/service/EmailService;Lbr/com/legalconnect/auth/service/UserMapper;)V RuntimeInvisibleAnnotations Llombok/Generated;
  	 H % &
«JKL values 2()[Lbr/com/legalconnect/user/entity/User$UserType;	«NO
 SOCIOQ java/lang/NoSuchFieldError & lambda$0 h(Lbr/com/legalconnect/auth/dto/LoginRequestDTO;)Lbr/com/legalconnect/common/exception/BusinessException;V <UsuÃ¡rio nÃ£o encontrado no banco de dados para o e-mail: {}	 ~XY  USER_NOT_FOUND 
á lambda$1 L(Ljava/lang/String;)Lorg/springframework/web/server/ResponseStatusException;^ ;UsuÃ¡rio nÃ£o encontrado para o e-mail do refresh token: {}	@`aD 	NOT_FOUND á lambda$2e BTenant padrÃ£o nÃ£o encontrado. Criando novo tenant com schema: {}
 ¡g Åh 8()Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder;
jlk 4br/com/legalconnect/auth/entity/Tenant$TenantBuildermn 
schemaName J(Ljava/lang/String;)Lbr/com/legalconnect/auth/entity/Tenant$TenantBuilder;
jpqr 	createdAt X(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;
jtur 	updatedAtw Tenant PadrÃ£o
jyzn nome
j|
 ý lambda$3 :()Lbr/com/legalconnect/common/exception/BusinessException; BFalha no registro: Role CLIENTE nÃ£o encontrada no banco de dados. BÝ/ Role CLIENTE nÃ£o encontrada. lambda$4 CFalha no registro: Role ADVOGADO nÃ£o encontrada no banco de dados.	 ~  ADVOCATE_NOT_AVAILABLE Role ADVOGADO nÃ£o encontrada. lambda$5 OFalha no registro: Role SOCIO (TENANT_ADMIN) nÃ£o encontrada no banco de dados. Role SOCIO nÃ£o encontrada. lambda$6 KFalha no registro: Role PLATAFORMA_ADMIN nÃ£o encontrada no banco de dados.	 ~  RESOURCE_NOT_FOUND &Role PLATAFORMA_ADMIN nÃ£o encontrada. lambda$7 L(Ljava/lang/String;)Lbr/com/legalconnect/common/exception/BusinessException; KFalha na recuperaÃ§Ã£o de senha: UsuÃ¡rio nÃ£o encontrado para o e-mail: {}  UsuÃ¡rio nÃ£o encontrado. lambda$9 (Ljava/lang/String;Lbr/com/legalconnect/user/entity/User;Ljava/time/Instant;)Lbr/com/legalconnect/user/entity/PasswordResetToken;
X¤ Å¥ P()Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder;
§©¨ Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuildergª b(Ljava/lang/String;)Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder;
§¬­ v(Lbr/com/legalconnect/user/entity/User;)Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder;
§¯°± expiraEm c(Ljava/time/Instant;)Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder;
§³´µ usado Q(Z)Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder;
§·É¸ c(Ljava/lang/Integer;)Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder;
§º
» 6()Lbr/com/legalconnect/user/entity/PasswordResetToken; newToken 	lambda$10 J(Ljava/util/UUID;)Lbr/com/legalconnect/common/exception/BusinessException;À EFalha na atualizaÃ§Ã£o de perfil: UsuÃ¡rio nÃ£o encontrado com ID: {}Â AFalha na atualizaÃ§Ã£o de perfil: UsuÃ¡rio nÃ£o encontrado com ID 
SourceFile AuthService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
ÈÊÉ "java/lang/invoke/LambdaMetafactoryËÌ metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;Çw
 ÐSTÏw
 Õ[\Ô :()Lorg/springframework/web/server/ResponseStatusException;×w
 Ûc Ú w
 à~ßw
 åäw
 êéw
 ïîw
 ôó (Ljava/lang/Object;)V÷úüû 2org/springframework/data/repository/CrudRepositoryý÷ delete	ù 7(Lbr/com/legalconnect/user/entity/PasswordResetToken;)Vÿw
 ¡¢»
	 $java/lang/invoke/StringConcatFactory`
 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
 /reset-password?token=w
 ½¾ ;Falha na atualizaÃ§Ã£o de perfil: Novo e-mail  jÃ¡ em uso. (UsuÃ¡rio nÃ£o encontrado com o e-mail:  InnerClasses AuthResponseBuilder 
TenantBuilder ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder BaseResponseBuilder PasswordResetTokenBuilder 
UserStatus UserType$ %java/lang/invoke/MethodHandles$Lookup& java/lang/invoke/MethodHandles Lookup !                 	 
         
                                             s    ! "    #          s $J % &     ' (  )   )      	¸ *³ 0±    2       8 3       4 5  6    7      8   )  Å    C² 09+¶ ;¹ A *´ G+¶ ;¹ I +º O  ¶ SÀ YM*´ [» ]Y+¶ ;+¶ _· b¹ f W² 0k+¶ ;¹ m § *N² 0p+¶ ;-¶ r¹ w » {Y² }½ YS· ¿» Y· N-,¶ ¹  W,¶ Æ -,¶ ¶  ¹  W*´ ¥-,¶ §:*´ ¥,¶ ­:² 0±,¶ ,¶ Æ 
,¶ ¶ ³§ ´¹ ¶ ,¶ ¸ ¸¸ ¼,¶ Æ ,¶ ¶ ³¸ ¸¸ ¼¸ Á² Ç¶ ÍÓ¶ Õ¸ Ù¶ ß¸ ã¶ è¶ îñ¶ ó*´ ¥¶ ö¶ ú m¸¶¶¶¶°  ( O R s  2    '   b  d  e ' d ( l , m 0 n 4 o 8 m ; l A p O q S r e s y w  x  y  z ¥ ~ °  º  Ã  Ö  Û  ç  î  ý         # 9 < ? B  3   H   C    C  (  S &   Â  °     º  ð  !      Â" #   d ÿ R   < Y  s&ü + ÿ .   < Y     B $ÿ    < Y     B $&&(       ð)  6   *      8   )  ¨    L² 0+¹- *´ ¥+¶0¶5M,Ç ² 09¹; »=Y²?E·G¿*´ G,¹ I ,ºJ  ¶ SÀ YN*´ ¥+¶0-¶M Û² 0Q,¹ m » Y· :S-¶ ¹  W-¶ Æ U-¶ ¶ ³¹  W*´ ¥-¶ §:² 0W-¶ -¶ Æ 
-¶ ¶ ³§ ´¹ ¶ S-¶ ¸ ¸¸ ¼-¶ Æ U-¶ ¶ ³¸ ¸¸ ¼¸ Á² Ç¶ ÍY¶ Õ¸ Ù¶ ß¸ ã¶ è+¶0¶ îñ¶ ó*´ ¥¶ ö¶ ú m¸¶¶¶¶°² 0[,¹] »=Y²?E·G¿    2    $      ¡  £  ¤ & ¥ 4 ¨ > © J ¨ K ¯ Z ° f ² o ³ ~ ´  µ  · £ ¹ ­ º À ¹ Å ½ Ò ¾ Ù ¿ é Â ì Ã ò Ä ø Å þ Æ Ç È
 É Ê( Ë+ Æ. Ì1 Â2 Î> Ï 3   >   L    L_  5`   K  o Ã  £  ì  !     o Ã" #   \ ü 4 ý b Y ÿ &  1  Y    B $ÿ   1  Y    B $&(ù H(      ab  )  t    ² 0c,+¶e¹ ¶ *´ G+¶e¹h  !² 0l+¶e¹] » {Y²n½ · ¿*´ G+¶q¹t  !² 0w+¶q¹] » {Y²y½ · ¿*´|*´~¹ *º  ¶À ¡N*´+¹ :*´+¶¹ ¶,¶-¶£¸§,¶ª.ª      °             D      h²°¶¶*´º¾¹À ºÅ  ¶ SÀÈ:§ ²Ê¶¶*´ºÍ¹À ºÏ  ¶ SÀÈ:§ l²Ð¶¶*´ºÓ¹À ºÕ  ¶ SÀÈ:§ H²Ð¶¶*´ºÖ¹À ºØ  ¶ SÀÈ:§ $² 0Ù,¹Û » {Y²Þ½ YáS· ¿¶ãÇ »çY·é¶ê¶ã¹î W² 0ô¶ö¶ù¹ú *´ G¹ü À Y:² 0 ½ Y,SY¶ùSY¶ S¹ ² 0¶ù¹ A *´ G¹ü À Y:*´¹ °    2   º .   Þ  á   â / ã > å N æ ] ç l ë y ì  ë  ÷  ø ¤ ù ª ú ° þ Ø  à ì ÷ ù ü	
	 (4?ADLXce!h#t$'(*ª+¿.Ï/ò345 3   f 
         
      ù    A  e    #    	>-ý k ¡ Y####ü  È(   	            8   )   =     	*+²¶°    2      A 3       	     	 (             8   )   =     	*+²¶°    2      N 3       	     	 (             8   )   =     	*+²¶°    2      Z 3       	     	 (        )   =     	*+²¶°    2      f 3       	     	 (      "/  )  M     ¯² 0#+¹ m *´ G+¹ I +º%  ¶ SÀ YM*´&,¹( *´&Y¶.Wº2  ¶6¸:¶=:¸@E²G¶M:*´&,¹Q *,ºU  ¶ÀX:² 0Z,¶ù¹ m *´\º^  :² 0b,¶ù¹Û ² 0d,¶ù¹ ¶ ±    2   >   s t u "t #{ >~ F T _ p r    ®  3   H    ¯     ¯f   #   F ig   T [hi  r =jk   !l  (   f   m À  )  Ó    ² 0n¹p *´&+¹r ¶uÀXN-Ç !² 0x¹; » {²z½ YxS· -¶} *² 0-¶¶ù¹] » {Y²½ YS· ¿-¶:-¶`¸¶*´&-¹ W¶¡ *² 0-¶¶ù¹] » {Y²½ Y¢S· ¿-¶¤:¸@:¶§ :² 0«-¶¶ù¹] -¶­*´&-¹ W» {Y²±½ Y´S· ¿-¶:² 0¶¶ù¹ A *´,¹ ¶*´ G¹ü W² 0¸¶ù¹ m -¶­*´&-¹ W² 0º¹- *´¼¶¾² 0Ä¶ù¹ A ² 0Æ¶ù¹ A ±    2   ¾ /  ­ ° ±  ² +³ 7´ :³ >· E¸ K¹ R¸ Wº d» gº l½ r¾ À Á Â Ã ¡Â ¦Ä ³Å ¶Ä »Ç ÁÈ ÆÉ ÐÊ ÖË ÝÊ âÌ çÍ òÐ ÿÑÐÕ
ÖÙ,Ú8ÛHÞMßXàcãlä|èé 3   R       g    È   qjk  rÉÊ  Á ÌËi  Æ ÇÌi 
  #    ü >X-ü Ný KAA(   	g  È   ÍÎ       8   )  ý    :² 0Ï+¹ m *´ G+¹Ñ +ºÕ  ¶ SÀ YN,¶ØÆ c,¶Ø-¶ù¶Û U*´ G,¶Ø¹h  -² 0Þ,¶Ø¹] » {Y²n½ Y,¶Øºà  S· ¿-,¶Ø¶â² 0å+,¶Ø¹ú *´,-¹ç ² 0ë+¹ A ,¶íÆ p,¶ðÆ i² 0ó+¹ m *´,¶í-¶õ¹ø  $² 0ü+¹] » {Y²þ½ YS· ¿-*´,¶ð¹ ¶*´¼-¶¾² 0+¹ m *´ G-¹ü À YN² 0+¹ m *´-¹ °    2   n   õ ö ÷ "ö #ÿ 8  H W d m r z   ¡ ¯ » Ï Û è ë ð	#/  3   *   :    :T   :	  # #   
 ü r Yû e$(   	T     
  )  {     §» Y· :,¹  W-¹  W*´¸¹  W¸@¸¶¶!¸¹  W*´&+(*¶,² 02+¹ m § ::² 04½ Y+SY¶6SYS¹9 » {Y²;½ Y>S· ¿±  P l o7  2   B   . 	/ 0 !1 32 P: T; U< X= [> ]: `? l@ qA C ¦E 3   >    §     §@     §
     §l   	 A  q 5B !     	 A" #    ÿ o       76(   
@  
  l    dC D    E   )   Ì     >*·F*+µ G*,µ ¥*-µ [*µ|*µ*µº*µ¼*µ&*	µ&*
µ±    2       5 3   p    >     >      > 	 
    >      > 
     >      >      >      >      >   	   >   
(   )
   	    
              %©  )   ³     J²GYÆ °W¸I¾¼
K*²¶ªO§ W*²¶ªO§ W*²¶ªO§ W*²M¶ªO§ W*Y³G°    P  & )P * 3 6P 7 @ CP  2       6 3     #   # 	HRÿ  R P KP KP KP 
ST  )   V     *² 0U*¶ ;¹Û » {Y²W½ Y*¶ ;ºZ  S· °    2       f  g  h % g 3     
[\  )   I     ² 0]*¹Û »=Y²_*ºb  ·G°    2       ª  «  ¬  « 3     c   )        A² 0d*´~¹ m *´|¸f*´~¶i¸ Ù¶oÀj¸ Ù¶sÀjv¶x¶{¹} À ¡°    2   "    í  î  ï  ð & ñ / ò 5 ó 8 î 3       A  
~  )   D       ² 0¹ » {Y²W½ YS· °    2   
     3     
  )   L       ² 0¹ » {Y²½ YS· °    2        
  3     
  )   D       ² 0¹ » {Y²W½ YS· °    2   
     3     
  )   L       ² 0¹ » {Y²½ YS· °    2          3     
  )   E     !² 0*¹] » {Y²W½ YS· °    2   
   v w 3     ¡¢  )        .¸£+¶¦,¶«-¶®¶²¸¶¶¶¹:*´&¹ ÀX°    2   & 	           3       .    ¼k 
½¾  )   M     !² 0¿*¹] » {Y²W½ YÁS· °    2      ø ú û ú 3      Ã   Ä     Å  Æ    Í ÎÑÒÍ ÓÖØÍ ÙÜÝÍ ÞáâÍ ãæçÍ èëìÍ íðñÍ òõöÍ øþ Í  Í       B  é ä 	j ¡		 Î Â 	§X 	± Y!@« Y"@#%' 
```
```java
Êþº¾   = i  -br/com/legalconnect/auth/service/EmailService  java/lang/Object 
mailSender 2Lorg/springframework/mail/javamail/JavaMailSender; RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; templateEngine Lorg/thymeleaf/TemplateEngine; <init> ()V Code
     LineNumberTable LocalVariableTable this /Lbr/com/legalconnect/auth/service/EmailService; 
sendHtmlEmail 9(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V 
Exceptions  jakarta/mail/MessagingException	        0org/springframework/mail/javamail/JavaMailSender    createMimeMessage %()Ljakarta/mail/internet/MimeMessage; " 3org/springframework/mail/javamail/MimeMessageHelper	 $ & % !java/nio/charset/StandardCharsets ' ( UTF_8 Ljava/nio/charset/Charset;
 * , + java/nio/charset/Charset - . name ()Ljava/lang/String;
 ! 0  1 9(Ljakarta/mail/internet/MimeMessage;ZLjava/lang/String;)V
 ! 3 4 5 setTo (Ljava/lang/String;)V
 ! 7 8 5 
setSubject
 ! : ; < setText (Ljava/lang/String;Z)V  > ? @ send &(Ljakarta/mail/internet/MimeMessage;)V to Ljava/lang/String; subject htmlContent message #Ljakarta/mail/internet/MimeMessage; helper 5Lorg/springframework/mail/javamail/MimeMessageHelper; MethodParameters sendTemplatedEmail H(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V 	Signature n(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V O org/thymeleaf/context/Context
 N 
 N R S T setVariables (Ljava/util/Map;)V	  V 	 

 X Z Y org/thymeleaf/TemplateEngine [ \ process F(Ljava/lang/String;Lorg/thymeleaf/context/IContext;)Ljava/lang/String;
  ^   templateName templateVariables Ljava/util/Map; context Lorg/thymeleaf/context/Context; LocalVariableTypeTable 5Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>; 
SourceFile EmailService.java (Lorg/springframework/stereotype/Service; !                   	 
               
   /     *· ±                                  
   °     <*´ ¹  :» !Y² #¶ )· /:+¶ 2,¶ 6-¶ 9*´ ¹ = ±                #  )   0 " ; #    >    <       < A B    < C B    < D B   1 E F    G H  I   
 A   C   D    J K        L    M 
   ­     %» NY· P:¶ Q*´ U-¶ W:*+,¶ ]±           ) 	 *  -  / $ 0    H    %       % A B    % C B    % _ B    % ` a  	  b c   	 D B  d       % ` e  I    A   C   _   `    f    g      h  
```
```java
Êþº¾   =N  +br/com/legalconnect/auth/service/JwtService  java/lang/Object log Lorg/slf4j/Logger; 	secretKey Ljava/lang/String; RuntimeVisibleAnnotations 4Lorg/springframework/beans/factory/annotation/Value; value &${application.security.jwt.secret-key} 
jwtExpiration J &${application.security.jwt.expiration} refreshExpiration .${application.security.jwt.refresh-expiration} secret <clinit> ()V Code
    org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>
  "    this -Lbr/com/legalconnect/auth/service/JwtService; extractUsername &(Ljava/lang/String;)Ljava/lang/String;   ( ) * apply ()Ljava/util/function/Function;
  , - . extractClaim C(Ljava/lang/String;Ljava/util/function/Function;)Ljava/lang/Object; 0 java/lang/String 2 %Erro ao extrair username do token: {}
 4 6 5 java/lang/Exception 7 8 
getMessage ()Ljava/lang/String; : < ; org/slf4j/Logger = > warn '(Ljava/lang/String;Ljava/lang/Object;)V token e Ljava/lang/Exception; 
StackMapTable MethodParameters 	Signature g<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/util/function/Function<Lio/jsonwebtoken/Claims;TT;>;)TT;
  G H I extractAllClaims ,(Ljava/lang/String;)Lio/jsonwebtoken/Claims; K M L java/util/function/Function ) N &(Ljava/lang/Object;)Ljava/lang/Object; claimsResolver Ljava/util/function/Function; claims Lio/jsonwebtoken/Claims; LocalVariableTypeTable :Ljava/util/function/Function<Lio/jsonwebtoken/Claims;TT;>; 
extractUserId $(Ljava/lang/String;)Ljava/lang/Long;  ( Y java/lang/Long [ #Erro ao extrair userId do token: {} extractTenantId  ( _ %Erro ao extrair tenantId do token: {} 
generateToken O(Lorg/springframework/security/core/userdetails/UserDetails;)Ljava/lang/String; c java/util/HashMap
 b "
  f ` g ^(Ljava/util/Map;Lorg/springframework/security/core/userdetails/UserDetails;)Ljava/lang/String; userDetails ;Lorg/springframework/security/core/userdetails/UserDetails; (Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lorg/springframework/security/core/userdetails/UserDetails;)Ljava/lang/String; l %Gerando token JWT para o usuÃ¡rio: {} n p o 9org/springframework/security/core/userdetails/UserDetails q 8 getUsername : s t > debug	  v 
 
  x y z 
buildToken _(Ljava/util/Map;Lorg/springframework/security/core/userdetails/UserDetails;J)Ljava/lang/String; extraClaims Ljava/util/Map; 5Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>; generateRefreshToken  )Gerando refresh token para o usuÃ¡rio: {}	     (Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lorg/springframework/security/core/userdetails/UserDetails;J)Ljava/lang/String;
    io/jsonwebtoken/Jwts   builder ()Lio/jsonwebtoken/JwtBuilder;    io/jsonwebtoken/JwtBuilder   	setClaims -(Ljava/util/Map;)Lio/jsonwebtoken/JwtBuilder;     
setSubject 0(Ljava/lang/String;)Lio/jsonwebtoken/JwtBuilder;  java/util/Date
    java/lang/System   currentTimeMillis ()J
      (J)V    ¡ ¢ setIssuedAt .(Ljava/util/Date;)Lio/jsonwebtoken/JwtBuilder;  ¤ ¥ ¢ 
setExpiration
  § ¨ © 
getSigningKey ()Ljavax/crypto/SecretKey;	 « ­ ¬ "io/jsonwebtoken/SignatureAlgorithm ® ¯ HS256 $Lio/jsonwebtoken/SignatureAlgorithm;  ± ² ³ signWith U(Ljava/security/Key;Lio/jsonwebtoken/SignatureAlgorithm;)Lio/jsonwebtoken/JwtBuilder;  µ ¶ 8 compact 
expiration	  ¹  	 » ½ ¼ !java/nio/charset/StandardCharsets ¾ ¿ UTF_8 Ljava/nio/charset/Charset;
 / Á Â Ã getBytes (Ljava/nio/charset/Charset;)[B
 Å Ç Æ io/jsonwebtoken/security/Keys È É 
hmacShaKeyFor ([B)Ljavax/crypto/SecretKey; keyBytes [B user isTokenValid P(Ljava/lang/String;Lorg/springframework/security/core/userdetails/UserDetails;)Z
  Ð % &
 / Ò Ó Ô equals (Ljava/lang/Object;)Z
  Ö × Ø isTokenExpired (Ljava/lang/String;)Z Ú TValidaÃ§Ã£o de token falhou para usuÃ¡rio: {}. Token vÃ¡lido: {}, Token expirado: {}
 Ü Þ Ý java/lang/Boolean ß à valueOf (Z)Ljava/lang/Boolean; : â = ã ((Ljava/lang/String;[Ljava/lang/Object;)V å 'Erro durante a validaÃ§Ã£o do token: {} : ç è é error 9(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V username isValid Z î [Ljava/lang/Object;
  ð ñ ò extractExpiration $(Ljava/lang/String;)Ljava/util/Date;
  "
  õ ö ÷ before (Ljava/util/Date;)Z ù Token expirado em: {} Ljava/util/Date; expired  (
  þ ÿ  
parserBuilder $()Lio/jsonwebtoken/JwtParserBuilder;  io/jsonwebtoken/JwtParserBuilder 
setSigningKey 7(Ljava/security/Key;)Lio/jsonwebtoken/JwtParserBuilder;	
 build ()Lio/jsonwebtoken/JwtParser;
 io/jsonwebtoken/JwtParser parseClaimsJws )(Ljava/lang/String;)Lio/jsonwebtoken/Jws; io/jsonwebtoken/Jws getBody ()Ljava/lang/Object; io/jsonwebtoken/Claims lambda$1 *(Lio/jsonwebtoken/Claims;)Ljava/lang/Long; userId  get 7(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object; lambda$2# tenantId 
SourceFile JwtService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
)+* "java/lang/invoke/LambdaMetafactory,- metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;( N12 8 
getSubject	0 ,(Lio/jsonwebtoken/Claims;)Ljava/lang/String;4 N
 87 N
 =!< NBCD 
getExpiration ()Ljava/util/Date;	A *(Lio/jsonwebtoken/Claims;)Ljava/util/Date;F InnerClassesJ %java/lang/invoke/MethodHandles$LookupL java/lang/invoke/MethodHandles Lookup !               	     
  s   
   	     
  s      	     
  s      	     
  s          )      	¸ ³ ±                          /     *· !±                    # $    % &     }     *+º '  ¶ +À /°M² 1,¶ 3¹ 9 °    
  4         1  2  3  4          # $      ?     @ A  B    N 4 C    ?    - .  D    E    l     *+¶ FN,-¹ J °       
    A  B    *     # $      ?      O P    Q R  S        O T  C   	 ?   O    U V     }     *+º W  ¶ +À X°M² Z,¶ 3¹ 9 °    
  4         M  N  O  P          # $      ?     @ A  B    N 4 C    ?    \ V     }     *+º ]  ¶ +À X°M² ^,¶ 3¹ 9 °    
  4         \  ]  ^  _          # $      ?     @ A  B    N 4 C    ?    ` a     A     
*» bY· d+¶ e°           j        
 # $     
 h i  C    h    ` g  D    j    o     ² k,¹ m ¹ r *+,*´ u¶ w°       
    w  x          # $      { |     h i  S        { }  C   	 {   h    ~ a     Y     !² +¹ m ¹ r *» bY· d+*´ ¶ w°       
              ! # $     ! h i  C    h    y z  D        ¼     F¸ +¹  ,¹ m ¹  » Y¸ · ¹  » Y¸ !a· ¹ £ *¶ ¦² ª¹ ° ¹ ´ °       "       	    #  4  @  E     *    F # $     F { |    F h i    F ·   S       F { }  C   
 {   h   ·    ¨ ©     H     *´ ¸² º¶ ÀL+¸ Ä°       
    ¢  £         # $     Ê Ë   ` z  D        ¼     F¸ +¹  ,¹ m ¹  » Y¸ · ¹  » Y¸ !a· ¹ £ *¶ ¦² ª¹ ° ¹ ´ °       "    ¨  © 	 ª  « # ¬ 4 ­ @ ® E ¨    *    F # $     F Q |    F Ì i    F ·   S       F Q }  C   
 Q   Ì   ·    Í Î    t     y*+¶ ÏN-Æ -,¹ m ¶ Ñ *+¶ Õ § 6 <² Ù½ Y-SY-Æ -,¹ m ¶ Ñ § ¸ ÛSY*+¶ Õ¸ ÛS¹ á ¬N² ä-¶ 3-¹ æ ¬    f g 4     6 
   º  »  ¼  » & ½ + ¾ 6 ¿ V À _ ¾ d Â g Ã h Ä w Å    >    y # $     y ?     y h i   a ê   & A ë ì  h  @ A  B   a ü # /@ÿ *   / n /  : / í íÿ     / n /  : / í íÿ    / n  4 C   	 ?   h    × Ø          #*+¶ ïM,» Y· ó¶ ô> ² ø,¹ r ¬           Ð  Ñ  Ò  Ó ! Õ    *    # # $     # ?     · ú    û ì  B   	 ý !  C    ?     ñ ò     B     *+º ü  ¶ +À °           ß         # $      ?   C    ?    H I     h      ¸ ý*¶ ¦¹ ¹ +¹ ¹ À°           ê  ë  ì  í  î  é          # $       ?   C    ?  
     9     *X¹ À X°           M         Q R  
!     9     *"X¹ À X°           \         Q R   $   % 	    &  '   * . /35. 69:. ;>?. @EGH   
 IKM 
```
```java
Êþº¾   =	  4br/com/legalconnect/auth/service/RefreshTokenService  java/lang/Object log Lorg/slf4j/Logger; refreshTokenRepository <Lbr/com/legalconnect/user/repository/RefreshTokenRepository; RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; 
entityManager #Ljakarta/persistence/EntityManager; refreshTokenExpirationMs J 4Lorg/springframework/beans/factory/annotation/Value; value .${application.security.jwt.refresh-expiration} <clinit> ()V Code
    org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>
  !   this 6Lbr/com/legalconnect/auth/service/RefreshTokenService; createRefreshToken V(Lbr/com/legalconnect/user/entity/User;)Lbr/com/legalconnect/user/entity/RefreshToken; :Lorg/springframework/transaction/annotation/Transactional; ( )Criando refresh token para o usuÃ¡rio: {}
 * , + $br/com/legalconnect/user/entity/User - . getEmail ()Ljava/lang/String; 0 2 1 org/slf4j/Logger 3 4 info '(Ljava/lang/String;Ljava/lang/Object;)V	  6   8 : 9 :br/com/legalconnect/user/repository/RefreshTokenRepository ; < 
findByUser <(Lbr/com/legalconnect/user/entity/User;)Ljava/util/Optional;   > ? @ accept {(Lbr/com/legalconnect/auth/service/RefreshTokenService;Lbr/com/legalconnect/user/entity/User;)Ljava/util/function/Consumer;
 B D C java/util/Optional E F 	ifPresent  (Ljava/util/function/Consumer;)V
 H J I java/util/UUID K L 
randomUUID ()Ljava/util/UUID;
 H N O . toString
 Q S R java/time/Instant T U now ()Ljava/time/Instant;	  W 
 	 Y [ Z java/time/temporal/ChronoUnit \ ] MILLIS Ljava/time/temporal/ChronoUnit;
 Q _ ` a plus 7(JLjava/time/temporal/TemporalUnit;)Ljava/time/Instant;
 c e d ,br/com/legalconnect/user/entity/RefreshToken f g builder D()Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder;
 i k j @br/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder l m user j(Lbr/com/legalconnect/user/entity/User;)Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder;
 i o p q token V(Ljava/lang/String;)Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder;
 i s t u expiraEm W(Ljava/time/Instant;)Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder;
 i w x y build 0()Lbr/com/legalconnect/user/entity/RefreshToken; 8 { | } save &(Ljava/lang/Object;)Ljava/lang/Object;  <Refresh token criado e salvo com sucesso para o usuÃ¡rio: {} &Lbr/com/legalconnect/user/entity/User; Ljava/lang/String; 
expiryDate Ljava/time/Instant; refreshToken .Lbr/com/legalconnect/user/entity/RefreshToken; MethodParameters findByToken ((Ljava/lang/String;)Ljava/util/Optional; 	Signature X(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/user/entity/RefreshToken;>;  %Buscando refresh token pelo valor: {} 0   4 debug 8    verifyExpiration ^(Lbr/com/legalconnect/user/entity/RefreshToken;)Lbr/com/legalconnect/user/entity/RefreshToken;  <Verificando expiraÃ§Ã£o do refresh token para o usuÃ¡rio: {}
 c    getUser (()Lbr/com/legalconnect/user/entity/User;
 c   U getExpiraEm
 Q     isBefore (Ljava/time/Instant;)Z 8 ¢ £ ¤ delete (Ljava/lang/Object;)V	  ¦   ¨ ª © !jakarta/persistence/EntityManager «  flush ­ ;Refresh token expirado para o usuÃ¡rio: {}. Token deletado. 0 ¯ ° 4 warn ² 6br/com/legalconnect/common/exception/BusinessException	 ´ ¶ µ .br/com/legalconnect/common/exception/ErrorCode · ¸ REFRESH_TOKEN_EXPIRED 0Lbr/com/legalconnect/common/exception/ErrorCode; º java/lang/String ¼ 9Refresh token expirado. Por favor, faÃ§a login novamente.
 ± ¾  ¿ F(Lbr/com/legalconnect/common/exception/ErrorCode;[Ljava/lang/String;)V Á 2Refresh token para o usuÃ¡rio {} ainda Ã© vÃ¡lido. 
StackMapTable 
deleteByToken (Ljava/lang/String;)V Æ &Deletando refresh token pelo valor: {}  È É Ê get 1(Ljava/lang/String;)Ljava/util/function/Supplier;
 B Ì Í Î orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; Ð 6Refresh token deletado com sucesso para o usuÃ¡rio: {} deleteByUser )(Lbr/com/legalconnect/user/entity/User;)V Ô +Deletando refresh token para o usuÃ¡rio: {}  > lambda$0 W(Lbr/com/legalconnect/user/entity/User;Lbr/com/legalconnect/user/entity/RefreshToken;)V Ù 5Deletando refresh token existente para o usuÃ¡rio: {} 
existingToken lambda$1 L(Ljava/lang/String;)Lbr/com/legalconnect/common/exception/BusinessException; Þ 6Tentativa de deletar refresh token nÃ£o encontrado: {}	 ´ à á ¸ 
INVALID_TOKEN ã Refresh token nÃ£o encontrado. lambda$2 
SourceFile RefreshTokenService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
 ê ì ë "java/lang/invoke/LambdaMetafactory í î metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; é ¤
  ò Ö × ñ 1(Lbr/com/legalconnect/user/entity/RefreshToken;)V ô ()Ljava/lang/Object; ö
  ù Û Ü ø :()Lbr/com/legalconnect/common/exception/BusinessException; û ¤
  ÿ ä × þ ô InnerClasses RefreshTokenBuilder %java/lang/invoke/MethodHandles$Lookup java/lang/invoke/MethodHandles Lookup !               	     
       	     
    
   	       s  
        )      	¸ ³ ±           !              /     *·  ±                    " #    $ %  	     &      î     l² '+¶ )¹ / *´ 5+¹ 7 *+º =  ¶ A¸ G¶ MM¸ P*´ V² X¶ ^N¸ b+¶ h,¶ n-¶ r¶ v:*´ 5¹ z À c:² ~+¶ )¹ / °       6 
   2  5 " = ) > 7 @ : A > B B C F D I @ K F [ G i H    4    l " #     l l   ) C p   7 5    K !        l               N     ² +¹  *´ 5+¹  °       
    R  S         " #      p       p          Ì     i² +¶ ¶ )¹  +¶ ¸ P¶  ;*´ 5+¹ ¡ *´ ¥¹ § ² ¬+¶ ¶ )¹ ® » ±Y² ³½ ¹Y»S· ½¿² À+¶ ¶ )¹  +°       * 
   ^  _  ` ( a 1 b B c O d Q c V f g g        i " #     i p   Â    û V     p    Ã Ä  	     &      ¡     G² Å+¹ / *´ 5+¹  +º Ç  ¶ ËÀ cM*´ 5,¹ ¡ *´ ¥¹ § ² Ï,¶ ¶ )¹ / ±       "    r  s  t ! s " y , z 5 { F |         G " #     G p   " %        p    Ñ Ò  	     &      _     #² Ó+¶ )¹ / *´ 5+¹ 7 *+º Õ  ¶ A±              "         # " #     # l       l   Ö ×     b     "² Ø+¶ )¹  *´ 5,¹ ¡ *´ ¥¹ § ±           6  7  9 ! :        " " #     " Ú  
 Û Ü     C     ² Ý*¹ ® » ±Y² ß½ ¹YâS· ½°       
    u  w       ä ×     b     "*´ 5,¹ ¡ *´ ¥¹ § ² Ï+¶ )¹ / ±            
    !         " " #     "     å    æ 	     ç   è      ï  ð ó õ ï  ÷ ú ü ï  ý      i c	 
```
```java
Êþº¾   = T  +br/com/legalconnect/auth/service/RoleMapper  java/lang/Object 
toRoleName :(Lbr/com/legalconnect/user/entity/Role;)Ljava/lang/String; role MethodParameters roleSetToStringSet  (Ljava/util/Set;)Ljava/util/Set; 	Signature \(Ljava/util/Set<Lbr/com/legalconnect/user/entity/Role;>;)Ljava/util/Set<Ljava/lang/String;>; RuntimeInvisibleAnnotations Lorg/mapstruct/Named; value Code    
java/util/Set   stream ()Ljava/util/stream/Stream;      apply ()Ljava/util/function/Function;    java/util/stream/Stream    map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 " $ # java/util/stream/Collectors % & toSet ()Ljava/util/stream/Collector;  ( ) * collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; LineNumberTable LocalVariableTable this -Lbr/com/legalconnect/auth/service/RoleMapper; roles Ljava/util/Set; LocalVariableTypeTable 7Ljava/util/Set<Lbr/com/legalconnect/user/entity/Role;>; 
StackMapTable 
SourceFile RoleMapper.java Lorg/mapstruct/Mapper; componentModel spring unmappedTargetPolicy Lorg/mapstruct/ReportingPolicy; IGNORE BootstrapMethods
 > @ ? "java/lang/invoke/LambdaMetafactory A B metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; = &(Ljava/lang/Object;)Ljava/lang/Object; D
 G I H $br/com/legalconnect/user/entity/Role J K getNome ()Ljava/lang/String; F  InnerClasses P %java/lang/invoke/MethodHandles$Lookup R java/lang/invoke/MethodHandles Lookup                   	 
       
       s 	         "+Ç °+¹  º   ¹  ¸ !¹ ' À °    +       )  *  ,  -  . ! , ,       " - .     " / 0  1       " / 2  3         /    4    5 
     6  7s 8 9e : ; <     C  E L M N   
  O Q S 
```
```java
Êþº¾   =   /br/com/legalconnect/auth/service/RoleMapperImpl  java/lang/Object  +br/com/legalconnect/auth/service/RoleMapper <init> ()V Code
     LineNumberTable LocalVariableTable this 1Lbr/com/legalconnect/auth/service/RoleMapperImpl; 
toRoleName :(Lbr/com/legalconnect/user/entity/Role;)Ljava/lang/String;  java/lang/String
   role &Lbr/com/legalconnect/user/entity/Role; string Ljava/lang/String; 
StackMapTable MethodParameters 
SourceFile RoleMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; !            	   /     *· 
±           
 
                	   c     +Ç °» Y· M,°                  
                                                 
```
```java
Êþº¾   = `  +br/com/legalconnect/auth/service/UserMapper  java/lang/Object toDto V(Lbr/com/legalconnect/user/entity/User;)Lbr/com/legalconnect/auth/dto/UserResponseDTO; entity MethodParameters localDateTimeToInstant .(Ljava/time/LocalDateTime;)Ljava/time/Instant; RuntimeInvisibleAnnotations Lorg/mapstruct/Named; value Code
    java/time/ZoneId   
systemDefault ()Ljava/time/ZoneId;
    java/time/LocalDateTime   atZone -(Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;
    java/time/ZonedDateTime    	toInstant ()Ljava/time/Instant; LineNumberTable LocalVariableTable this -Lbr/com/legalconnect/auth/service/UserMapper; dateTime Ljava/time/LocalDateTime; 
StackMapTable ) java/time/Instant toEntity ^(Lbr/com/legalconnect/auth/dto/UserRegistrationRequest;)Lbr/com/legalconnect/user/entity/User; Lorg/mapstruct/Mappings; Lorg/mapstruct/Mapping; target id ignore    tenant roles 	senhaHash userType status dto updateEntityFromDto Y(Lbr/com/legalconnect/auth/dto/UserProfileUpdate;Lbr/com/legalconnect/user/entity/User;)V 	createdAt 	updatedAt cpf $RuntimeInvisibleParameterAnnotations Lorg/mapstruct/MappingTarget; mapUserType C(Lbr/com/legalconnect/user/entity/User$UserType;)Ljava/lang/String;
 B D C -br/com/legalconnect/user/entity/User$UserType E F name ()Ljava/lang/String; /Lbr/com/legalconnect/user/entity/User$UserType; I java/lang/String 
mapUserStatus E(Lbr/com/legalconnect/user/entity/User$UserStatus;)Ljava/lang/String;
 M D N /br/com/legalconnect/user/entity/User$UserStatus 
userStatus 1Lbr/com/legalconnect/user/entity/User$UserStatus; 
SourceFile UserMapper.java Lorg/mapstruct/Mapper; componentModel spring unmappedTargetPolicy Lorg/mapstruct/ReportingPolicy; IGNORE uses -Lbr/com/legalconnect/auth/service/RoleMapper; InnerClasses ] $br/com/legalconnect/user/entity/User 
UserStatus UserType                   	 
         
s 	    T     +Æ +¸ ¶ ¶ § °    !       ! "        # $      % &  '    @ (     %   * +     e  ,  
[ @ -  .s / 0Z 1@ -  .s 2 0Z 1@ -  .s 3 0Z 1@ -  .s 4 0Z 1@ -  .s 5 0Z 1@ -  .s 6 0Z 1     7   8 9       ,  
[ 	@ -  .s / 0Z 1@ -  .s : 0Z 1@ -  .s ; 0Z 1@ -  .s 2 0Z 1@ -  .s 3 0Z 1@ -  .s 4 0Z 1@ -  .s 5 0Z 1@ -  .s < 0Z 1@ -  .s 6 0Z 1 =   	    >      	 7       ? @     N     
+Æ 
+¶ A§ °    !       8 "       
 # $     
 5 G  '    @ H     5    J K     N     
+Æ 
+¶ L§ °    !       < "       
 # $     
 O P  '    @ H     O    Q    R      S  Ts U Ve W X Y[ c Z [     M \ ^@ B \ _@
```
```java
Êþº¾   =   /br/com/legalconnect/auth/service/UserMapperImpl  java/lang/Object  +br/com/legalconnect/auth/service/UserMapper <init> ()V Code
     LineNumberTable LocalVariableTable this 1Lbr/com/legalconnect/auth/service/UserMapperImpl; toDto V(Lbr/com/legalconnect/user/entity/User;)Lbr/com/legalconnect/auth/dto/UserResponseDTO;
    ,br/com/legalconnect/auth/dto/UserResponseDTO   builder G()Lbr/com/legalconnect/auth/dto/UserResponseDTO$UserResponseDTOBuilder;
    $br/com/legalconnect/user/entity/User   getCpf ()Ljava/lang/String;
  !   Cbr/com/legalconnect/auth/dto/UserResponseDTO$UserResponseDTOBuilder " # cpf Y(Ljava/lang/String;)Lbr/com/legalconnect/auth/dto/UserResponseDTO$UserResponseDTOBuilder;
  % &  getEmail
  ( ) # email
  + ,  
getFotoUrl
  . / # fotoUrl
  1 2  getNomeCompleto
  4 5 # nomeCompleto
  7 8 9 	getStatus 3()Lbr/com/legalconnect/user/entity/User$UserStatus;
  ; < = 
mapUserStatus E(Lbr/com/legalconnect/user/entity/User$UserStatus;)Ljava/lang/String;
  ? @ # status
  B C  getTelefone
  E F # telefone
  H I J build 0()Lbr/com/legalconnect/auth/dto/UserResponseDTO; entity &Lbr/com/legalconnect/user/entity/User; userResponseDTO ELbr/com/legalconnect/auth/dto/UserResponseDTO$UserResponseDTOBuilder; 
StackMapTable MethodParameters toEntity ^(Lbr/com/legalconnect/auth/dto/UserRegistrationRequest;)Lbr/com/legalconnect/user/entity/User;
  T  U 4()Lbr/com/legalconnect/user/entity/User$UserBuilder;
 W  X 4br/com/legalconnect/auth/dto/UserRegistrationRequest
 Z \ [ 0br/com/legalconnect/user/entity/User$UserBuilder " ] F(Ljava/lang/String;)Lbr/com/legalconnect/user/entity/User$UserBuilder;
 W %
 Z ` ) ]
 W 1
 Z c 5 ]
 W B
 Z f F ]
 Z h I i (()Lbr/com/legalconnect/user/entity/User; dto 6Lbr/com/legalconnect/auth/dto/UserRegistrationRequest; user 2Lbr/com/legalconnect/user/entity/User$UserBuilder; LocalVariableTypeTable 6Lbr/com/legalconnect/user/entity/User$UserBuilder<**>; updateEntityFromDto Y(Lbr/com/legalconnect/auth/dto/UserProfileUpdate;Lbr/com/legalconnect/user/entity/User;)V
 s % t .br/com/legalconnect/auth/dto/UserProfileUpdate
  v w x setEmail (Ljava/lang/String;)V
 s +
  { | x 
setFotoUrl
 s 1
    x setNomeCompleto
 s B
    x setTelefone 0Lbr/com/legalconnect/auth/dto/UserProfileUpdate; 
SourceFile UserMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; InnerClasses UserResponseDTOBuilder UserBuilder  /br/com/legalconnect/user/entity/User$UserStatus 
UserStatus !            	   /     *· 
±            
                	   ´     I+Ç °¸ M,+¶ ¶ W,+¶ $¶ 'W,+¶ *¶ -W,+¶ 0¶ 3W,*+¶ 6¶ :¶ >W,+¶ A¶ DW,¶ G°       * 
        
      %  .  ;  D ! 
        I       I K L  
 ? M N  O     P    K    Q R  	   ¨     3+Ç °¸ SM,+¶ V¶ YW,+¶ ^¶ _W,+¶ a¶ bW,+¶ d¶ eW,¶ g°       "    &  '  * 
 ,  -  . % / . 1 
        3       3 j k  
 ) l m  n     
 ) l o  O     P    j    p q  	        &+Ç ±,+¶ r¶ u,+¶ y¶ z,+¶ }¶ ~,+¶ ¶ ±           6  7  : 
 ;  <  = % > 
        &       & j     & K L  O     P   	 j   K                         	 Z  	   @
```
```java
Êþº¾   = 4  2br/com/legalconnect/user/controller/UserController  java/lang/Object userService .Lbr/com/legalconnect/user/service/UserService; 
existsById ;(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity; 	Signature P(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Ljava/lang/Boolean;>; RuntimeVisibleAnnotations 4Lorg/springframework/web/bind/annotation/GetMapping; value existir/{id} "RuntimeVisibleParameterAnnotations 6Lorg/springframework/web/bind/annotation/PathVariable; id Code	    
    ,br/com/legalconnect/user/service/UserService   %(Ljava/util/UUID;)Ljava/lang/Boolean;
    'org/springframework/http/ResponseEntity   ok =(Ljava/lang/Object;)Lorg/springframework/http/ResponseEntity; LineNumberTable LocalVariableTable this 4Lbr/com/legalconnect/user/controller/UserController; Ljava/util/UUID; userResponseDTO Ljava/lang/Boolean; MethodParameters <init> 1(Lbr/com/legalconnect/user/service/UserService;)V RuntimeInvisibleAnnotations Llombok/Generated;
  - ( . ()V 
SourceFile UserController.java 8Lorg/springframework/web/bind/annotation/RestController; 8Lorg/springframework/web/bind/annotation/RequestMapping; /api/v1/usuarios !                	    
        
[ s         
s     P     *´ +¶ M,¸ °        
     	  !         " #       $  	  % &  '        ( )  *     +      >     
*· ,*+µ ±             !       
 " #     
    '       /    0      1   2  
[ s 3
```
```java
Êþº¾   = e  Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder token Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; user &Lbr/com/legalconnect/user/entity/User; expiraEm Ljava/time/Instant; usado Z 
tentativas Ljava/lang/Integer; <init> ()V Code
     LineNumberTable LocalVariableTable this NLbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder; LocalVariableTypeTable VLbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder<TC;TB;>; b(Ljava/lang/String;)Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder; 	Signature (Ljava/lang/String;)TB;	     
  " # $ self P()Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder; MethodParameters v(Lbr/com/legalconnect/user/entity/User;)Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder; +(Lbr/com/legalconnect/user/entity/User;)TB;	  ) 	 
 c(Ljava/time/Instant;)Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder; (Ljava/time/Instant;)TB;	  -   Q(Z)Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder; (Z)TB;	  1 
  c(Ljava/lang/Integer;)Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder; (Ljava/lang/Integer;)TB;	  5   ()TB; build 6()Lbr/com/legalconnect/user/entity/PasswordResetToken; ()TC; toString ()Ljava/lang/String;
  = : ;
 ? A @ java/lang/String B C valueOf &(Ljava/lang/Object;)Ljava/lang/String;   E F G makeConcatWithConstants o(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  K 7 8 
SourceFile PasswordResetToken.java Õ<C:Lbr/com/legalconnect/user/entity/PasswordResetToken;B:Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 Q S R $java/lang/invoke/StringConcatFactory F T (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; P W iPasswordResetToken.PasswordResetTokenBuilder(super=, token=, user=, expiraEm=, usado=, tentativas=) InnerClasses Z )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder ] 2br/com/legalconnect/user/entity/PasswordResetToken PasswordResetTokenBuilder ` %java/lang/invoke/MethodHandles$Lookup b java/lang/invoke/MethodHandles Lookup NestHost!                   	 
                       
                               A     *· ±           "                                             P     
*+µ *¶ !°           "        
       
           
     %       	 &      '            P     
*+µ (*¶ !°           "        
       
 	 
         
     %    	    *      +            P     
*+µ ,*¶ !°           "        
       
           
     %       
 .      /            P     
*µ 0*¶ !°           "        
       
 
          
     %    
    2      3            P     
*+µ 4*¶ !°           "        
       
           
     %      # $      6         7 8      9          : ;             c     '*· <*´ *´ (¸ >*´ ,¸ >*´ 0*´ 4¸ >º D  °           "        '            '    D # H             %     *¶ !°                 A 7 I             %     *¶ J°                   L    M     N         O     U  V X      Y [	  \ ^	 _ a c  d    \
```
```java
Êþº¾   = $  Pbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilderImpl  Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this RLbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilderImpl; self T()Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build 6()Lbr/com/legalconnect/user/entity/PasswordResetToken;  2br/com/legalconnect/user/entity/PasswordResetToken
     Q(Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder;)V P()Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder;
     
SourceFile PasswordResetToken.java 	Signature ÖLbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder<Lbr/com/legalconnect/user/entity/PasswordResetToken;Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilderImpl;>; InnerClasses PasswordResetTokenBuilder PasswordResetTokenBuilderImpl NestHost 0               /     *· ±    
       "          
                        *°             
                  3     	» Y*· °    
       "        	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   =   2br/com/legalconnect/user/entity/PasswordResetToken  )br/com/legalconnect/common/dto/BaseEntity token Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nullable     unique    columnDefinition TEXT user &Lbr/com/legalconnect/user/entity/User; Ljakarta/persistence/OneToOne; targetEntity fetch Ljakarta/persistence/FetchType; EAGER  Ljakarta/persistence/JoinColumn; user_id expiraEm Ljava/time/Instant; 	expira_em usado Z 
tentativas Ljava/lang/Integer; 
INT DEFAULT 0 <init> Q(Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder;)V 	Signature U(Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  ) ! * @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	 , . - Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder  	  .	 , 1  	  1	 , 4  	  4	 , 7  	  7	 , :  	  : LineNumberTable LocalVariableTable this 4Lbr/com/legalconnect/user/entity/PasswordResetToken; b NLbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder; LocalVariableTypeTable RLbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder<**>; MethodParameters builder P()Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder; T()Lbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilder<**>; I Pbr/com/legalconnect/user/entity/PasswordResetToken$PasswordResetTokenBuilderImpl
 H K ! L ()V getToken ()Ljava/lang/String; getUser (()Lbr/com/legalconnect/user/entity/User; getExpiraEm ()Ljava/time/Instant; isUsado ()Z 
getTentativas ()Ljava/lang/Integer; setToken (Ljava/lang/String;)V setUser )(Lbr/com/legalconnect/user/entity/User;)V setExpiraEm (Ljava/time/Instant;)V setUsado (Z)V 
setTentativas (Ljava/lang/Integer;)V
  K b(Ljava/lang/String;Lbr/com/legalconnect/user/entity/User;Ljava/time/Instant;ZLjava/lang/Integer;)V equals (Ljava/lang/Object;)Z
  f g d canEqual
 i k j java/lang/Object c d
  m S T
  o U V
  q M N
  s O P
  u Q R o Ljava/lang/Object; other this$tentativas other$tentativas 
this$token other$token 	this$user 
other$user 
this$expiraEm other$expiraEm 
StackMapTable hashCode ()I
 i    PRIME I result $tentativas $token $user 	$expiraEm 
SourceFile PasswordResetToken.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_password_reset_token InnerClasses  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder PasswordResetTokenBuilder PasswordResetTokenBuilderImpl NestMembers !                 	s  
Z  Z 
 s              c  e     
Z  	s             	s  
Z             	s  
Z             	s  
Z  s     ! "  #    $ %     &   '   t     .*+· (*+´ +µ /*+´ 0µ 2*+´ 3µ 5*+´ 6µ 8*+´ 9µ ;±    <       " =       . > ?     . @ A  B       . @ C  D    @  	 E F  #    G %     &   '   (      » HY· J°    <       " =       M N  %     &   '   /     *´ /°    <        =        > ?    O P  %     &   '   /     *´ 2°    <        =        > ?    Q R  %     &   '   /     *´ 5°    <        =        > ?    S T  %     &   '   /     *´ 8¬    <        =        > ?    U V  %     &   '   /     *´ ;°    <        =        > ?    W X  %     &   '   :     *+µ /±    <        =        > ?         D       Y Z  %     &   '   :     *+µ 2±    <        =        > ?         D       [ \  %     &   '   :     *+µ 5±    <        =        > ?         D       ] ^  %     &   '   :     *µ 8±    <        =        > ?         D       _ `  %     &   '   :     *+µ ;±    <        =        > ?         D       ! L  %     &   '   /     *· a±    <         =        > ?    ! b  %     &   '   |      *· a*+µ /*,µ 2*-µ 5*µ 8*µ ;±    <       ! =   >      > ?                                      D               c d  %     &   '       É+*¦ ¬+Á  ¬+À M,*¶ e ¬*+· h ¬*¶ l,¶ l ¬*¶ nN,¶ n:-Ç Æ § -¶ h ¬*¶ p:,¶ p:Ç Æ § 
¶ h ¬*¶ r:,¶ r:Ç Æ § 
¶ h ¬*¶ t:	,¶ t:
	Ç 
Æ § 
	
¶ h ¬¬    <       # =   p    É > ?     É v w   ´ x ?  ;  y w  A  z w  ^ k { w  d e | w   F } w   @ ~ w  ¨ !  w 	 ®   w 
    8 ü  	ý  i iý  i i	ý  i i	ý  i i	 D    v   g d  %     &   '   9     +Á ¬    <       # =        > ?      x w  D    x      %     &   '  ¸     ;<*· =;h*¶ l O§ a`=*¶ nN;h-Ç +§ -¶ `=*¶ p:;hÇ +§ ¶ `=*¶ r:;hÇ +§ ¶ `=*¶ t:;hÇ +§ ¶ `=¬    <       # =   H     > ?             ! f  w  : M  w  U 2  w  p   w     Å 
ÿ    ÿ    ÿ    i ÿ    i ÿ    i i ÿ    i i ÿ    i i i ÿ    i i i ÿ    i i i i ÿ    i i i i                  	s         	 ,  	 H         , H
```
```java
Êþº¾   = Y  @br/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder user &Lbr/com/legalconnect/user/entity/User; RuntimeInvisibleAnnotations Llombok/Generated; token Ljava/lang/String; expiraEm Ljava/time/Instant; <init> ()V Code
   
  LineNumberTable LocalVariableTable this BLbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder; LocalVariableTypeTable JLbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder<TC;TB;>; j(Lbr/com/legalconnect/user/entity/User;)Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder; 	Signature +(Lbr/com/legalconnect/user/entity/User;)TB;	    
      self D()Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder; MethodParameters V(Ljava/lang/String;)Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder; (Ljava/lang/String;)TB;	  % 	 
 W(Ljava/time/Instant;)Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder; (Ljava/time/Instant;)TB;	  )   ()TB; build 0()Lbr/com/legalconnect/user/entity/RefreshToken; ()TC; toString ()Ljava/lang/String;
  1 . /
 3 5 4 java/lang/String 6 7 valueOf &(Ljava/lang/Object;)Ljava/lang/String;   9 : ; makeConcatWithConstants \(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  ? + , 
SourceFile RefreshToken.java Ã<C:Lbr/com/legalconnect/user/entity/RefreshToken;B:Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 E G F $java/lang/invoke/StringConcatFactory : H (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; D K FRefreshToken.RefreshTokenBuilder(super=, user=, token=, expiraEm=) InnerClasses N )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder Q ,br/com/legalconnect/user/entity/RefreshToken RefreshTokenBuilder T %java/lang/invoke/MethodHandles$Lookup V java/lang/invoke/MethodHandles Lookup NestHost!                   	 
                      	  
      A     *· ±                                                        P     
*+µ *¶ °                   
       
           
     !       	 "      #            P     
*+µ $*¶ °                   
       
 	 
         
     !    	    &      '            P     
*+µ (*¶ °                   
       
           
     !              *         + ,      -          . /             X     *· 0*´ ¸ 2*´ $*´ (¸ 2º 8  °                                   D  <             %     *¶ °                 A + =             %     *¶ >°                   @    A     B         C     I  J L      M O	  P R	 S U W  X    P
```
```java
Êþº¾   = $  Dbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilderImpl  @br/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this FLbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilderImpl; self H()Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build 0()Lbr/com/legalconnect/user/entity/RefreshToken;  ,br/com/legalconnect/user/entity/RefreshToken
     E(Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder;)V D()Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder;
     
SourceFile RefreshToken.java 	Signature ¸Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder<Lbr/com/legalconnect/user/entity/RefreshToken;Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilderImpl;>; InnerClasses RefreshTokenBuilder RefreshTokenBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = ~  ,br/com/legalconnect/user/entity/RefreshToken  )br/com/legalconnect/common/dto/BaseEntity user &Lbr/com/legalconnect/user/entity/User; RuntimeVisibleAnnotations Ljakarta/persistence/OneToOne; fetch Ljakarta/persistence/FetchType; LAZY  Ljakarta/persistence/JoinColumn; name user_id nullable     unique    token Ljava/lang/String; Ljakarta/persistence/Column; columnDefinition TEXT expiraEm Ljava/time/Instant; 	expira_em <init> E(Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder;)V 	Signature I(Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  #  $ @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	 & ( ' @br/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder  	  (	 & +  	  +	 & .  	  . LineNumberTable LocalVariableTable this .Lbr/com/legalconnect/user/entity/RefreshToken; b BLbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder; LocalVariableTypeTable FLbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder<**>; MethodParameters builder D()Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder; H()Lbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilder<**>; = Dbr/com/legalconnect/user/entity/RefreshToken$RefreshTokenBuilderImpl
 < ?  @ ()V getUser (()Lbr/com/legalconnect/user/entity/User; getToken ()Ljava/lang/String; getExpiraEm ()Ljava/time/Instant; setUser )(Lbr/com/legalconnect/user/entity/User;)V setToken (Ljava/lang/String;)V setExpiraEm (Ljava/time/Instant;)V
  ? N(Lbr/com/legalconnect/user/entity/User;Ljava/lang/String;Ljava/time/Instant;)V equals (Ljava/lang/Object;)Z
  R S P canEqual
 U W V java/lang/Object O P
  Y A B
  [ C D
  ] E F o Ljava/lang/Object; other 	this$user 
other$user 
this$token other$token 
this$expiraEm other$expiraEm 
StackMapTable hashCode ()I
 U k h i PRIME I result $user $token 	$expiraEm 
SourceFile RefreshToken.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_refresh_token InnerClasses y ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder RefreshTokenBuilder RefreshTokenBuilderImpl NestMembers !                  	e 
    
s  Z  Z             
s  Z  Z  s             
s  Z  
                   !   d     *+· "*+´ %µ )*+´ *µ ,*+´ -µ /±    0        1        2 3      4 5  6        4 7  8    4  	 9 :      ;          !   (      » <Y· >°    0        1       A B           !   /     *´ )°    0        1        2 3    C D           !   /     *´ ,°    0        1        2 3    E F           !   /     *´ /°    0        1        2 3    G H           !   :     *+µ )±    0        1        2 3         8       I J           !   :     *+µ ,±    0        1        2 3         8       K L           !   :     *+µ /±    0        1        2 3         8        @           !   /     *· M±    0        1        2 3     N           !   \     *· M*+µ )*,µ ,*-µ /±    0        1   *     2 3                     8   
        O P           !  C  	   +*¦ ¬+Á  ¬+À M,*¶ Q ¬*+· T ¬*¶ XN,¶ X:-Ç Æ § -¶ T ¬*¶ Z:,¶ Z:Ç Æ § 
¶ T ¬*¶ \:,¶ \:Ç Æ § 
¶ T ¬¬    0         1   \ 	    2 3      ^ _    ` 3  . i a _  4 c b _  Q F c _  W @ d _  v ! e _  |  f _  g   , 
ü  	ý  U Uý  U U	ý  U U	 8    ^   S P           !   9     +Á ¬    0         1        2 3      ` _  8    `   h i           !  1     X;<*· j=*¶ XN;h-Ç +§ -¶ j`=*¶ Z:;hÇ +§ ¶ j`=*¶ \:;hÇ +§ ¶ j`=¬    0         1   >    X 2 3    U l m   P n m  
 K o _  & 2 p _  A  q _  g   w ÿ    U ÿ    U ÿ    U U ÿ    U U ÿ    U U U ÿ    U U U   r    s      t   u  
s v w     x  z	 &  {	 <  |  }     & <
```
```java
Êþº¾   = J  0br/com/legalconnect/user/entity/Role$RoleBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder nome Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; 	descricao <init> ()V Code
   
  LineNumberTable LocalVariableTable this 2Lbr/com/legalconnect/user/entity/Role$RoleBuilder; LocalVariableTypeTable :Lbr/com/legalconnect/user/entity/Role$RoleBuilder<TC;TB;>; F(Ljava/lang/String;)Lbr/com/legalconnect/user/entity/Role$RoleBuilder; 	Signature (Ljava/lang/String;)TB;	    
     self 4()Lbr/com/legalconnect/user/entity/Role$RoleBuilder; MethodParameters	    	  ()TB; build (()Lbr/com/legalconnect/user/entity/Role; ()TC; toString ()Ljava/lang/String;
  ( % &   * + , makeConcatWithConstants J(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  0 " # 
SourceFile 	Role.java «<C:Lbr/com/legalconnect/user/entity/Role;B:Lbr/com/legalconnect/user/entity/Role$RoleBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 6 8 7 $java/lang/invoke/StringConcatFactory + 9 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 5 < .Role.RoleBuilder(super=, nome=, descricao=) InnerClasses ? )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder B $br/com/legalconnect/user/entity/Role RoleBuilder E %java/lang/invoke/MethodHandles$Lookup G java/lang/invoke/MethodHandles Lookup NestHost!                   	             
      A     *· 
±                                                        P     
*+µ *¶ °                   
       
           
            	                   P     
*+µ *¶ °                   
       
 	          
         	         !         " #      $          % &             N     *· '*´ *´ º )  °                                   D  -             %     *¶ °                 A " .             %     *¶ /°                   1    2     3         4     :  ; =      > @	  A C	 D F H  I    A
```
```java
Êþº¾   = $  4br/com/legalconnect/user/entity/Role$RoleBuilderImpl  0br/com/legalconnect/user/entity/Role$RoleBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this 6Lbr/com/legalconnect/user/entity/Role$RoleBuilderImpl; self 8()Lbr/com/legalconnect/user/entity/Role$RoleBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build (()Lbr/com/legalconnect/user/entity/Role;  $br/com/legalconnect/user/entity/Role
     5(Lbr/com/legalconnect/user/entity/Role$RoleBuilder;)V 4()Lbr/com/legalconnect/user/entity/Role$RoleBuilder;
     
SourceFile 	Role.java 	Signature Lbr/com/legalconnect/user/entity/Role$RoleBuilder<Lbr/com/legalconnect/user/entity/Role;Lbr/com/legalconnect/user/entity/Role$RoleBuilderImpl;>; InnerClasses RoleBuilder RoleBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = h  $br/com/legalconnect/user/entity/Role  )br/com/legalconnect/common/dto/BaseEntity nome Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nullable     unique    length   d 	descricao columnDefinition TEXT <init> 5(Lbr/com/legalconnect/user/entity/Role$RoleBuilder;)V 	Signature 9(Lbr/com/legalconnect/user/entity/Role$RoleBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	     0br/com/legalconnect/user/entity/Role$RoleBuilder  	   	  #  	  # LineNumberTable LocalVariableTable this &Lbr/com/legalconnect/user/entity/Role; b 2Lbr/com/legalconnect/user/entity/Role$RoleBuilder; LocalVariableTypeTable 6Lbr/com/legalconnect/user/entity/Role$RoleBuilder<**>; MethodParameters builder 4()Lbr/com/legalconnect/user/entity/Role$RoleBuilder; 8()Lbr/com/legalconnect/user/entity/Role$RoleBuilder<**>; 2 4br/com/legalconnect/user/entity/Role$RoleBuilderImpl
 1 4  5 ()V getNome ()Ljava/lang/String; getDescricao setNome (Ljava/lang/String;)V setDescricao
  4 '(Ljava/lang/String;Ljava/lang/String;)V equals (Ljava/lang/Object;)Z
  A B ? canEqual
 D F E java/lang/Object > ?
  H 6 7
  J 8 7 o Ljava/lang/Object; other 	this$nome 
other$nome this$descricao other$descricao 
StackMapTable hashCode ()I
 D V S T PRIME I result $nome 
$descricao 
SourceFile 	Role.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_role InnerClasses c ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder RoleBuilder RoleBuilderImpl NestMembers !                 	s  
Z  Z 
 I             	s  s                       \     *+· *+´ µ !*+´ "µ $±    %        &        ' (      ) *  +        ) ,  -    )  	 . /      0            (      » 1Y· 3°    %        &       6 7             /     *´ !°    %        &        ' (    8 7             /     *´ $°    %        &        ' (    9 :             :     *+µ !±    %        &        ' (         -       ; :             :     *+µ $±    %        &        ' (         -        5             /     *· <±    %        &        ' (     =             M     *· <*+µ !*,µ $±    %        &         ' (               -   	      > ?             ÿ     r+*¦ ¬+Á  ¬+À M,*¶ @ ¬*+· C ¬*¶ GN,¶ G:-Ç Æ § -¶ C ¬*¶ I:,¶ I:Ç Æ § 
¶ C ¬¬    %        &   H    r ' (     r K L   ] M (  . D N L  4 > O L  Q ! P L  W  Q L  R   ! 
ü  	ý  D Dý  D D	 -    K   B ?             9     +Á ¬    %        &        ' (      M L  -    M   S T             ß     =;<*· U=*¶ GN;h-Ç +§ -¶ U`=*¶ I:;hÇ +§ ¶ U`=¬    %        &   4    = ' (    : W X   5 Y X  
 0 Z L  &  [ L  R   J ÿ    D ÿ    D ÿ    D D ÿ    D D   \    ]      ^   _  	s ` a     b  d	   e	 1  f  g      1
```
```java
Êþº¾   = {  0br/com/legalconnect/user/entity/User$UserBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder tenant (Lbr/com/legalconnect/auth/entity/Tenant; RuntimeInvisibleAnnotations Llombok/Generated; nomeCompleto Ljava/lang/String; email cpf telefone 	senhaHash fotoUrl userType /Lbr/com/legalconnect/user/entity/User$UserType; status 1Lbr/com/legalconnect/user/entity/User$UserStatus; roles Ljava/util/Set; 	Signature 7Ljava/util/Set<Lbr/com/legalconnect/user/entity/Role;>; <init> ()V Code
     LineNumberTable LocalVariableTable this 2Lbr/com/legalconnect/user/entity/User$UserBuilder; LocalVariableTypeTable :Lbr/com/legalconnect/user/entity/User$UserBuilder<TC;TB;>; \(Lbr/com/legalconnect/auth/entity/Tenant;)Lbr/com/legalconnect/user/entity/User$UserBuilder; -(Lbr/com/legalconnect/auth/entity/Tenant;)TB;	  &  
  ( ) * self 4()Lbr/com/legalconnect/user/entity/User$UserBuilder; MethodParameters F(Ljava/lang/String;)Lbr/com/legalconnect/user/entity/User$UserBuilder; (Ljava/lang/String;)TB;	  / 	 
	  1  
	  3  
	  5 
 
	  7  
	  9  
 c(Lbr/com/legalconnect/user/entity/User$UserType;)Lbr/com/legalconnect/user/entity/User$UserBuilder; 4(Lbr/com/legalconnect/user/entity/User$UserType;)TB;	  =   e(Lbr/com/legalconnect/user/entity/User$UserStatus;)Lbr/com/legalconnect/user/entity/User$UserBuilder; 6(Lbr/com/legalconnect/user/entity/User$UserStatus;)TB;	  A   C(Ljava/util/Set;)Lbr/com/legalconnect/user/entity/User$UserBuilder; <(Ljava/util/Set<Lbr/com/legalconnect/user/entity/Role;>;)TB;	  E   ()TB; build (()Lbr/com/legalconnect/user/entity/User; ()TC; toString ()Ljava/lang/String;
  M J K
 O Q P java/lang/String R S valueOf &(Ljava/lang/Object;)Ljava/lang/String;   U V W makeConcatWithConstants Ú(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  [ G H 
SourceFile 	User.java «<C:Lbr/com/legalconnect/user/entity/User;B:Lbr/com/legalconnect/user/entity/User$UserBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 a c b $java/lang/invoke/StringConcatFactory V d (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; ` g User.UserBuilder(super=, tenant=, nomeCompleto=, email=, cpf=, telefone=, senhaHash=, fotoUrl=, userType=, status=, roles=) InnerClasses j )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder m $br/com/legalconnect/user/entity/User UserBuilder p /br/com/legalconnect/user/entity/User$UserStatus 
UserStatus s -br/com/legalconnect/user/entity/User$UserType UserType v %java/lang/invoke/MethodHandles$Lookup x java/lang/invoke/MethodHandles Lookup NestHost!     
              	 
            
            
           
 
            
            
                                                           A     *· ±           0              !         "     #      $            P     
*+µ %*¶ '°           0        
        
    !       
  "   +       	 ,      -            P     
*+µ .*¶ '°           0        
        
 	 
  !       
  "   +    	    ,      -            P     
*+µ 0*¶ '°           0        
        
  
  !       
  "   +        ,      -            P     
*+µ 2*¶ '°           0        
        
  
  !       
  "   +       
 ,      -            P     
*+µ 4*¶ '°           0        
        
 
 
  !       
  "   +    
    ,      -            P     
*+µ 6*¶ '°           0        
        
  
  !       
  "   +        ,      -            P     
*+µ 8*¶ '°           0        
        
  
  !       
  "   +        :      ;            P     
*+µ <*¶ '°           0        
        
    !       
  "   +        >      ?            P     
*+µ @*¶ '°           0        
        
    !       
  "   +        B      C            Z     
*+µ D*¶ '°           0        
        
    !       
  "     
    +      ) *      F         G H      I          J K             z     >*· L*´ %¸ N*´ .*´ 0*´ 2*´ 4*´ 6*´ 8*´ <¸ N*´ @¸ N*´ D¸ Nº T  °           0        >      !       >  "  D ) X             %     *¶ '°                 A G Y             %     *¶ Z°                   \    ]     ^         _     e  f h   *   i k	  l n	 o l q@ r l t@ u w y  z    l
```
```java
Êþº¾   = $  4br/com/legalconnect/user/entity/User$UserBuilderImpl  0br/com/legalconnect/user/entity/User$UserBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this 6Lbr/com/legalconnect/user/entity/User$UserBuilderImpl; self 8()Lbr/com/legalconnect/user/entity/User$UserBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build (()Lbr/com/legalconnect/user/entity/User;  $br/com/legalconnect/user/entity/User
     5(Lbr/com/legalconnect/user/entity/User$UserBuilder;)V 4()Lbr/com/legalconnect/user/entity/User$UserBuilder;
     
SourceFile 	User.java 	Signature Lbr/com/legalconnect/user/entity/User$UserBuilder<Lbr/com/legalconnect/user/entity/User;Lbr/com/legalconnect/user/entity/User$UserBuilderImpl;>; InnerClasses UserBuilder UserBuilderImpl NestHost 0               /     *· ±    
       0          
                        *°             
                  3     	» Y*· °    
       0        	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = C  /br/com/legalconnect/user/entity/User$UserStatus  java/lang/Enum ACTIVE 1Lbr/com/legalconnect/user/entity/User$UserStatus; INACTIVE PENDING_APPROVAL REJECTED PENDING ENUM$VALUES 2[Lbr/com/legalconnect/user/entity/User$UserStatus; <clinit> ()V Code 
     <init> (Ljava/lang/String;I)V	     	     	     		   	  
	  " 
 	  $   LineNumberTable LocalVariableTable
   this 
$enum$name 
$enum$ordinal MethodParameters values 4()[Lbr/com/legalconnect/user/entity/User$UserStatus;
 / 1 0 java/lang/System 2 3 	arraycopy *(Ljava/lang/Object;ILjava/lang/Object;II)V valueOf E(Ljava/lang/String;)Lbr/com/legalconnect/user/entity/User$UserStatus;
  7 4 8 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; name 
SourceFile 	User.java 	Signature CLjava/lang/Enum<Lbr/com/legalconnect/user/entity/User$UserStatus;>; InnerClasses @ $br/com/legalconnect/user/entity/User 
UserStatus NestHost@1     @    @    @    @ 	   @ 
          
            g» Y· ³ » Y· ³ » Y· ³ » Y· ³ » Y · ³ !½ Y² SY² SY² SY² SY² !S³ #±    %   
    o A n &             1     *+· '±    %       n &        (    +   	 )  *  	 , -     6     ² #YK*¾Y<½ YM¸ .,°    %        &      	 4 5     *     
*¸ 6À °    %        &      +    9   :    ; <    = >   
   ? A@ B    ?
```
```java
Êþº¾   = ?  -br/com/legalconnect/user/entity/User$UserType  java/lang/Enum CLIENTE /Lbr/com/legalconnect/user/entity/User$UserType; ADVOGADO PLATAFORMA_ADMIN SOCIO ENUM$VALUES 0[Lbr/com/legalconnect/user/entity/User$UserType; <clinit> ()V Code 
     <init> (Ljava/lang/String;I)V	     	     	     		   	 	    
  LineNumberTable LocalVariableTable
   this 
$enum$name 
$enum$ordinal MethodParameters values 2()[Lbr/com/legalconnect/user/entity/User$UserType;
 + - , java/lang/System . / 	arraycopy *(Ljava/lang/Object;ILjava/lang/Object;II)V valueOf C(Ljava/lang/String;)Lbr/com/legalconnect/user/entity/User$UserType;
  3 0 4 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; name 
SourceFile 	User.java 	Signature ALjava/lang/Enum<Lbr/com/legalconnect/user/entity/User$UserType;>; InnerClasses < $br/com/legalconnect/user/entity/User UserType NestHost@1     @    @    @    @ 	    
       
           T» Y· ³ » Y· ³ » Y· ³ » Y· ³ ½ Y² SY² SY² SY² S³ ±    !       c 
 d  e ' f 4 b "             1     *+· #±    !       b "        $    '   	 %  &  	 ( )     6     ² YK*¾Y<½ YM¸ *,°    !        "      	 0 1     *     
*¸ 2À °    !        "      '    5   6    7 8    9 :   
   ; =@ >    ;
```
```java
Êþº¾   =R  $br/com/legalconnect/user/entity/User  )br/com/legalconnect/common/dto/BaseEntity  9org/springframework/security/core/userdetails/UserDetails log Lorg/slf4j/Logger; tenant (Lbr/com/legalconnect/auth/entity/Tenant; RuntimeVisibleAnnotations Ljakarta/persistence/ManyToOne; fetch Ljakarta/persistence/FetchType; LAZY  Ljakarta/persistence/JoinColumn; name 	tenant_id nullable     referencedColumnName id nomeCompleto Ljava/lang/String; Ljakarta/persistence/Column; 
nome_completo length   ÿ email unique    cpf    telefone    	senhaHash 
senha_hash columnDefinition TEXT fotoUrl foto_url userType /Lbr/com/legalconnect/user/entity/User$UserType;  Ljakarta/persistence/Enumerated; value Ljakarta/persistence/EnumType; STRING 	user_type   2 status 1Lbr/com/legalconnect/user/entity/User$UserStatus; roles Ljava/util/Set; 	Signature 7Ljava/util/Set<Lbr/com/legalconnect/user/entity/Role;>;  Ljakarta/persistence/ManyToMany; EAGER Ljakarta/persistence/JoinTable; tb_user_role joinColumns user_id inverseJoinColumns role_id <clinit> ()V Code
 D F E org/slf4j/LoggerFactory G H 	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	  J   LineNumberTable LocalVariableTable getAuthorities ()Ljava/util/Collection; O()Ljava/util/Collection<+Lorg/springframework/security/core/GrantedAuthority;>; Q 'Obtendo autoridades para o usuÃ¡rio: {}	  S   U W V org/slf4j/Logger X Y trace '(Ljava/lang/String;Ljava/lang/Object;)V	  [ 4 5 ] _ ^ 
java/util/Set ` a stream ()Ljava/util/stream/Stream;   c d e apply ()Ljava/util/function/Function; g i h java/util/stream/Stream j k map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 m o n java/util/stream/Collectors p q toList ()Ljava/util/stream/Collector; g s t u collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; w java/util/Collection this &Lbr/com/legalconnect/user/entity/User; getPassword ()Ljava/lang/String;	  } $  getUsername isAccountNonExpired ()Z isAccountNonLocked	   2 3	    /br/com/legalconnect/user/entity/User$UserStatus  3 ACTIVE 
StackMapTable isCredentialsNonExpired 	isEnabled <init> 5(Lbr/com/legalconnect/user/entity/User$UserBuilder;)V 9(Lbr/com/legalconnect/user/entity/User$UserBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated;
     @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V  java/util/HashSet
    A	    0br/com/legalconnect/user/entity/User$UserBuilder 	 
	  	    	  	  S	  ¢   	  ¢	  ¥ " 	  ¥	  }	  © ( 	  ©	  ¬ * +	  ¬	  	  [ b 2Lbr/com/legalconnect/user/entity/User$UserBuilder; LocalVariableTypeTable 6Lbr/com/legalconnect/user/entity/User$UserBuilder<**>; MethodParameters builder 4()Lbr/com/legalconnect/user/entity/User$UserBuilder; 8()Lbr/com/legalconnect/user/entity/User$UserBuilder<**>; ¹ 4br/com/legalconnect/user/entity/User$UserBuilderImpl
 ¸  	getTenant *()Lbr/com/legalconnect/auth/entity/Tenant; getNomeCompleto getEmail getCpf getTelefone getSenhaHash 
getFotoUrl getUserType 1()Lbr/com/legalconnect/user/entity/User$UserType; 	getStatus 3()Lbr/com/legalconnect/user/entity/User$UserStatus; getRoles ()Ljava/util/Set; 9()Ljava/util/Set<Lbr/com/legalconnect/user/entity/Role;>; 	setTenant +(Lbr/com/legalconnect/auth/entity/Tenant;)V setNomeCompleto (Ljava/lang/String;)V setEmail setCpf setTelefone setSenhaHash 
setFotoUrl setUserType 2(Lbr/com/legalconnect/user/entity/User$UserType;)V 	setStatus 4(Lbr/com/legalconnect/user/entity/User$UserStatus;)V setRoles (Ljava/util/Set;)V :(Ljava/util/Set<Lbr/com/legalconnect/user/entity/Role;>;)V
  (Lbr/com/legalconnect/auth/entity/Tenant;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/user/entity/User$UserType;Lbr/com/legalconnect/user/entity/User$UserStatus;Ljava/util/Set;)V.(Lbr/com/legalconnect/auth/entity/Tenant;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/user/entity/User$UserType;Lbr/com/legalconnect/user/entity/User$UserStatus;Ljava/util/Set<Lbr/com/legalconnect/user/entity/Role;>;)V equals (Ljava/lang/Object;)Z
  à á Þ canEqual
 ã å ä java/lang/Object Ý Þ
  ç » ¼
  é ½ {
  ë ¾ {
  í ¿ {
  ï À {
  ñ Á {
  ó Â {
  õ Ã Ä
  ÷ Å Æ
  ù Ç È o Ljava/lang/Object; other this$tenant other$tenant this$nomeCompleto other$nomeCompleto 
this$email other$email this$cpf 	other$cpf 
this$telefone other$telefone this$senhaHash other$senhaHash this$fotoUrl 
other$fotoUrl 
this$userType other$userType this$status other$status 
this$roles other$roles hashCode ()I
 ã PRIME I result $tenant 
$nomeCompleto $email $cpf 	$telefone 
$senhaHash $fotoUrl 	$userType $status $roles lambda$0 l(Lbr/com/legalconnect/user/entity/Role;)Lorg/springframework/security/core/authority/SimpleGrantedAuthority;% Borg/springframework/security/core/authority/SimpleGrantedAuthority
')( $br/com/legalconnect/user/entity/Role* { getNome
$,  Í role &Lbr/com/legalconnect/user/entity/Role; 
SourceFile 	User.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_user BootstrapMethods
687 "java/lang/invoke/LambdaMetafactory9: metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;5 &(Ljava/lang/Object;)Ljava/lang/Object;<
 ?"#># InnerClassesD ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder UserBuilder UserBuilderImpl 
UserStatusJ -br/com/legalconnect/user/entity/User$UserType UserTypeM %java/lang/invoke/MethodHandles$LookupO java/lang/invoke/MethodHandles Lookup NestMembers !            	 
          
e     s  Z  s             s  Z  I             s  Z  Z  I              s   Z  Z  I !  "          s " I #  $          s % Z  &s '  (          s ) &s '  * +        ,  -e . /   s 0 Z  I 1  2 3        ,  -e . /   s 2 Z  I 1  4 5  6    7    4  8  
e  9 :  s ; <[ @   s = >[ @   s ? $  @ A  B   )      	¸ C³ I±    K       4 L       M N  6    O B   g     -² IP*´ R¹ T *´ Z¹ \ º b  ¹ f ¸ l¹ r À v°    K       {  |  } ! ~ , | L       - x y    z {  B   /     *´ |°    K        L        x y    ~ {  B   /     *´ R°    K        L        x y       B   ,     ¬    K        L        x y       B   A     *´ ² ¦ ¬¬    K       ¨ L        x y            B   ,     ¬    K       ³ L        x y       B   A     *´ ² ¦ ¬¬    K       ¾ L        x y            6             B   ¯     a*+· *» Y· µ Z*+´ µ *+´ µ *+´  µ R*+´ ¡µ £*+´ ¤µ ¦*+´ §µ |*+´ ¨µ ª*+´ «µ ­*+´ ®µ *+´ ¯µ Z±    K       0  Z  0 L       a x y     a ° ±  ²       a ° ³  ´    °  	 µ ¶  6    ·         B   (      » ¸Y· º°    K       0 L       » ¼          B   /     *´ °    K       , L        x y    ½ {          B   /     *´ °    K       , L        x y    ¾ {          B   /     *´ R°    K       , L        x y    ¿ {          B   /     *´ £°    K       , L        x y    À {          B   /     *´ ¦°    K       , L        x y    Á {          B   /     *´ |°    K       , L        x y    Â {          B   /     *´ ª°    K       , L        x y    Ã Ä          B   /     *´ ­°    K       , L        x y    Å Æ          B   /     *´ °    K       , L        x y    Ç È  6    É         B   /     *´ Z°    K       , L        x y    Ê Ë          B   :     *+µ ±    K       - L        x y      	 
  ´    	   Ì Í          B   :     *+µ ±    K       - L        x y         ´       Î Í          B   :     *+µ R±    K       - L        x y         ´       Ï Í          B   :     *+µ £±    K       - L        x y          ´        Ð Í          B   :     *+µ ¦±    K       - L        x y      "   ´    "   Ñ Í          B   :     *+µ |±    K       - L        x y      $   ´    $   Ò Í          B   :     *+µ ª±    K       - L        x y      (   ´    (   Ó Ô          B   :     *+µ ­±    K       - L        x y      * +  ´    *   Õ Ö          B   :     *+µ ±    K       - L        x y      2 3  ´    2   × Ø  6    Ù         B   L     *+µ Z±    K       - L        x y      4 5  ²        4 7  ´    4    A          B   B     *· Ú*» Y· µ Z±    K       .  Z  . L        x y     Û  6    Ü         B   ñ     I*· Ú*» Y· µ Z*+µ *,µ *-µ R*µ £*µ ¦*µ |*µ ª*µ ­*	µ *
µ Z±    K       /  Z  / L   p    I x y     I 	 
    I      I      I       I "     I $     I (     I * +    I 2 3 	   I 4 5 
 ²       I 4 7 
 ´   )
 	         "  $  (  *  2  4   Ý Þ          B      +*¦ ¬+Á  ¬+À M,*¶ ß ¬*+· â ¬*¶ æN,¶ æ:-Ç Æ § -¶ â ¬*¶ è:,¶ è:Ç Æ § 
¶ â ¬*¶ ê:,¶ ê:Ç Æ § 
¶ â ¬*¶ ì:	,¶ ì:
	Ç 
Æ § 
	
¶ â ¬*¶ î:,¶ î:Ç Æ § 
¶ â ¬*¶ ð:
,¶ ð:
Ç Æ § 

¶ â ¬*¶ ò:,¶ ò:Ç Æ § 
¶ â ¬*¶ ô:,¶ ô:Ç Æ § 
¶ â ¬*¶ ö:,¶ ö:Ç Æ § 
¶ â ¬*¶ ø:,¶ ø:Ç Æ § 
¶ â ¬¬    K       1 L   è    x y     ú û   ü y  .l ý û  4f þ û  QI ÿ û  WC  û  v$ û  | û   ÿ û 	 ¡ ù û 
 À Ú û  Æ Ô û  å µ û 
 ë ¯ û 
 	 û  
 û / k û 5 e û T F
 û Z @ û y ! û   û     y "ü  	ý  ã ãý  ã ã	ý  ã ã	ý  ã ã	ý  ã ã	ý  ã ã	ý  ã ã	ý  ã ã	ý  ã ã	ý  ã ã	 ´    ú   á Þ          B   9     +Á ¬    K       1 L        x y      ü û  ´    ü            B    
  ;<*·=*¶ æN;h-Ç +§ -¶`=*¶ è:;hÇ +§ ¶`=*¶ ê:;hÇ +§ ¶`=*¶ ì:;hÇ +§ ¶`=*¶ î:;hÇ +§ ¶`=*¶ ð:;hÇ +§ ¶`=*¶ ò:	;h	Ç +§ 	¶`=*¶ ô:
;h
Ç +§ 
¶`=*¶ ö:;hÇ +§ ¶`=*¶ ø:;hÇ +§ ¶`=¬    K       1 L    
   x y     
  
 û  & ï û  A Ô û  \ ¹ û  w  û    û  ­ h û 	 È M û 
 ã 2  û  þ ! û    Z ÿ    ã ÿ    ã ÿ    ã ã ÿ    ã ã ÿ    ã ã ã ÿ    ã ã ã ÿ    ã ã ã ã ÿ    ã ã ã ã ÿ    ã ã ã ã ã ÿ    ã ã ã ã ã ÿ  	  ã ã ã ã ã ã ÿ  	  ã ã ã ã ã ã ÿ  
  ã ã ã ã ã ã ã ÿ  
  ã ã ã ã ã ã ã ÿ    ã ã ã ã ã ã ã ã ÿ    ã ã ã ã ã ã ã ã ÿ    ã ã ã ã ã ã ã ã ã ÿ    ã ã ã ã ã ã ã ã ã ÿ  
  ã ã ã ã ã ã ã ã ã ã ÿ  
  ã ã ã ã ã ã ã ã ã ã 
"#  B   6     »$Y*¶&·+°    K       } L       -.   /   0     1  2  s34    ; =@AB   2 C E	  F	 ¸ G   H@I K@LNP Q   
   ¸ I
```
```java
Êþº¾   =   @br/com/legalconnect/user/repository/PasswordResetTokenRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository findByToken ((Ljava/lang/String;)Ljava/util/Optional; 	Signature ^(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/user/entity/PasswordResetToken;>; token MethodParameters 
findByUser <(Lbr/com/legalconnect/user/entity/User;)Ljava/util/Optional; r(Lbr/com/legalconnect/user/entity/User;)Ljava/util/Optional<Lbr/com/legalconnect/user/entity/PasswordResetToken;>; user findByUserAndUsado =(Lbr/com/legalconnect/user/entity/User;Z)Ljava/util/Optional; s(Lbr/com/legalconnect/user/entity/User;Z)Ljava/util/Optional<Lbr/com/legalconnect/user/entity/PasswordResetToken;>; b 
SourceFile !PasswordResetTokenRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/user/entity/PasswordResetToken;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
   	               	        	             	            
```
```java
Êþº¾   =   :br/com/legalconnect/user/repository/RefreshTokenRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository findByToken ((Ljava/lang/String;)Ljava/util/Optional; 	Signature X(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/user/entity/RefreshToken;>; token MethodParameters 
findByUser <(Lbr/com/legalconnect/user/entity/User;)Ljava/util/Optional; l(Lbr/com/legalconnect/user/entity/User;)Ljava/util/Optional<Lbr/com/legalconnect/user/entity/RefreshToken;>; user 
deleteByToken (Ljava/lang/String;)V 
SourceFile RefreshTokenRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/user/entity/RefreshToken;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
   	                            	            
```
```java
Êþº¾   =   2br/com/legalconnect/user/repository/RoleRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository 
findByNome ((Ljava/lang/String;)Ljava/util/Optional; 	Signature P(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/user/entity/Role;>; 
roleClient MethodParameters 
SourceFile RoleRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/user/entity/Role;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
         
     	            
```
```java
Êþº¾   =   2br/com/legalconnect/user/repository/UserRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository findByEmail ((Ljava/lang/String;)Ljava/util/Optional; 	Signature P(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/user/entity/User;>; email MethodParameters 
existsByEmail (Ljava/lang/String;)Z existsByCpf cpf 
SourceFile UserRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/user/entity/User;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
                          	            
```
```java
Êþº¾   = )  ,br/com/legalconnect/user/service/UserService  java/lang/Object userRepository 4Lbr/com/legalconnect/user/repository/UserRepository; 
existsById %(Ljava/util/UUID;)Ljava/lang/Boolean; Code	     
   2br/com/legalconnect/user/repository/UserRepository   (Ljava/lang/Object;)Z
    java/lang/Boolean   valueOf (Z)Ljava/lang/Boolean; LineNumberTable LocalVariableTable this .Lbr/com/legalconnect/user/service/UserService; id Ljava/util/UUID; MethodParameters <init> 7(Lbr/com/legalconnect/user/repository/UserRepository;)V RuntimeInvisibleAnnotations Llombok/Generated;
  #  $ ()V 
SourceFile UserService.java RuntimeVisibleAnnotations (Lorg/springframework/stereotype/Service; !                	   B     *´ 
+¹  ¸ °                                               !   	   >     
*· "*+µ 
±                   
       
           %    & '     (  
```
```java
Êþº¾   =    br/com/legalconnect/util/Util  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this Lbr/com/legalconnect/util/Util; sanitizeTenantId &(Ljava/lang/String;)Ljava/lang/String;  [^a-zA-Z0-9]  _
    java/lang/String   
replaceAll 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; tenantId Ljava/lang/String; cleaned MethodParameters 
SourceFile 	Util.java !               /     *· ±    
                 
   	       C     *¶ L+°    
   
     	              	                 
```
```java
-- src/main/resources/db/migration/V1__Create_All_Initial_Schema.sql

-- Seus comentários iniciais ou informações sobre o script
-- Este script cria todas as tabelas iniciais para o sistema LegalConnect.
-- Ele unifica as definições de schemas de usuários/tenants com as entidades de negócio.

---

-- Tabela tb_tenant
-- Entidade que representa um tenant (ambiente isolado para escritórios/advogados).
CREATE TABLE tb_tenant (
    id UUID PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    nome VARCHAR(255) NOT NULL,
    schema_name VARCHAR(63) NOT NULL UNIQUE,
    status VARCHAR(50) NOT NULL
);

COMMENT ON TABLE tb_tenant IS 'Entidade que representa um tenant (ambiente isolado para escritórios/advogados).';
COMMENT ON COLUMN tb_tenant.id IS 'Identificador único do tenant.';
COMMENT ON COLUMN tb_tenant.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_tenant.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_tenant.nome IS 'Nome descritivo do tenant (ex: "JusPlatform Principal").';
COMMENT ON COLUMN tb_tenant.schema_name IS 'Nome do esquema do banco de dados para multitenancy.';
COMMENT ON COLUMN tb_tenant.status IS 'Status operacional atual do tenant (ex: ACTIVE, INACTIVE, PENDING_ACTIVATION, SUSPENDED).';

-- Índices para tb_tenant
CREATE INDEX idx_tenant_schema_name ON tb_tenant (schema_name);
CREATE INDEX idx_tenant_status ON tb_tenant (status);

---

-- Tabela tb_role
-- Entidade para definir os papéis de acesso do usuário no sistema.
-- Unificada a partir das duas definições, mantendo created_at e updated_at.
CREATE TABLE tb_role (
    id UUID PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    nome VARCHAR(100) NOT NULL UNIQUE,
    descricao TEXT
);

COMMENT ON TABLE tb_role IS 'Entidade para definir os papéis de acesso do usuário no sistema.';
COMMENT ON COLUMN tb_role.id IS 'Identificador único do papel.';
COMMENT ON COLUMN tb_role.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_role.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_role.nome IS 'Nome descritivo e único do papel (ex: CLIENTE, ADVOGADO).';
COMMENT ON COLUMN tb_role.descricao IS 'Uma descrição detalhada do papel.';

-- Índices para tb_role
CREATE INDEX idx_role_nome ON tb_role (nome);

---

-- Tabela tb_user
-- Entidade base para todos os usuários (clientes, advogados, administradores de tenant, etc.).
CREATE TABLE tb_user (
    id UUID PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    tenant_id UUID NOT NULL, -- Chave estrangeira para tb_tenant
    nome_completo VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE, -- Unique por tenant/schema ou globalmente? Se global, pode ser um problema de multitenancy. Assumindo global por enquanto.
    cpf VARCHAR(14) NOT NULL UNIQUE,   -- Unique por tenant/schema ou globalmente? Assumindo global por enquanto.
    telefone VARCHAR(20),
    senha_hash TEXT NOT NULL,
    foto_url TEXT,
    user_type VARCHAR(50) NOT NULL,
    status VARCHAR(50) NOT NULL,
    CONSTRAINT fk_user_tenant FOREIGN KEY (tenant_id) REFERENCES tb_tenant (id)
);

COMMENT ON TABLE tb_user IS 'Entidade base para todos os usuários (clientes, advogados, administradores de tenant, etc.).';
COMMENT ON COLUMN tb_user.id IS 'Identificador único do usuário.';
COMMENT ON COLUMN tb_user.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_user.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_user.tenant_id IS 'Identificador do tenant ao qual o usuário pertence.';
COMMENT ON COLUMN tb_user.nome_completo IS 'Nome completo do usuário.';
COMMENT ON COLUMN tb_user.email IS 'Endereço de e-mail principal do usuário (único por schema de tenant).';
COMMENT ON COLUMN tb_user.cpf IS 'Número do Cadastro de Pessoa Física do usuário (único por schema de tenant).';
COMMENT ON COLUMN tb_user.telefone IS 'Número de telefone de contato do usuário.';
COMMENT ON COLUMN tb_user.senha_hash IS 'Representação criptografada (hashed) da senha do usuário.';
COMMENT ON COLUMN tb_user.foto_url IS 'URL da foto de perfil do usuário no S3.';
COMMENT ON COLUMN tb_user.user_type IS 'Categoria principal do usuário (ex: CLIENTE, ADVOGADO, PLATAFORMA_ADMIN).';
COMMENT ON COLUMN tb_user.status IS 'Status atual da conta do usuário (ex: ACTIVE, INACTIVE, PENDING_APPROVAL, REJECTED).';

-- Índices para tb_user
CREATE INDEX idx_user_tenant_id ON tb_user (tenant_id);
CREATE INDEX idx_user_email ON tb_user (email);
CREATE INDEX idx_user_cpf ON tb_user (cpf);
CREATE INDEX idx_user_type ON tb_user (user_type);
CREATE INDEX idx_user_status ON tb_user (status);

---

-- Tabela de junção tb_user_role
-- Tabela de junção para o relacionamento muitos-para-muitos entre User e Role.
CREATE TABLE tb_user_role (
    user_id UUID NOT NULL,
    role_id UUID NOT NULL,
    PRIMARY KEY (user_id, role_id),
    CONSTRAINT fk_user_role_user FOREIGN KEY (user_id) REFERENCES tb_user (id),
    CONSTRAINT fk_user_role_role FOREIGN KEY (role_id) REFERENCES tb_role (id)
);

COMMENT ON TABLE tb_user_role IS 'Tabela de junção para o relacionamento muitos-para-muitos entre User e Role.';
COMMENT ON COLUMN tb_user_role.user_id IS 'ID do usuário.';
COMMENT ON COLUMN tb_user_role.role_id IS 'ID do papel.';

-- Índices para tb_user_role
CREATE INDEX idx_user_role_user_id ON tb_user_role (user_id);
CREATE INDEX idx_user_role_role_id ON tb_user_role (role_id);

---

-- Tabela tb_refresh_token
-- Entidade que representa o Refresh Token no banco de dados.
-- Unificada a partir das duas definições, mantendo created_at e updated_at.
CREATE TABLE tb_refresh_token (
    id UUID PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    user_id UUID NOT NULL UNIQUE,
    token TEXT NOT NULL UNIQUE,
    expira_em TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    CONSTRAINT fk_refresh_token_user FOREIGN KEY (user_id) REFERENCES tb_user (id)
);

COMMENT ON TABLE tb_refresh_token IS 'Entidade que representa o Refresh Token no banco de dados.';
COMMENT ON COLUMN tb_refresh_token.id IS 'Identificador único do refresh token.';
COMMENT ON COLUMN tb_refresh_token.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_refresh_token.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_refresh_token.user_id IS 'Usuário ao qual este refresh token está associado.';
COMMENT ON COLUMN tb_refresh_token.token IS 'O valor real do refresh token.';
COMMENT ON COLUMN tb_refresh_token.expira_em IS 'Data e hora em que este refresh token se tornará inválido.';

-- Índices para tb_refresh_token
CREATE INDEX idx_refresh_token_user_id ON tb_refresh_token (user_id);
CREATE INDEX idx_refresh_token_expira_em ON tb_refresh_token (expira_em);

---

-- Tabela tb_password_reset_token
-- Entidade que representa um token de redefinição de senha.
CREATE TABLE tb_password_reset_token (
    id UUID PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    token TEXT NOT NULL UNIQUE,
    user_id UUID NOT NULL,
    expira_em TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    usado BOOLEAN NOT NULL DEFAULT FALSE,
    CONSTRAINT fk_password_reset_user FOREIGN KEY (user_id) REFERENCES tb_user (id)
);

COMMENT ON TABLE tb_password_reset_token IS 'Entidade que representa um token de redefinição de senha.';
COMMENT ON COLUMN tb_password_reset_token.id IS 'Identificador único do token de redefinição.';
COMMENT ON COLUMN tb_password_reset_token.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_password_reset_token.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_password_reset_token.token IS 'O valor real do token de redefinição.';
COMMENT ON COLUMN tb_password_reset_token.user_id IS 'Usuário ao qual este token de redefinição está associado.';
COMMENT ON COLUMN tb_password_reset_token.expira_em IS 'Data e hora em que este token se tornará inválido.';
COMMENT ON COLUMN tb_password_reset_token.usado IS 'Indica se o token já foi utilizado para redefinir a senha.';

-- Índices para tb_password_reset_token
CREATE INDEX idx_password_reset_token_user_id ON tb_password_reset_token (user_id);
CREATE INDEX idx_password_reset_token_expira_em ON tb_password_reset_token (expira_em);
CREATE INDEX idx_password_reset_token_usado ON tb_password_reset_token (usado);

---

-- Tabela tb_empresa
-- Criação da tabela tb_empresa para dados de empresas.
CREATE TABLE tb_empresa (
    id UUID NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    cnpj VARCHAR(18) NOT NULL UNIQUE,
    email_contato VARCHAR(255) NULL,
    nome_fantasia VARCHAR(255) NOT NULL,
    razao_social VARCHAR(255) NOT NULL,
    CONSTRAINT tb_empresa_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE tb_empresa IS 'Entidade que representa uma empresa.';
COMMENT ON COLUMN tb_empresa.id IS 'Identificador único da empresa.';
COMMENT ON COLUMN tb_empresa.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_empresa.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_empresa.cnpj IS 'CNPJ da empresa (único).';
COMMENT ON COLUMN tb_empresa.email_contato IS 'Email de contato da empresa.';
COMMENT ON COLUMN tb_empresa.nome_fantasia IS 'Nome fantasia da empresa.';
COMMENT ON COLUMN tb_empresa.razao_social IS 'Razão social da empresa.';

-- Índices para tb_empresa
CREATE INDEX idx_empresa_cnpj ON tb_empresa (cnpj);

---

-- Tabela tb_plano
-- Criação da tabela tb_plano para detalhes de planos de assinatura.
CREATE TABLE tb_plano (
    id UUID NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    nome VARCHAR(100) NOT NULL UNIQUE,
    descricao TEXT NULL,
    preco_mensal NUMERIC(10, 2) NOT NULL,
    preco_anual NUMERIC(10, 2) NOT NULL,
    acesso_relatorios_avancados BOOLEAN NOT NULL,
    is_default BOOLEAN NOT NULL,
    limite_servicos_agendaveis INT NULL,
    periodo_teste_dias INT NULL,
    permite_pedidos_orcamento BOOLEAN NOT NULL,
    visibilidade_destaque VARCHAR(50) NOT NULL,
    CONSTRAINT tb_plano_pkey PRIMARY KEY (id),
    CONSTRAINT tb_plano_visibilidade_destaque_check CHECK (visibilidade_destaque IN ('PADRAO', 'PREMIUM', 'DESTAQUE_MAXIMO'))
);

COMMENT ON TABLE tb_plano IS 'Entidade que representa os diferentes planos de assinatura.';
COMMENT ON COLUMN tb_plano.id IS 'Identificador único do plano.';
COMMENT ON COLUMN tb_plano.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_plano.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_plano.nome IS 'Nome do plano (único).';
COMMENT ON COLUMN tb_plano.descricao IS 'Descrição detalhada do plano.';
COMMENT ON COLUMN tb_plano.preco_mensal IS 'Preço mensal do plano.';
COMMENT ON COLUMN tb_plano.preco_anual IS 'Preço anual do plano.';
COMMENT ON COLUMN tb_plano.acesso_relatorios_avancados IS 'Indica se o plano inclui acesso a relatórios avançados.';
COMMENT ON COLUMN tb_plano.is_default IS 'Indica se este é o plano padrão.';
COMMENT ON COLUMN tb_plano.limite_servicos_agendaveis IS 'Limite de serviços agendáveis para o plano.';
COMMENT ON COLUMN tb_plano.periodo_teste_dias IS 'Período de teste em dias, se aplicável.';
COMMENT ON COLUMN tb_plano.permite_pedidos_orcamento IS 'Indica se o plano permite pedidos de orçamento.';
COMMENT ON COLUMN tb_plano.visibilidade_destaque IS 'Nível de visibilidade de destaque do plano.';

-- Índices para tb_plano
CREATE INDEX idx_plano_nome ON tb_plano (nome);
CREATE INDEX idx_plano_is_default ON tb_plano (is_default);

---

-- Tabela tb_pessoa
-- Entidade base para pessoas físicas (clientes, profissionais, administradores de plataforma).
CREATE TABLE tb_pessoa (
    id UUID PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    user_id UUID NOT NULL UNIQUE, -- Chave estrangeira para tb_user
    nome_completo VARCHAR(255) NOT NULL,
    cpf VARCHAR(14) NOT NULL UNIQUE,
    data_nascimento DATE NULL,
    CONSTRAINT fk_pessoa_user FOREIGN KEY (user_id) REFERENCES tb_user (id)
);

COMMENT ON TABLE tb_pessoa IS 'Entidade base para pessoas físicas (clientes, profissionais, administradores de plataforma).';
COMMENT ON COLUMN tb_pessoa.id IS 'Identificador único da pessoa.';
COMMENT ON COLUMN tb_pessoa.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_pessoa.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_pessoa.user_id IS 'ID do usuário associado a esta pessoa.';
COMMENT ON COLUMN tb_pessoa.nome_completo IS 'Nome completo da pessoa.';
COMMENT ON COLUMN tb_pessoa.cpf IS 'CPF da pessoa (único).';
COMMENT ON COLUMN tb_pessoa.data_nascimento IS 'Data de nascimento da pessoa.';

-- Índices para tb_pessoa
CREATE INDEX idx_pessoa_user_id ON tb_pessoa (user_id);
CREATE INDEX idx_pessoa_cpf ON tb_pessoa (cpf);

---

-- Tabela tb_administrador
-- Entidade para administradores da plataforma. Herda de tb_pessoa.
CREATE TABLE tb_administrador (
    id UUID PRIMARY KEY, -- Chave estrangeira para tb_pessoa
    status VARCHAR(255) NULL, -- Ex: 'ATIVO', 'INATIVO'
    CONSTRAINT fk_administrador_pessoa FOREIGN KEY (id) REFERENCES tb_pessoa (id)
);

COMMENT ON TABLE tb_administrador IS 'Entidade que representa um administrador da plataforma.';
COMMENT ON COLUMN tb_administrador.id IS 'Identificador único do administrador (chave estrangeira para tb_pessoa).';
COMMENT ON COLUMN tb_administrador.status IS 'Status do administrador.';

---

-- Tabela tb_cliente
-- Entidade para clientes. Herda de tb_pessoa.
CREATE TABLE tb_cliente (
    id UUID PRIMARY KEY, -- Chave estrangeira para tb_pessoa
    status VARCHAR(255) NULL, -- Ex: 'ATIVO', 'INATIVO', 'PENDENTE'
    tipo VARCHAR(255) NULL,   -- Ex: 'PESSOA_FISICA', 'PESSOA_JURIDICA'
    CONSTRAINT fk_cliente_pessoa FOREIGN KEY (id) REFERENCES tb_pessoa (id)
);

COMMENT ON TABLE tb_cliente IS 'Entidade que representa um cliente.';
COMMENT ON COLUMN tb_cliente.id IS 'Identificador único do cliente (chave estrangeira para tb_pessoa).';
COMMENT ON COLUMN tb_cliente.status IS 'Status do cliente.';
COMMENT ON COLUMN tb_cliente.tipo IS 'Tipo de cliente (Pessoa Física ou Jurídica).';

---

-- Tabela tb_profissional
-- Entidade para profissionais (advogados). Herda de tb_pessoa.
CREATE TABLE tb_profissional (
    id UUID PRIMARY KEY, -- Chave estrangeira para tb_pessoa
    plano_id UUID NOT NULL, -- Chave estrangeira para tb_plano
    empresa_id UUID NULL, -- Opcional: para qual empresa o profissional está vinculado
    numero_oab VARCHAR(50) NOT NULL UNIQUE,
    status_profissional VARCHAR(50) NOT NULL,
    faz_parte_de_plano BOOLEAN NOT NULL,
    usa_marketplace BOOLEAN NOT NULL,
    CONSTRAINT fk_profissional_pessoa FOREIGN KEY (id) REFERENCES tb_pessoa (id),
    CONSTRAINT fk_profissional_plano FOREIGN KEY (plano_id) REFERENCES tb_plano (id),
    CONSTRAINT fk_profissional_empresa FOREIGN KEY (empresa_id) REFERENCES tb_empresa (id),
    CONSTRAINT tb_profissional_status_profissional_check CHECK (status_profissional IN ('ATIVO', 'LICENCIADO', 'SUSPENSO', 'EM_ANALISE'))
);

COMMENT ON TABLE tb_profissional IS 'Entidade que representa um profissional (advogado).';
COMMENT ON COLUMN tb_profissional.id IS 'Identificador único do profissional (chave estrangeira para tb_pessoa).';
COMMENT ON COLUMN tb_profissional.plano_id IS 'ID do plano de assinatura do profissional.';
COMMENT ON COLUMN tb_profissional.empresa_id IS 'ID da empresa à qual o profissional está vinculado (opcional).';
COMMENT ON COLUMN tb_profissional.numero_oab IS 'Número da OAB do profissional (único).';
COMMENT ON COLUMN tb_profissional.status_profissional IS 'Status atual do profissional.';
COMMENT ON COLUMN tb_profissional.faz_parte_de_plano IS 'Indica se o profissional faz parte de um plano.';
COMMENT ON COLUMN tb_profissional.usa_marketplace IS 'Indica se o profissional utiliza o marketplace.';

-- Índices para tb_profissional
CREATE INDEX idx_profissional_plano_id ON tb_profissional (plano_id);
CREATE INDEX idx_profissional_empresa_id ON tb_profissional (empresa_id);
CREATE INDEX idx_profissional_oab ON tb_profissional (numero_oab);

---

-- Tabela tb_user_profissionals_role (Correção do nome para clareza)
-- Tabela de junção para os papéis específicos de um profissional (se for diferente de tb_user_role).
-- NOTE: Se um "profissional" é apenas um "user" com um "user_type" específico,
-- e seus papéis já são geridos por `tb_user_role`, esta tabela pode ser redundante.
-- Mantendo-a aqui conforme o seu script original, mas considere a sua necessidade.
CREATE TABLE tb_profissional_role (
    profissional_id UUID NOT NULL, -- Renomeado para clareza
    role_id UUID NOT NULL,
    PRIMARY KEY (profissional_id, role_id),
    CONSTRAINT fk_profissional_role_profissional FOREIGN KEY (profissional_id) REFERENCES tb_profissional (id),
    CONSTRAINT fk_profissional_role_role FOREIGN KEY (role_id) REFERENCES tb_role (id)
);

COMMENT ON TABLE tb_profissional_role IS 'Tabela de junção para os papéis específicos de um profissional.';
COMMENT ON COLUMN tb_profissional_role.profissional_id IS 'ID do profissional.';
COMMENT ON COLUMN tb_profissional_role.role_id IS 'ID do papel.';

-- Índices para tb_profissional_role
CREATE INDEX idx_profissional_role_profissional_id ON tb_profissional_role (profissional_id);
CREATE INDEX idx_profissional_role_role_id ON tb_profissional_role (role_id);

---

-- Tabela tb_empresa_telefones
-- Tabela de telefones para empresas.
CREATE TABLE tb_empresa_telefones (
    empresa_id UUID NOT NULL,
    numero_telefone VARCHAR(20) NOT NULL, -- Telefone não pode ser NULL se for a lista de telefones de uma empresa.
    PRIMARY KEY (empresa_id, numero_telefone), -- Adicionado PRIMARY KEY composta para unicidade
    CONSTRAINT fk_empresa_telefones_empresa FOREIGN KEY (empresa_id) REFERENCES tb_empresa (id)
);

COMMENT ON TABLE tb_empresa_telefones IS 'Tabela para armazenar os números de telefone de uma empresa.';
COMMENT ON COLUMN tb_empresa_telefones.empresa_id IS 'ID da empresa.';
COMMENT ON COLUMN tb_empresa_telefones.numero_telefone IS 'Número de telefone da empresa.';

-- Índices para tb_empresa_telefones
CREATE INDEX idx_empresa_telefones_empresa_id ON tb_empresa_telefones (empresa_id);

---

-- Tabela tb_pessoa_telefones
-- Tabela de telefones para pessoas.
CREATE TABLE tb_pessoa_telefones (
    pessoa_id UUID NOT NULL,
    numero_telefone VARCHAR(20) NOT NULL, -- Telefone não pode ser NULL se for a lista de telefones de uma pessoa.
    PRIMARY KEY (pessoa_id, numero_telefone), -- Adicionado PRIMARY KEY composta para unicidade
    CONSTRAINT fk_pessoa_telefones_pessoa FOREIGN KEY (pessoa_id) REFERENCES tb_pessoa (id)
);

COMMENT ON TABLE tb_pessoa_telefones IS 'Tabela para armazenar os números de telefone de uma pessoa.';
COMMENT ON COLUMN tb_pessoa_telefones.pessoa_id IS 'ID da pessoa.';
COMMENT ON COLUMN tb_pessoa_telefones.numero_telefone IS 'Número de telefone da pessoa.';

-- Índices para tb_pessoa_telefones
CREATE INDEX idx_pessoa_telefones_pessoa_id ON tb_pessoa_telefones (pessoa_id);

---

-- Tabela tb_endereco
-- Tabela para endereços, associados a empresas ou pessoas.
CREATE TABLE tb_endereco (
    id UUID NOT NULL PRIMARY KEY,
    created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    empresa_id UUID NULL, -- Pode ser nulo se for endereço de pessoa
    pessoa_id UUID NULL,  -- Pode ser nulo se for endereço de empresa
    cep VARCHAR(9) NOT NULL,
    logradouro VARCHAR(255) NOT NULL,
    numero VARCHAR(20) NOT NULL,
    complemento VARCHAR(255) NULL,
    bairro VARCHAR(100) NOT NULL,
    cidade VARCHAR(100) NOT NULL,
    estado VARCHAR(2) NOT NULL,
    pais VARCHAR(50) NOT NULL,
    tipo_endereco VARCHAR(50) NOT NULL,
    CONSTRAINT chk_endereco_associacao CHECK (
        (empresa_id IS NOT NULL AND pessoa_id IS NULL) OR
        (empresa_id IS NULL AND pessoa_id IS NOT NULL) OR
        (empresa_id IS NULL AND pessoa_id IS NULL) -- Pode ser um endereço 'solto' ou associado em outro lugar
    ),
    CONSTRAINT tb_endereco_tipo_endereco_check CHECK (tipo_endereco IN ('RESIDENCIAL', 'COMERCIAL', 'ESCRITORIO', 'COBRANCA', 'ENTREGA', 'OUTRO')),
    CONSTRAINT fk_endereco_empresa FOREIGN KEY (empresa_id) REFERENCES tb_empresa (id),
    CONSTRAINT fk_endereco_pessoa FOREIGN KEY (pessoa_id) REFERENCES tb_pessoa (id)
);

COMMENT ON TABLE tb_endereco IS 'Entidade que representa um endereço físico, que pode ser associado a uma empresa ou pessoa.';
COMMENT ON COLUMN tb_endereco.id IS 'Identificador único do endereço.';
COMMENT ON COLUMN tb_endereco.created_at IS 'Timestamp da criação do registro.';
COMMENT ON COLUMN tb_endereco.updated_at IS 'Timestamp da última atualização do registro.';
COMMENT ON COLUMN tb_endereco.empresa_id IS 'ID da empresa associada a este endereço (pode ser nulo).';
COMMENT ON COLUMN tb_endereco.pessoa_id IS 'ID da pessoa associada a este endereço (pode ser nulo).';
COMMENT ON COLUMN tb_endereco.cep IS 'CEP do endereço.';
COMMENT ON COLUMN tb_endereco.logradouro IS 'Nome da rua ou avenida.';
COMMENT ON COLUMN tb_endereco.numero IS 'Número do imóvel.';
COMMENT ON COLUMN tb_endereco.complemento IS 'Complemento do endereço (ex: apto, sala).';
COMMENT ON COLUMN tb_endereco.bairro IS 'Nome do bairro.';
COMMENT ON COLUMN tb_endereco.cidade IS 'Nome da cidade.';
COMMENT ON COLUMN tb_endereco.estado IS 'Sigla do estado (UF).';
COMMENT ON COLUMN tb_endereco.pais IS 'Nome do país.';
COMMENT ON COLUMN tb_endereco.tipo_endereco IS 'Tipo do endereço (RESIDENCIAL, COMERCIAL, etc.).';

-- Índices para tb_endereco
CREATE INDEX idx_endereco_empresa_id ON tb_endereco (empresa_id);
CREATE INDEX idx_endereco_pessoa_id ON tb_endereco (pessoa_id);
CREATE INDEX idx_endereco_cep ON tb_endereco (cep);
CREATE INDEX idx_endereco_cidade_estado ON tb_endereco (cidade, estado);


-- Configuração de permissões para o usuário 'jususer' (opcional, pode ser feito via configuração do ORM/datasource)
-- IMPORTANTE: O Flyway executa scripts como o usuário que você configurou no datasource.
-- Geralmente, permissões são gerenciadas pelo DBA ou por ferramentas de gerenciamento de usuários do banco.
-- Se 'jususer' for o usuário do datasource, ele já terá permissões por padrão.
-- Caso contrário, estas permissões podem ser úteis, mas é bom revisar o modelo de segurança.

-- REVOKE ALL ON ALL TABLES IN SCHEMA public FROM PUBLIC; -- Remova esta linha se não for gerenciar permissões globalmente
-- GRANT ALL ON ALL TABLES IN SCHEMA public TO jususer;   -- Remova esta linha se não for gerenciar permissões globalmente

-- Exemplo de como você faria para tabelas específicas, se necessário:
-- ALTER TABLE tb_tenant OWNER TO jususer;
-- GRANT ALL ON TABLE tb_tenant TO jususer;

-- Repita para outras tabelas conforme a necessidade, ou confie nas configurações padrão do ORM/datasource
-- e na administração de usuários do PostgreSQL.
```
```java
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title th:text="${subject}">Bem-vindo!</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f4f4f4;
        margin: 0;
        padding: 20px;
      }
      .container {
        max-width: 600px;
        margin: 0 auto;
        background: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }
      .header {
        text-align: center;
        padding-bottom: 20px;
        border-bottom: 1px solid #eee;
      }
      .header h1 {
        color: #007bff;
      }
      .content {
        padding: 20px 0;
      }
      .footer {
        text-align: center;
        padding-top: 20px;
        border-top: 1px solid #eee;
        font-size: 0.9em;
        color: #777;
      }
      .button {
        display: inline-block;
        background-color: #007bff;
        color: #ffffff;
        padding: 10px 20px;
        text-decoration: none;
        border-radius: 5px;
        margin-top: 20px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1 th:text="${title}">Olá!</h1>
      </div>
      <div class="content">
        <p>
          Prezado(a) <strong th:text="${userName}">Nome do Usuário</strong>,
        </p>
        <p>
          É com grande prazer que confirmamos seu cadastro em nossa plataforma.
        </p>
        <p>
          Seu e-mail de acesso é:
          <strong th:text="${userEmail}">email@example.com</strong>
        </p>
        <p th:text="${message}">
          Aproveite todas as funcionalidades que oferecemos!
        </p>

        <p style="text-align: center">
          <a
            th:href="${callToActionLink}"
            class="button"
            th:text="${callToActionText}"
            >Acessar Plataforma</a
          >
        </p>
      </div>
      <div class="footer">
        <p>
          Este é um e-mail de notificação automático. Por favor, não responda.
        </p>
        <p>
          &copy; <span th:text="${currentYear}">2025</span> Sua Empresa. Todos
          os direitos reservados.
        </p>
      </div>
    </div>
  </body>
</html>

```
```java
package br.com.legalconnect.auth.service;

import br.com.legalconnect.user.entity.Role;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:43:20-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class RoleMapperImpl implements RoleMapper {

    @Override
    public String toRoleName(Role role) {
        if ( role == null ) {
            return null;
        }

        String string = new String();

        return string;
    }
}

```
```java
package br.com.legalconnect.auth.service;

import br.com.legalconnect.auth.dto.UserProfileUpdate;
import br.com.legalconnect.auth.dto.UserRegistrationRequest;
import br.com.legalconnect.auth.dto.UserResponseDTO;
import br.com.legalconnect.user.entity.User;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:43:20-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class UserMapperImpl implements UserMapper {

    @Override
    public UserResponseDTO toDto(User entity) {
        if ( entity == null ) {
            return null;
        }

        UserResponseDTO.UserResponseDTOBuilder userResponseDTO = UserResponseDTO.builder();

        userResponseDTO.cpf( entity.getCpf() );
        userResponseDTO.email( entity.getEmail() );
        userResponseDTO.fotoUrl( entity.getFotoUrl() );
        userResponseDTO.nomeCompleto( entity.getNomeCompleto() );
        userResponseDTO.status( mapUserStatus( entity.getStatus() ) );
        userResponseDTO.telefone( entity.getTelefone() );

        return userResponseDTO.build();
    }

    @Override
    public User toEntity(UserRegistrationRequest dto) {
        if ( dto == null ) {
            return null;
        }

        User.UserBuilder<?, ?> user = User.builder();

        user.cpf( dto.getCpf() );
        user.email( dto.getEmail() );
        user.nomeCompleto( dto.getNomeCompleto() );
        user.telefone( dto.getTelefone() );

        return user.build();
    }

    @Override
    public void updateEntityFromDto(UserProfileUpdate dto, User entity) {
        if ( dto == null ) {
            return;
        }

        entity.setEmail( dto.getEmail() );
        entity.setFotoUrl( dto.getFotoUrl() );
        entity.setNomeCompleto( dto.getNomeCompleto() );
        entity.setTelefone( dto.getTelefone() );
    }
}

```
```java

```
```java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\dto\RecoverPasswordRequest.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\dto\ResetPasswordRequest.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\dto\UserProfileUpdate.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\config\JwtAuthFilter.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\dto\AuthResponse.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\dto\LoginRequestDTO.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\user\repository\PasswordResetTokenRepository.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\user\repository\RoleRepository.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\user\repository\UserRepository.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\util\Util.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\service\UserMapper.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\user\repository\RefreshTokenRepository.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\user\entity\PasswordResetToken.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\AuthServiceApplication.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\controller\AuthController.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\repository\TenantRepository.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\service\RoleMapper.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\entity\Tenant.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\service\JwtService.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\user\entity\Role.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\dto\RefreshTokenRequestDTO.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\user\entity\RefreshToken.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\service\AuthService.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\user\entity\User.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\dto\UserRegistrationRequest.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\service\RefreshTokenService.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\config\SecurityConfig.java
E:\legalconnect\legalconnect\microservices\auth-service\src\main\java\br\com\legalconnect\auth\dto\UserResponseDTO.java

```
```java
Êþº¾   =   Abr/com/legalconnect/auth/auth_service/AuthServiceApplicationTests  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this CLbr/com/legalconnect/auth/auth_service/AuthServiceApplicationTests; contextLoads RuntimeVisibleAnnotations Lorg/junit/jupiter/api/Test; 
SourceFile  AuthServiceApplicationTests.java 6Lorg/springframework/boot/test/context/SpringBootTest;                  /     *· ±    
                 
                   +      ±    
                 
                
```
```java
/mvnw text eol=lf
*.cmd text eol=crlf

```
```java
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

```
```java
# Read Me First
The following was discovered as part of building this project:

* The original package name 'br.com.legalconnect.common.common-lib' is invalid and this project uses 'br.com.legalconnect.common.common_lib' instead.

# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.5.3/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.5.3/maven-plugin/build-image.html)
* [Flyway Migration](https://docs.spring.io/spring-boot/3.5.3/how-to/data-initialization.html#howto.data-initialization.migration-tool.flyway)
* [Spring Boot DevTools](https://docs.spring.io/spring-boot/3.5.3/reference/using/devtools.html)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.


```
```java
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

```
```java
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

```
```java
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.5</version> <!-- Use a versão mais recente e compatível do Spring Boot -->
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>br.com.legalconnect</groupId>
	<artifactId>bff-service</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>bff-service</name>
	<description>Backend For Frontend (BFF) para o gerenciamento de pessoas no LegalConnect</description>

	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2023.0.1</spring-cloud.version> <!-- Versão do Spring Cloud -->
		<org.mapstruct.version>1.5.5.Final</org.mapstruct.version>
		<springdoc-openapi.version>2.5.0</springdoc-openapi.version>
		<jjwt.version>0.11.5</jjwt.version> <!-- Deve ser a mesma versão usada no auth-service -->
	</properties>

	<dependencies>
		<!-- Spring Boot Starters Essenciais -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<!-- Necessário para UserDetailsService, mesmo que não haja persistência de dados no BFF -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- OpenFeign (para comunicação entre microsserviços) -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>

		<!-- Lombok (para reduzir boilerplate de DTOs) -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- MapStruct (para mapeamento de DTOs) -->
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${org.mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-processor</artifactId>
			<version>${org.mapstruct.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- SpringDoc OpenAPI (Swagger UI) -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${springdoc-openapi.version}</version>
		</dependency>

		<!-- JWT libs (para JwtUtilBFF) -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>${jjwt.version}</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>${jjwt.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>${jjwt.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Dependência da common-lib (assumindo que já está publicada em um repositório Maven) -->
		<dependency>
			<groupId>br.com.legalconnect.common</groupId>
			<artifactId>common-lib</artifactId>
			<version>1.0.0</version>
		</dependency>

		<!-- Dependências dos DTOs dos outros microsserviços (para FeignClients) -->
		<!-- Se os DTOs forem duplicados no BFF, estas dependências podem ser removidas -->


		<!-- Testes -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
```
```java
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip

```
```java
{
  "java.configuration.updateBuildConfiguration": "interactive"
}

```
```java
package br.com.legalconnect.bffpessoas;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BffServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(BffServiceApplication.class, args);
	}

}

```
```java
package br.com.legalconnect.bffpessoas.aplicacao;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.openfeign.EnableFeignClients;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @class BffPessoasApplication
 * @brief Classe principal da aplicação Spring Boot para o microsserviço BFF de Pessoas.
 *
 * Esta classe inicializa o contexto da aplicação, habilita o escaneamento de componentes
 * e ativa a funcionalidade do OpenFeign para comunicação entre microsserviços.
 */
@SpringBootApplication
@EnableFeignClients(basePackages = "br.com.legalconnect.bffpessoas.client") // Habilita o Feign para o pacote de clients
public class BffPessoasApplication {

    private static final Logger log = LoggerFactory.getLogger(BffPessoasApplication.class);

    public static void main(String[] args) {
        SpringApplication.run(BffPessoasApplication.class, args);
        log.info("Microsserviço BFF de Pessoas iniciado com sucesso!");
    }
}
```
```java
package br.com.legalconnect.bffpessoas.config;

import br.com.legalconnect.common.config.multitenancy.TenantContext; // Importa TenantContext da common-lib
import br.com.legalconnect.user.entity.User; // Importa a entidade User da common-lib ou user-service
import feign.RequestInterceptor;
import feign.RequestTemplate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

/**
 * @class FeignClientConfig
 * @brief Configuração global para os FeignClients no BFF.
 *
 * Esta classe define um interceptor de requisição que será responsável por
 * injetar os cabeçalhos `X-User-ID` e `X-Tenant-ID` em cada requisição
 * feita por um FeignClient para os microsserviços de backend.
 */
@Configuration
public class FeignClientConfig {

    private static final Logger log = LoggerFactory.getLogger(FeignClientConfig.class);

    /**
     * @brief Cria um bean `RequestInterceptor` para injetar cabeçalhos em requisições Feign.
     *
     * Este interceptor obtém o `userId` do `SecurityContextHolder` (populado pelo
     * `JwtTokenFilter`) e o `tenantId` do `TenantContext` (também populado pelo filtro).
     * Esses IDs são então adicionados como cabeçalhos `X-User-ID` e `X-Tenant-ID`
     * para serem propagados aos microsserviços de downstream.
     * @return Uma instância de `RequestInterceptor`.
     */
    @Bean
    public RequestInterceptor feignRequestInterceptor() {
        log.info("Configurando Feign Request Interceptor para injeção de X-User-ID e X-Tenant-ID.");
        return new RequestInterceptor() {
            @Override
            public void apply(RequestTemplate template) {
                // 1. Tenta obter o userId do SecurityContextHolder
                Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
                if (authentication != null && authentication.getPrincipal() instanceof User) {
                    // Assumimos que o principal é uma instância da entidade User
                    // Se você estiver usando CustomUserDetails (como no auth-service), ajuste o cast.
                    User user = (User) authentication.getPrincipal();
                    if (user.getId() != null) {
                        template.header("X-User-ID", user.getId().toString());
                        log.debug("FeignInterceptor: X-User-ID adicionado: {}", user.getId());
                    } else {
                        log.warn("FeignInterceptor: Principal (User) sem ID. Não adicionando X-User-ID.");
                    }
                } else {
                    log.debug("FeignInterceptor: Nenhuma autenticação ou principal não é do tipo User. Não adicionando X-User-ID.");
                }

                // 2. Tenta obter o tenantId do TenantContext (populado pelo JwtTokenFilter)
                String tenantId = TenantContext.getCurrentTenant();
                if (tenantId != null) {
                    template.header("X-Tenant-ID", tenantId);
                    log.debug("FeignInterceptor: X-Tenant-ID adicionado: {}", tenantId);
                } else {
                    log.warn("FeignInterceptor: TenantContext sem tenantId. Não adicionando X-Tenant-ID.");
                }
            }
        };
    }
}
```
```java
package br.com.legalconnect.bffpessoas.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @class OpenApiConfig
 * @brief Classe de configuração para a documentação da API do BFF usando OpenAPI (Swagger UI).
 *
 * Esta configuração define informações básicas sobre a API, como título,
 * versão, contato, licença e, crucialmente, as configurações de segurança para
 * JWT (Bearer Token), permitindo que o Swagger UI envie tokens de autenticação.
 */
@Configuration
public class OpenApiConfig {

    private static final Logger log = LoggerFactory.getLogger(OpenApiConfig.class);

    /**
     * @brief Define o bean OpenAPI para customizar a documentação.
     *
     * Configura metadados da API e um esquema de segurança global para JWT
     * (Bearer Token), que será exibido no Swagger UI para permitir a inserção
     * do token de autenticação.
     * @return Uma instância de `OpenAPI` com as configurações da API.
     */
    @Bean
    public OpenAPI customOpenAPI() {
        final String securitySchemeName = "bearerAuth"; // Nome do esquema de segurança para o JWT
        log.info("Configurando OpenAPI (Swagger) para o BFF.");

        return new OpenAPI()
                .info(new Info()
                        .title("LegalConnect BFF Pessoas API") // Título da API
                        .version("1.0.0") // Versão da API
                        .description("API Backend For Frontend (BFF) para o gerenciamento de usuários e perfis no LegalConnect. " +
                                "Esta API orquestra chamadas para os microsserviços de autenticação e usuários, " +
                                "garantindo validação de token e propagação de contexto.") // Descrição detalhada da API
                        .contact(new Contact()
                                .name("Equipe LegalConnect") // Nome da equipe de contato
                                .email("contato@legalconnect.com") // E-mail de contato
                                .url("https://www.legalconnect.com"))) // URL do site da LegalConnect
                .addSecurityItem(new SecurityRequirement().addList(securitySchemeName)) // Adiciona o requisito de segurança global
                .components(new Components()
                        .addSecuritySchemes(securitySchemeName, new SecurityScheme()
                                .name(securitySchemeName) // Nome do esquema de segurança
                                .type(SecurityScheme.Type.HTTP) // Tipo de segurança: HTTP
                                .scheme("bearer") // Esquema: bearer (para JWT)
                                .bearerFormat("JWT") // Formato do token: JWT
                                .description("Autenticação JWT usando Bearer Token. " +
                                        "Insira seu token JWT no formato 'Bearer SEU_TOKEN_AQUI' para acessar endpoints protegidos."))); // Descrição no Swagger UI
    }
}
```
```java
package br.com.legalconnect.bffpessoas.config;

import br.com.legalconnect.bffpessoas.filter.JwtTokenFilter;
import br.com.legalconnect.user.repository.UserRepository; // Importa o UserRepository da common-lib ou user-service
import br.com.legalconnect.user.entity.User; // Importa a entidade User da common-lib ou user-service
import br.com.legalconnect.auth.security.CustomUserDetails; // Importa CustomUserDetails do auth-service (se reusado)

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @class SecurityConfig
 * @brief Configuração de segurança principal para o microsserviço BFF de Pessoas.
 *
 * Esta classe configura o Spring Security para usar JWTs para autenticação,
 * define as regras de autorização para endpoints públicos e protegidos,
 * e integra o filtro JWT personalizado.
 */
@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true) // Habilita segurança baseada em anotações como @PreAuthorize
public class SecurityConfig {

    private static final Logger log = LoggerFactory.getLogger(SecurityConfig.class);

    private final JwtTokenFilter jwtTokenFilter;
    private final UserRepository userRepository; // Injetar UserRepository para o UserDetailsService

    // Construtor para injeção de dependências
    public SecurityConfig(JwtTokenFilter jwtTokenFilter, UserRepository userRepository) {
        this.jwtTokenFilter = jwtTokenFilter;
        this.userRepository = userRepository;
    }

    /**
     * @brief Configura o provedor de autenticação.
     *
     * Define o `UserDetailsService` e o `PasswordEncoder` a serem usados
     * pelo Spring Security para autenticar usuários. No BFF, o UserDetailsService
     * é usado principalmente para carregar os detalhes do usuário para o SecurityContext,
     * não para autenticar senhas diretamente.
     * @return Uma instância de `DaoAuthenticationProvider`.
     */
    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        log.debug("Configurando DaoAuthenticationProvider para BFF.");
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService());
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }

    /**
     * @brief Obtém o `AuthenticationManager`.
     *
     * O `AuthenticationManager` é usado para autenticar o objeto `Authentication`
     * em métodos de login (embora o login seja delegado ao auth-service).
     * @param authConfig A configuração de autenticação.
     * @return Uma instância de `AuthenticationManager`.
     * @throws Exception se ocorrer um erro ao obter o AuthenticationManager.
     */
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
        log.debug("Obtendo AuthenticationManager para BFF.");
        return authConfig.getAuthenticationManager();
    }

    /**
     * @brief Define o `UserDetailsService` para carregar detalhes do usuário.
     *
     * No contexto do BFF, este `UserDetailsService` é simplificado. Ele busca
     * o usuário apenas pelo e-mail (subject do JWT) para criar um `UserDetails`
     * para o `SecurityContextHolder`. A senha não é validada aqui.
     * @return Uma implementação de `UserDetailsService`.
     */
    @Bean
    public UserDetailsService userDetailsService() {
        return username -> userRepository.findByEmail(username)
                .map(User::new) // Converte a entidade User para CustomUserDetails (ou UserDetails diretamente)
                .orElseThrow(() -> {
                    log.warn("Usuário não encontrado para e-mail no UserDetailsService do BFF: {}", username);
                    return new UsernameNotFoundException("Usuário não encontrado: " + username);
                });
    }

    /**
     * @brief Define o `PasswordEncoder` para criptografia de senhas.
     *
     * Mesmo que o BFF não crie ou valide senhas diretamente, o Spring Security
     * requer um `PasswordEncoder` configurado.
     * @return Uma instância de `BCryptPasswordEncoder`.
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        log.debug("Criando bean BCryptPasswordEncoder para BFF.");
        return new BCryptPasswordEncoder();
    }

    /**
     * @brief Configura a cadeia de filtros de segurança HTTP.
     *
     * Define as regras de autorização para diferentes endpoints,
     * configura a política de criação de sessão como `STATELESS` (essencial para JWT),
     * e adiciona o filtro JWT personalizado antes do filtro de autenticação padrão.
     * @param http O objeto `HttpSecurity` para configurar a segurança.
     * @return Uma instância de `SecurityFilterChain`.
     * @throws Exception se ocorrer um erro durante a configuração.
     */
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        log.info("Configurando SecurityFilterChain para BFF.");
        http
                .csrf(csrf -> csrf.disable()) // Desabilita CSRF para APIs RESTful com JWT
                // .exceptionHandling(exception -> exception.authenticationEntryPoint(unauthorizedHandler)) // Opcional: configurar um entry point para 401
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // Sessões stateless
                .authorizeHttpRequests(auth -> auth
                        // Endpoints públicos do BFF (login, refresh, registro de cliente/profissional)
                        .requestMatchers("/api/bff/v1/pessoas/login").permitAll()
                        .requestMatchers("/api/bff/v1/pessoas/refresh-token").permitAll()
                        .requestMatchers("/api/bff/v1/pessoas/cadastro-cliente").permitAll()
                        .requestMatchers("/api/bff/v1/pessoas/cadastro-profissional").permitAll()
                        // Endpoints para documentação da API (Swagger/OpenAPI)
                        .requestMatchers("/v3/api-docs/**", "/swagger-ui/**", "/swagger-ui.html").permitAll()
                        // Endpoints do Actuator (monitoramento)
                        .requestMatchers("/actuator/**").permitAll()
                        // Todas as outras requisições exigem autenticação
                        .anyRequest().authenticated()
                );

        // Adiciona o provedor de autenticação personalizado
        http.authenticationProvider(authenticationProvider());

        // Adiciona o filtro JWT personalizado antes do filtro de autenticação de usuário e senha do Spring Security
        http.addFilterBefore(jwtTokenFilter, UsernamePasswordAuthenticationFilter.class);

        log.info("SecurityFilterChain do BFF configurada com sucesso.");
        return http.build();
    }
}
```
```java
package br.com.legalconnect.bffpessoas.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @class WebConfig
 * @brief Configuração web geral para o microsserviço BFF de Pessoas.
 *
 * Esta classe configura as regras de CORS (Cross-Origin Resource Sharing),
 * permitindo que aplicações frontend em domínios diferentes acessem a API de forma segura.
 */
@Configuration
public class WebConfig implements WebMvcConfigurer {

    private static final Logger log = LoggerFactory.getLogger(WebConfig.class);

    /**
     * @brief Configura as regras de CORS para a aplicação.
     *
     * Permite requisições de qualquer origem (em ambiente de desenvolvimento),
     * define os métodos HTTP permitidos, os cabeçalhos permitidos e o tempo
     * de cache para preflight requests. Em produção, `allowedOrigins` deve
     * ser restrito aos domínios do frontend.
     * @param registry O registro de CORS para adicionar as configurações.
     */
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        log.info("Configurando regras CORS para o BFF.");
        registry.addMapping("/**") // Aplica as regras de CORS a todos os endpoints da API
                .allowedOrigins("*") // Em produção, substituir por domínios específicos (ex: "https://meufrontend.com")
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH") // Métodos HTTP permitidos
                .allowedHeaders("*") // Permite todos os cabeçalhos na requisição
                .allowCredentials(false) // Não permite o envio de cookies de credenciais (para a maioria das APIs RESTful com JWT)
                .maxAge(3600); // Tempo máximo (em segundos) que os resultados do preflight request (OPTIONS) podem ser cacheados
        log.info("Regras CORS configuradas: permitindo todas as origens para desenvolvimento.");
    }
}
```
```java
package br.com.legalconnect.bffpessoas.filter;

import br.com.legalconnect.bffpessoas.util.JwtUtilBFF;
import br.com.legalconnect.common.config.multitenancy.TenantContext; // Importa TenantContext da common-lib
import br.com.legalconnect.user.entity.User; // Importa a entidade User (assumindo que User implementa UserDetails)
import br.com.legalconnect.user.repository.UserRepository; // Importa UserRepository para carregar UserDetails

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC; // Importa MDC para logging contextual
import org.springframework.lang.NonNull;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

/**
 * @class JwtTokenFilter
 * @brief Filtro de requisições para validação de tokens JWT no BFF.
 *
 * Intercepta as requisições, extrai e valida o token JWT do cabeçalho de autorização.
 * Se o token for válido, popula o `SecurityContextHolder` e o `TenantContext`
 * com `userId` e `tenantId` extraídos do token, e adiciona esses IDs ao MDC
 * para logging contextualizado.
 */
@Component
@RequiredArgsConstructor
public class JwtTokenFilter extends OncePerRequestFilter {

    private static final Logger log = LoggerFactory.getLogger(JwtTokenFilter.class);

    private final JwtUtilBFF jwtUtilBFF;
    private final UserRepository userRepository; // Usado para carregar UserDetails

    /**
     * @brief Implementa a lógica do filtro para cada requisição.
     *
     * Extrai o token JWT do cabeçalho "Authorization", valida-o e, se válido,
     * configura o contexto de segurança do Spring Security e o TenantContext.
     * Adiciona `userId` e `tenantId` ao MDC.
     * @param request A requisição HTTP.
     * @param response A resposta HTTP.
     * @param filterChain A cadeia de filtros.
     * @throws ServletException Se ocorrer um erro de servlet.
     * @throws java.io.IOException Se ocorrer um erro de I/O.
     */
    @Override
    protected void doFilterInternal(
            @NonNull HttpServletRequest request,
            @NonNull HttpServletResponse response,
            @NonNull FilterChain filterChain) throws ServletException, java.io.IOException {

        final String authHeader = request.getHeader("Authorization");
        String jwt = null;
        String userEmail = null;
        Long userId = null;
        Long tenantId = null;

        // Bloco try-finally para garantir que o MDC e TenantContext sejam limpos
        try {
            // 1. Verifica se o cabeçalho de Autorização está presente e no formato "Bearer <token>"
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                log.debug("Cabeçalho de Autorização ausente ou em formato inválido. Prosseguindo sem autenticação JWT.");
                filterChain.doFilter(request, response); // Continua a cadeia de filtros (requisição não autenticada)
                return;
            }

            jwt = authHeader.substring(7); // Extrai o token JWT (remove "Bearer ")
            log.debug("JWT extraído: {}", jwt);

            // 2. Extrai informações do token usando JwtUtilBFF
            userEmail = jwtUtilBFF.extractUsername(jwt);
            userId = jwtUtilBFF.extractUserId(jwt);
            tenantId = jwtUtilBFF.extractTenantId(jwt);

            log.debug("Informações extraídas do JWT: email={}, userId={}, tenantId={}", userEmail, userId, tenantId);

            // 3. Se o e-mail do usuário foi extraído e não há autenticação no contexto de segurança
            if (userEmail != null && SecurityContextHolder.getContext().getAuthentication() == null) {
                log.debug("Carregando detalhes do usuário para: {}", userEmail);
                // Carrega os detalhes do usuário usando o UserRepository (User implementa UserDetails)
                UserDetails userDetails = userRepository.findByEmail(userEmail)
                        .map(User::new) // Converte a entidade User para UserDetails
                        .orElseThrow(() -> {
                            log.warn("Usuário não encontrado no banco de dados para e-mail do JWT: {}", userEmail);
                            return new UsernameNotFoundException("Usuário não encontrado com e-mail: " + userEmail);
                        });

                log.debug("Detalhes do usuário carregados para: {}", userDetails.getUsername());

                // 4. Valida o token e, se válido, autentica o usuário
                if (jwtUtilBFF.isTokenValid(jwt, userDetails)) {
                    log.debug("Token JWT válido para o usuário: {}", userDetails.getUsername());
                    UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                            userDetails, // Principal (UserDetails)
                            null, // Credenciais (já validadas pelo JWT, então nulas)
                            userDetails.getAuthorities() // Autoridades/roles do usuário
                    );
                    authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                    // Define a autenticação no contexto de segurança do Spring Security
                    SecurityContextHolder.getContext().setAuthentication(authToken);
                    log.info("Usuário '{}' autenticado com sucesso no contexto de segurança.", userDetails.getUsername());

                    // 5. Define o tenantId no TenantContext (para FeignClientConfig e lógica de negócio)
                    if (tenantId != null) {
                        TenantContext.setCurrentTenant(tenantId.toString());
                        log.debug("TenantContext definido para o tenantId: {}", tenantId);
                    } else {
                        log.warn("TenantId não encontrado no JWT para o usuário {}. TenantContext não será definido.", userEmail);
                    }

                    // 6. Adiciona userId e tenantId ao MDC para logging contextualizado
                    MDC.put("userId", String.valueOf(userId));
                    MDC.put("tenantId", String.valueOf(tenantId));
                    log.debug("MDC populado com userId: {} e tenantId: {}", userId, tenantId);

                } else {
                    log.warn("Token JWT inválido ou expirado para o usuário: {}. Token não corresponde ou expirou.", userEmail);
                }
            } else if (userEmail == null) {
                log.warn("E-mail do usuário não pôde ser extraído do JWT.");
            } else {
                log.debug("Usuário '{}' já autenticado no contexto de segurança. Pulando autenticação JWT.", userEmail);
            }

            // Continua a cadeia de filtros
            filterChain.doFilter(request, response);

        } catch (UsernameNotFoundException e) {
            log.warn("Falha na autenticação JWT: {}", e.getMessage());
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED); // 401 Unauthorized
            response.getWriter().write("{"status":"ERROR","message":"" + e.getMessage() + ""}");
        } catch (Exception e) {
            log.error("Erro inesperado durante a validação do JWT: {}", e.getMessage(), e);
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); // 500 Internal Server Error
            response.getWriter().write("{"status":"ERROR","message":"Erro interno durante a autenticação: " + e.getMessage() + ""}");
        } finally {
            // Garante que o MDC e TenantContext sejam limpos após a requisição
            MDC.remove("userId");
            MDC.remove("tenantId");
            TenantContext.clear();
            log.debug("MDC e TenantContext limpos após a requisição.");
        }
    }
}
```
```java
package br.com.legalconnect.bffpessoas.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import java.security.Key;
import java.util.Date;
import java.util.function.Function;

/**
 * @class JwtUtilBFF
 * @brief Utilitário para manipulação de JSON Web Tokens (JWT) no BFF.
 *
 * Esta classe é responsável por extrair informações (claims) e validar
 * parcialmente tokens JWT recebidos do frontend. Ela não gera tokens,
 * apenas os decodifica e verifica sua integridade.
 */
@Service
public class JwtUtilBFF {

    private static final Logger log = LoggerFactory.getLogger(JwtUtilBFF.class);

    // Chave secreta para verificar os JWTs, injetada do application.properties
    // DEVE SER A MESMA CHAVE USADA NO AUTH-SERVICE PARA ASSINAR OS TOKENS.
    @Value("${application.security.jwt.secret-key}")
    private String secretKey;

    /**
     * @brief Extrai o nome de usuário (subject) do token JWT.
     * @param token O token JWT.
     * @return O nome de usuário (geralmente o e-mail do usuário) contido no token, ou null se houver erro.
     */
    public String extractUsername(String token) {
        try {
            return extractClaim(token, Claims::getSubject);
        } catch (Exception e) {
            log.warn("Erro ao extrair username do token JWT: {}", e.getMessage());
            return null;
        }
    }

    /**
     * @brief Extrai o ID do usuário (claim "userId") do token JWT.
     * @param token O token JWT.
     * @return O ID do usuário (Long) contido no token, ou null se não encontrado ou houver erro.
     */
    public Long extractUserId(String token) {
        try {
            return extractClaim(token, claims -> claims.get("userId", Long.class));
        } catch (Exception e) {
            log.warn("Erro ao extrair userId do token JWT: {}", e.getMessage());
            return null;
        }
    }

    /**
     * @brief Extrai o ID do tenant (claim "tenantId") do token JWT.
     * @param token O token JWT.
     * @return O ID do tenant (Long) contido no token, ou null se não encontrado ou houver erro.
     */
    public Long extractTenantId(String token) {
        try {
            return extractClaim(token, claims -> claims.get("tenantId", Long.class));
        } catch (Exception e) {
            log.warn("Erro ao extrair tenantId do token JWT: {}", e.getMessage());
            return null;
        }
    }

    /**
     * @brief Extrai uma claim específica do token JWT.
     * @param token O token JWT.
     * @param claimsResolver Função para resolver a claim a partir do objeto `Claims`.
     * @return O valor da claim extraída.
     * @tparam T O tipo da claim a ser extraída.
     */
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    /**
     * @brief Valida um token JWT.
     *
     * Verifica se o nome de usuário no token corresponde ao `UserDetails` fornecido
     * e se o token não expirou.
     * @param token O token JWT a ser validado.
     * @param userDetails Os detalhes do usuário para quem o token foi emitido.
     * @return `true` se o token for válido, `false` caso contrário.
     */
    public boolean isTokenValid(String token, UserDetails userDetails) {
        log.debug("Validando token JWT para o usuário: {}", userDetails.getUsername());
        try {
            final String username = extractUsername(token);
            boolean isValid = (username != null && username.equals(userDetails.getUsername())) && !isTokenExpired(token);
            if (!isValid) {
                log.warn("Token JWT inválido para o usuário {}. Username não corresponde ou token expirou.", userDetails.getUsername());
            }
            return isValid;
        } catch (SignatureException e) {
            log.error("Assinatura JWT inválida: {}", e.getMessage());
        } catch (MalformedJwtException e) {
            log.error("Token JWT malformado: {}", e.getMessage());
        } catch (ExpiredJwtException e) {
            log.error("Token JWT expirado: {}", e.getMessage());
        } catch (UnsupportedJwtException e) {
            log.error("Token JWT não suportado: {}", e.getMessage());
        } catch (IllegalArgumentException e) {
            log.error("String JWT vazia ou nula: {}", e.getMessage());
        }
        return false;
    }

    /**
     * @brief Verifica se o token JWT expirou.
     * @param token O token JWT.
     * @return `true` se o token expirou, `false` caso contrário.
     */
    private boolean isTokenExpired(String token) {
        Date expiration = extractExpiration(token);
        boolean expired = expiration.before(new Date());
        if (expired) {
            log.debug("Token JWT expirado em: {}", expiration);
        }
        return expired;
    }

    /**
     * @brief Extrai a data de expiração do token JWT.
     * @param token O token JWT.
     * @return A data de expiração.
     */
    Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    /**
     * @brief Extrai todas as claims do token JWT.
     *
     * Realiza o parsing do token usando a chave de assinatura.
     * @param token O token JWT.
     * @return As claims (payload) do token.
     */
    private Claims extractAllClaims(String token) {
        return Jwts
                .parserBuilder()
                .setSigningKey(getSignInKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    /**
     * @brief Obtém a chave de assinatura decodificada para o JWT.
     *
     * Decodifica a chave secreta base64 configurada para uso na verificação.
     * @return A chave de assinatura.
     */
    private Key getSignInKey() {
        byte[] keyBytes = Decoders.BASE64.decode(secretKey);
        return Keys.hmacShaKeyFor(keyBytes);
    }
}
```
```java
# ===================================================================
# Configurações Gerais da Aplicação Spring Boot
# ===================================================================

# Nome da aplicação (usado em logs e monitoramento)
spring.application.name=bff-service

# Porta em que a aplicação BFF será executada
server.port=8080

# ===================================================================
# Configurações de Segurança (JWT)
# ===================================================================

# Chave secreta para assinar e verificar os JWTs.
# IMPORTANTE: Esta chave deve ser a MESMA utilizada no auth-service.
# Em produção, armazene-a de forma segura (ex: variáveis de ambiente, HashiCorp Vault).
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Tempo de expiração do JWT em milissegundos (deve ser o mesmo do auth-service)
application.security.jwt.expiration=3600000

# Tempo de expiração do Refresh Token em milissegundos (deve ser o mesmo do auth-service)
application.security.jwt.refresh-expiration=604800000

# ===================================================================
# Configurações para Feign Clients (Comunicação entre Microsserviços)
# ===================================================================

# URLs dos microsserviços de backend que o BFF irá consumir
# Ajuste as portas e hosts conforme a sua topologia de deploy
feign.client.config.auth-service.url=http://localhost:8082
feign.client.config.user-service.url=http://localhost:8083

# Habilita o cliente HTTP do Feign (padrão é HttpURLConnection, mas pode ser OkHttp, Apache HttpClient)
# feign.httpclient.enabled=true # ou feign.okhttp.enabled=true

# ===================================================================
# Configurações de Logging (Logback)
# ===================================================================

# Nível de log padrão para a aplicação BFF
logging.level.br.com.legalconnect.bffpessoas=INFO
# Nível de log para o Spring Framework
logging.level.org.springframework=WARN
# Nível de log para OpenFeign (para depurar chamadas entre serviços)
logging.level.feign.okhttp.OkHttpClient=DEBUG # Se estiver usando OkHttp
logging.level.feign.Request=DEBUG
logging.level.feign.Response=DEBUG
logging.level.feign.codec.ErrorDecoder=DEBUG

# Nível de log para o MDC (Mapped Diagnostic Context)
logging.pattern.level=%5p [${spring.application.name},%X{traceId:-},%X{spanId:-},%X{userId:-},%X{tenantId:-}]

# ===================================================================
# Configurações do JPA e Hibernate (Apenas para Spring Security UserDetailsService)
# ===================================================================

# O BFF não possui um banco de dados próprio para entidades de negócio.
# No entanto, o Spring Security UserDetailsService pode precisar de um UserRepository.
# Se o UserDetailsService do BFF for "dummy" ou usar um client para buscar o usuário,
# estas configurações podem ser mínimas ou desnecessárias.
# Para este blueprint, assumimos que ele precisa de um DataSource mínimo para compilar
# com o UserRepository da common-lib.
spring.datasource.url=jdbc:h2:mem:bffdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.hibernate.ddl-auto=none # O BFF NÃO deve criar tabelas
spring.jpa.show-sql=false
spring.flyway.enabled=false
# ===================================================================
# Configurações do SpringDoc OpenAPI (Swagger UI)
# ===================================================================

springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packages-to-scan=br.com.legalconnect.bffpessoas.controller
springdoc.paths-to-match=/api/bff/v1/**

# ===================================================================
# Configurações de CORS (Cross-Origin Resource Sharing)
# ===================================================================

# Configuração de CORS global. Ajuste para os domínios do seu frontend em produção.
spring.web.cors.allowed-origins=* # Exemplo para desenvolvimento. Mudar para domínios específicos em produção.
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=false
spring.web.cors.max-age=3600

# ===================================================================
# Configurações para Proxy Reverso (Nginx, etc.)
# ===================================================================

# Habilita o processamento dos cabeçalhos X-Forwarded-* enviados por proxies.
server.forward-headers-strategy=FRAMEWORK

# Permite sobrescrever a definição de beans (útil em testes ou cenários específicos)
spring.main.allow-bean-definition-overriding=true

```
```java
package br.com.legalconnect.common.common_lib;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class CommonLibApplicationTests {

	@Test
	void contextLoads() {
	}

}

```
```java
# ===================================================================
# Configurações Gerais da Aplicação Spring Boot
# ===================================================================

# Nome da aplicação (usado em logs e monitoramento)
spring.application.name=bff-service

# Porta em que a aplicação BFF será executada
server.port=8080

# ===================================================================
# Configurações de Segurança (JWT)
# ===================================================================

# Chave secreta para assinar e verificar os JWTs.
# IMPORTANTE: Esta chave deve ser a MESMA utilizada no auth-service.
# Em produção, armazene-a de forma segura (ex: variáveis de ambiente, HashiCorp Vault).
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Tempo de expiração do JWT em milissegundos (deve ser o mesmo do auth-service)
application.security.jwt.expiration=3600000

# Tempo de expiração do Refresh Token em milissegundos (deve ser o mesmo do auth-service)
application.security.jwt.refresh-expiration=604800000

# ===================================================================
# Configurações para Feign Clients (Comunicação entre Microsserviços)
# ===================================================================

# URLs dos microsserviços de backend que o BFF irá consumir
# Ajuste as portas e hosts conforme a sua topologia de deploy
feign.client.config.auth-service.url=http://localhost:8082
feign.client.config.user-service.url=http://localhost:8083

# Habilita o cliente HTTP do Feign (padrão é HttpURLConnection, mas pode ser OkHttp, Apache HttpClient)
# feign.httpclient.enabled=true # ou feign.okhttp.enabled=true

# ===================================================================
# Configurações de Logging (Logback)
# ===================================================================

# Nível de log padrão para a aplicação BFF
logging.level.br.com.legalconnect.bffpessoas=INFO
# Nível de log para o Spring Framework
logging.level.org.springframework=WARN
# Nível de log para OpenFeign (para depurar chamadas entre serviços)
logging.level.feign.okhttp.OkHttpClient=DEBUG # Se estiver usando OkHttp
logging.level.feign.Request=DEBUG
logging.level.feign.Response=DEBUG
logging.level.feign.codec.ErrorDecoder=DEBUG

# Nível de log para o MDC (Mapped Diagnostic Context)
logging.pattern.level=%5p [${spring.application.name},%X{traceId:-},%X{spanId:-},%X{userId:-},%X{tenantId:-}]

# ===================================================================
# Configurações do JPA e Hibernate (Apenas para Spring Security UserDetailsService)
# ===================================================================

# O BFF não possui um banco de dados próprio para entidades de negócio.
# No entanto, o Spring Security UserDetailsService pode precisar de um UserRepository.
# Se o UserDetailsService do BFF for "dummy" ou usar um client para buscar o usuário,
# estas configurações podem ser mínimas ou desnecessárias.
# Para este blueprint, assumimos que ele precisa de um DataSource mínimo para compilar
# com o UserRepository da common-lib.
spring.datasource.url=jdbc:h2:mem:bffdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.hibernate.ddl-auto=none # O BFF NÃO deve criar tabelas
spring.jpa.show-sql=false
spring.flyway.enabled=false
# ===================================================================
# Configurações do SpringDoc OpenAPI (Swagger UI)
# ===================================================================

springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packages-to-scan=br.com.legalconnect.bffpessoas.controller
springdoc.paths-to-match=/api/bff/v1/**

# ===================================================================
# Configurações de CORS (Cross-Origin Resource Sharing)
# ===================================================================

# Configuração de CORS global. Ajuste para os domínios do seu frontend em produção.
spring.web.cors.allowed-origins=* # Exemplo para desenvolvimento. Mudar para domínios específicos em produção.
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=false
spring.web.cors.max-age=3600

# ===================================================================
# Configurações para Proxy Reverso (Nginx, etc.)
# ===================================================================

# Habilita o processamento dos cabeçalhos X-Forwarded-* enviados por proxies.
server.forward-headers-strategy=FRAMEWORK

# Permite sobrescrever a definição de beans (útil em testes ou cenários específicos)
spring.main.allow-bean-definition-overriding=true

```
```java
Êþº¾   =   4br/com/legalconnect/bffpessoas/BffServiceApplication  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this 6Lbr/com/legalconnect/bffpessoas/BffServiceApplication; main ([Ljava/lang/String;)V
    *org/springframework/boot/SpringApplication   run b(Ljava/lang/Class;[Ljava/lang/String;)Lorg/springframework/context/ConfigurableApplicationContext; args [Ljava/lang/String; MethodParameters 
SourceFile BffServiceApplication.java RuntimeVisibleAnnotations >Lorg/springframework/boot/autoconfigure/SpringBootApplication; !               /     *· ±    
                 
   	       6     *¸ W±    
   
    
                                   
```
```java
Êþº¾   = 3  >br/com/legalconnect/bffpessoas/aplicacao/BffPessoasApplication  java/lang/Object log Lorg/slf4j/Logger; <clinit> ()V Code
  
  org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>
     this @Lbr/com/legalconnect/bffpessoas/aplicacao/BffPessoasApplication; main ([Ljava/lang/String;)V
    *org/springframework/boot/SpringApplication    run b(Ljava/lang/Class;[Ljava/lang/String;)Lorg/springframework/context/ConfigurableApplicationContext; " 3MicrosserviÃ§o BFF de Pessoas iniciado com sucesso! $ & % org/slf4j/Logger ' ( info (Ljava/lang/String;)V args [Ljava/lang/String; MethodParameters 
SourceFile BffPessoasApplication.java RuntimeVisibleAnnotations >Lorg/springframework/boot/autoconfigure/SpringBootApplication; 8Lorg/springframework/cloud/openfeign/EnableFeignClients; basePackages %br.com.legalconnect.bffpessoas.client !                	   )      	¸ 
³ ±                      	   /     *· ±                        	    	   D     *¸ W² !¹ # ±                        ) *   +    )    ,    - .     /   0  1[ s 2
```
```java
Êþº¾   = *  9br/com/legalconnect/bffpessoas/config/FeignClientConfig$1  java/lang/Object  feign/RequestInterceptor this$0 9Lbr/com/legalconnect/bffpessoas/config/FeignClientConfig; <init> <(Lbr/com/legalconnect/bffpessoas/config/FeignClientConfig;)V Code	  
  
   	  ()V LineNumberTable LocalVariableTable this ;Lbr/com/legalconnect/bffpessoas/config/FeignClientConfig$1; MethodParameters apply (Lfeign/RequestTemplate;)V  java/lang/Error  Unresolved compilation problems: 
	User cannot be resolved to a type
	User cannot be resolved to a type
	User cannot be resolved to a type

   	  (Ljava/lang/String;)V template 
SourceFile FeignClientConfig.java EnclosingMethod $ 7br/com/legalconnect/bffpessoas/config/FeignClientConfig & ' feignRequestInterceptor ()Lfeign/RequestInterceptor; InnerClasses NestHost               	 
     4     
*+µ *· ±           '        
                 4     
» Y· ¿           ,        
                  ! "    # % (   
         )    #
```
```java
Êþº¾   = /  7br/com/legalconnect/bffpessoas/config/FeignClientConfig  java/lang/Object log Lorg/slf4j/Logger; <clinit> ()V Code
  
  org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>
     this 9Lbr/com/legalconnect/bffpessoas/config/FeignClientConfig; feignRequestInterceptor ()Lfeign/RequestInterceptor; RuntimeVisibleAnnotations -Lorg/springframework/context/annotation/Bean;  QConfigurando Feign Request Interceptor para injeÃ§Ã£o de X-User-ID e X-Tenant-ID.   " ! org/slf4j/Logger # $ info (Ljava/lang/String;)V & 9br/com/legalconnect/bffpessoas/config/FeignClientConfig$1
 % (  ) <(Lbr/com/legalconnect/bffpessoas/config/FeignClientConfig;)V 
SourceFile FeignClientConfig.java 6Lorg/springframework/context/annotation/Configuration; InnerClasses NestMembers !                	   )      	¸ 
³ ±                      	   /     *· ±                                    	   A     ² ¹  » %Y*· '°       
    & 
 '              *    +      ,   -   
  %       .     %
```
```java
Êþº¾   =   3br/com/legalconnect/bffpessoas/config/OpenApiConfig  java/lang/Object log Lorg/slf4j/Logger; <clinit> ()V Code
  
  org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>
     this 5Lbr/com/legalconnect/bffpessoas/config/OpenApiConfig; 
customOpenAPI $()Lio/swagger/v3/oas/models/OpenAPI; RuntimeVisibleAnnotations -Lorg/springframework/context/annotation/Bean;  
bearerAuth   *Configurando OpenAPI (Swagger) para o BFF. " $ # org/slf4j/Logger % & info (Ljava/lang/String;)V (  io/swagger/v3/oas/models/OpenAPI
 '  + "io/swagger/v3/oas/models/info/Info
 *  . LegalConnect BFF Pessoas API
 * 0 1 2 title 8(Ljava/lang/String;)Lio/swagger/v3/oas/models/info/Info; 4 1.0.0
 * 6 7 2 version 9 éAPI Backend For Frontend (BFF) para o gerenciamento de usuÃ¡rios e perfis no LegalConnect. Esta API orquestra chamadas para os microsserviÃ§os de autenticaÃ§Ã£o e usuÃ¡rios, garantindo validaÃ§Ã£o de token e propagaÃ§Ã£o de contexto.
 * ; < 2 description > %io/swagger/v3/oas/models/info/Contact
 =  A Equipe LegalConnect
 = C D E name ;(Ljava/lang/String;)Lio/swagger/v3/oas/models/info/Contact; G contato@legalconnect.com
 = I J E email L https://www.legalconnect.com
 = N O E url
 * Q R S contact M(Lio/swagger/v3/oas/models/info/Contact;)Lio/swagger/v3/oas/models/info/Info;
 ' U % V H(Lio/swagger/v3/oas/models/info/Info;)Lio/swagger/v3/oas/models/OpenAPI; X 5io/swagger/v3/oas/models/security/SecurityRequirement
 W 
 W [ \ ] addList K(Ljava/lang/String;)Lio/swagger/v3/oas/models/security/SecurityRequirement;
 ' _ ` a addSecurityItem [(Lio/swagger/v3/oas/models/security/SecurityRequirement;)Lio/swagger/v3/oas/models/OpenAPI; c #io/swagger/v3/oas/models/Components
 b  f 0io/swagger/v3/oas/models/security/SecurityScheme
 e 
 e i D j F(Ljava/lang/String;)Lio/swagger/v3/oas/models/security/SecurityScheme;	 l n m 5io/swagger/v3/oas/models/security/SecurityScheme$Type o p HTTP 7Lio/swagger/v3/oas/models/security/SecurityScheme$Type;
 e r s t type k(Lio/swagger/v3/oas/models/security/SecurityScheme$Type;)Lio/swagger/v3/oas/models/security/SecurityScheme; v bearer
 e x y j scheme { JWT
 e } ~ j bearerFormat  AutenticaÃ§Ã£o JWT usando Bearer Token. Insira seu token JWT no formato 'Bearer SEU_TOKEN_AQUI' para acessar endpoints protegidos.
 e  < j
 b    addSecuritySchemes k(Ljava/lang/String;Lio/swagger/v3/oas/models/security/SecurityScheme;)Lio/swagger/v3/oas/models/Components;
 '    
components I(Lio/swagger/v3/oas/models/Components;)Lio/swagger/v3/oas/models/OpenAPI; securitySchemeName Ljava/lang/String; 
SourceFile OpenApiConfig.java 6Lorg/springframework/context/annotation/Configuration; InnerClasses Type !                	   )      	¸ 
³ ±                      	   /     *· ±                                    	       L² ¹ ! » 'Y· )» *Y· ,-¶ /3¶ 58¶ :» =Y· ?@¶ BF¶ HK¶ M¶ P¶ T» WY· Y¶ Z¶ ^» bY· d» eY· g¶ h² k¶ qu¶ wz¶ |¶ ¶ ¶ °       b    &  ' 
 )  *  +   , % - * 0 1 1 6 2 ; 3 @ 0 C * F 4 U 5 \ 6 e 7 j 8 p 9 u : z ;  6  5  )                                   
  l e @
```
```java
Êþº¾   = 9  4br/com/legalconnect/bffpessoas/config/SecurityConfig  java/lang/Object log Lorg/slf4j/Logger; jwtTokenFilter 6Lbr/com/legalconnect/bffpessoas/filter/JwtTokenFilter; userRepository LUserRepository; <init> I(Lbr/com/legalconnect/bffpessoas/filter/JwtTokenFilter;LUserRepository;)V Code  java/lang/Error ¡Unresolved compilation problems: 
	The import br.com.legalconnect.user cannot be resolved
	The import br.com.legalconnect.user cannot be resolved
	The import br.com.legalconnect.auth cannot be resolved
	UserRepository cannot be resolved to a type
	UserRepository cannot be resolved to a type
	UserRepository cannot be resolved to a type
	UserRepository cannot be resolved to a type
	User cannot be resolved to a type

     (Ljava/lang/String;)V LineNumberTable LocalVariableTable this 6Lbr/com/legalconnect/bffpessoas/config/SecurityConfig; MethodParameters authenticationProvider M()Lorg/springframework/security/authentication/dao/DaoAuthenticationProvider; RuntimeVisibleAnnotations -Lorg/springframework/context/annotation/Bean;  !Unresolved compilation problem: 
 authenticationManager ®(Lorg/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration;)Lorg/springframework/security/authentication/AuthenticationManager; 
Exceptions $ java/lang/Exception 
authConfig userDetailsService D()Lorg/springframework/security/core/userdetails/UserDetailsService; ) rUnresolved compilation problems: 
	UserRepository cannot be resolved to a type
	User cannot be resolved to a type
 passwordEncoder @()Lorg/springframework/security/crypto/password/PasswordEncoder; securityFilterChain (Lorg/springframework/security/config/annotation/web/builders/HttpSecurity;)Lorg/springframework/security/web/SecurityFilterChain; http 
SourceFile SecurityConfig.java 6Lorg/springframework/context/annotation/Configuration; TLorg/springframework/security/config/annotation/web/configuration/EnableWebSecurity; ZLorg/springframework/security/config/annotation/method/configuration/EnableMethodSecurity; prePostEnabled    7 UserRepository MissingTypes !                 	 
        
   4     
» Y· ¿                   
        	    	               
   4     
» Y· ¿           <        
        !  "     #         
   4     
» Y· ¿           N        
         %    & '          
   4     
» Y(· ¿           ]        
      * +          
   4     
» Y· ¿           m        
      , -  "     #         
   4     
» Y· ¿           }        
         .    /    0      1   2   3  4Z 5 8     6
```
```java
Êþº¾   = \  /br/com/legalconnect/bffpessoas/config/WebConfig  java/lang/Object  Borg/springframework/web/servlet/config/annotation/WebMvcConfigurer log Lorg/slf4j/Logger; <clinit> ()V Code
 
   org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>
    
 this 1Lbr/com/legalconnect/bffpessoas/config/WebConfig; addCorsMappings C(Lorg/springframework/web/servlet/config/annotation/CorsRegistry;)V  $Configurando regras CORS para o BFF.   " ! org/slf4j/Logger # $ info (Ljava/lang/String;)V & /**
 ( * ) >org/springframework/web/servlet/config/annotation/CorsRegistry + , 
addMapping X(Ljava/lang/String;)Lorg/springframework/web/servlet/config/annotation/CorsRegistration; . java/lang/String 0 *
 2 4 3 Borg/springframework/web/servlet/config/annotation/CorsRegistration 5 6 allowedOrigins Y([Ljava/lang/String;)Lorg/springframework/web/servlet/config/annotation/CorsRegistration; 8 GET : POST < PUT > DELETE @ OPTIONS B PATCH
 2 D E 6 allowedMethods
 2 G H 6 allowedHeaders
 2 J K L allowCredentials G(Z)Lorg/springframework/web/servlet/config/annotation/CorsRegistration;      
 2 P Q R maxAge G(J)Lorg/springframework/web/servlet/config/annotation/CorsRegistration; T KRegras CORS configuradas: permitindo todas as origens para desenvolvimento. registry @Lorg/springframework/web/servlet/config/annotation/CorsRegistry; MethodParameters 
SourceFile WebConfig.java RuntimeVisibleAnnotations 6Lorg/springframework/context/annotation/Configuration; !             	 
     )      	¸ ³ ±                    
     /     *· ±                               ¸     d² ¹  +%¶ '½ -Y/S¶ 1½ -Y7SY9SY;SY=SY?SYAS¶ C½ -Y/S¶ F¶ I M¶ OW² S¹  ±       & 	     
 !  " # # H $ N % R & Y ' c (        d       d U V  W    U    X    Y Z     [  
```
```java
Êþº¾   = 1  4br/com/legalconnect/bffpessoas/filter/JwtTokenFilter  3org/springframework/web/filter/OncePerRequestFilter log Lorg/slf4j/Logger; 
jwtUtilBFF 0Lbr/com/legalconnect/bffpessoas/util/JwtUtilBFF; userRepository LUserRepository; doFilterInternal s(Ljakarta/servlet/http/HttpServletRequest;Ljakarta/servlet/http/HttpServletResponse;Ljakarta/servlet/FilterChain;)V 
Exceptions   jakarta/servlet/ServletException  java/io/IOException "RuntimeVisibleParameterAnnotations "Lorg/springframework/lang/NonNull; Code  java/lang/Error  ÌUnresolved compilation problems: 
	UserRepository cannot be resolved to a type
	User cannot be resolved to a type
	Syntax error on tokens, delete these tokens
	Syntax error on tokens, delete these tokens

     <init> (Ljava/lang/String;)V LineNumberTable LocalVariableTable this 6Lbr/com/legalconnect/bffpessoas/filter/JwtTokenFilter; request response filterChain MethodParameters C(Lbr/com/legalconnect/bffpessoas/util/JwtUtilBFF;LUserRepository;)V RuntimeInvisibleAnnotations Llombok/Generated; )Unresolved compilation problems: 
	The import br.com.legalconnect.user cannot be resolved
	The import br.com.legalconnect.user cannot be resolved
	UserRepository cannot be resolved to a type
	UserRepository cannot be resolved to a type
	UserRepository cannot be resolved to a type
 
SourceFile JwtTokenFilter.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; / UserRepository MissingTypes !                 	 
        
                          4     
» Y· ¿           Z        
      $   
 !   "   #     %  &     '      4     
» Y(· ¿                   
      $   	   	   *    + ,     -   0     .
```
```java
Êþº¾   =  .br/com/legalconnect/bffpessoas/util/JwtUtilBFF  java/lang/Object log Lorg/slf4j/Logger; 	secretKey Ljava/lang/String; RuntimeVisibleAnnotations 4Lorg/springframework/beans/factory/annotation/Value; value &${application.security.jwt.secret-key} <clinit> ()V Code
    org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>
     this 0Lbr/com/legalconnect/bffpessoas/util/JwtUtilBFF; extractUsername &(Ljava/lang/String;)Ljava/lang/String;   " # $ apply ()Ljava/util/function/Function;
  & ' ( extractClaim C(Ljava/lang/String;Ljava/util/function/Function;)Ljava/lang/Object; * java/lang/String , )Erro ao extrair username do token JWT: {}
 . 0 / java/lang/Exception 1 2 
getMessage ()Ljava/lang/String; 4 6 5 org/slf4j/Logger 7 8 warn '(Ljava/lang/String;Ljava/lang/Object;)V token e Ljava/lang/Exception; 
StackMapTable MethodParameters 
extractUserId $(Ljava/lang/String;)Ljava/lang/Long;  " B java/lang/Long D 'Erro ao extrair userId do token JWT: {} extractTenantId  " H )Erro ao extrair tenantId do token JWT: {} 	Signature g<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/util/function/Function<Lio/jsonwebtoken/Claims;TT;>;)TT;
  L M N extractAllClaims ,(Ljava/lang/String;)Lio/jsonwebtoken/Claims; P R Q java/util/function/Function # S &(Ljava/lang/Object;)Ljava/lang/Object; claimsResolver Ljava/util/function/Function; claims Lio/jsonwebtoken/Claims; LocalVariableTypeTable :Ljava/util/function/Function<Lio/jsonwebtoken/Claims;TT;>; isTokenValid P(Ljava/lang/String;Lorg/springframework/security/core/userdetails/UserDetails;)Z ] 'Validando token JWT para o usuÃ¡rio: {} _ a ` 9org/springframework/security/core/userdetails/UserDetails b 2 getUsername 4 d e 8 debug
  g   
 ) i j k equals (Ljava/lang/Object;)Z
  m n o isTokenExpired (Ljava/lang/String;)Z q SToken JWT invÃ¡lido para o usuÃ¡rio {}. Username nÃ£o corresponde ou token expirou. s Assinatura JWT invÃ¡lida: {}
 u 0 v "io/jsonwebtoken/SignatureException 4 x y 8 error { Token JWT malformado: {}
 } 0 ~ %io/jsonwebtoken/MalformedJwtException  Token JWT expirado: {}
  0  #io/jsonwebtoken/ExpiredJwtException  Token JWT nÃ£o suportado: {}
  0  'io/jsonwebtoken/UnsupportedJwtException  String JWT vazia ou nula: {}
  0  "java/lang/IllegalArgumentException userDetails ;Lorg/springframework/security/core/userdetails/UserDetails; username isValid Z $Lio/jsonwebtoken/SignatureException; 'Lio/jsonwebtoken/MalformedJwtException; %Lio/jsonwebtoken/ExpiredJwtException; )Lio/jsonwebtoken/UnsupportedJwtException; $Ljava/lang/IllegalArgumentException;
     extractExpiration $(Ljava/lang/String;)Ljava/util/Date;  java/util/Date
  
    ¡ ¢ before (Ljava/util/Date;)Z ¤ Token JWT expirado em: {} 
expiration Ljava/util/Date; expired  "
 ª ¬ « io/jsonwebtoken/Jwts ­ ® 
parserBuilder $()Lio/jsonwebtoken/JwtParserBuilder;
  ° ± ² getSignInKey ()Ljava/security/Key; ´ ¶ µ  io/jsonwebtoken/JwtParserBuilder · ¸ 
setSigningKey 7(Ljava/security/Key;)Lio/jsonwebtoken/JwtParserBuilder; ´ º » ¼ build ()Lio/jsonwebtoken/JwtParser; ¾ À ¿ io/jsonwebtoken/JwtParser Á Â parseClaimsJws )(Ljava/lang/String;)Lio/jsonwebtoken/Jws; Ä Æ Å io/jsonwebtoken/Jws Ç È getBody ()Ljava/lang/Object; Ê io/jsonwebtoken/Claims	 Ì Î Í io/jsonwebtoken/io/Decoders Ï Ð BASE64 Lio/jsonwebtoken/io/Decoder;	  Ò   Ô Ö Õ io/jsonwebtoken/io/Decoder × S decode Ù [B
 Û Ý Ü io/jsonwebtoken/security/Keys Þ ß 
hmacShaKeyFor ([B)Ljavax/crypto/SecretKey; keyBytes lambda$1 *(Lio/jsonwebtoken/Claims;)Ljava/lang/Long; ä userId É æ ç è get 7(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object; lambda$2 ë tenantId 
SourceFile JwtUtilBFF.java (Lorg/springframework/stereotype/Service; BootstrapMethods
 ñ ó ò "java/lang/invoke/LambdaMetafactory ô õ metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; ð S É ù ú 2 
getSubject	 ø ,(Lio/jsonwebtoken/Claims;)Ljava/lang/String; ü S
   á â ÿ â S
  é â â S É
 
getExpiration ()Ljava/util/Date;		 *(Lio/jsonwebtoken/Claims;)Ljava/util/Date; InnerClasses %java/lang/invoke/MethodHandles$Lookup java/lang/invoke/MethodHandles Lookup !               	     
  s  
  
      )      	¸ ³ ±                          /     *· ±                                }     *+º !  ¶ %À )°M² +,¶ -¹ 3 °    
  .         .  /  0  1                 9     : ;  <    N . =    9    > ?     }     *+º @  ¶ %À A°M² C,¶ -¹ 3 °    
  .         <  =  >  ?                 9     : ;  <    N . =    9    E ?     }     *+º F  ¶ %À A°M² G,¶ -¹ 3 °    
  .         J  K  L  M                 9     : ;  <    N . =    9    ' (  I    J    l     *+¶ KN,-¹ O °       
    Y  Z    *            9      T U    V W  X        T Y  =   	 9   T    Z [    Ë     §² \,¹ ^ ¹ c *+¶ fN-Æ -,¹ ^ ¶ h *+¶ l § 6 ² p,¹ ^ ¹ 3 ¬N² r-¶ t¹ w § HN² z-¶ |¹ w § 6N² -¶ ¹ w § $N² -¶ ¹ w § N² -¶ ¹ w ¬   M N u  M ` }  M r   M    M       F    g  i  j 6 k ; l K n N o O p ` q a r r s s t  u  v  w  x ¥ z    f 
   §       § 9     §     8    6     O  :   a  :   s  :     :     :   <   2 	ü 3 )@ü ÿ    ) _  uQ }Q Q Q  =   	 9       n o          #*+¶ M,» Y· ¶ > ² £,¹ c ¬                  !     *    #       # 9     ¥ ¦    §   <   	 ý !  =    9           B     *+º ¨  ¶ %À °                           9   =    9    M N     h      ¸ ©*¶ ¯¹ ³ ¹ ¹ +¹ ½ ¹ Ã À É°                    ¡                    9   =    9    ± ²     M     ² Ë*´ Ñ¹ Ó À ØL+¸ Ú°       
    «  ¬               à Ù 
 á â     8     *ãA¹ å À A°           <         V W  
 é â     8     *êA¹ å À A°           J         V W    ì    í 	     î   ï   *  ö  ÷ û ý ö  þ ö  ö 
   
  
```
```java
br\com\legalconnect\BffServiceApplication.class

```
```java
E:\legalconnect\common-lib\bff-service\src\main\java\br\com\legalconnect\BffServiceApplication.java

```
```java
br\com\legalconnect\common\common_lib\CommonLibApplicationTests.class

```
```java
E:\legalconnect\common-lib\bff-service\src\test\java\br\com\legalconnect\common\common_lib\CommonLibApplicationTests.java

```
```java
# Created at 2025-07-18T13:06:15.937
Boot Manifest-JAR contains absolute paths in classpath 'E:\legalconnect\common-lib\bff-service\target\test-classes'
Hint: <argLine>-Djdk.net.URLClassPath.disableClassPathURLCheck=true</argLine>
'other' has different root


```
```java
-------------------------------------------------------------------------------
Test set: br.com.legalconnect.common.common_lib.CommonLibApplicationTests
-------------------------------------------------------------------------------
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.131 s <<< FAILURE! -- in br.com.legalconnect.common.common_lib.CommonLibApplicationTests
br.com.legalconnect.common.common_lib.CommonLibApplicationTests.contextLoads -- Time elapsed: 0.021 s <<< ERROR!
java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@27f0ad19 testClass = br.com.legalconnect.common.common_lib.CommonLibApplicationTests, locations = [], classes = [br.com.legalconnect.BffServiceApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceDescriptors = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@2f953efd, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@5a7fe64f, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@700fb871, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@1f, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizer@50029372, org.springframework.boot.test.context.SpringBootTestAnnotation@3f79eb7f], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:180)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'logging.level.feign.okhttp.okhttpclient' to org.springframework.boot.logging.LogLevel
	at org.springframework.boot.context.properties.bind.Binder.handleBindError(Binder.java:391)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:354)
	at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$2(Binder.java:439)
	at org.springframework.boot.context.properties.bind.Binder$Context.withSource(Binder.java:568)
	at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$3(Binder.java:440)
	at org.springframework.boot.context.properties.bind.AggregateElementBinder.bind(AggregateElementBinder.java:39)
	at org.springframework.boot.context.properties.bind.MapBinder$EntryBinder.lambda$bindEntries$0(MapBinder.java:159)
	at java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1220)
	at org.springframework.boot.context.properties.bind.MapBinder$EntryBinder.bindEntries(MapBinder.java:159)
	at org.springframework.boot.context.properties.bind.MapBinder.bindAggregate(MapBinder.java:70)
	at org.springframework.boot.context.properties.bind.AggregateBinder.bind(AggregateBinder.java:56)
	at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$4(Binder.java:442)
	at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:597)
	at org.springframework.boot.context.properties.bind.Binder.bindAggregate(Binder.java:442)
	at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:403)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:350)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:339)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:269)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:243)
	at org.springframework.boot.context.logging.LoggingApplicationListener.setLogLevels(LoggingApplicationListener.java:393)
	at org.springframework.boot.context.logging.LoggingApplicationListener.initializeFinalLoggingLevels(LoggingApplicationListener.java:360)
	at org.springframework.boot.context.logging.LoggingApplicationListener.initialize(LoggingApplicationListener.java:299)
	at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEnvironmentPreparedEvent(LoggingApplicationListener.java:246)
	at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:223)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:185)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:178)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:156)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138)
	at org.springframework.boot.context.event.EventPublishingRunListener.multicastInitialEvent(EventPublishingRunListener.java:136)
	at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:81)
	at org.springframework.boot.SpringApplicationRunListeners.lambda$environmentPrepared$2(SpringApplicationRunListeners.java:64)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:118)
	at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:112)
	at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:63)
	at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:369)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:329)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	... 17 more
Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [org.springframework.boot.logging.LogLevel] for value [DEBUG # Se estiver usando OkHttp]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
	at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:110)
	at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:101)
	at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:93)
	at org.springframework.boot.context.properties.bind.Binder.bindProperty(Binder.java:463)
	at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:407)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:350)
	... 61 more
Caused by: java.lang.IllegalArgumentException: No enum constant org.springframework.boot.logging.LogLevel.DEBUG # Se estiver usando OkHttp
	at org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter.findEnum(LenientObjectToEnumConverterFactory.java:93)
	at org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter.convert(LenientObjectToEnumConverterFactory.java:80)
	at org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter.convert(LenientObjectToEnumConverterFactory.java:61)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:409)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	... 68 more


```
```java
<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="br.com.legalconnect.common.common_lib.CommonLibApplicationTests" time="1.131" tests="1" errors="1" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="E:\legalconnect\common-lib\bff-service\target\test-classes;E:\legalconnect\common-lib\bff-service\target\classes;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.2.5\spring-boot-starter-web-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter\3.2.5\spring-boot-starter-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot\3.2.5\spring-boot-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.2.5\spring-boot-autoconfigure-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.2.5\spring-boot-starter-logging-3.2.5.jar;C:\Users\marce\.m2\repository\ch\qos\logback\logback-classic\1.4.14\logback-classic-1.4.14.jar;C:\Users\marce\.m2\repository\ch\qos\logback\logback-core\1.4.14\logback-core-1.4.14.jar;C:\Users\marce\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.21.1\log4j-to-slf4j-2.21.1.jar;C:\Users\marce\.m2\repository\org\apache\logging\log4j\log4j-api\2.21.1\log4j-api-2.21.1.jar;C:\Users\marce\.m2\repository\org\slf4j\jul-to-slf4j\2.0.13\jul-to-slf4j-2.0.13.jar;C:\Users\marce\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\marce\.m2\repository\org\yaml\snakeyaml\2.2\snakeyaml-2.2.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.2.5\spring-boot-starter-json-3.2.5.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.15.4\jackson-datatype-jdk8-2.15.4.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.15.4\jackson-datatype-jsr310-2.15.4.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.15.4\jackson-module-parameter-names-2.15.4.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.2.5\spring-boot-starter-tomcat-3.2.5.jar;C:\Users\marce\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.20\tomcat-embed-core-10.1.20.jar;C:\Users\marce\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.20\tomcat-embed-websocket-10.1.20.jar;C:\Users\marce\.m2\repository\org\springframework\spring-web\6.1.6\spring-web-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-beans\6.1.6\spring-beans-6.1.6.jar;C:\Users\marce\.m2\repository\io\micrometer\micrometer-observation\1.12.5\micrometer-observation-1.12.5.jar;C:\Users\marce\.m2\repository\io\micrometer\micrometer-commons\1.12.5\micrometer-commons-1.12.5.jar;C:\Users\marce\.m2\repository\org\springframework\spring-webmvc\6.1.6\spring-webmvc-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-expression\6.1.6\spring-expression-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-security\3.2.5\spring-boot-starter-security-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\spring-aop\6.1.6\spring-aop-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-config\6.2.4\spring-security-config-6.2.4.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-web\6.2.4\spring-security-web-6.2.4.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-validation\3.2.5\spring-boot-starter-validation-3.2.5.jar;C:\Users\marce\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.20\tomcat-embed-el-10.1.20.jar;C:\Users\marce\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.1.Final\hibernate-validator-8.0.1.Final.jar;C:\Users\marce\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\marce\.m2\repository\org\jboss\logging\jboss-logging\3.5.3.Final\jboss-logging-3.5.3.Final.jar;C:\Users\marce\.m2\repository\com\fasterxml\classmate\1.6.0\classmate-1.6.0.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.2.5\spring-boot-starter-data-jpa-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-aop\3.2.5\spring-boot-starter-aop-3.2.5.jar;C:\Users\marce\.m2\repository\org\aspectj\aspectjweaver\1.9.22\aspectjweaver-1.9.22.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.2.5\spring-boot-starter-jdbc-3.2.5.jar;C:\Users\marce\.m2\repository\com\zaxxer\HikariCP\5.0.1\HikariCP-5.0.1.jar;C:\Users\marce\.m2\repository\org\springframework\spring-jdbc\6.1.6\spring-jdbc-6.1.6.jar;C:\Users\marce\.m2\repository\org\hibernate\orm\hibernate-core\6.4.4.Final\hibernate-core-6.4.4.Final.jar;C:\Users\marce\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\marce\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\marce\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\marce\.m2\repository\io\smallrye\jandex\3.1.2\jandex-3.1.2.jar;C:\Users\marce\.m2\repository\net\bytebuddy\byte-buddy\1.14.13\byte-buddy-1.14.13.jar;C:\Users\marce\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\marce\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\marce\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\marce\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\marce\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\marce\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\marce\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\marce\.m2\repository\org\springframework\data\spring-data-jpa\3.2.5\spring-data-jpa-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\data\spring-data-commons\3.2.5\spring-data-commons-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\spring-orm\6.1.6\spring-orm-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-tx\6.1.6\spring-tx-6.1.6.jar;C:\Users\marce\.m2\repository\org\slf4j\slf4j-api\2.0.13\slf4j-api-2.0.13.jar;C:\Users\marce\.m2\repository\org\springframework\spring-aspects\6.1.6\spring-aspects-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-starter-openfeign\4.1.1\spring-cloud-starter-openfeign-4.1.1.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-starter\4.1.2\spring-cloud-starter-4.1.2.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-context\4.1.2\spring-cloud-context-4.1.2.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-rsa\1.1.2\spring-security-rsa-1.1.2.jar;C:\Users\marce\.m2\repository\org\bouncycastle\bcprov-jdk18on\1.77\bcprov-jdk18on-1.77.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-openfeign-core\4.1.1\spring-cloud-openfeign-core-4.1.1.jar;C:\Users\marce\.m2\repository\io\github\openfeign\form\feign-form-spring\3.8.0\feign-form-spring-3.8.0.jar;C:\Users\marce\.m2\repository\io\github\openfeign\form\feign-form\3.8.0\feign-form-3.8.0.jar;C:\Users\marce\.m2\repository\commons-fileupload\commons-fileupload\1.5\commons-fileupload-1.5.jar;C:\Users\marce\.m2\repository\commons-io\commons-io\2.11.0\commons-io-2.11.0.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-commons\4.1.2\spring-cloud-commons-4.1.2.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-crypto\6.2.4\spring-security-crypto-6.2.4.jar;C:\Users\marce\.m2\repository\io\github\openfeign\feign-core\13.2.1\feign-core-13.2.1.jar;C:\Users\marce\.m2\repository\io\github\openfeign\feign-slf4j\13.2.1\feign-slf4j-13.2.1.jar;C:\Users\marce\.m2\repository\org\projectlombok\lombok\1.18.32\lombok-1.18.32.jar;C:\Users\marce\.m2\repository\org\mapstruct\mapstruct\1.5.5.Final\mapstruct-1.5.5.Final.jar;C:\Users\marce\.m2\repository\org\mapstruct\mapstruct-processor\1.5.5.Final\mapstruct-processor-1.5.5.Final.jar;C:\Users\marce\.m2\repository\org\springdoc\springdoc-openapi-starter-webmvc-ui\2.5.0\springdoc-openapi-starter-webmvc-ui-2.5.0.jar;C:\Users\marce\.m2\repository\org\springdoc\springdoc-openapi-starter-webmvc-api\2.5.0\springdoc-openapi-starter-webmvc-api-2.5.0.jar;C:\Users\marce\.m2\repository\org\springdoc\springdoc-openapi-starter-common\2.5.0\springdoc-openapi-starter-common-2.5.0.jar;C:\Users\marce\.m2\repository\io\swagger\core\v3\swagger-core-jakarta\2.2.21\swagger-core-jakarta-2.2.21.jar;C:\Users\marce\.m2\repository\org\apache\commons\commons-lang3\3.13.0\commons-lang3-3.13.0.jar;C:\Users\marce\.m2\repository\io\swagger\core\v3\swagger-annotations-jakarta\2.2.21\swagger-annotations-jakarta-2.2.21.jar;C:\Users\marce\.m2\repository\io\swagger\core\v3\swagger-models-jakarta\2.2.21\swagger-models-jakarta-2.2.21.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.15.4\jackson-dataformat-yaml-2.15.4.jar;C:\Users\marce\.m2\repository\org\webjars\swagger-ui\5.13.0\swagger-ui-5.13.0.jar;C:\Users\marce\.m2\repository\io\jsonwebtoken\jjwt-api\0.11.5\jjwt-api-0.11.5.jar;C:\Users\marce\.m2\repository\io\jsonwebtoken\jjwt-impl\0.11.5\jjwt-impl-0.11.5.jar;C:\Users\marce\.m2\repository\io\jsonwebtoken\jjwt-jackson\0.11.5\jjwt-jackson-0.11.5.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.15.4\jackson-databind-2.15.4.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.15.4\jackson-annotations-2.15.4.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.15.4\jackson-core-2.15.4.jar;C:\Users\marce\.m2\repository\br\com\legalconnect\common\common-lib\1.0.0\common-lib-1.0.0.jar;C:\Users\marce\.m2\repository\org\springframework\spring-context\6.1.6\spring-context-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-core\6.2.4\spring-security-core-6.2.4.jar;C:\Users\marce\.m2\repository\org\flywaydb\flyway-core\9.22.3\flyway-core-9.22.3.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-toml\2.15.4\jackson-dataformat-toml-2.15.4.jar;C:\Users\marce\.m2\repository\com\google\code\gson\gson\2.10.1\gson-2.10.1.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.2.5\spring-boot-starter-test-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-test\3.2.5\spring-boot-test-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.2.5\spring-boot-test-autoconfigure-3.2.5.jar;C:\Users\marce\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\marce\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\marce\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\marce\.m2\repository\net\minidev\json-smart\2.5.1\json-smart-2.5.1.jar;C:\Users\marce\.m2\repository\net\minidev\accessors-smart\2.5.1\accessors-smart-2.5.1.jar;C:\Users\marce\.m2\repository\org\ow2\asm\asm\9.6\asm-9.6.jar;C:\Users\marce\.m2\repository\org\assertj\assertj-core\3.24.2\assertj-core-3.24.2.jar;C:\Users\marce\.m2\repository\org\awaitility\awaitility\4.2.1\awaitility-4.2.1.jar;C:\Users\marce\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.2\junit-jupiter-5.10.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.2\junit-jupiter-api-5.10.2.jar;C:\Users\marce\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\marce\.m2\repository\org\junit\platform\junit-platform-commons\1.10.2\junit-platform-commons-1.10.2.jar;C:\Users\marce\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.2\junit-jupiter-params-5.10.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.2\junit-jupiter-engine-5.10.2.jar;C:\Users\marce\.m2\repository\org\junit\platform\junit-platform-engine\1.10.2\junit-platform-engine-1.10.2.jar;C:\Users\marce\.m2\repository\org\mockito\mockito-core\5.7.0\mockito-core-5.7.0.jar;C:\Users\marce\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.13\byte-buddy-agent-1.14.13.jar;C:\Users\marce\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\marce\.m2\repository\org\mockito\mockito-junit-jupiter\5.7.0\mockito-junit-jupiter-5.7.0.jar;C:\Users\marce\.m2\repository\org\skyscreamer\jsonassert\1.5.1\jsonassert-1.5.1.jar;C:\Users\marce\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\marce\.m2\repository\org\springframework\spring-core\6.1.6\spring-core-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-jcl\6.1.6\spring-jcl-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-test\6.1.6\spring-test-6.1.6.jar;C:\Users\marce\.m2\repository\org\xmlunit\xmlunit-core\2.9.1\xmlunit-core-2.9.1.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-test\6.2.4\spring-security-test-6.2.4.jar;"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="America/Sao_Paulo"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="BR"/>
    <property name="sun.boot.library.path" value="C:\Users\marce\.jdks\corretto-17.0.14\bin"/>
    <property name="sun.java.command" value="C:\Users\marce\AppData\Local\Temp\surefire4183806239950401216\surefirebooter-20250718130615872_3.jar C:\Users\marce\AppData\Local\Temp\surefire4183806239950401216 2025-07-18T13-06-15_671-jvmRun1 surefire-20250718130615872_1tmp surefire_0-20250718130615872_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="E:\legalconnect\common-lib\bff-service\target\test-classes;E:\legalconnect\common-lib\bff-service\target\classes;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.2.5\spring-boot-starter-web-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter\3.2.5\spring-boot-starter-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot\3.2.5\spring-boot-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.2.5\spring-boot-autoconfigure-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.2.5\spring-boot-starter-logging-3.2.5.jar;C:\Users\marce\.m2\repository\ch\qos\logback\logback-classic\1.4.14\logback-classic-1.4.14.jar;C:\Users\marce\.m2\repository\ch\qos\logback\logback-core\1.4.14\logback-core-1.4.14.jar;C:\Users\marce\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.21.1\log4j-to-slf4j-2.21.1.jar;C:\Users\marce\.m2\repository\org\apache\logging\log4j\log4j-api\2.21.1\log4j-api-2.21.1.jar;C:\Users\marce\.m2\repository\org\slf4j\jul-to-slf4j\2.0.13\jul-to-slf4j-2.0.13.jar;C:\Users\marce\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\marce\.m2\repository\org\yaml\snakeyaml\2.2\snakeyaml-2.2.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.2.5\spring-boot-starter-json-3.2.5.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.15.4\jackson-datatype-jdk8-2.15.4.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.15.4\jackson-datatype-jsr310-2.15.4.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.15.4\jackson-module-parameter-names-2.15.4.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.2.5\spring-boot-starter-tomcat-3.2.5.jar;C:\Users\marce\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.20\tomcat-embed-core-10.1.20.jar;C:\Users\marce\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.20\tomcat-embed-websocket-10.1.20.jar;C:\Users\marce\.m2\repository\org\springframework\spring-web\6.1.6\spring-web-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-beans\6.1.6\spring-beans-6.1.6.jar;C:\Users\marce\.m2\repository\io\micrometer\micrometer-observation\1.12.5\micrometer-observation-1.12.5.jar;C:\Users\marce\.m2\repository\io\micrometer\micrometer-commons\1.12.5\micrometer-commons-1.12.5.jar;C:\Users\marce\.m2\repository\org\springframework\spring-webmvc\6.1.6\spring-webmvc-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-expression\6.1.6\spring-expression-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-security\3.2.5\spring-boot-starter-security-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\spring-aop\6.1.6\spring-aop-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-config\6.2.4\spring-security-config-6.2.4.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-web\6.2.4\spring-security-web-6.2.4.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-validation\3.2.5\spring-boot-starter-validation-3.2.5.jar;C:\Users\marce\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.20\tomcat-embed-el-10.1.20.jar;C:\Users\marce\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.1.Final\hibernate-validator-8.0.1.Final.jar;C:\Users\marce\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\marce\.m2\repository\org\jboss\logging\jboss-logging\3.5.3.Final\jboss-logging-3.5.3.Final.jar;C:\Users\marce\.m2\repository\com\fasterxml\classmate\1.6.0\classmate-1.6.0.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.2.5\spring-boot-starter-data-jpa-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-aop\3.2.5\spring-boot-starter-aop-3.2.5.jar;C:\Users\marce\.m2\repository\org\aspectj\aspectjweaver\1.9.22\aspectjweaver-1.9.22.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.2.5\spring-boot-starter-jdbc-3.2.5.jar;C:\Users\marce\.m2\repository\com\zaxxer\HikariCP\5.0.1\HikariCP-5.0.1.jar;C:\Users\marce\.m2\repository\org\springframework\spring-jdbc\6.1.6\spring-jdbc-6.1.6.jar;C:\Users\marce\.m2\repository\org\hibernate\orm\hibernate-core\6.4.4.Final\hibernate-core-6.4.4.Final.jar;C:\Users\marce\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\marce\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\marce\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\marce\.m2\repository\io\smallrye\jandex\3.1.2\jandex-3.1.2.jar;C:\Users\marce\.m2\repository\net\bytebuddy\byte-buddy\1.14.13\byte-buddy-1.14.13.jar;C:\Users\marce\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\marce\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\marce\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\marce\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\marce\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\marce\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\marce\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\marce\.m2\repository\org\springframework\data\spring-data-jpa\3.2.5\spring-data-jpa-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\data\spring-data-commons\3.2.5\spring-data-commons-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\spring-orm\6.1.6\spring-orm-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-tx\6.1.6\spring-tx-6.1.6.jar;C:\Users\marce\.m2\repository\org\slf4j\slf4j-api\2.0.13\slf4j-api-2.0.13.jar;C:\Users\marce\.m2\repository\org\springframework\spring-aspects\6.1.6\spring-aspects-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-starter-openfeign\4.1.1\spring-cloud-starter-openfeign-4.1.1.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-starter\4.1.2\spring-cloud-starter-4.1.2.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-context\4.1.2\spring-cloud-context-4.1.2.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-rsa\1.1.2\spring-security-rsa-1.1.2.jar;C:\Users\marce\.m2\repository\org\bouncycastle\bcprov-jdk18on\1.77\bcprov-jdk18on-1.77.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-openfeign-core\4.1.1\spring-cloud-openfeign-core-4.1.1.jar;C:\Users\marce\.m2\repository\io\github\openfeign\form\feign-form-spring\3.8.0\feign-form-spring-3.8.0.jar;C:\Users\marce\.m2\repository\io\github\openfeign\form\feign-form\3.8.0\feign-form-3.8.0.jar;C:\Users\marce\.m2\repository\commons-fileupload\commons-fileupload\1.5\commons-fileupload-1.5.jar;C:\Users\marce\.m2\repository\commons-io\commons-io\2.11.0\commons-io-2.11.0.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-commons\4.1.2\spring-cloud-commons-4.1.2.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-crypto\6.2.4\spring-security-crypto-6.2.4.jar;C:\Users\marce\.m2\repository\io\github\openfeign\feign-core\13.2.1\feign-core-13.2.1.jar;C:\Users\marce\.m2\repository\io\github\openfeign\feign-slf4j\13.2.1\feign-slf4j-13.2.1.jar;C:\Users\marce\.m2\repository\org\projectlombok\lombok\1.18.32\lombok-1.18.32.jar;C:\Users\marce\.m2\repository\org\mapstruct\mapstruct\1.5.5.Final\mapstruct-1.5.5.Final.jar;C:\Users\marce\.m2\repository\org\mapstruct\mapstruct-processor\1.5.5.Final\mapstruct-processor-1.5.5.Final.jar;C:\Users\marce\.m2\repository\org\springdoc\springdoc-openapi-starter-webmvc-ui\2.5.0\springdoc-openapi-starter-webmvc-ui-2.5.0.jar;C:\Users\marce\.m2\repository\org\springdoc\springdoc-openapi-starter-webmvc-api\2.5.0\springdoc-openapi-starter-webmvc-api-2.5.0.jar;C:\Users\marce\.m2\repository\org\springdoc\springdoc-openapi-starter-common\2.5.0\springdoc-openapi-starter-common-2.5.0.jar;C:\Users\marce\.m2\repository\io\swagger\core\v3\swagger-core-jakarta\2.2.21\swagger-core-jakarta-2.2.21.jar;C:\Users\marce\.m2\repository\org\apache\commons\commons-lang3\3.13.0\commons-lang3-3.13.0.jar;C:\Users\marce\.m2\repository\io\swagger\core\v3\swagger-annotations-jakarta\2.2.21\swagger-annotations-jakarta-2.2.21.jar;C:\Users\marce\.m2\repository\io\swagger\core\v3\swagger-models-jakarta\2.2.21\swagger-models-jakarta-2.2.21.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.15.4\jackson-dataformat-yaml-2.15.4.jar;C:\Users\marce\.m2\repository\org\webjars\swagger-ui\5.13.0\swagger-ui-5.13.0.jar;C:\Users\marce\.m2\repository\io\jsonwebtoken\jjwt-api\0.11.5\jjwt-api-0.11.5.jar;C:\Users\marce\.m2\repository\io\jsonwebtoken\jjwt-impl\0.11.5\jjwt-impl-0.11.5.jar;C:\Users\marce\.m2\repository\io\jsonwebtoken\jjwt-jackson\0.11.5\jjwt-jackson-0.11.5.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.15.4\jackson-databind-2.15.4.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.15.4\jackson-annotations-2.15.4.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.15.4\jackson-core-2.15.4.jar;C:\Users\marce\.m2\repository\br\com\legalconnect\common\common-lib\1.0.0\common-lib-1.0.0.jar;C:\Users\marce\.m2\repository\org\springframework\spring-context\6.1.6\spring-context-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-core\6.2.4\spring-security-core-6.2.4.jar;C:\Users\marce\.m2\repository\org\flywaydb\flyway-core\9.22.3\flyway-core-9.22.3.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-toml\2.15.4\jackson-dataformat-toml-2.15.4.jar;C:\Users\marce\.m2\repository\com\google\code\gson\gson\2.10.1\gson-2.10.1.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.2.5\spring-boot-starter-test-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-test\3.2.5\spring-boot-test-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.2.5\spring-boot-test-autoconfigure-3.2.5.jar;C:\Users\marce\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\marce\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\marce\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\marce\.m2\repository\net\minidev\json-smart\2.5.1\json-smart-2.5.1.jar;C:\Users\marce\.m2\repository\net\minidev\accessors-smart\2.5.1\accessors-smart-2.5.1.jar;C:\Users\marce\.m2\repository\org\ow2\asm\asm\9.6\asm-9.6.jar;C:\Users\marce\.m2\repository\org\assertj\assertj-core\3.24.2\assertj-core-3.24.2.jar;C:\Users\marce\.m2\repository\org\awaitility\awaitility\4.2.1\awaitility-4.2.1.jar;C:\Users\marce\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.2\junit-jupiter-5.10.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.2\junit-jupiter-api-5.10.2.jar;C:\Users\marce\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\marce\.m2\repository\org\junit\platform\junit-platform-commons\1.10.2\junit-platform-commons-1.10.2.jar;C:\Users\marce\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.2\junit-jupiter-params-5.10.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.2\junit-jupiter-engine-5.10.2.jar;C:\Users\marce\.m2\repository\org\junit\platform\junit-platform-engine\1.10.2\junit-platform-engine-1.10.2.jar;C:\Users\marce\.m2\repository\org\mockito\mockito-core\5.7.0\mockito-core-5.7.0.jar;C:\Users\marce\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.13\byte-buddy-agent-1.14.13.jar;C:\Users\marce\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\marce\.m2\repository\org\mockito\mockito-junit-jupiter\5.7.0\mockito-junit-jupiter-5.7.0.jar;C:\Users\marce\.m2\repository\org\skyscreamer\jsonassert\1.5.1\jsonassert-1.5.1.jar;C:\Users\marce\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\marce\.m2\repository\org\springframework\spring-core\6.1.6\spring-core-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-jcl\6.1.6\spring-jcl-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-test\6.1.6\spring-test-6.1.6.jar;C:\Users\marce\.m2\repository\org\xmlunit\xmlunit-core\2.9.1\xmlunit-core-2.9.1.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-test\6.2.4\spring-security-test-6.2.4.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\marce"/>
    <property name="user.language" value="pt"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-01-21"/>
    <property name="java.home" value="C:\Users\marce\.jdks\corretto-17.0.14"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="E:\legalconnect\common-lib\bff-service"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="windows-1252"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="C:\Users\marce\AppData\Local\Temp\surefire4183806239950401216\surefirebooter-20250718130615872_3.jar"/>
    <property name="LOG_LEVEL_PATTERN" value="%5p [bff-service-pessoas,%X{traceId:-},%X{spanId:-},%X{userId:-},%X{tenantId:-}]"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="17.0.14+7-LTS"/>
    <property name="user.name" value="marce"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.14.7.1"/>
    <property name="localRepository" value="C:\Users\marce\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="C:\Users\marce\AppData\Local\Temp\"/>
    <property name="java.version" value="17.0.14"/>
    <property name="user.dir" value="E:\legalconnect\common-lib\bff-service"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="18248"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="CONSOLE_LOG_CHARSET" value="windows-1252"/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Users\marce\.jdks\corretto-17.0.14\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Python313\Scripts\;C:\Python313\;C:\Program Files\Python312\Scripts\;C:\Program Files\Python312\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\marce\AppData\Local\nvm;C:\nvm4w\nodejs;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\ProgramData\chocolatey\bin;C:\Program Files\Docker\Docker\resources\bin;C:\Users\marce\.jbang\bin;C:\Users\marce\.local\bin;C:\Users\marce\AppData\Local\Microsoft\WindowsApps;C:\Users\marce\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\marce\AppData\Local\nvm;C:\nvm4w\nodejs;E:\dev\ambiente\apache-maven-3.9.9\bin;C:\Program Files\Python312\Scripts\;C:\Program Files\Python312\;C:\Users\marce\.jdks\corretto-17.0.14\bin;;C:\Users\marce\AppData\Local\Programs\Ollama;c:\Users\marce\AppData\Roaming\Code\User\globalStorage\github.copilot-chat\debugCommand;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.14+7-LTS"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="61.0"/>
    <property name="LOGGED_APPLICATION_NAME" value="[bff-service-pessoas] "/>
  </properties>
  <testcase name="contextLoads" classname="br.com.legalconnect.common.common_lib.CommonLibApplicationTests" time="0.021">
    <error message="Failed to load ApplicationContext for [WebMergedContextConfiguration@27f0ad19 testClass = br.com.legalconnect.common.common_lib.CommonLibApplicationTests, locations = [], classes = [br.com.legalconnect.BffServiceApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceDescriptors = [], propertySourceProperties = [&quot;org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true&quot;], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@2f953efd, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@5a7fe64f, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@700fb871, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@1f, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizer@50029372, org.springframework.boot.test.context.SpringBootTestAnnotation@3f79eb7f], resourceBasePath = &quot;src/main/webapp&quot;, contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]" type="java.lang.IllegalStateException"><![CDATA[java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@27f0ad19 testClass = br.com.legalconnect.common.common_lib.CommonLibApplicationTests, locations = [], classes = [br.com.legalconnect.BffServiceApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceDescriptors = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@2f953efd, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@5a7fe64f, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@700fb871, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@1f, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizer@50029372, org.springframework.boot.test.context.SpringBootTestAnnotation@3f79eb7f], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:180)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'logging.level.feign.okhttp.okhttpclient' to org.springframework.boot.logging.LogLevel
	at org.springframework.boot.context.properties.bind.Binder.handleBindError(Binder.java:391)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:354)
	at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$2(Binder.java:439)
	at org.springframework.boot.context.properties.bind.Binder$Context.withSource(Binder.java:568)
	at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$3(Binder.java:440)
	at org.springframework.boot.context.properties.bind.AggregateElementBinder.bind(AggregateElementBinder.java:39)
	at org.springframework.boot.context.properties.bind.MapBinder$EntryBinder.lambda$bindEntries$0(MapBinder.java:159)
	at java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1220)
	at org.springframework.boot.context.properties.bind.MapBinder$EntryBinder.bindEntries(MapBinder.java:159)
	at org.springframework.boot.context.properties.bind.MapBinder.bindAggregate(MapBinder.java:70)
	at org.springframework.boot.context.properties.bind.AggregateBinder.bind(AggregateBinder.java:56)
	at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$4(Binder.java:442)
	at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:597)
	at org.springframework.boot.context.properties.bind.Binder.bindAggregate(Binder.java:442)
	at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:403)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:350)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:339)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:269)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:243)
	at org.springframework.boot.context.logging.LoggingApplicationListener.setLogLevels(LoggingApplicationListener.java:393)
	at org.springframework.boot.context.logging.LoggingApplicationListener.initializeFinalLoggingLevels(LoggingApplicationListener.java:360)
	at org.springframework.boot.context.logging.LoggingApplicationListener.initialize(LoggingApplicationListener.java:299)
	at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEnvironmentPreparedEvent(LoggingApplicationListener.java:246)
	at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:223)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:185)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:178)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:156)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138)
	at org.springframework.boot.context.event.EventPublishingRunListener.multicastInitialEvent(EventPublishingRunListener.java:136)
	at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:81)
	at org.springframework.boot.SpringApplicationRunListeners.lambda$environmentPrepared$2(SpringApplicationRunListeners.java:64)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:118)
	at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:112)
	at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:63)
	at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:369)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:329)
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454)
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)
	... 17 more
Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [org.springframework.boot.logging.LogLevel] for value [DEBUG # Se estiver usando OkHttp]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
	at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:110)
	at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:101)
	at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:93)
	at org.springframework.boot.context.properties.bind.Binder.bindProperty(Binder.java:463)
	at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:407)
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:350)
	... 61 more
Caused by: java.lang.IllegalArgumentException: No enum constant org.springframework.boot.logging.LogLevel.DEBUG # Se estiver usando OkHttp
	at org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter.findEnum(LenientObjectToEnumConverterFactory.java:93)
	at org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter.convert(LenientObjectToEnumConverterFactory.java:80)
	at org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter.convert(LenientObjectToEnumConverterFactory.java:61)
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:409)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	... 68 more
]]></error>
    <system-out><![CDATA[13:06:17.068 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [br.com.legalconnect.common.common_lib.CommonLibApplicationTests]: CommonLibApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
13:06:17.213 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration br.com.legalconnect.BffServiceApplication for test class br.com.legalconnect.common.common_lib.CommonLibApplicationTests
2025-07-18T13:06:17.956-03:00 ERROR [bff-service-pessoas,,,,] 18248 --- [bff-service-pessoas] [           main] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Failed to bind properties under 'logging.level.feign.okhttp.okhttpclient' to org.springframework.boot.logging.LogLevel:

    Property: logging.level.feign.okhttp.okhttpclient
    Value: "DEBUG # Se estiver usando OkHttp"
    Origin: class path resource [application.properties] - 47:41
    Reason: failed to convert java.lang.String to org.springframework.boot.logging.LogLevel (caused by java.lang.IllegalArgumentException: No enum constant org.springframework.boot.logging.LogLevel.DEBUG # Se estiver usando OkHttp)

Action:

Update your application's configuration. The following values are valid:

    DEBUG
    ERROR
    FATAL
    INFO
    OFF
    TRACE
    WARN

2025-07-18T13:06:17.960-03:00  WARN [bff-service-pessoas,,,,] 18248 --- [bff-service-pessoas] [           main] o.s.test.context.TestContextManager      : Caught exception while allowing TestExecutionListener [org.springframework.test.context.web.ServletTestExecutionListener] to prepare test instance [br.com.legalconnect.common.common_lib.CommonLibApplicationTests@54e81b21]

java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@27f0ad19 testClass = br.com.legalconnect.common.common_lib.CommonLibApplicationTests, locations = [], classes = [br.com.legalconnect.BffServiceApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceDescriptors = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@2f953efd, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@5a7fe64f, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@700fb871, org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@1f, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizer@50029372, org.springframework.boot.test.context.SpringBootTestAnnotation@3f79eb7f], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:180) ~[spring-test-6.1.6.jar:6.1.6]
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130) ~[spring-test-6.1.6.jar:6.1.6]
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191) ~[spring-test-6.1.6.jar:6.1.6]
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130) ~[spring-test-6.1.6.jar:6.1.6]
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260) ~[spring-test-6.1.6.jar:6.1.6]
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163) ~[spring-test-6.1.6.jar:6.1.6]
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$10(ClassBasedTestDescriptor.java:378) ~[junit-jupiter-engine-5.10.2.jar:5.10.2]
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:383) ~[junit-jupiter-engine-5.10.2.jar:5.10.2]
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$11(ClassBasedTestDescriptor.java:378) ~[junit-jupiter-engine-5.10.2.jar:5.10.2]
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197) ~[na:na]
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179) ~[na:na]
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625) ~[na:na]
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509) ~[na:na]
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499) ~[na:na]
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310) ~[na:na]
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735) ~[na:na]
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734) ~[na:na]
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762) ~[na:na]
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:377) ~[junit-jupiter-engine-5.10.2.jar:5.10.2]
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:290) ~[junit-jupiter-engine-5.10.2.jar:5.10.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:289) ~[junit-jupiter-engine-5.10.2.jar:5.10.2]
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:279) ~[junit-jupiter-engine-5.10.2.jar:5.10.2]
	at java.base/java.util.Optional.orElseGet(Optional.java:364) ~[na:na]
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:278) ~[junit-jupiter-engine-5.10.2.jar:5.10.2]
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31) ~[junit-jupiter-engine-5.10.2.jar:5.10.2]
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106) ~[junit-jupiter-engine-5.10.2.jar:5.10.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105) ~[junit-jupiter-engine-5.10.2.jar:5.10.2]
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69) ~[junit-jupiter-engine-5.10.2.jar:5.10.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511) ~[na:na]
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511) ~[na:na]
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54) ~[junit-platform-engine-1.10.2.jar:1.10.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198) ~[junit-platform-launcher-1.10.2.jar:1.10.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169) ~[junit-platform-launcher-1.10.2.jar:1.10.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93) ~[junit-platform-launcher-1.10.2.jar:1.10.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58) ~[junit-platform-launcher-1.10.2.jar:1.10.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141) ~[junit-platform-launcher-1.10.2.jar:1.10.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57) ~[junit-platform-launcher-1.10.2.jar:1.10.2]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103) ~[junit-platform-launcher-1.10.2.jar:1.10.2]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85) ~[junit-platform-launcher-1.10.2.jar:1.10.2]
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47) ~[junit-platform-launcher-1.10.2.jar:1.10.2]
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56) ~[surefire-junit-platform-3.1.2.jar:3.1.2]
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184) ~[surefire-junit-platform-3.1.2.jar:3.1.2]
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148) ~[surefire-junit-platform-3.1.2.jar:3.1.2]
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122) ~[surefire-junit-platform-3.1.2.jar:3.1.2]
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385) ~[surefire-booter-3.1.2.jar:3.1.2]
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162) ~[surefire-booter-3.1.2.jar:3.1.2]
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507) ~[surefire-booter-3.1.2.jar:3.1.2]
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495) ~[surefire-booter-3.1.2.jar:3.1.2]
Caused by: org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'logging.level.feign.okhttp.okhttpclient' to org.springframework.boot.logging.LogLevel
	at org.springframework.boot.context.properties.bind.Binder.handleBindError(Binder.java:391) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:354) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$2(Binder.java:439) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder$Context.withSource(Binder.java:568) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$3(Binder.java:440) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.AggregateElementBinder.bind(AggregateElementBinder.java:39) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.MapBinder$EntryBinder.lambda$bindEntries$0(MapBinder.java:159) ~[spring-boot-3.2.5.jar:3.2.5]
	at java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1220) ~[na:na]
	at org.springframework.boot.context.properties.bind.MapBinder$EntryBinder.bindEntries(MapBinder.java:159) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.MapBinder.bindAggregate(MapBinder.java:70) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.AggregateBinder.bind(AggregateBinder.java:56) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder.lambda$bindAggregate$4(Binder.java:442) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder$Context.withIncreasedDepth(Binder.java:597) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder.bindAggregate(Binder.java:442) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:403) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:350) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:339) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:269) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:243) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.logging.LoggingApplicationListener.setLogLevels(LoggingApplicationListener.java:393) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.logging.LoggingApplicationListener.initializeFinalLoggingLevels(LoggingApplicationListener.java:360) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.logging.LoggingApplicationListener.initialize(LoggingApplicationListener.java:299) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEnvironmentPreparedEvent(LoggingApplicationListener.java:246) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:223) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:185) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:178) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:156) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.boot.context.event.EventPublishingRunListener.multicastInitialEvent(EventPublishingRunListener.java:136) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:81) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplicationRunListeners.lambda$environmentPrepared$2(SpringApplicationRunListeners.java:64) ~[spring-boot-3.2.5.jar:3.2.5]
	at java.base/java.lang.Iterable.forEach(Iterable.java:75) ~[na:na]
	at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:118) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:112) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:63) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:369) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:329) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137) ~[spring-boot-test-3.2.5.jar:3.2.5]
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58) ~[spring-core-6.1.6.jar:6.1.6]
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46) ~[spring-core-6.1.6.jar:6.1.6]
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1454) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553) ~[spring-boot-test-3.2.5.jar:3.2.5]
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137) ~[spring-boot-test-3.2.5.jar:3.2.5]
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108) ~[spring-boot-test-3.2.5.jar:3.2.5]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225) ~[spring-test-6.1.6.jar:6.1.6]
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152) ~[spring-test-6.1.6.jar:6.1.6]
	... 73 common frames omitted
Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [org.springframework.boot.logging.LogLevel] for value [DEBUG # Se estiver usando OkHttp]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47) ~[spring-core-6.1.6.jar:6.1.6]
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182) ~[spring-core-6.1.6.jar:6.1.6]
	at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:110) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:101) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.BindConverter.convert(BindConverter.java:93) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder.bindProperty(Binder.java:463) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder.bindObject(Binder.java:407) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.context.properties.bind.Binder.bind(Binder.java:350) ~[spring-boot-3.2.5.jar:3.2.5]
	... 117 common frames omitted
Caused by: java.lang.IllegalArgumentException: No enum constant org.springframework.boot.logging.LogLevel.DEBUG # Se estiver usando OkHttp
	at org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter.findEnum(LenientObjectToEnumConverterFactory.java:93) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter.convert(LenientObjectToEnumConverterFactory.java:80) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.convert.LenientObjectToEnumConverterFactory$LenientToEnumConverter.convert(LenientObjectToEnumConverterFactory.java:61) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.core.convert.support.GenericConversionService$ConverterFactoryAdapter.convert(GenericConversionService.java:409) ~[spring-core-6.1.6.jar:6.1.6]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41) ~[spring-core-6.1.6.jar:6.1.6]
	... 124 common frames omitted

]]></system-out>
  </testcase>
</testsuite>
```
```java
Êþº¾   =   ?br/com/legalconnect/common/common_lib/CommonLibApplicationTests  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this ALbr/com/legalconnect/common/common_lib/CommonLibApplicationTests; contextLoads RuntimeVisibleAnnotations Lorg/junit/jupiter/api/Test; 
SourceFile CommonLibApplicationTests.java 6Lorg/springframework/boot/test/context/SpringBootTest;                  /     *· ±    
                 
                   +      ±    
                 
                
```
```java
/mvnw text eol=lf
*.cmd text eol=crlf

```
```java
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

```
```java
# Read Me First
The following was discovered as part of building this project:

* The original package name 'br.com.legalconnect.common.common-lib' is invalid and this project uses 'br.com.legalconnect.common.common_lib' instead.

# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.5.3/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.5.3/maven-plugin/build-image.html)
* [Flyway Migration](https://docs.spring.io/spring-boot/3.5.3/how-to/data-initialization.html#howto.data-initialization.migration-tool.flyway)
* [Spring Boot DevTools](https://docs.spring.io/spring-boot/3.5.3/reference/using/devtools.html)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.


```
```java
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

```
```java
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

```
```java
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.12</version> <!-- Usando a versão que você sugeriu -->
        <relativePath /> <!-- lookup parent from repository -->
    </parent>

    <groupId>br.com.legalconnect.common</groupId> <!-- Alterado conforme sua sugestão -->
    <artifactId>common-lib</artifactId>
    <version>1.0.0</version>
    <name>LegalConnect Common Library</name>
    <description>Common utilities, entities, and configurations for LegalConnect microservices</description>
    <packaging>jar</packaging> <!-- Define este como um JAR de biblioteca -->

    <properties>
        <java.version>17</java.version> <!-- Defina a versão do Java que você está usando -->
        <lombok.version>1.18.30</lombok.version> <!-- Versão explícita para Lombok -->
        <org.mapstruct.version>1.5.5.Final</org.mapstruct.version> <!-- Versão explícita para
        MapStruct -->
        <springdoc.version>2.3.0</springdoc.version> <!-- Versão explícita para SpringDoc -->
        <flyway.version>9.22.3</flyway.version> <!-- Versão explícita para Flyway -->
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Validation para anotações de validação em DTOs -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>com.zaxxer</groupId>
                    <artifactId>HikariCP</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Spring Context para anotações como @Configuration, @Component, etc. -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <!-- Spring Security Core para GrantedAuthority (usado em UserDetails, por exemplo) -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>6.0.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency> -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version> <!-- Usando a versão definida nas propriedades -->
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${org.mapstruct.version}</version> <!-- Usando a versão definida nas propriedades -->
        </dependency>

        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${org.mapstruct.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>0.2.0</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
```
```java
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip

```
```java
{
  "java.configuration.updateBuildConfiguration": "interactive"
}

```
```java
legalconnect/
├── common-lib/
│   ├── pom.xml                                 # Configurações do Maven para a biblioteca comum
│   └── src/
│       └── main/
│           └── java/
│               └── br/com/legalconnect/common/
│                   ├── BaseEntity.java         # Entidade base para todos os modelos de dados
│                   ├── config/
│                   │   ├── FlywayMultiTenantConfig.java # Configuração Flyway para multitenancy (se global)
│                   │   ├── OpenApiConfig.java           # Configuração OpenAPI/Swagger UI
│                   │   └── WebConfig.java               # Configurações CORS e MVC gerais
│                   ├── constants/
│                   │   ├── ErrorCode.java               # Códigos de erro padronizados
│                   │   └── Roles.java                   # Constantes para papéis de usuário
│                   ├── dto/
│                   │   ├── BaseResponse.java            # DTO base para respostas da API
│                   │   └── SuccessResponseDTO.java      # DTO para respostas de sucesso simples
│                   ├── exception/
│                   │   ├── BusinessException.java       # Exceção de negócio personalizada
│                   │   └── GlobalExceptionHandler.java  # Manipulador global de exceções
│                   ├── multitenancy/
│                   │   ├── HibernateMultiTenantConfig.java # Configuração Hibernate para multitenancy
│                   │   ├── SchemaMultiTenantConnectionProvider.java # Provedor de conexão multi-tenant
│                   │   ├── SchemaTenantIdentifierResolver.java    # Resolvedor de identificador de tenant
│                   │   ├── TenantContext.java                     # Contexto da thread para o tenant atual
│                   │   └── TenantFilter.java                    # Filtro HTTP para extrair o tenant ID
│                   └── util/
│                       └── ValidatorUtil.java           # Utilitários de validação (ex: CPF, CNPJ)
```
```java
package br.com.legalconnect.common.dto;
// common/BaseEntity.java

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import jakarta.persistence.Column;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class BaseEntity
 * @brief Classe base abstrata para todas as entidades persistentes.
 *        Fornece campos comuns como ID, data de criação e data de atualização.
 */
@Getter
@Setter
@NoArgsConstructor
@SuperBuilder
@MappedSuperclass // Indica que esta classe é uma superclasse mapeada para outras entidades
public abstract class BaseEntity implements Serializable {

    private static final Logger log = LoggerFactory.getLogger(BaseEntity.class);

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    protected UUID id; // Identificador único da entidade

    @Column(name = "created_at", nullable = false)
    protected LocalDateTime createdAt; // Data e hora de criação do registro

    @Column(name = "updated_at", nullable = false)
    protected LocalDateTime updatedAt; // Data e hora da última atualização do registro

    /**
     * Define a data de criação antes de persistir a entidade.
     */
    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
        log.debug("Criando entidade: {}. Data de criação: {}", this.getClass().getSimpleName(), createdAt);
    }

    /**
     * Atualiza a data de atualização antes de atualizar a entidade.
     */
    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
        log.debug("Atualizando entidade: {}. ID: {}. Data de atualização: {}", this.getClass().getSimpleName(), id,
                updatedAt);
    }
}

```
```java
package br.com.legalconnect.common.dto;

import java.time.LocalDateTime;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;

import br.com.legalconnect.enums.StatusResponse;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class BaseResponse
 * @brief DTO base para padronizar as respostas da API.
 *
 *        Inclui campos comuns para todas as respostas, como status, mensagem,
 *        timestamp e, opcionalmente, uma lista de erros.
 *        Utiliza Lombok para reduzir boilerplate (getters, setters,
 *        construtores, builder).
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL) // Inclui apenas campos não nulos na serialização JSON
public class BaseResponse<T> {

    private StatusResponse status; // Status da resposta (ex: StatusResponse.SUCESSO, StatusResponse.ERRO,
                                   // "WARNING")
    private String message; // Mensagem descritiva da resposta
    private LocalDateTime timestamp; // Data e hora da resposta
    private T data; // Payload da resposta (dados de sucesso)
    private List<String> errors; // Lista de mensagens de erro, se houver
}
```
```java
package br.com.legalconnect.common.dto;

import java.time.LocalDateTime;

import br.com.legalconnect.enums.StatusResponse;
import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * @class SuccessResponseDTO
 * @brief DTO para respostas de sucesso simples da API.
 *
 *        Estende {@link BaseResponse} e é usado para indicar operações
 *        bem-sucedidas
 *        que podem ou não retornar dados específicos.
 */
@Data
@EqualsAndHashCode(callSuper = true) // Inclui campos da superclasse no equals e hashCode
public class SuccessResponseDTO extends BaseResponse {

    /**
     * Construtor padrão para uma resposta de sucesso.
     * Define o status como StatusResponse.SUCESSO e o timestamp atual.
     */
    public SuccessResponseDTO() {
        this.setStatus(StatusResponse.SUCESSO);
        this.setTimestamp(LocalDateTime.now());
    }

    /**
     * Construtor para uma resposta de sucesso com uma mensagem específica.
     *
     * @param message A mensagem descritiva do sucesso.
     */
    public SuccessResponseDTO(String message) {
        this(); // Chama o construtor padrão para definir status e timestamp
        this.setMessage(message);
    }
}
```
```java
package br.com.legalconnect.common.exception;

import org.springframework.http.HttpStatus;

import lombok.Getter;

/**
 * @class BusinessException
 * @brief Exceção personalizada para representar erros de negócio na aplicação.
 *
 *        Esta exceção é lançada quando uma regra de negócio não é satisfeita.
 *        Ela encapsula um {@link ErrorCode} e, opcionalmente, argumentos para
 *        formatar
 *        a mensagem de erro, além de um status HTTP para a resposta da API.
 */
@Getter
public class BusinessException extends RuntimeException {

    private final ErrorCode errorCode; // O código de erro padronizado
    private final String[] args; // Argumentos para formatar a mensagem do erro
    private final HttpStatus httpStatus; // Status HTTP associado a esta exceção

    public BusinessException(ErrorCode errorCode, HttpStatus httpStatus, String args) {
        super(args);
        this.errorCode = errorCode;
        this.args = new String[] { args, errorCode.getMessage() };
        this.httpStatus = httpStatus;
    }

    /**
     * Construtor para BusinessException com um ErrorCode e status HTTP padrão
     * (BAD_REQUEST).
     *
     * @param errorCode O código de erro que define o tipo de exceção de negócio.
     * @param args      Argumentos opcionais para formatar a mensagem do erro.
     */
    public BusinessException(ErrorCode errorCode, String... args) {
        this(errorCode, HttpStatus.BAD_REQUEST, args); // Por padrão, erros de negócio são BAD_REQUEST
    }

    /**
     * Construtor para BusinessException com um ErrorCode e um status HTTP
     * específico.
     *
     * @param errorCode  O código de erro que define o tipo de exceção de negócio.
     * @param httpStatus O status HTTP a ser retornado na resposta da API.
     * @param args       Argumentos opcionais para formatar a mensagem do erro.
     */
    public BusinessException(ErrorCode errorCode, HttpStatus httpStatus, String... args) {
        super(errorCode.getFormattedMessage(args)); // Define a mensagem da exceção usando a mensagem formatada do
                                                    // ErrorCode
        this.errorCode = errorCode;
        this.args = args;
        this.httpStatus = httpStatus;

    }

    /**
     * @brief Retorna a mensagem de erro formatada.
     * @return A mensagem de erro formatada.
     */
    @Override
    public String getMessage() {
        return errorCode.getFormattedMessage(args);
    }

    /**
     * @brief Retorna o código de erro.
     * @return O código de erro.
     */
    public String getCode() {
        return errorCode.getCode();
    }
}
```
```java
package br.com.legalconnect.common.exception;

import lombok.Getter;

/**
 * @enum ErrorCode
 * @brief Enumeração que define códigos de erro padronizados para a aplicação.
 *
 *        Cada código de erro possui uma mensagem associada, facilitando a
 *        padronização
 *        de respostas de erro na API e a internacionalização ou localização
 *        futura.
 */
@Getter
public enum ErrorCode {
    // Erros gerais de validação
    DADOS_INVALIDOS("001", "Dados fornecidos são inválidos."),
    REQUISICAO_MAL_FORMADA("002", "A requisição está mal formada."),
    PARAMETRO_AUSENTE("003", "Parâmetro obrigatório ausente."),

    // Erros de entidade / negócio
    ENTIDADE_NAO_ENCONTRADA("100", "Entidade não encontrada."),
    EMPRESA_NAO_ENCONTRADA("101", "Empresa não encontrada."),
    PROFISSIONAL_NAO_ENCONTRADO("102", "Profissional não encontrado."),
    CLIENTE_NAO_ENCONTRADO("103", "Cliente não encontrado."),
    ADMINISTRADOR_NAO_ENCONTRADO("104", "Administrador não encontrado."),
    PLANO_NAO_ENCONTRADO("105", "Plano não encontrado."),
    USER_NAO_ENCONTRADO("106", "Usuário associado não encontrado."),

    // Erros de duplicidade
    CNPJ_DUPLICADO("200", "CNPJ já cadastrado."),
    CPF_DUPLICADO("201", "CPF já cadastrado."),
    OAB_DUPLICADA("202", "Número da OAB já cadastrado."),
    EMAIL_DUPLICADO("203", "Email já cadastrado."),
    NOME_PLANO_DUPLICADO("204", "Nome do plano já cadastrado."),

    // Erros de integridade
    INTEGRIDADE_VIOLADA("300", "Violação de integridade de dados."),
    RECURSO_EM_USO("301", "Recurso não pode ser excluído pois está em uso."),

    // Erros de sistema / internos
    ERRO_INTERNO_SERVIDOR("500", "Ocorreu um erro interno no servidor."),
    SERVICO_INDISPONIVEL("503", "Serviço temporariamente indisponível."),

    // Erros Gerais/Comuns (1000-1999)
    GENERIC_ERROR("1000", "Ocorreu um erro inesperado. Por favor, tente novamente mais tarde."),
    INVALID_INPUT("1001", "Dados de entrada inválidos."),
    RESOURCE_NOT_FOUND("1002", "Recurso não encontrado."),
    UNAUTHORIZED_ACCESS("1003", "Acesso não autorizado. Credenciais inválidas ou ausentes."),
    FORBIDDEN_ACCESS("1004", "Acesso negado. Você não tem permissão para realizar esta ação."),
    SERVICE_UNAVAILABLE("1005", "O serviço está temporariamente indisponível. Tente novamente mais tarde."),
    TOO_MANY_REQUESTS("1006", "Muitas requisições. Por favor, aguarde e tente novamente."),
    VALIDATION_ERROR("1007", "Erro de validação nos dados fornecidos."),
    DATABASE_ERROR("1008", "Erro ao acessar o banco de dados."),
    INTEGRATION_ERROR("1009", "Erro de integração com serviço externo."),

    // Erros de Autenticação e Autorização (2000-2999)
    INVALID_CREDENTIALS("2000", "Credenciais de autenticação inválidas."),
    ACCOUNT_LOCKED("2001", "Sua conta está bloqueada."),
    ACCOUNT_DISABLED("2002", "Sua conta está desativada."),
    TOKEN_EXPIRED("2003", "O token de acesso expirou."),
    INVALID_TOKEN("2004", "O token de acesso é inválido."),
    REFRESH_TOKEN_EXPIRED("2005", "O refresh token expirou. Faça login novamente."),
    INVALID_REFRESH_TOKEN("2006", "O refresh token é inválido."),
    USER_NOT_FOUND("2007", "Usuário não encontrado."),
    EMAIL_ALREADY_REGISTERED("2008", "Este e-mail já está cadastrado."),
    PASSWORD_RESET_FAILED("2009", "Falha ao redefinir a senha."),
    INVALID_CURRENT_PASSWORD("2010", "A senha atual fornecida está incorreta."), // Novo erro
    PASSWORD_RESET_TOKEN_INVALID("2011", "Token de redefinição de senha inválido."), // Novo erro
    PASSWORD_RESET_TOKEN_EXPIRED("2012", "Token de redefinição de senha expirado."), // Novo erro
    PASSWORD_RESET_TOKEN_USED("2013", "Token de redefinição de senha já utilizado."), // Novo erro
    PASSWORD_RESET_TOKEN_EXCEEDED("2014", "Limite de redefinições de senha excedido."), // Novo erro

    // Erros de Negócio Específicos (3000-3999) - Exemplo
    TENANT_NOT_FOUND("3000", "Tenant não encontrado."),
    TENANT_DISABLED("3001", "O tenant está desativado."),
    SUBSCRIPTION_EXPIRED("3002", "Sua assinatura expirou."),
    PLAN_NOT_ACTIVE("3003", "O plano selecionado não está ativo."),
    SERVICE_LIMIT_EXCEEDED("3004", "Limite de serviços agendáveis excedido para o seu plano."),
    ADVOCATE_NOT_AVAILABLE("3005", "Advogado não disponível no horário selecionado."),
    APPOINTMENT_CONFLICT("3006", "Conflito de agendamento. O horário já está ocupado."),
    PAYMENT_FAILED("3007", "Falha no processamento do pagamento."),
    INVALID_PROMO_CODE("3008", "Código promocional inválido ou expirado."),
    DOCUMENT_UPLOAD_FAILED("3009", "Falha ao fazer upload do documento."),
    INVALID_DOCUMENT_FORMAT("3010", "Formato de documento inválido."),

    // Erros de Validação de Campo (4000-4999) - Mais específicos, geralmente
    // tratados por @Valid
    FIELD_REQUIRED("4000", "O campo '%s' é obrigatório."),
    INVALID_FORMAT("4001", "O campo '%s' possui formato inválido."),
    MIN_LENGTH("4002", "O campo '%s' deve ter no mínimo %d caracteres."),
    MAX_LENGTH("4003", "O campo '%s' deve ter no máximo %d caracteres."),
    INVALID_EMAIL("4004", "O e-mail fornecido é inválido."),
    INVALID_CPF("4005", "O CPF fornecido é inválido."),
    INVALID_CNPJ("4006", "O CNPJ fornecido é inválido."),
    PASSWORD_TOO_WEAK("4007", "A senha é muito fraca."),
    DATE_IN_PAST("4008", "A data não pode ser no passado."),
    INVALID_ENUM_VALUE("4009", "Valor inválido para o campo '%s'.");

    private final String code;
    private final String message;

    /**
     * Construtor para ErrorCode.
     *
     * @param code    O código único do erro.
     * @param message A mensagem descritiva do erro.
     */
    ErrorCode(String code, String message) {
        this.code = code;
        this.message = message;
    }

    /**
     * @brief Retorna a mensagem de erro formatada com argumentos.
     * @param args Argumentos para formatar a mensagem.
     * @return A mensagem de erro formatada.
     */
    public String getFormattedMessage(Object... args) {
        return String.format(this.message, args);
    }
}

```
```java
package br.com.legalconnect.common.exception;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

import br.com.legalconnect.common.dto.BaseResponse;
import br.com.legalconnect.enums.StatusResponse;
import lombok.extern.slf4j.Slf4j;

/**
 * @class GlobalExceptionHandler
 * @brief Manipulador global de exceções para a aplicação Spring Boot.
 *
 *        Esta classe intercepta exceções lançadas em qualquer parte da
 *        aplicação
 *        e as transforma em respostas de erro padronizadas da API, utilizando
 *        {@link BaseResponse}.
 *        Lida com {@link BusinessException} e exceções de validação do Spring,
 *        além de capturar exceções genéricas.
 */
@Slf4j
@ControllerAdvice
public class GlobalExceptionHandler {

        /**
         * @brief Manipula exceções de negócio personalizadas
         *        ({@link BusinessException}).
         *
         *        Retorna uma resposta de erro com o status HTTP e a mensagem definidos
         *        na BusinessException.
         *
         * @param ex      A exceção de negócio lançada.
         * @param request A requisição web atual.
         * @return Uma {@link ResponseEntity} contendo a {@link BaseResponse} de erro.
         */
        @ExceptionHandler(BusinessException.class)
        public ResponseEntity<BaseResponse> handleBusinessException(BusinessException ex, WebRequest request) {
                log.warn("Business Exception: {} - Path: {}", ex.getMessage(), request.getDescription(false));

                BaseResponse errorResponse = BaseResponse.builder()
                                .status(StatusResponse.ERRO)
                                .message(ex.getMessage())
                                .errors(List.of(ex.getCode())) // Adiciona o código de erro como parte dos erros
                                .timestamp(LocalDateTime.now())
                                .errors(Arrays.asList(ex.getArgs())) // Adiciona os argumentos da exceção como parte dos
                                .build();

                return new ResponseEntity<>(errorResponse, ex.getHttpStatus());
        }

        /**
         * @brief Manipula exceções de validação de argumentos de método
         *        ({@link MethodArgumentNotValidException}).
         *
         *        Ocorre quando a validação de um DTO de entrada falha (ex:
         *        campos @NotNull, @Size).
         *        Coleta todos os erros de campo e os retorna em uma lista na resposta.
         *
         * @param ex      A exceção de validação.
         * @param request A requisição web atual.
         * @return Uma {@link ResponseEntity} contendo a {@link BaseResponse} com os
         *         erros de validação.
         */
        @ExceptionHandler(MethodArgumentNotValidException.class)
        public ResponseEntity<BaseResponse> handleValidationExceptions(MethodArgumentNotValidException ex,
                        WebRequest request) {
                List<String> errors = ex.getBindingResult().getAllErrors().stream()
                                .map(error -> {
                                        String fieldName = (error instanceof FieldError)
                                                        ? ((FieldError) error).getField()
                                                        : error.getObjectName();
                                        String errorMessage = error.getDefaultMessage();
                                        return String.format("Campo '%s': %s", fieldName, errorMessage);
                                })
                                .collect(Collectors.toList());

                log.warn("Validation Exception: {} - Errors: {} - Path: {}", ex.getMessage(), errors,
                                request.getDescription(false));

                BaseResponse errorResponse = BaseResponse.builder()
                                .status(StatusResponse.ERRO)
                                .message(ErrorCode.VALIDATION_ERROR.getMessage())
                                .errors(errors)
                                .timestamp(LocalDateTime.now())
                                .build();

                return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
        }

        /**
         * @brief Manipula todas as outras exceções não tratadas especificamente.
         *
         *        Captura qualquer {@link Exception} genérica, registra o erro e retorna
         *        uma resposta de erro genérica com status HTTP 500 (Internal Server
         *        Error).
         *
         * @param ex      A exceção genérica.
         * @param request A requisição web atual.
         * @return Uma {@link ResponseEntity} contendo a {@link BaseResponse} de erro
         *         genérico.
         */
        @ExceptionHandler(Exception.class)
        public ResponseEntity<BaseResponse> handleGlobalException(Exception ex, WebRequest request) {
                log.error("Unhandled Exception: {} - Path: {}", ex.getMessage(), request.getDescription(false), ex);

                BaseResponse errorResponse = BaseResponse.builder()
                                .status(StatusResponse.ERRO)
                                .message(ErrorCode.GENERIC_ERROR.getMessage())
                                .errors(List.of(ErrorCode.GENERIC_ERROR.getCode())) // Adiciona o código de erro
                                                                                    // genérico
                                .timestamp(LocalDateTime.now())
                                .build();

                return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
        }
}
```
```java
package br.com.legalconnect.common.exception;

/**
 * @class Roles
 * @brief Classe de constantes para os papéis (roles) de usuário na aplicação.
 *
 *        Define os nomes dos papéis como constantes estáticas para evitar erros
 *        de digitação
 *        e centralizar a gestão dos papéis utilizados na segurança da
 *        aplicação.
 */
public final class Roles {

    // Papéis de Usuário
    public static final String ROLE_ADMIN = "ROLE_ADMIN"; // Administrador do sistema
    public static final String ROLE_TENANT_ADMIN = "ROLE_TENANT_ADMIN"; // Administrador de um tenant específico
    public static final String ROLE_ADVOCATE = "ROLE_ADVOCATE"; // Advogado
    public static final String ROLE_CLIENT = "ROLE_CLIENT"; // Cliente final
    public static final String ROLE_USER = "ROLE_USER"; // Usuário genérico (pode ser usado para usuários logados sem um
                                                        // papel específico mais alto)

    // Prefixos e Sufixos (se necessário, para Spring Security, por exemplo)
    public static final String PREFIX = "ROLE_"; // Prefixo padrão para papéis no Spring Security

    /**
     * Construtor privado para evitar instanciação.
     */
    private Roles() {
        // Construtor privado para garantir que a classe não seja instanciada.
        // É uma classe de utilidade com apenas constantes estáticas.
    }

    /**
     * @brief Converte um nome de papel para o formato esperado pelo Spring Security
     *        (com prefixo "ROLE_").
     * @param roleName O nome do papel sem o prefixo.
     * @return O nome do papel com o prefixo "ROLE_".
     */
    public static String withPrefix(String roleName) {
        if (roleName != null && !roleName.startsWith(PREFIX)) {
            return PREFIX + roleName;
        }
        return roleName;
    }

    /**
     * @brief Remove o prefixo "ROLE_" de um nome de papel.
     * @param roleName O nome do papel com ou sem o prefixo.
     * @return O nome do papel sem o prefixo "ROLE_".
     */
    public static String withoutPrefix(String roleName) {
        if (roleName != null && roleName.startsWith(PREFIX)) {
            return roleName.substring(PREFIX.length());
        }
        return roleName;
    }
}
```
```java
package br.com.legalconnect.common.util;

import java.util.InputMismatchException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @class ValidatorUtil
 * @brief Classe utilitária para validações comuns, como CPF e CNPJ.
 *
 *        Contém métodos estáticos para validar documentos brasileiros,
 *        que são frequentemente necessários em aplicações de negócio.
 */
public final class ValidatorUtil {

    private static final String EMAIL_REGEX = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
    private static final Pattern EMAIL_PATTERN = Pattern.compile(EMAIL_REGEX);

    /**
     * Construtor privado para evitar instanciação.
     */
    private ValidatorUtil() {
        // Construtor privado para garantir que a classe não seja instanciada.
        // É uma classe de utilidade com apenas métodos estáticos.
    }

    /**
     * @brief Valida se um CPF é válido.
     *
     *        Implementa o algoritmo de validação de CPF brasileiro,
     *        incluindo a verificação dos dígitos verificadores.
     *
     * @param cpf O número do CPF (apenas dígitos).
     * @return True se o CPF for válido, false caso contrário.
     */
    public static boolean isValidCPF(String cpf) {
        if (cpf == null || cpf.length() != 11 || cpf.matches("(\\d)\\1{10}")) {
            return false; // CPF nulo, com tamanho diferente de 11 ou com todos os dígitos iguais
        }

        char dig10, dig11;
        int sm, i, r, num, peso;

        try {
            // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i = 0; i < 9; i++) {
                num = (int) (cpf.charAt(i) - 48);
                sm = sm + (num * peso);
                peso = peso - 1;
            }

            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else
                dig10 = (char) (r + 48);

            // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for (i = 0; i < 10; i++) {
                num = (int) (cpf.charAt(i) - 48);
                sm = sm + (num * peso);
                peso = peso - 1;
            }

            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig11 = '0';
            else
                dig11 = (char) (r + 48);

            // Verifica se os dígitos calculados conferem com os dígitos informados.
            return (dig10 == cpf.charAt(9)) && (dig11 == cpf.charAt(10));
        } catch (InputMismatchException erro) {
            return false;
        }
    }

    /**
     * @brief Valida se um CNPJ é válido.
     *
     *        Implementa o algoritmo de validação de CNPJ brasileiro,
     *        incluindo a verificação dos dígitos verificadores.
     *
     * @param cnpj O número do CNPJ (apenas dígitos).
     * @return True se o CNPJ for válido, false caso contrário.
     */
    public static boolean isValidCNPJ(String cnpj) {
        if (cnpj == null || cnpj.length() != 14 || cnpj.matches("(\\d)\\1{13}")) {
            return false; // CNPJ nulo, com tamanho diferente de 14 ou com todos os dígitos iguais
        }

        char dig13, dig14;
        int sm, i, r, num, peso;

        try {
            // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 2;
            for (i = 11; i >= 0; i--) {
                num = (int) (cnpj.charAt(i) - 48);
                sm = sm + (num * peso);
                peso = peso + 1;
                if (peso == 10)
                    peso = 2;
            }

            r = sm % 11;
            if ((r == 0) || (r == 1))
                dig13 = '0';
            else
                dig13 = (char) ((11 - r) + 48);

            // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 2;
            for (i = 12; i >= 0; i--) {
                num = (int) (cnpj.charAt(i) - 48);
                sm = sm + (num * peso);
                peso = peso + 1;
                if (peso == 10)
                    peso = 2;
            }

            r = sm % 11;
            if ((r == 0) || (r == 1))
                dig14 = '0';
            else
                dig14 = (char) ((11 - r) + 48);

            // Verifica se os dígitos calculados conferem com os dígitos informados.
            return (dig13 == cnpj.charAt(12)) && (dig14 == cnpj.charAt(13));
        } catch (InputMismatchException erro) {
            return false;
        }
    }

    /**
     * @brief Valida se um endereço de e-mail é válido.
     *
     *        Utiliza uma expressão regular para verificar o formato do e-mail.
     *
     * @param email O endereço de e-mail a ser validado.
     * @return True se o e-mail for válido, false caso contrário.
     */
    public static boolean isValidEmail(String email) {
        if (email == null) {
            return false;
        }
        Matcher matcher = EMAIL_PATTERN.matcher(email);
        return matcher.matches();
    }
}
```
```java
package br.com.legalconnect.enums;

public enum StatusResponse {
    SUCESSO,
    ERRO,
    AVISO;
}

```
```java
spring.application.name=common-lib

# Configuração Multi-Tenant
# spring.jpa.properties.hibernate.multiTenancy=SCHEMA 
# spring.jpa.properties.hibernate.tenant_identifier_resolver=br.com.legalconnect.common.multitenancy.HeaderTenantIdentifierResolver
# # For application.properties
# spring.jpa.properties.hibernate.multi_tenant_connection_provider=br.com.legalconnect.common.multitenancy.SchemaMultiTenantConnectionProvider
# # Configuração do tenant
# application.tenant.header-name=X-Tenant-ID
# application.tenant.default-id=public

# # Configurações do DataSource
spring.datasource.url=jdbc:postgresql://localhost:5432/jusplatform_db
spring.datasource.username=jususer
spring.datasource.password=juspassword
spring.datasource.driver-class-name=org.postgresql.Driver
spring.main.allow-bean-definition-overriding=true
springdoc.packages-to-scan=br.com.legalconnect
springdoc.paths-to-match=/api/v1/**
springdoc.openapi.version=3.0.1
spring.flyway.enabled=true
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
spring.flyway.locations=classpath:db/migration
```
```java
PK
    ÍùZ            	   META-INF/PK   ÍùZeU´ï   £      META-INF/MANIFEST.MFeA
0E÷Bî0´¸(dW³ª(H[º©&cÁÛWwîß{ÿwÈþE³èåÙ'6p,ª°PÈéz5Ðáóú°¡*«©nÜ[ß&6ñ¤KEbAÙbúî%F61Ó `S¡õÏyýS~ì+ªøPK
    ÍùZ               br/PK
    ÍùZ               br/com/PK
    ÍùZ               br/com/legalconnect/PK
    ÍùZ               br/com/legalconnect/common/PK
    ÍùZ               br/com/legalconnect/common/dto/PK
    ÍùZ            %   br/com/legalconnect/common/exception/PK
    ÍùZ                br/com/legalconnect/common/util/PK
    ÍùZ               br/com/legalconnect/enums/PK
    ÍùZ               META-INF/maven/PK
    ÍùZ            *   META-INF/maven/br.com.legalconnect.common/PK
    ÍùZ            5   META-INF/maven/br.com.legalconnect.common/common-lib/PK   ËùZÙëÛî       application.propertiesMnÛ0÷>dTÓ´Zvda ¨»èN#E²$eÃ(z.z ëèÏq]-¼ßÌ¼yOÁye*Îi% *k¸3aÆ¦U±XÜ$+kJUµ^~¿ü²É¦ÕQ±¯hÀDz
Ãî¼uè£ÂÀkU 77ÞÓâmW7+Úb??WMT¥B{VïÑgç$k¬@kÈÅÃ²8,ãý ôé4çË84Ü$¬OÎ¯ríeù(tBCr÷¤ûz¡[QcQquöyÕ«½BÚ$N)1yÝÏú@¿y±§õ<,±ÚÏÌ\[Ðëâ¿0t+×ak[/p1$©ú
o½Îv²KgC¬(±ïz¦Ú
Ð5Uïß=¼Mwmpbi}ËbnJè&ÙDvß3ÖË¾g0éEÍ&dpÂú¿ãë:PÖöÀ
ÃÈeTç³y%Ê¢o§Û¥$E<CEË 3û?x¬{¶(ê,§Òý}zwwÆÐÏf¨Îig åÙÃï'¥>àÈ(4Ês5ÓSÂíÙt~^¢dï<;fpÙp2~®iz¼lê~ÎÅõIt,e6ªò}ý/PK   ÍùZ^!f  R	  A   br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder.class¥UÛrE=cË^IYð-¶0\À	+å²Ü!YÉÁmì âTÙI¨âi¤ìW;®Ý«ò|U¨<ð|EÏîÆ-¡²J;==Ó}NoO÷Ì?ÿ¾ú@
ß1I9Sf}ÎO¸ððÀÝm=mÍ0]¡ÔkNùiy,m\Íàµ"·­:n xÐVaHf¡£B××Ê­óXlZê«½i½+_DÒ'ÆfBÙÕ2p<ÙÙðDñ¶Ì2äbüÄðÀ)7Ç`òLÔó6p¡Ð×Â_§_[N¹µì·©Ú<Ø }Ò%¥Ä£{ì§E,ã]+6ÞÃûgµ§#0X'<è]ù¦Ó<K¯Ü<ïáÍÓ1\µq
×J~$*lsýLêCÅ:fxèô{^de !%µ¡|Á0Ó¡xÔí´D´Ï[­Ì'9xÊ#iôl1§%EPë Îb¿8~¿9pu¿áí×½5"ØuÎÒx5CÇû½ÐÊÌ#ÞZDÂ<¹îFøb?!Âðó¿U5nDW@'ÜSN&[ÆáÎ(ù7Hæµz]ÑEôsµqèúÆCy­¿§{ªµÅ4å4Ós¾klé_Xo«X[¸ÏP¾pT u¥t¬#~VB<3Zkx`áÓ³ë«½dx¢D¢´·x[« ~y³3Ãt~ âÕ¦RGÝãá]}ÆÑôÐ ó_;DÁÔÂË£ÁP}#i}Éw¤_c·¯^F9½k¬Ì`ïP£FÀãXPÌõAXøáÆ`aê|¸)½I©qî:]ÓtNÒHÍ&Ì-ÈR"-0ó²Ñøië$É©Ê`¿%Ò8,^Å*vj¸Iò£3+IFDeò3pÆÐ+·þUy·~¹Zefv)Aí¡3ôa2³¸üÅmÚ^ÀAs£¬!\8%¼KÛ¥Á£z¹yìÉ(ÕÝÃÇøäTÿfáóì¹[©üë/¼Cb.$^á
08Â4¾s]ÉâÊè¾Àü
_'ò<y²­ÒWÇió´§Í\[ØÆC,ÿPK   ÍùZÄÝ÷  »  /   br/com/legalconnect/common/dto/BaseEntity.class¥VßWGþlÑÖ²mÕZ
 Ä¦
H
ÐmífwÝÍ¦=¶§MúZ¬Zí9íoý£zzgv	!¬-çø¹?¾{ï7wîæïþøÀ,Ü4úSWÑÃè¶þ®ùVk×ÐíEÝçktb9î÷'ó7SH"¥ ­b *ÃdÍÓ·¡Ù¼®Ûë8Üð á:é»ÚÞâ·ßò0¤9ï3øÏ C*2=ÕnQÅQJÒvëÙëÕµýðÊ6!ÔëÜ+&ñÃTÉ³tÇtsÂºÉoä~üi:GøzÎä9´¯yý³+Äiâ¸*ÞÅIa­;uínm*aHÖ¹_²õVáè.+Ò@
iÆc*rgÈôèÉ¿j56_ÑÁÇöT}ÏrêÅÅs*Îã¥Ñ[C¿Ékm*úzþ w¥7ëÉäFÅy¿­ÛÖü÷ó¤®Ä
L©¸K}IiaÚ¾ekëëåEY&jx!èý¨¼Ä|¨â2®0$f,Çòçèó)|)×(ëC÷ØÄÞv¡mÙ&÷JJü¥QÄYs¸Io ä%Ýð]O´)]Ù.ïçò®|ò`ß)§«U9µ ®fÓ¸×vDoX-óãúºo¹5Çq¬{¾®5¹×²Z>w®Í"ÃD¤êw¸'Än·9%[¾8×üÅ[{ÒqqU§"­K®Ýn8ÂÊÝ_ì]<§mÛ¢¨
2|ÒuJÒ|K®IK¦b9|¥Ý¨qo- "+úNôÐ9ÆýGQ1U9ô%Sz¹ÈìW=¾2¡uÃØ¬2¾?|ø=F]ÌÀj³oÂ0² º°¤ù·)æ|xû\sU÷èj}":½jÕzèX|+
dAC?=2
ìîÛª¦{ß q\ßðäÚ
\æ{=°ÚÚç{*ÿÆÈ®utrÆ°ÃÑ®ºmÏàKà5³WÈ´c8Ù+Ëz³ÉÍjd+¼å/sÑÞÄ¤Z&º<9 8 (>Nãs^Í-ÄécCß1zCq1MI¶@û#ô.ÑºHçÛK¸CjúÄêaZ?!râ³-THÒ.ÚÒ¯à
Éî~NÖÂK°çPeð)³Ç
/0ò§
Ï ¼Â{qì]Vé7K^ W1D#ô,®ás¨î¡J« É,h½ó[)¦»åbt3¬nÆ)j¡ºÙOË`õ¦c]Ñ æÌE¿I$ÍwEî¼!#_Æä!"ÐGëéÂïø 0õW£ ÖEé´^§tD ¤9&a ±û¤ßêû´ûöýÃøZæü
	PÕLæ Ñ*ÌEi_;E±.tÓÆbÐ¥¶×Yéu.D:×"{/E:0ÃK»R(Lg;=Þ§»8Jt8J]2rQv#ÇÃ(Hå°Aç²
9xXÈL7dFBÒ¿¬QÏô"`-Gçq©RÙäKÜø
Ã;Ö=³ÔÝîtícZmÙ¹ÞVvi¹KÂ§þPK   ÍùZ& ç:    E   br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder.class½WmSÛF~µv ¸@´ÄMõô%R ¥¤1Æyi¿í+(ÈG:3þþvÆtÒþþ¨L÷$Ù`,<fpúÁ·w{»ûìî­îÖÿ¾}óe¼H`ÃqhE!õrÃâö±S~)*!7mS®0ëÙÝqa<Ðî]£âÔKìq«âØ6i(FÍ±ªt5îÇÂ«;¶'æ/Ö¦U.Y÷$
!W²%ìFÍ3¾LKwI9ñ¾$Rñð<¾'&
G¾¥kÚ{¾àI\b&J^«3¤QÅ1
N[÷¹%ZùS¦qa¤Ê%ï´äÄú@Ãf) áºK¤¹4-£`zr)«gÈPs¸¦â:Ã¯zÿùèüÔøºc9éuv71Ç

|ÒQuJú!·bçÞm1ÛíÏ[VCÓ5~ Ö»ÂåSSîÓNÅA[?-ós"¢({6¥Ò¥ò.3"ùnµYwª¤,¶ØnÔÊÂ-ñ²å¡J÷.wMµ#rß¤ðV#Oô_OuÚUoal×xâW¡ÕÎPxÙDÚrß©>â.¯	)Ôäþ.´â~Q|ïÅ»°ÛrúgýÔ/}¾ówh>2ïíäü¾?Ô	``^õ®{r >Z'­F^7b´¬Ö~&¤¹x6àtZOÆ%=òÖó¥»Ýç¿ÒÍbH[¦ºî.»­¤	mÞ÷MÇ£%µæ8Ò.¯·¡À¶ãØQïÐ#ºê0LûÐ9¡WÁÓ´Á+Òq_1üv¼>CÁÀè&·«ðæsÐ¨÷~:Õµ!þSï§44±Î-«hJ±4Ç¥<D½ôWËìæµ°SRÓv/¤ªÍQ4hdYA{@çë®[Üó]ÈãØe¸ÑWjâxÆpµ·(5R0®Ss5DýÂ(ÔdÒlHµz>¥NÎ§Ôá¦?¿E?êÄÚëÛ¤¯´cÄ1h¶J)Nî5Ø4Æ§4Æ|æ|F£às|At±s(#G¾$=en {ñÜÂ4üip*	
ªÙßäéxhú+£ì§B÷¿¦í$¾B{¯o4¯hÉ6Ú]ÚÄRÚÅ¾ÑÔ©ô@l£åi{þuhO£]î-8ûÅ½;í½[´âN·qW9{Q¸é¾qÆ¡ªkãÎ´q¿%æ*Öh¦p ýsÏsMÂoÒ6)ÑM
¿ôk|íLÖÙ®ú
]ÐÖwße_¦êU2ô>jÓËIyèéÂÍ¸£!ò¾÷é&øt?#ÙôûEZMvJÇ:çHÿPK   ÍùZ¾cÔ:    1   br/com/legalconnect/common/dto/BaseResponse.classµX[wWþÆÖhFò8¾¤3MNãª²,GÅ ò¥I¤u*;Áv\ÒBÛ±<±K3®friJÃýZ
O<°, ex(kñòÂÿ'JÙûÌE·±¸Äñ}ÎþÎÞçìëIþòÏ·`?VÐ#áÑj®hWresË(mË2./Tl+·éÚ¹³c®Î®m9æxãäl­TÞ4«IHi-Y%w^Bozb=	I
}Ð$Lv¡$9®áÖ	BÔ>ÓªUÜªÀfXá
 TLÇ1¶HÒpáºqÃÈ
k6TKÖ k8û$$ÜA]£²+A÷ ¼+ØE£|ÎpÍ54â0]vÓpf¹6®Ó©ê~
Gp.`V«v.0èájn©+w&I¨cÞ1	jÑ°Î?_3ÊFÒí'bðN`ºeº«¾Y²éÎ
D
)Hk`¥­zø´|µMjÈbJB´-F¼ÔµÑ9
ã4B¯Õ-y$ÀGØ·}PÃ#ø¹¶ælÖàß¡Öð|Ô»ýyß¦Ã¸Ñª)ÌhÅYuÛp¶ìMSâbâ´3Îb¡éúÞEè7rÍ¼tMB*ÊíW¦:¯á0Z1vÌÛ*î%ôZdË¥cZéöÿ«H¤#C­¶,ò¯¿¶6#a¼ÅX³í{ç	¦lx-aaèê¢,¼çBÉ2k
³ºfliåÙµ|»çÿ{¥³t]¾É°¸u£Zb¾Ö»]"§Lu£djus77Ý àdrzB¸$ÕÁ{8%áÔ~*ÝyÎO¬S¤/î¶½yÙ¨Ó59sNCVDÄ'ïÓ¦d>Þ3­8AG0BÄÓtg&ø2AL·¦0#j]4#%¬i»Û¯}ìÚñ ehbµ>Ì°ô{Üp~@°ºÀhXIWö×xzJïë
¦wvv?9±¸³dìú!&_^Y\:Ow]$#VM§V¦Z­7Së·H6Wö§gQ];¨u/vD{¢Hh÷|{_úÿ(§ðê4lÒÑµ§}lºj×ªEóB]1Ôè­¦÷ÂJÍâÓ¬ùëeÙt!$,ð-¯åÝrî:9Ö!Ç!(wæV±\Ûä:#$áTWÇëÔåKËÏ._)(.)L.¹ü9kÛ®ãV]¯8q|%×qKÁW¹}ZDýþ%ë½cúVóúÚ£èÚÕÞhÌpè	}Ü°6Ë¦3^°íÚîþ-¬i#WÔøÓû÷a_ÄQ.¯\sFÅ7$nôQÚË9);æg	að³G/Kæ¤	ÊáEÈêBÙpTDQð	ü'NRð=z¹u³r8Üû;2¾7%ÛJõÄã8½±RôÑÃu¢zø	-Fz!Þ½ôÊ_ôEú¥n8CH %¢ieFþ£þÒÕ·Ðûs¢%\¢oF$oßeÑ³¾¼ëÌ3¿Â[z¶ÃÇè«y ¬`Æµ¦+B	½[#Äõ·ëP=l#Ä
µ;Þ¡8zðú&j7Ò*îÄy6\§5zGÕ[ÅèBì´öq\õÅhdÆ3¿ò¹£Bî!áËeªOH®kûbmT¡(Â$<OD)éïTÉ²§ýI<¥d¨S%û(9(<çH+YoT2Ò©/ÃÖxWBÞEâùêFIç%7PR«wªÖKähµG(µCµGBµ´8!²ÔJ¥±ÖïMf~
9vgòPßÜ{gòP²»xq|9K|lêÏèÓcï`è6´)=vL^Îò7®Ë¿áÛè×e=Þ :W²üUuAªRtµ4OdùÔJú l Ê÷eù«é}Ò|Q(v®k³ã+ÞC;Þ)Ü7?á­õPYû%¶h­üÛDÅð¾Q2Ê×q¨8ÊØ¡ÃPP%e¢T|:r¨~Ó°J¨>ü\±KÖàµ{¾×<ýÏÓZUaEý(PßÅ!)ú«Jïâ°G&þ=8ß$çÇø?,ü<â¸`½2{ûÎ>¡&&é`ÒHnN£k"èï^ÉþNTbÝÍð9:8³MÁ£NÞ2uùçæDÐÄ¡Ç|Ê!å±NæeÁC°¦óqÁ¬xÀ:WK	Y`ïþM{ñ¸Äñ%Ôê!÷}7D0 Pøy
D0\Å4n`pIâ"êVºå[ú7$ß#H*Iä HÒ{$´>ïáÈÁB5/ù°xÃZÙºêæå:>áoQÛ8õ]Ñ<ÚHþtØÅ7È<l»ÿ7go³[=rÚNÑð6Î­o´¡ã¥Ú:^*ìË²À77Ð·ðxk	Õ;ló2>ãäïã4±8Ñ<3Yjn)j>=FÝ!£ËÅú~¡iÞÛfÐßRâÆÖ#(nN½qÅuYmÌçE}Lô õ¡8ûFdÑY(73î0õrÿY:G}/ñe
gPðúý¢IåðUuÎ
6ßRi|~¿N%ïÓK4¶¾ïâû§u*m?Ä ÿPK   ÍùZ»¡Ãð  Å  7   br/com/legalconnect/common/dto/SuccessResponseDTO.classTKSAþ&Éf°/!¨ É._ðÅ£*"AÞe]ÜÝh?Åà)õ,^ýMeÏf	o$éÞé¯¿þ¦'¿ÿ~ÿ`O!¬"¢AAÁØrr¦]ÍUÄ¯¶e	Óªmå¶=;÷»â¥p÷lËÑù²Uö13ÙÍ8b«HhhÆ9IXµª+zÜ«¹0jñÕâr±¸Î ¯]6+@*:5t!Å0ýâÅi
·¾´AÕâ®ð¨ËÎn&Ð^}úq¡¿ã9¯\¹5Ûä%î
òHË~ÏÎd×Î9â÷1¨!!É ëñêÃPæÜ,I!°4×5c!AÉjïPÝÞ µÂ­¢ï­Êá&CÏi)2Y	4¦a·b&·ßÖxåÌúÖ.IÏ¾3Õ ËÃQ!Oº24¡aS_âniÑÞþ\¬2DNÇZÙÏkÕ-álð­
ER~SÜ)K?F¼R.dæÌû¸ðFó4JÕR§`è,¯do¿à¯
O8T'æÙÍÏ¤ÌÁ5Oböq´@ÅöJÂah§ù0ßø^ÐAÔn­âQ&5(Ú5Ç+eù¥ÿ4é)	Ò?ùÉ§H6GÞ*E­Ýú>þjíú7t70ðÂ!Ü&Bì ÙAz{iò0M­;¡UÂP]¡UKìUÝhàÚ!ÙQBC&B"õ5OHrw÷ñ>íFëIZeépêÆçnÔuan1£Q
}ÿG´þ	J¤nüBò#pÝødaBo`Ôwuc©ûP%R~á&L²YÌÑ÷^j&O±æ)Úû¤dü YtRóã-J³%ÛW$ú~RGôQZÅ*1w¨O|>ù Q%ùùôEj©·G¾°ýóOþPK   ÍùZ(;ó  ã  <   br/com/legalconnect/common/exception/BusinessException.classµTkOÓP~Î.l+Ep0°(\·QèÀ:Âá!	ñéF­Å®S?ùÔpILôø£ïéFY¶lüÒséû\Þ÷=çüþóã5¬	ðÁB@D=£GêU)«FIÙ©¶^Ñ²Ú­CÏªnèöcX<w·-Ý(e{	AÑa¹`)E³¢µZ.¡m¾Q1
E»$U6jUÝÐªÕ&fY¦õÔ<Ðr±d/®1´º0ë!DEba¾;R¡¤ÙÛäR-Ñb(hO'?,b7ªUª2¾ñq·ôÐ¶Oò¶j×(x:gZ%¥zÂ£ÞYjEûhZÇ
P¶Ü0ßÆÆEÜå`z7Ö½ÝÉ¾zÍï
¤?É{=Åpï¶¸yôÈ:±Ç0#bqªsÓ´*ªmknUgãÍÀ#òñ(4gE$yCÄToÐÑÿÉÅ+êo]³?G'÷y­RÐ¬]µP¦hÎ,ªå=ÕÒùº±°uêÂJgÛîCÓ¶Ù 3¾­ÙæÁK·5$6».g¯DªkÓéOÓï¸ÞuçÄâ	>h>§³$ÓISèæäÍUÔ6u^ßá¶Ís1º!azÛ ?¢üA¢Y_Og¤ûGcnÂE¥hõæ'åÔ<CHþDß¾?ß$ÏÑ?CL;ôÂ|§ï0@¤AH01¢ rvå:ppfÜsfÜÏ MïÓ¼ÏO _ Mà.6¼åÊO£ '¿clîWhº]\v¼éÊ
®¬àäïsÄ">GìRhª!ôÀÜµ$'SçvúWêiÒ]Ä5,ÑËºLì+M©K®Éõ ¹©KÏÔ¦éË-S0ò)ù8El}uMô8ÿ8¢u±!ÊøÑàHÓÈÿ9Ç9­ø­&|ØÅ/v¯4ðAo6.øU¢kyâXjÇ<Á'jõ/PK   ÍùZN,Ç¨  Ì&  4   br/com/legalconnect/common/exception/ErrorCode.classY	|\Uõ>ç%inÓ×ö5î¥îmJÛ,Ý÷ÉÌ¤Ì¤3I e	¯3/éÔyaPAYQQÄìòX-hÜ÷í¯¸ïî»{îìèà×/ùîwÎ½÷sÏ½¯|ú_§ÝÆÁZ06-lL¹¹Y§ßÎ¦Ü|ÞIsó)g ¡"[¹ig* TPSfáx²7ë	¶Gé'Æöçm§r'LªÜÍIDuGÑP0ÞÛlïm':á L3ÁTYÁD°#Ò÷»XWDÎ0a¦KDÖéH,u%|³L¨çI"H28ä4f+ÉÂÎD¼-LFã1ZÅ]\éæ0]Ú£j	H°PIÃÑX4ÉI§°X	OëlÆâ&,UIÛÌÁrV¨ñ¡Xç½áîÎvZeÂj54=ÔÙ6vd­	
<¶pÎ0a=§6Ò¶µÚhB#¯5ïôê4ÐÂkRTö't*z¢ñvßùf¶ðZPw"I[éèíN²é6¶«¡ÙåVÙ'È;m¹
+¡;MØÅ³3R¢p4ÙE{"íJ°Ç½¼©ýX$
õ*Wl4¡GüJ%ÓÎî.56!¢Fê©$âÝå2ÞE×«áý&ÐÁ»»ÄÑ#po0$jüLªqJµ5Gb£;L±±^p¤ôPP­í\µ&âî«zîUõIv±uÒ.vÍ+vQ1l¨Ç³84l
&##CM8Â^uÆkÂy~t$BHX`;ÏÚkÂì¶AAèêmF8GMHñ*C}µtLèãwÅR"gwFzä	1±gy	YNy"ÒFá?Ð;Á6oËí¥R\hB×«OÇèÜL(«¡yºíH0¬b¼cÄá"NðÁdò¬xBM2ÑM¸ÝG¬; õV,èÕ&\ÊÇ}½#ßR	/7áÚúkM¸R	çO*¤Ý²êõ&\¥T§¿»P²ËÊ7p
g¯+ÒêÇêM&\ËÞÙ·p>vÝ­ÉP"Ú©jd¥o3áz6V
ýC]t&ÕØÛM¸;eå´G;¢]cöNnbI0Ü»ô	sPÞmÂÍ¼`ggÊºCz`u>Åï1áV®ÎàaIßInã^Iõö8YÙõûL¸gÇCÝlJý,òp	wóåRñ0,åûp¯	÷ñÚ¢ö0ãJxî7áªX}ÐÕP]½íØþ®~È5<{ý¨	9H\×jäC&R#ÓK´³Mñ6áIÅÃ<]jà#&<íß¦~Ù¨tV$xP~Ì!6«lÐÒHÅëý	Ïe$ÖÝÑK?vs,?iÂ§àÓµ+¢×@Ó9/÷9PÏÕÂ§Mø<|¡&uóe~ÍÚöãö ½1kçû7Æ'7¤ý|¹¾bÂWákàA$_ÎÑ:ílÙ÷Ñ½³fu(k;GÉR!ïß9zåýÃoÂÿ!LÙÉgJ{¨PÖL´®íQûÿ¶	ÏÁwèu¢P&
ê»&¼ Tµ9§X´û:ø>ü ~hÂàÇt>ÇÑÜ}n!g¶O2÷9ã²v¢J@!T566	øÂÒ°vòLÉ¨C·»L~pèdVý¾¡Öú+µû_#ìlÓ©IbÚ#`ªyæf¿§sa9SÌÝ¥¦t¥¡
ð6Óö¦?±I¿Ð¨Ó.ÝsJ7à-dúíÒÐC°ËE'_rÈb¦¿ESc£R×äK´vy#O¥W*hçõ¥M
u=ä
NÑD9[`
+Öª&[pû2Å"U,­v¬Ü%ù<u,ohãP6£V7r¡À¬Ü$pÂâ`:GåUäáÂ$úÅOcýfs¨;)Æî$º¥ç³nÀô4ì.Nr E7!Ñ$F+.&£f
è¨©&8N9IQÕjËYEQ[Iïj1E
×°Ö@û
Ê9´´ æDýzëYOÛ¨Þ~9;(£5³ÂµòssNö2Àa 'g[IÞ¢6´¢Ðq³¶.6*¥¤¿ Cý§ÎQÄv±íysÂIE?^t E§ -Ý¯æv3E¿v\ \To$ÕÄ!ñ[(8å@9p¨ÃñÔ8W9¤cV «]ÛØÖ} auR

ÝåJNnÀ-Øã:ÊäÓâºÐÉá^©ÛPÍÓ|­çsG%ÐIÕgº3È/W¥;èû¥ %»V©U`§vJHÐCE7
Ú¿£ÏÅè! "°[Ë)ågQÑÛ:; ðÒFÏ¥÷|0EÐWÚå[È\ÌK
4YfÔ²*ÙÅ[®w5ñA½Úªx£F9éqSC÷jßÇ !GGiljAv¦+¨Ú]ä5&0­½ÒI£ã`\gJ¥C'û¿'%Ðõßb{H`F{§j{E £)ÑÎFúá#´·Ñ©²ûËÊ6àOyë×Þ¶
 o:uªDÑµGÓW¹×êÉö,Em»M`2ÛÚô"Å
µ)y£OÈ'´
ÕùÅ
ùôò'¤»}TÈNpÁñy_MÆÍ\«ÑbG'|Pþi[ïe$íd{À×h[*É+éÛ:Y¶ª°l?'G³îeG÷ìÀ«´
ò
ô-?^¦^_ÊjuÀ7i5ÕäÉu<Pr_áäyIº [&qFà[µJîz%ÅC÷²È
¼Q[P9½> ãë>ºmùç6Ú¸Èºýü$»ß­=PÉÜB½o¼q3¾Wë©(n£pø
x ËïÐZ*»T©ÄõÃMXlLo=!ð^mCEð~
o=f«ÊQùì£[¬°© òÇTx/øV7QÖDXÔC»TÖ>d%5<7°2½TàÃÚþ(U[W%Ô;ºv9:
Wü6¦"xªísô¯ø¶¥xaÃÿ²U*2YÝ½\%pH; 2ùÂºöL.SrÆy >zúÖK¿Fà'Éº
=¦çRG±ó¥IÒw­ÀÏi%Eèºvµv\¡+ñu¿¬Å¯[u,èUÉS*
ö¨*¿^à7´öO/ßqÿ-:YJ½}_<CÍp£Àç´mûyz3l»ÒÔÏ|zèä £.OÓº!+ÿe=9»Ià÷´3:8? ë8tûgÕrÕezÌ-èµDrr³Àk'tv~°%äæû²çWÂÇ.øºwSåíèV¿ÐèPý.v]ô4ó@ÁåÉ~øIb÷ûNÜ&ð·ÚÎ×ï¨CC¥3ýlsSú9\¶ê~Uwü£6¦ögzÅ´>ûbz²®VS¦i¡)ïø7¶RîÔ¢ÚøÓA÷ñnÌQ¹Oà¿Ébª7¹Á¤lºâ«WW«î2úÁMúQ­õMÂ oÁUcôn±XÎèü¸ÆTmØ,iÜG¦AuÇTPsC÷ç397°2M"¯ü1C{hõß=<1Ç!µMÂMñJ»¾Ç7ÔSÂ§M6cÇG=}_Rÿ¤0N×ú-ÂXBo`Ò«õK<-eÚ`«0VÐÉ¬ôHÒåÊªZûhª%	cµVnÆZZ}îæ=îªª¶®¢gq6Ù.
Ëzì,½.FÎ?{#qTß}F£i4ÍêK?¡é©Ð²fíËþ§/×yu?g¶Ó4VÎu
]öÑ,1áI¾,×¾üêÛÝíQÏ2rëû®ÎÓQ¤/ê§tÌMÓ7$ýJ S:!¨[áÐwþ
-®qiêY©ÉL?7G[=É*'ûØ¥ï¢~§¤Ï\ÉIwè/|eÿÿûL§Ù~ZDOé ç:cÿ>dØºÃ]©¬ÿUkÔÚZÇýÇ®ç=j¤[.¤¶ðá±
Êõ¾&ú°þ ÷ÍWÿpª¦3}¬÷q¶ó|\èãbú¸ÂÇÕ>6ø¸ÞÇF[|Üâãvwù¸×ÇV#>ðñ 1ùØåãY>ññ</ð1åc³>º>|,ûxÂÇK|¼ÔÇ+|¼ÒÇ«|¼ÆÇk}¼ÎÇë}¼ÑÇ|¼ÙÇ[}¼ÍÇ;|¼ÛÇû||ÀÇ}|ØÇÇ|<åã>>íãÏ(¤,?ßa|A¡µ@ý!ý.`ªÑb4S¯ÙD¿-£ºQÿÔyðì£ð§á³¤ßÐØLNá±TG_5¶ÁúM`0[W
ÃTzc´ÞØJZelSsÛéç4¶]N?«¿×*vv.TQ±ÒÖ-z¾Þ°þøVÃüêGàùÖC5ý#çyF)<AliÔØÁ­l·jxÃÕ<é¬jc§Æ.hh Ýìz\aì5öù»ÚMË2§6<Ï¯{¾7~S'xÎ9Z4<çT#h´R°üí9r!#ìÇv# ××o÷¦ß#IoìL4¶êÔÅ¡ñ»4Àg­à«<¨J®ö 6y¸Æ£FrxÓk=°2yØ"jqó	\D0Õ%TË¦y°Àô`
ÁtÖÌð`ÁL,6Ìò`+A½;¤»	Nó`ÁlBs<h#ëA`íó=,ð A°ÐnEMpºç,öà|%ØÒK=è'XæÁqåäVx0@°Ò"Á*	V{ðJ5¼`­4xðu¼à®&XïÁ	6xðf¼ Ñ<xA³ï"hñàM¼`³·lñàN­ÜC°Í÷l÷à;<ðvzðÁ.'ØíÁ{<x`¯%ØçÁÇ¤0Úý:ÙSÒºk<A©®ÿIUýOëþüò!¨bâ7Õõ¿­ÿµLü¡¦þõf¢¿N©ÿ[ý?ÎÄ¿jëÿ-±#±JH¬89©9aM8Uâ4&çhrºU+qDÉù¬·È\JÍä"MÎµÈvÄL.Ñä"«Nâé0¹LK­iI\ÁäJM®²L«%®er&×YÓ%!që4ÙhÑz$¶0¹A­·HÜÆd&wXÄw3¹I{­Y÷Iler«&ÃV½ÄÄýLîÐdÔ¢=)±ÉÝY§IK<Ää>M&­Ù»$ö0ÒäÙÖ©ð&Û4y5Wâù/`2ªÉ£Å-%Ña²]ýÖ|Ç$g2®É¬µ@bN¢ËdBZ%$ìÖä µHâE_ÉäÙ¼Ä¢\¼Jâ¥L£ÉË­Å¯øZ&Ï×äë¬%_/ñj&mM^c$¾QâµL¦5ùk©Äë$¾É~MÞ`Q~ß.ñL×äMÖrïx39M¾ÇZ!ñV'ÐäíÖJïx'EMÞm­xÄûÔäýÕÌ?Èä+5éYk$>$ñ&_¥ÉÇ¬µxÉË4ùa«Aâ?Âäk4ùQkÄIü8¯Óä3Õá³?ÅäÕüµ^âg%~É7jòÖ_ø&ß¬É¯Y%~]â7|«&¿e5Jü¶Äï0y&¿kQm¿ ñûL¾C?´%þHâO|&fµHü¹Ä_2y&mmø/2ù^MþÞÚ,ñÿÄäíüEçå¯ÿÎäü§µUâ¿¤LÞÃ¤aXÛ¤Q%&ß¯ÉZk»44êü&Mk4¦Kc&&gY;¥Q/Ó|Ds¬]Ò+ùL>®ÉÖni,Æb&ÐdÀÚ#¥ÒXÎäS\iíÆ*i¬aò£l°öIc4Ö3ùñÇÁ³Vº-ÖÑSÞôo==$=pç@æB=Ã|¸À
ôl¾ÁS°¾B¯Ò³ù°ëa9®U¸Vã!hÀ>XÀ¼6âÐ§ 	¿ ÍøChÁ¿Â&cl6Ãz0m5:`qvÁ.ãM°Û8	{Ga¯ñØg¼ AãÐZU¡ª%®Úª(´Uû«p êj8Xu´ÓßQõ,ÄªxÕÐY=U/Du#$«#ÐU}º«]8\}%©¾	Î©~ Î­óª¿	çWÿ
zk¸ f.Ø5gÀÑ Ý8ÿp:`DÏüPK   ÍùZó¢	  K  A   br/com/legalconnect/common/exception/GlobalExceptionHandler.classÍX	\×ÿ¿ea`0hmDE]P\k1,j`]º î"5±Ã2,£³3dv$GÓ3IïôLÓ6½Ò6míI Mjz¤mjïûnÓ¦÷}i¿÷fw9v@PÛæÇ7ï}ï;þï»Þ<úÄ© le^<(àQ"²#ÊÐ#ØÛ}DÛE
¡ÙÛ
ü5%(FyÝV n&ºPô¸i´O$M# «ý¶F£]ºÙ­èáìûnÅèÑUêf¡"bZ@JïÝt$1	Õ
c>Ãò¦tJ3ÔTª*·³¾ê¦[ªêªÚ»}(C¹
q	ÃæY)åcÊàK¨vM)	áMdmiF"8°XÂ¥2à2Bã~¾Ôk)IuÐ´ÕnfØê1;`©7¤ÕèT»£Îa>IÙ¡¦â[é?à*ê)xªËe,CÈTp¼EÛ¯öçoL=>V`¥j«°aí¸õØf II©Q5Õo)ÂGêNkz×#DHÍakõÄ&I°~ÔH¨±ëünüT#LNëá
G£{j]UpÛôa=6Èx62l¿@Ý)2RB CÒ?{-.3nÇ&Wb3F2ë·û]ÜábÈ*ÃWóøÈCf:A4HØ*c¶_±i[Ó;ºÇìe¨ö»x^d2©°¤QFB¦jY¦E`ÆüSÉ.aì°KÆn43,l-©RPÅ}b«íôF)É0fs@>ÐyZJø:9A²áÚ-çöÊhÃ>ç­D'ùîCíöËè@g6£0-K¢}EJÊ9©Uþ³<¥.p¡PD?C`n±pÃ·´ÙgÛý,]Ø°5{[{XÆ3 0µ»$	µ5$xZ6ã¤ô!ÄyQ#e·¹øâlpgé²		}24ah.ùwkFO EµûÌ:tR5ìVÓîPt­gB±)#¶ÕiaÃ46
ð­Sµ&î ¡#)Áa\oÝ\63ÈÜt=·
Þó·d¤`$g©JrBP:gû=ÔLÈÄ1r¥¿_bX6¾7mÄ2;3r#np³[ðÌlLæó¦L*däÿÜ¦×ÍgáÙ#ã¹xG2u\BQdNh\îfmR(ÛqdÜæ9Ó|/,ÆiWGî¨òZçòú^ó>á%¼Ix)MÜïÙÔ¾ÝKxWâUëgÕ1	x,óv4Fw4¶7ïm=Ìëo´)¸0¡ó¸å%¸¯p·×áõ+gów÷íÇÚ)yÍ*ãû>ÑtöÌÐK¾÷ofX8[ýV÷r°E¡âH¾]Æ;8¥»Â­áhsÈÛ·Û÷.ïæÆU6·¶£­Ã±p´#uÈ$¼¡æ»SSõÇñ>ïç¸X¬øpÃñ>_{nvNbu&Zsq³)j¯BÉ"Ócê|êYµfUjM}Õª§ñ!	Êxtqpb©×´íÞ©N_x&×²ñ	ñ1|rÄÔfx§Â#M	éíWMÒT*XÇ Òñéº´¦ÝªÕ®tëª¸PùîP,¿g&½vF>¸uvîî~å!¡Gt¹ÜåÞDûã^Ëf¾g¨¢1éìQ)­o9_í(AZÙ;Ð¦óQ|UÜxï_7§ÞÓ©Êm
i«<ÑÄ´AÂ"v<9oÛÈÎ%Ñ´ÁûÏ-¥Ó6iÐ'ë§ÕUô-J6àâµEÒÔe÷¬-I¸Ç?³s´Fÿu7ÞvaêMíMNCýÙtQ=¶!?¹ñ;ûdÆlîXéøÇìÇ`OLÉÿ»¯tÊpïÿA¹¹RWÝ=Jõô1W½áwr/ûn5îsá@©³÷¼kà¥Ò,ÒuîZ)µbñ£-J&4âzæ¢/f¦­¸ºSãóKÝæz.a.ù+D§eñ®ÛjìÐâ¢ 4¦M
¹ÒïTjA~çÃïñ	ñ'üÄqK4cÀ<J·x?íPz³}Æ¼äÄ·³ý(³ÉàèªæÑt0¥é6òr~È÷Öä¯]i¶,Ã_VOÿÙfâÁ÷wñ?Âãex½<ÚíJÅ`¡Ëgº³Y!&1ÝÁf&¥Ó!ÆrRÅCWP*Pü»4h\(~¡· ¸d °ö$Ø	xðhó'éWvð)<*}gáGiÖKÏ¶aH¥kG°`]Á*=ÃR/­.ÆÔñ\A«FQ?kF±cO§÷ÖQDé}×¶Æ¡.NyýItßÓc5Jèw*±KqÝé6ÑÜ¤öfú»
Û±!Ô=k]2zòÑgðY¡{>ÏÇJñ|øÍx ´|Yü
¾JÏù´åkôÿõ`qÁàø¦c0+D&iRTÃQFÞÀp
iÐhÈC6ß:ç{pÁVÊ§«È_ëòÖÅº
3ÅÆðâqñ²¼@ªËÁC Ô{9*K¼ÃxMÊf²hÁB´âRìG5:ÑkÑDÏ]8@+Ã!]G×#Ãè"PÚäC)M |K Î T}ÄéÛ$«/ßÉø³öÝéüù÷ñË&ù1urtÞCçN®ÂµÎ[&¡ó61¸o¢å\gïä9+Èñ+a£l`|e"nÄÜ<Ák:sxtI	<:3xì!ËgðºØüXG&Æî ÈèYWû0ßÒÚ38>÷Þ©v÷Gèç-£Ø(Nö"qb{	¸6þ¥X	í«Ætýþ± \à§$v)*ð3yðsà)I}1~üåÂH2¨¢xgtBD÷xô/#d~)Lü0Ïþ¿ÉøÂoIö_ð7üÿ¢
¢[O¨?AûoÆXüPK   ÍùZ¿_çô  £  0   br/com/legalconnect/common/exception/Roles.classT]SÓ@=K¡
¡åûÃ* ÈwEª"¢*2v¦¤}p¶aÐ4é$[¢þ
|Á|ôÁåx7-R :<$»çî¹÷½»É¯ß'? ,"©£ÃhB¡}ïó¸Åíøz~O!¸`Ú¦|ÆÜ
AcåÝ¸áãØááØ6ñT èØqq`4i¶éXÂÓ 34m®§t	¡56´SÊJ×´wtOrWzoL¹ËÐ3¾È|×I®;ÃèB7C_DÂ±
.U
Í(ßÃX½ÜË!å¨7>\£]ZÂÞQº´ËZ¸Æ
ô34{å¼W5Ø3ªSû\ZYKe:ë1"§î¶¸U:ü¤\2³ÉUr5³Zkk=±KjfhñCt*Éi%O~àu6¹©a¼ol&WSoÎ¶`hK¶ÈyáæxÞÊcpk»¦ÂÕ`£Ü5©YSé«§Úë'êõ+>KÑ/RµHVr£°ÆKÕêíkBî:ÛÜ¥e)\R¨T§,O³õ¬Sv
±j*¾îL«ÞQò²ãHê:/UªxmA<ÖñOCWÇ¿À0rÖfÓÞw
¢ÚíÊXåtÜCÏµw¡J¬}ÉímI;N¡\¿|lÿJÌDúûôÅçÜ¥«HpËÊRÌk o*è$c§¨ïnÂâ'¼F¯d;Ãàÿ©$S!ã>Bô½AD1A0Ü$Ô[jðmÂÃ5xðh
#<^'OÖàfèMÄ(2C#£±)öìO¹CoÝ7ÓFJ¢Y¸BÂ]LÓØ8º¡
¼¢Q­õÆ~¢+ÖÙ|¯Ðc'è bG´ð+¶Ò²!;Ý9«Ú{dÔÅeÝx ¤EÒÌ_¥\U)JJ½¥/øcD/=$±YúÌÕEÏõÕ(C5`hÔ?GÏ"û
axe¬ úPK   ÍùZíÊ  l
  3   br/com/legalconnect/common/util/ValidatorUtil.class­ïoSUÇ¿§?vûkãRè! µûÑa¶Áæ0hÇd@Ø]{éîhoKw(Î¨!
/4Ñ	(þHöf¾@Í øB%¾7£/4?Ãù½··Ý`#ÄhÒÞsÎsó<ç|Ï9?ý}ûøàS+ 7ªäIå¼Í(z:zx|RMUÝ®{Máã>xààÀÀî#FAÓÓtÏ¨zÚ°Ü=¨ð5¦Â£;Ú§Íår +²P§BMñãtO¾«¡AJ¡q5
û%¬Øh-)Z&:¨çFB²\HªyCËé¬[»sÚõh°!'°Q u¼Mæ²ÑV2É®ó°¦!ÓKQ+-¥¹Â1ª}ñÓÃ}GX_Ø@AM«¢Ãa¨½ËÍxRÂ ±U î~
èçYGÔsEUOª]á%i¥ELÓ°)gó2iåà,Ä	Z§^PZ_îk=ÑÞºëtóÖHëÉæ¦½»GÛXÃ^N,im7Û··ìÞb3@;:x
×2*e]®JÀ_õÈÀþçKSùþ>e(ºÁÂÕK±Y×tu¨WGq3w0K*ãJA3Ç¶ÑeLhd,ÿWõfZ6eú÷QC½îîhg¿ßîóø)sRãr»òêTZ(°Ù§LåLæÏð#<PòöÎåjLäRÃJAÉª§ð÷44|ÐNßi·;2©ç'¶Ó@V1Áu«¥v)°e<ÝÉ}Ë}#¹b!©î³ª|@63 :x|<XíèÀkÔÂ1oûnøpæ)LaZ#7!nX®1~}VZ¸°;Ùð4v±õb7ô` Ç89~üPdì¿@$X=×àvÎ:÷È¾ä¹B.Ùû6GB®9¬ÛS±ªPUHÛ\©tÉ%fæÿý
²?¹CnÙ÷	|lÐ+·wÏXö±÷ºÒ_éû!{*!{ê#²1®cåúì³zk.çìns§__ð+êxZSõü6R¡­i£¸Qlàmkb:)|¿}ï§÷0<EåRTí,_õ,öàöâ"zñ&½ÞÁ3xã1Ï±7¸ê&qqfLà7Y5xUèÄjÆîfùî¤cmßÐ¶6ódíÙ;Ü[É¶ý^ú9±ñûØsqo½ÝÛègOb>å^<fU¹N¶ûù?µbfdÎ	Á_ã<E([,ÜóÜie§±vÁ(lc]/q¹:0	Lh6Xì°ûÀj,ÀÖ. æ:Ð²<c1)$É¾ë¨rTÌÏÌÿl2a"q
ÞÛUF¬ZöÜ)23nàÛ³8®Z Zõ²¨ý¿*¨½Ê{RåQYÆ3h@àM6r>KÝ2T-ÃÈáò#dg0ÅÞyð"¸ÀX/á
Azð]Å+øÓøö¼/ñ:ná
Br	wñwp÷è]F¯0Krg-¸®TlßÒvÈÂ,Ïl¥Ù»Üë!½»ô¾³Ñ;·môð½Þ½EèÝ'þeô¨Õ2èÍcÛAX÷Ãò6½±YbYG©¸È«oÜ7QesX/éªÈ&ª_¡o7ÏaÛ,Í¥
©ð¿W©ä5Ôð)Øi=¿ÖR^Sn«Õ"NªrÒ!6^åò¾Éz¬¹`Ë-´}zó]Vª*kj%¿ÏYoý PK   ÍùZ¹û  à  .   br/com/legalconnect/enums/StatusResponse.classTmOÓP~îÚ­[ídàN×P§àKBfB2Ye	ñSWê(éZÓv|ö'ÉHh4|öGÏ½
b4isóîûÏß <Ç3	½vÐ5<§cyvàûßëF[q/j:ÑûÀd
I¤ss½f
Ùúyã¹@ZCÈµf³Á4hÜ\kmÂsYÃr£ØZ«oÖL¹·çO¢"Q9
c¸J²¶øÃ^®ïZ{áY~Çh´wI¸¸¦`RC×)ñB¤©=Ëë9wKúèuÏ¢å3]¿³|2úÓnà&Cªêún¼Â0®Ü(·ÒHªÔüt44þó®{(ñ92"y½|IPÎ_òz°MC©»¾óª×m;á«ígåÅ/"_lËkY¡Ëª²ou~vF!÷Òwí×VHØ	yuñK yâ 6;0pÛõ-!cºrt&éåmRÕö#­þ5øêù;X¡T3è¶óÂåµ&,påÕ
½	úfäÕI¾ÿ afÇ\ï,1ä×Q"~¬B~©}d?áÊ1òÉ¢)q&¿9${Õ<=Âø1ç'NñïÓS°0Bç¥íøÀ©´lDâbBP:ÄÔþ<à]¥Lêä!ÝDÈbNå8lÉ,ZH}ÛúÌ-¹O[É>Mòli,Q_àæ0xáÅæoI¸} I3²0aÜI
C=Bñ Ùýßy/#Ks.Pé'e>ÆOPK   ã}ôZõc³ñ  v  <   META-INF/maven/br.com.legalconnect.common/common-lib/pom.xmlÅXÛNä6¾ç)ÜÑ^´Ò&¡-
³¥ ¶]õÖq<'vmg]íÃT½¨T©}^¬¿í$0§ÀR¹ÁöïÿðýG'~=Ë8P¥È{{ánÑå£ÃÞÕûÓàUïõ`'J)1¨s}Ø»1FDQ'4±ÄäB¢wçÑ×á.pÙAðç¨fÕ7¦Ói8Ýw´ýÝÝ½è×ó³K¸áåÚàÐò¦fÚ	Sn«Pd)ô*NýfàCX÷NPòkÀÀÆQkÏI¬hnüÂm(äÏé ØZ*Àk¨pF§BÝ&*Å¬bb`Ó_	,e +CUàeÄQlq·ôÑ`?ì{ý8ªÖ(þ"ÐÆy*v®¼ûS ß
&Üýt1¢(Üåê^`s¢	â¶È«JdHQ)43BÍëûqTa±Ó"Q!YÈés"òÂÅnd"_@áåq°º@6*£ #vzjcu¯%5ðÎe|jlö¼û&-ÏåàÁÕêØk/tÆÕ<'N©&Ip¬03Ã¨~	aÊÿ m§=Ê§F`	jÉQBS5aê8j²®bÜâÁ`µZzNèå(dez{ôJ)JXÂ0`VÉN	IÕ¯áè1à°Æç»8jm4áFðkÞY#¬gþ@²V$q%âv!"Ü{îîí{I×¥ :üîÂ¶ÑÑ#n3¶a©* ü¿ß)èËãh5ÉFQ5ÿs,/Ý½¶T© 5»~¸ojù`³IþD6ÿ!Oñ¼æñ}Øþqto{3ëSGÜLÈç«84O¡·£Árõ¡¡ò K_yÐ5æ,uqì%à\|÷×Ý¿TÛp¸cX[e2tòþn[U/6[%»TÊI­ïj55ú|zNérU_¦3ÂëoÝ>h.}Æ]57"¾»^yò%zS>O np0øÿvm¿ãÙª¸â'v;¾xàÅ Z¡3³ü®ïüpÜìt/í:"n-ÑðÓkAwW¯i´_eè%%bf+êÍ}£0°L
s#ÜÑÐæRWè® {P/¡¿ÓÍ$_=AõÓ¥&ÝM¯n >çN±q§Up!/í8Åi½îÝ°d2¾j¼ß® k"M Í ÙNXJS	ÜzkÓ±á×Í~
HæyÒ®¡ðx-_|~ë PE¸âÚ£áÇ­oÔÎ§ÐïQ5²³b4Å0O·Ìz¸H=hv £AÛcìSÁò£½Ð yéÖ²		.	øâÃÒ ýqE>.;²±ÓñfRH^Àë^[/wWôÙ&åçÿm¡ä³¡³·ÃÁ~z^*·ï|wyKo½.×
¹mÕàB	xdj¡ì~ÅÔ²0Î×/Ý¥
l²|[UXºÛ¡J¬7.ÚlÝCßñ¯ï²rÍ£PØV
§`KÂrûñ¨ìýµMº+ ¶sòÄÑd!÷ªGµ£«ÂT!÷N·þPK   ÍùZFÙÖE   J   C   META-INF/maven/br.com.legalconnect.common/common-lib/pom.propertiesK,*ÉLKL.ñL±MÎÏÍÍÏÓÍÉLâåJ/Ê/- %éõrRÓsóóòRKô êx¹ÊR3óól
õôx¹ PK
    ÍùZ            	          íA    META-INF/PK   ÍùZeU´ï   £              ¤'   META-INF/MANIFEST.MFPK
    ÍùZ                      íAÜ   br/PK
    ÍùZ                      íAý   br/com/PK
    ÍùZ                      íA"  br/com/legalconnect/PK
    ÍùZ                      íAT  br/com/legalconnect/common/PK
    ÍùZ                      íA  br/com/legalconnect/common/dto/PK
    ÍùZ            %          íAÊ  br/com/legalconnect/common/exception/PK
    ÍùZ                       íA
  br/com/legalconnect/common/util/PK
    ÍùZ                      íAK  br/com/legalconnect/enums/PK
    ÍùZ                      íA  META-INF/maven/PK
    ÍùZ            *          íA°  META-INF/maven/br.com.legalconnect.common/PK
    ÍùZ            5          íAø  META-INF/maven/br.com.legalconnect.common/common-lib/PK   ËùZÙëÛî               ¤K  application.propertiesPK   ÍùZ^!f  R	  A           ¤m  br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder.classPK   ÍùZÄÝ÷  »  /           ¤2	  br/com/legalconnect/common/dto/BaseEntity.classPK   ÍùZ& ç:    E           ¤v  br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder.classPK   ÍùZ¾cÔ:    1           ¤  br/com/legalconnect/common/dto/BaseResponse.classPK   ÍùZ»¡Ãð  Å  7           ¤  br/com/legalconnect/common/dto/SuccessResponseDTO.classPK   ÍùZ(;ó  ã  <           ¤á  br/com/legalconnect/common/exception/BusinessException.classPK   ÍùZN,Ç¨  Ì&  4           ¤V"  br/com/legalconnect/common/exception/ErrorCode.classPK   ÍùZó¢	  K  A           ¤P6  br/com/legalconnect/common/exception/GlobalExceptionHandler.classPK   ÍùZ¿_çô  £  0           ¤I@  br/com/legalconnect/common/exception/Roles.classPK   ÍùZíÊ  l
  3           ¤C  br/com/legalconnect/common/util/ValidatorUtil.classPK   ÍùZ¹û  à  .           ¤{I  br/com/legalconnect/enums/StatusResponse.classPK   ã}ôZõc³ñ  v  <           ¤GL  META-INF/maven/br.com.legalconnect.common/common-lib/pom.xmlPK   ÍùZFÙÖE   J   C           ¤Q  META-INF/maven/br.com.legalconnect.common/common-lib/pom.propertiesPK      	  8R    
```
```java
spring.application.name=common-lib

# Configuração Multi-Tenant
# spring.jpa.properties.hibernate.multiTenancy=SCHEMA 
# spring.jpa.properties.hibernate.tenant_identifier_resolver=br.com.legalconnect.common.multitenancy.HeaderTenantIdentifierResolver
# # For application.properties
# spring.jpa.properties.hibernate.multi_tenant_connection_provider=br.com.legalconnect.common.multitenancy.SchemaMultiTenantConnectionProvider
# # Configuração do tenant
# application.tenant.header-name=X-Tenant-ID
# application.tenant.default-id=public

# # Configurações do DataSource
spring.datasource.url=jdbc:postgresql://localhost:5432/jusplatform_db
spring.datasource.username=jususer
spring.datasource.password=juspassword
spring.datasource.driver-class-name=org.postgresql.Driver
spring.main.allow-bean-definition-overriding=true
springdoc.packages-to-scan=br.com.legalconnect
springdoc.paths-to-match=/api/v1/**
springdoc.openapi.version=3.0.1
spring.flyway.enabled=true
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
spring.flyway.locations=classpath:db/migration
```
```java
Êþº¾   = K
      java/lang/Object <init> ()V	  	 
   ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder id Ljava/util/UUID;
     self ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;	     	createdAt Ljava/time/LocalDateTime;	     	updatedAt
      java/lang/String valueOf &(Ljava/lang/Object;)Ljava/lang/String;      ! makeConcatWithConstants J(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; Code LineNumberTable LocalVariableTable this =Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; LocalVariableTypeTable ELbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; O(Ljava/util/UUID;)Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; MethodParameters 	Signature (Ljava/util/UUID;)TB; X(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; (Ljava/time/LocalDateTime;)TB; ()TB; build -()Lbr/com/legalconnect/common/dto/BaseEntity; ()TC; toString ()Ljava/lang/String; <C:Lbr/com/legalconnect/common/dto/BaseEntity;B:Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>;>Ljava/lang/Object; 
SourceFile BaseEntity.java NestHost : )br/com/legalconnect/common/dto/BaseEntity BootstrapMethods =
 > ? @   A $java/lang/invoke/StringConcatFactory (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; C <BaseEntity.BaseEntityBuilder(id=, createdAt=, updatedAt=) InnerClasses BaseEntityBuilder G %java/lang/invoke/MethodHandles$Lookup I java/lang/invoke/MethodHandles Lookup!                          "   A     *· ±    #        $        % &   '        % (     )  "   P     
*+µ *¶ 
°    #        $       
 % &     
    '       
 % (   *      +    ,   -  "   P     
*+µ *¶ 
°    #        $       
 % &     
    '       
 % (   *      +    .   -  "   P     
*+µ *¶ 
°    #        $       
 % &     
    '       
 % (   *      +    .    +    / 0 1  +    2  3 4  "   W     *´ ¸ *´ ¸ *´ ¸ º   °    #        $        % &   '        % (    +    5 6    7 8    9 ;     <  B D      9 E	 F H J 
```
```java
Êþº¾   = o
      java/time/LocalDateTime now ()Ljava/time/LocalDateTime;	  	 
   )br/com/legalconnect/common/dto/BaseEntity 	createdAt Ljava/time/LocalDateTime;	     	updatedAt	     log Lorg/slf4j/Logger;  +Criando entidade: {}. Data de criaÃ§Ã£o: {}
      java/lang/Object getClass ()Ljava/lang/Class;
      ! java/lang/Class 
getSimpleName ()Ljava/lang/String; # $ % & ' org/slf4j/Logger debug 9(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V ) ;Atualizando entidade: {}. ID: {}. Data de atualizaÃ§Ã£o: {}	  + , - id Ljava/util/UUID; # / & 0 ((Ljava/lang/String;[Ljava/lang/Object;)V
  2 3 4 <init> ()V	 6 + 7 ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder	 6 		 6 
 ; < = > ? org/slf4j/LoggerFactory 	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger; A java/io/Serializable RuntimeVisibleAnnotations Ljakarta/persistence/Id; $Ljakarta/persistence/GeneratedValue; strategy $Ljakarta/persistence/GenerationType; UUID Ljakarta/persistence/Column; name 
created_at nullable     
updated_at onCreate Code LineNumberTable LocalVariableTable this +Lbr/com/legalconnect/common/dto/BaseEntity;  Ljakarta/persistence/PrePersist; onUpdate Ljakarta/persistence/PreUpdate; @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V b =Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; LocalVariableTypeTable ALbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<**>; MethodParameters 	Signature D(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<**>;)V getId ()Ljava/util/UUID; getCreatedAt getUpdatedAt setId (Ljava/util/UUID;)V setCreatedAt (Ljava/time/LocalDateTime;)V setUpdatedAt <clinit> 
SourceFile BaseEntity.java &Ljakarta/persistence/MappedSuperclass; NestMembers InnerClasses BaseEntityBuilder!    @        , -  B     C   D  Ee F G     B     H  Is J KZ L     B     H  Is M KZ L   N 4  O   Z     $*¸ µ *¸ µ 
² *¶ ¶ *´ ¹ " ±    P       4  5  6 # 7 Q       $ R S   B     T    U 4  O   `     .*¸ µ 
² (½ Y*¶ ¶ SY*´ *SY*´ 
S¹ . ±    P       >  ? - A Q       . R S   B     V    3 W  O   c     *· 1*+´ 5µ **+´ 8µ *+´ 9µ 
±    P        Q        R S      X Y  Z        X [  \    X  ]    ^  _ `  O   /     *´ *°    P       ' Q        R S    a   O   /     *´ °    P       * Q        R S    b   O   /     *´ 
°    P       - Q        R S    c d  O   :     *+µ *±    P        Q        R S      , -  \    ,   e f  O   :     *+µ ±    P        Q        R S         \       g f  O   :     *+µ 
±    P        Q        R S         \       3 4  O   /     *· 1±    P        Q        R S    h 4  O   !      	¸ :³ ±    P       #  i    j B     k   l     6 m   
  6  n	
```
```java
Êþº¾   = Z
      java/lang/Object <init> ()V	  	 
   ?br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder status *Lbr/com/legalconnect/enums/StatusResponse;	     message Ljava/lang/String;	     	timestamp Ljava/time/LocalDateTime;	     data Ljava/lang/Object;	     errors Ljava/util/List;  +br/com/legalconnect/common/dto/BaseResponse
     ! z(Lbr/com/legalconnect/enums/StatusResponse;Ljava/lang/String;Ljava/time/LocalDateTime;Ljava/lang/Object;Ljava/util/List;)V
 # $ % & ' java/lang/String valueOf &(Ljava/lang/Object;)Ljava/lang/String;   ) * + makeConcatWithConstants n(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 	Signature TT; $Ljava/util/List<Ljava/lang/String;>; Code LineNumberTable LocalVariableTable this ALbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; LocalVariableTypeTable FLbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder<TT;>; m(Lbr/com/legalconnect/enums/StatusResponse;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; MethodParameters r(Lbr/com/legalconnect/enums/StatusResponse;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder<TT;>; U(Ljava/lang/String;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; Z(Ljava/lang/String;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder<TT;>; \(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; a(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder<TT;>; U(Ljava/lang/Object;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; K(TT;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder<TT;>; S(Ljava/util/List;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; l(Ljava/util/List<Ljava/lang/String;>;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder<TT;>; build /()Lbr/com/legalconnect/common/dto/BaseResponse; 4()Lbr/com/legalconnect/common/dto/BaseResponse<TT;>; toString ()Ljava/lang/String; (<T:Ljava/lang/Object;>Ljava/lang/Object; 
SourceFile BaseResponse.java NestHost BootstrapMethods L
 M N O * P $java/lang/invoke/StringConcatFactory (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; R TBaseResponse.BaseResponseBuilder(status=, message=, timestamp=, data=, errors=) InnerClasses BaseResponseBuilder V %java/lang/invoke/MethodHandles$Lookup X java/lang/invoke/MethodHandles Lookup !                         ,    -     ,    .       /   A     *· ±    0        1        2 3   4        2 5     6  /   M     *+µ *°    0        1        2 3         4        2 5   7      ,    8   9  /   M     *+µ 
*°    0        1        2 3         4        2 5   7      ,    :   ;  /   M     *+µ *°    0        1        2 3         4        2 5   7      ,    <   =  /   W     *+µ *°    0        1        2 3         4        2 5       -  7      ,    >   ?  /   W     *+µ *°    0        1        2 3         4        2 5       .  7      ,    @  A B  /   X     » Y*´ *´ 
*´ *´ *´ · °    0        1        2 3   4        2 5   ,    C  D E  /   b     &*´ ¸ "*´ 
*´ ¸ "*´ ¸ "*´ ¸ "º (  °    0        1       & 2 3   4       & 2 5    ,    F G    H I     J     K  Q S       T 	 U W Y 
```
```java
Êþº¾   =   ?br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder
     <init> ()V	  	 
   +br/com/legalconnect/common/dto/BaseResponse status *Lbr/com/legalconnect/enums/StatusResponse;	     message Ljava/lang/String;	     	timestamp Ljava/time/LocalDateTime;	     data Ljava/lang/Object;	     errors Ljava/util/List;
      canEqual (Ljava/lang/Object;)Z
  " # $ 	getStatus ,()Lbr/com/legalconnect/enums/StatusResponse;
 & ' ( )   java/lang/Object equals
  + , - 
getMessage ()Ljava/lang/String;
  / 0 1 getTimestamp ()Ljava/time/LocalDateTime;
  3 4 5 getData ()Ljava/lang/Object;
  7 8 9 	getErrors ()Ljava/util/List;
 & ; < = hashCode ()I
 ? @ A B C java/lang/String valueOf &(Ljava/lang/Object;)Ljava/lang/String;   E F G makeConcatWithConstants n(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 &  	Signature TT; $Ljava/util/List<Ljava/lang/String;>; builder C()Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; Code LineNumberTable ^<T:Ljava/lang/Object;>()Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder<TT;>; LocalVariableTable this -Lbr/com/legalconnect/common/dto/BaseResponse; LocalVariableTypeTable 2Lbr/com/legalconnect/common/dto/BaseResponse<TT;>; ()TT; &()Ljava/util/List<Ljava/lang/String;>; 	setStatus -(Lbr/com/legalconnect/enums/StatusResponse;)V MethodParameters 
setMessage (Ljava/lang/String;)V setTimestamp (Ljava/time/LocalDateTime;)V setData (Ljava/lang/Object;)V (TT;)V 	setErrors (Ljava/util/List;)V '(Ljava/util/List<Ljava/lang/String;>;)V o other this$status other$status this$message 
other$message this$timestamp other$timestamp 	this$data 
other$data this$errors other$errors 0Lbr/com/legalconnect/common/dto/BaseResponse<*>; 
StackMapTable PRIME I result $status $message 
$timestamp $data $errors toString z(Lbr/com/legalconnect/enums/StatusResponse;Ljava/lang/String;Ljava/time/LocalDateTime;Ljava/lang/Object;Ljava/util/List;)V (Lbr/com/legalconnect/enums/StatusResponse;Ljava/lang/String;Ljava/time/LocalDateTime;TT;Ljava/util/List<Ljava/lang/String;>;)V (<T:Ljava/lang/Object;>Ljava/lang/Object; 
SourceFile BaseResponse.java RuntimeVisibleAnnotations .Lcom/fasterxml/jackson/annotation/JsonInclude; value 6Lcom/fasterxml/jackson/annotation/JsonInclude$Include; NON_NULL NestMembers BootstrapMethods 
    F  $java/lang/invoke/StringConcatFactory (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;  @BaseResponse(status=, message=, timestamp=, data=, errors=) InnerClasses BaseResponseBuilder  4com/fasterxml/jackson/annotation/JsonInclude$Include  ,com/fasterxml/jackson/annotation/JsonInclude Include  %java/lang/invoke/MethodHandles$Lookup  java/lang/invoke/MethodHandles Lookup !  &                       I    J     I    K  	 L M  N          » Y· °    O        I    P  # $  N   A     *´ °    O        Q        R S   T        R U    , -  N   A     *´ 
°    O         Q        R S   T        R U    0 1  N   A     *´ °    O       ! Q        R S   T        R U    4 5  N   A     *´ °    O       " Q        R S   T        R U   I    V  8 9  N   A     *´ °    O       # Q        R S   T        R U   I    W  X Y  N   L     *+µ ±    O        Q        R S         T        R U   Z       [ \  N   L     *+µ 
±    O        Q        R S         T        R U   Z       ] ^  N   L     *+µ ±    O        Q        R S         T        R U   Z       _ `  N   V     *+µ ±    O        Q        R S         T        R U       J  Z      I    a  b c  N   V     *+µ ±    O        Q        R S         T        R U       K  Z      I    d  )    N  Ü  
   ×+*¦ ¬+Á  ¬+À M,*¶  ¬*¶ !N,¶ !:-Ç Æ § -¶ % ¬*¶ *:,¶ *:Ç Æ § 
¶ % ¬*¶ .:,¶ .:Ç Æ § 
¶ % ¬*¶ 2:	,¶ 2:
	Ç 
Æ § 
	
¶ % ¬*¶ 6:,¶ 6:Ç Æ § 
¶ % ¬¬    O        Q    
   × R S     × e    Â f S  $ ³ g   * ­ h   G  i   M  j   l k k   r e l    F m  	  @ n  
 ¶ ! o   ¼  p   T       × R U    Â f q  r   A ü  ý  & &ý  & &	ý  & &	ý  & &	ý  & &	 Z    e       N   K     +Á ¬    O        Q        R S      f   T        R U   Z    f   < =  N  ö     ;<=*¶ !N;h-Ç +§ -¶ :`=*¶ *:;hÇ +§ ¶ :`=*¶ .:;hÇ +§ ¶ :`=*¶ 2:;hÇ +§ ¶ :`=*¶ 6:;hÇ +§ ¶ :`=¬    O        Q   R     R S     s t    u t  
  v   # h w   > M x   Y 2 y   t  z   T        R U   r   ã 
ÿ    & ÿ    & ÿ    & & ÿ    & & ÿ    & & & ÿ    & & & ÿ    & & & & ÿ    & & & & ÿ    & & & & & ÿ    & & & & &   { -  N   b     &*¶ !¸ >*¶ **¶ .¸ >*¶ 2¸ >*¶ 6¸ >º D  °    O        Q       & R S   T       & R U       N   A     *· H±    O        Q        R S   T        R U     |  N   ¢      *· H*+µ *,µ 
*-µ *µ *µ ±    O        Q   >      R S                                      T          R U        J       K  Z              I    }  I    ~         
    e                         	   @    
```
```java
Êþº¾   = A
      +br/com/legalconnect/common/dto/BaseResponse <init> ()V	  	 
   (br/com/legalconnect/enums/StatusResponse SUCESSO *Lbr/com/legalconnect/enums/StatusResponse;
      1br/com/legalconnect/common/dto/SuccessResponseDTO 	setStatus -(Lbr/com/legalconnect/enums/StatusResponse;)V
      java/time/LocalDateTime now ()Ljava/time/LocalDateTime;
     setTimestamp (Ljava/time/LocalDateTime;)V
  
     ! 
setMessage (Ljava/lang/String;)V # SuccessResponseDTO()
  % & ' canEqual (Ljava/lang/Object;)Z
  ) * ' equals
  , - . hashCode ()I Code LineNumberTable LocalVariableTable this 3Lbr/com/legalconnect/common/dto/SuccessResponseDTO; message Ljava/lang/String; MethodParameters toString ()Ljava/lang/String; o Ljava/lang/Object; other 
StackMapTable result I 
SourceFile SuccessResponseDTO.java !            /   I     *· *² ¶ 
*¸ ¶ ±    0              1        2 3     !  /   F     
*· *+¶ ±    0       $  % 	 & 1       
 2 3     
 4 5  6    4    7 8  /   -     "°    0        1        2 3    * '  /   z     ++*¦ ¬+Á  ¬+À M,*¶ $ ¬*+· ( ¬¬    0        1        + 2 3     + 9 :    ; 3  <    ü  	 6    9   & '  /   9     +Á ¬    0        1        2 3      ; :  6    ;   - .  /   ;     *· +<¬    0        1        2 3     = >   ?    @
```
```java
Êþº¾   = =
      java/lang/RuntimeException <init> (Ljava/lang/String;)V	  	 
   6br/com/legalconnect/common/exception/BusinessException 	errorCode 0Lbr/com/legalconnect/common/exception/ErrorCode;  java/lang/String
      .br/com/legalconnect/common/exception/ErrorCode 
getMessage ()Ljava/lang/String;	     args [Ljava/lang/String;	     
httpStatus %Lorg/springframework/http/HttpStatus;	     !  #org/springframework/http/HttpStatus BAD_REQUEST
  #  $ k(Lbr/com/legalconnect/common/exception/ErrorCode;Lorg/springframework/http/HttpStatus;[Ljava/lang/String;)V
  & ' ( getFormattedMessage '([Ljava/lang/Object;)Ljava/lang/String;
  * +  getCode j(Lbr/com/legalconnect/common/exception/ErrorCode;Lorg/springframework/http/HttpStatus;Ljava/lang/String;)V Code LineNumberTable LocalVariableTable this 8Lbr/com/legalconnect/common/exception/BusinessException; Ljava/lang/String; MethodParameters F(Lbr/com/legalconnect/common/exception/ErrorCode;[Ljava/lang/String;)V getErrorCode 2()Lbr/com/legalconnect/common/exception/ErrorCode; getArgs ()[Ljava/lang/String; 
getHttpStatus '()Lorg/springframework/http/HttpStatus; 
SourceFile BusinessException.java !                        ,  -   {     #*-· *+µ *½ 
Y-SY+¶ Sµ *,µ ±    .          
    "  /   *    # 0 1     #      #      #  2  3   
            4  -   L     
*+² ,· "±    .   
    & 	 ' /        
 0 1     
      
    3   	         $  -   q     *+-¶ %· *+µ *-µ *,µ ±    .       2 	 4  5  6  8 /   *     0 1                     3   
              -   6     *´ *´ ¶ %°    .       @ /        0 1    +   -   2     *´ ¶ )°    .       H /        0 1    5 6  -   /     *´ °    .        /        0 1    7 8  -   /     *´ °    .        /        0 1    9 :  -   /     *´ °    .        /        0 1    ;    <
```
```java
Êþº¾   =K  .br/com/legalconnect/common/exception/ErrorCode	     DADOS_INVALIDOS 0Lbr/com/legalconnect/common/exception/ErrorCode;	   	  REQUISICAO_MAL_FORMADA	     PARAMETRO_AUSENTE	     ENTIDADE_NAO_ENCONTRADA	     EMPRESA_NAO_ENCONTRADA	     PROFISSIONAL_NAO_ENCONTRADO	     CLIENTE_NAO_ENCONTRADO	     ADMINISTRADOR_NAO_ENCONTRADO	     PLANO_NAO_ENCONTRADO	    !  USER_NAO_ENCONTRADO	  # $  CNPJ_DUPLICADO	  & '  
CPF_DUPLICADO	  ) *  
OAB_DUPLICADA	  , -  EMAIL_DUPLICADO	  / 0  NOME_PLANO_DUPLICADO	  2 3  INTEGRIDADE_VIOLADA	  5 6  RECURSO_EM_USO	  8 9  ERRO_INTERNO_SERVIDOR	  ; <  SERVICO_INDISPONIVEL	  > ?  
GENERIC_ERROR	  A B  
INVALID_INPUT	  D E  RESOURCE_NOT_FOUND	  G H  UNAUTHORIZED_ACCESS	  J K  FORBIDDEN_ACCESS	  M N  SERVICE_UNAVAILABLE	  P Q  TOO_MANY_REQUESTS	  S T  VALIDATION_ERROR	  V W  DATABASE_ERROR	  Y Z  INTEGRATION_ERROR	  \ ]  INVALID_CREDENTIALS	  _ `  ACCOUNT_LOCKED	  b c  ACCOUNT_DISABLED	  e f  
TOKEN_EXPIRED	  h i  
INVALID_TOKEN	  k l  REFRESH_TOKEN_EXPIRED	  n o  INVALID_REFRESH_TOKEN	  q r  USER_NOT_FOUND	  t u  EMAIL_ALREADY_REGISTERED	  w x  PASSWORD_RESET_FAILED	  z {  INVALID_CURRENT_PASSWORD	  } ~  PASSWORD_RESET_TOKEN_INVALID	     PASSWORD_RESET_TOKEN_EXPIRED	     PASSWORD_RESET_TOKEN_USED	     PASSWORD_RESET_TOKEN_EXCEEDED	     TENANT_NOT_FOUND	     TENANT_DISABLED	     SUBSCRIPTION_EXPIRED	     PLAN_NOT_ACTIVE	     SERVICE_LIMIT_EXCEEDED	     ADVOCATE_NOT_AVAILABLE	     APPOINTMENT_CONFLICT	     PAYMENT_FAILED	  ¡ ¢  INVALID_PROMO_CODE	  ¤ ¥  DOCUMENT_UPLOAD_FAILED	  § ¨  INVALID_DOCUMENT_FORMAT	  ª «  FIELD_REQUIRED	  ­ ®  INVALID_FORMAT	  ° ±  
MIN_LENGTH	  ³ ´  
MAX_LENGTH	  ¶ ·  
INVALID_EMAIL	  ¹ º  INVALID_CPF	  ¼ ½  INVALID_CNPJ	  ¿ À  PASSWORD_TOO_WEAK	  Â Ã  DATE_IN_PAST	  Å Æ  INVALID_ENUM_VALUE	  È É Ê $VALUES 1[Lbr/com/legalconnect/common/exception/ErrorCode;
 Ì Í Ê Î Ï clone ()Ljava/lang/Object;
 Ñ Ò Ó Ô Õ java/lang/Enum valueOf 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
 Ñ × Ø Ù <init> (Ljava/lang/String;I)V	  Û Ü Ý code Ljava/lang/String;	  ß à Ý message
 â ã ä å æ java/lang/String format 9(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;  é 001 ë !Dados fornecidos sÃ£o invÃ¡lidos.
  í Ø î :(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V 	 ñ 002 ó !A requisiÃ§Ã£o estÃ¡ mal formada.  ö 003 ø  ParÃ¢metro obrigatÃ³rio ausente.  û 100 ý Entidade nÃ£o encontrada.   101 Empresa nÃ£o encontrada.  102 Profissional nÃ£o encontrado. 
 103 Cliente nÃ£o encontrado.  104 Administrador nÃ£o encontrado.  105 Plano nÃ£o encontrado. ! 106 #UsuÃ¡rio associado nÃ£o encontrado. $ 200  CNPJ jÃ¡ cadastrado. '# 201% CPF jÃ¡ cadastrado. *( 202* NÃºmero da OAB jÃ¡ cadastrado. -- 203/ Email jÃ¡ cadastrado. 02 2044 Nome do plano jÃ¡ cadastrado. 37 3009 #ViolaÃ§Ã£o de integridade de dados. 6< 301> 2Recurso nÃ£o pode ser excluÃ­do pois estÃ¡ em uso. 9A 500C $Ocorreu um erro interno no servidor. <F 503H 'ServiÃ§o temporariamente indisponÃ­vel. ?K 1000M BOcorreu um erro inesperado. Por favor, tente novamente mais tarde. BP 1001R Dados de entrada invÃ¡lidos. EU 1002W Recurso nÃ£o encontrado. HZ 1003\ ;Acesso nÃ£o autorizado. Credenciais invÃ¡lidas ou ausentes. K_ 1004a CAcesso negado. VocÃª nÃ£o tem permissÃ£o para realizar esta aÃ§Ã£o. Nd 1005f KO serviÃ§o estÃ¡ temporariamente indisponÃ­vel. Tente novamente mais tarde. Qi 1006k ;Muitas requisiÃ§Ãµes. Por favor, aguarde e tente novamente. Tn 1007p )Erro de validaÃ§Ã£o nos dados fornecidos. Ws 1008u !Erro ao acessar o banco de dados. Zx 1009z *Erro de integraÃ§Ã£o com serviÃ§o externo. ]} 2000 )Credenciais de autenticaÃ§Ã£o invÃ¡lidas. ` 2001 Sua conta estÃ¡ bloqueada. c 2002 Sua conta estÃ¡ desativada. f 2003 O token de acesso expirou. i 2004 O token de acesso Ã© invÃ¡lido. l 2005 /O refresh token expirou. FaÃ§a login novamente. o 2006 O refresh token Ã© invÃ¡lido. r  2007¢ UsuÃ¡rio nÃ£o encontrado. u¥ 2008§ !Este e-mail jÃ¡ estÃ¡ cadastrado. xª 2009¬ Falha ao redefinir a senha. {¯ 2010± (A senha atual fornecida estÃ¡ incorreta. ~´ 2011¶ *Token de redefiniÃ§Ã£o de senha invÃ¡lido. ¹ 2012» )Token de redefiniÃ§Ã£o de senha expirado. ¾ 2013À .Token de redefiniÃ§Ã£o de senha jÃ¡ utilizado. Ã 2014Å +Limite de redefiniÃ§Ãµes de senha excedido. È 3000Ê Tenant nÃ£o encontrado. Í 3001Ï O tenant estÃ¡ desativado. Ò 3002Ô Sua assinatura expirou. × 3003Ù %O plano selecionado nÃ£o estÃ¡ ativo. Ü 3004Þ :Limite de serviÃ§os agendÃ¡veis excedido para o seu plano. á 3005ã 2Advogado nÃ£o disponÃ­vel no horÃ¡rio selecionado. æ 3006è 6Conflito de agendamento. O horÃ¡rio jÃ¡ estÃ¡ ocupado. ë 3007í $Falha no processamento do pagamento. ¢ð 3008ò *CÃ³digo promocional invÃ¡lido ou expirado. ¥õ 3009÷ #Falha ao fazer upload do documento. ¨ú 3010ü Formato de documento invÃ¡lido. «ÿ 4000 O campo '%s' Ã© obrigatÃ³rio. ® 4001 &O campo '%s' possui formato invÃ¡lido. ±	 4002 /O campo '%s' deve ter no mÃ­nimo %d caracteres. ´ 4003 /O campo '%s' deve ter no mÃ¡ximo %d caracteres. · 4004  O e-mail fornecido Ã© invÃ¡lido. º 4005 O CPF fornecido Ã© invÃ¡lido. ½ 4006 O CNPJ fornecido Ã© invÃ¡lido. À" 4007$ A senha Ã© muito fraca. Ã' 4008)  A data nÃ£o pode ser no passado. Æ, 4009. "Valor invÃ¡lido para o campo '%s'.
 012 $values 3()[Lbr/com/legalconnect/common/exception/ErrorCode; values Code LineNumberTable D(Ljava/lang/String;)Lbr/com/legalconnect/common/exception/ErrorCode; LocalVariableTable name MethodParameters this 
$enum$name 
$enum$ordinal 	Signature '(Ljava/lang/String;Ljava/lang/String;)V getFormattedMessage '([Ljava/lang/Object;)Ljava/lang/String; args [Ljava/lang/Object; getCode ()Ljava/lang/String; 
getMessage <clinit> ()V BLjava/lang/Enum<Lbr/com/legalconnect/common/exception/ErrorCode;>; 
SourceFile ErrorCode.java@1  Ñ   D@    @ 	   @    @    @    @    @    @    @    @ !   @ $   @ '   @ *   @ -   @ 0   @ 3   @ 6   @ 9   @ <   @ ?   @ B   @ E   @ H   @ K   @ N   @ Q   @ T   @ W   @ Z   @ ]   @ `   @ c   @ f   @ i   @ l   @ o   @ r   @ u   @ x   @ {   @ ~   @    @    @    @    @    @    @    @    @    @    @    @ ¢   @ ¥   @ ¨   @ «   @ ®   @ ±   @ ´   @ ·   @ º   @ ½   @ À   @ Ã   @ Æ     Ü Ý    à Ý   É Ê    	32 4   "      
² Ç¶ ËÀ Ì°   5        	 Ô6 4   4     
*¸ ÐÀ °   5       7       
8 Ý  9   8   Ø î 4   \     *+· Ö*-µ Ú*µ Þ±   5       m  n  o  p7        :       Ü Ý     à Ý 9   ; <  Ü   à  =   > ?@ 4   =     	*´ Þ+¸ á°   5       x7       	:      	AB 9   A   CD 4   /     *´ Ú°   5       d7       :    ED 4   /     *´ Þ°   5       e7       :   
12 4  ß     ÇA½ Y² SY² SY² 
SY² 
SY² SY² SY² SY² SY² SY	² SY
² "SY² %SY² (SY
² +SY² .SY² 1SY² 4SY² 7SY² :SY² =SY² @SY² CSY² FSY² ISY² LSY² OSY² RSY² USY² XSY² [SY² ^SY² aSY ² dSY!² gSY"² jSY#² mSY$² pSY%² sSY&² vSY'² ySY(² |SY)² SY*² SY+² SY,² SY-² SY.² SY/² SY0² SY1² SY2² SY3² SY4²  SY5² £SY6² ¦SY7² ©SY8² ¬SY9² ¯SY:² ²SY;² µSY<² ¸SY=² »SY>² ¾SY?² ÁSY@² ÄS°   5        FG 4  d     H» Yçèê· ì³ » Yïðò· ì³ » Yôõ÷· ì³ 
» Yùúü· ì³ 
» Yþÿ· ì³ » Y· ì³ » Y	· ì³ » Y
· ì³ » Y· ì³ » Y	· ì³ » Y
· ì³ "» Y!"$· ì³ %» Y&')· ì³ (» Y+
,.· ì³ +» Y013· ì³ .» Y568· ì³ 1» Y:;=· ì³ 4» Y?@B· ì³ 7» YDEG· ì³ :» YIJL· ì³ =» YNOQ· ì³ @» YSTV· ì³ C» YXY[· ì³ F» Y]^`· ì³ I» Ybce· ì³ L» Yghj· ì³ O» Ylmo· ì³ R» Yqrt· ì³ U» Yvwy· ì³ X» Y{|~· ì³ [» Y· ì³ ^» Y· ì³ a» Y · ì³ d» Y!· ì³ g» Y"· ì³ j» Y#· ì³ m» Y$¡· ì³ p» Y£%¤¦· ì³ s» Y¨&©«· ì³ v» Y­'®°· ì³ y» Y²(³µ· ì³ |» Y·)¸º· ì³ » Y¼*½¿· ì³ » YÁ+ÂÄ· ì³ » YÆ,ÇÉ· ì³ » YË-ÌÎ· ì³ » YÐ.ÑÓ· ì³ » YÕ/ÖØ· ì³ » YÚ0ÛÝ· ì³ » Yß1àâ· ì³ » Yä2åç· ì³ » Yé3êì· ì³ » Yî4ïñ· ì³  » Yó5ôö· ì³ £» Yø6ùû· ì³ ¦» Yý7þ · ì³ ©» Y8· ì³ ¬» Y9
· ì³ ¯» Y:
· ì³ ²» Y;· ì³ µ» Y<· ì³ ¸» Y=· ì³ »» Y >!#· ì³ ¾» Y%?&(· ì³ Á» Y*@+-· ì³ Ä¸/³ Ç±   5  
 B      "  3  D  V  j      ©  ¾  Ó   è ! ý " #' &< 'Q *f +{ . /¥ 0º 1Ï 2ä 3ù 4 5# 68 7M :b ;w < =¡ >¶ ?Ë @à Aõ B
 C D4 EI F^ Gs H K L² MÇ NÜ Oñ P Q R0 SE TZ Uo Y Z [® \Ã ]Ø ^í _ ` a, bA  =   HI   J
```
```java
Êþº¾   =
      java/lang/Object <init> ()V	  	 
   ;br/com/legalconnect/common/exception/GlobalExceptionHandler log Lorg/slf4j/Logger;  !Business Exception: {} - Path: {}
      6br/com/legalconnect/common/exception/BusinessException 
getMessage ()Ljava/lang/String;      2org/springframework/web/context/request/WebRequest getDescription (Z)Ljava/lang/String;       org/slf4j/Logger warn 9(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
 " # $ % & +br/com/legalconnect/common/dto/BaseResponse builder C()Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;	 ( ) * + , (br/com/legalconnect/enums/StatusResponse ERRO *Lbr/com/legalconnect/enums/StatusResponse;
 . / 0 1 2 ?br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder status m(Lbr/com/legalconnect/enums/StatusResponse;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 . 4 5 6 message U(Ljava/lang/String;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
  8 9  getCode ; < = > ? java/util/List of $(Ljava/lang/Object;)Ljava/util/List;
 . A B C errors S(Ljava/util/List;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 E F G H I java/time/LocalDateTime now ()Ljava/time/LocalDateTime;
 . K L M 	timestamp \(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
  O P Q getArgs ()[Ljava/lang/String;
 S T U V W java/util/Arrays asList %([Ljava/lang/Object;)Ljava/util/List;
 . Y Z [ build /()Lbr/com/legalconnect/common/dto/BaseResponse; ] 'org/springframework/http/ResponseEntity
  _ ` a 
getHttpStatus '()Lorg/springframework/http/HttpStatus;
 \ c  d >(Ljava/lang/Object;Lorg/springframework/http/HttpStatusCode;)V
 f g h i j <org/springframework/web/bind/MethodArgumentNotValidException getBindingResult 0()Lorg/springframework/validation/BindingResult; l m n o p ,org/springframework/validation/BindingResult getAllErrors ()Ljava/util/List; ; r s t stream ()Ljava/util/stream/Stream;   v w x apply ()Ljava/util/function/Function; z { | } ~ java/util/stream/Stream map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      java/util/stream/Collectors toList ()Ljava/util/stream/Collector; z    collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object;  0Validation Exception: {} - Errors: {} - Path: {}
 f      ((Ljava/lang/String;[Ljava/lang/Object;)V	      .br/com/legalconnect/common/exception/ErrorCode VALIDATION_ERROR 0Lbr/com/legalconnect/common/exception/ErrorCode;
  	      #org/springframework/http/HttpStatus BAD_REQUEST %Lorg/springframework/http/HttpStatus;  "Unhandled Exception: {} - Path: {}
     java/lang/Exception  ¢ £  error	  ¥ ¦  
GENERIC_ERROR
  8	  © ª  INTERNAL_SERVER_ERROR ¬ )org/springframework/validation/FieldError
 « ® ¯  getField
 ± ² ³ ´  *org/springframework/validation/ObjectError 
getObjectName
 ± ¶ ·  getDefaultMessage ¹ Campo '%s': %s
 » ¼ ½ ¾ ¿ java/lang/String format 9(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
 Á Â Ã Ä Å org/slf4j/LoggerFactory 	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger; Code LineNumberTable LocalVariableTable this =Lbr/com/legalconnect/common/exception/GlobalExceptionHandler; handleBusinessException (Lbr/com/legalconnect/common/exception/BusinessException;Lorg/springframework/web/context/request/WebRequest;)Lorg/springframework/http/ResponseEntity; ex 8Lbr/com/legalconnect/common/exception/BusinessException; request 4Lorg/springframework/web/context/request/WebRequest; 
errorResponse -Lbr/com/legalconnect/common/dto/BaseResponse; MethodParameters 	Signature Æ(Lbr/com/legalconnect/common/exception/BusinessException;Lorg/springframework/web/context/request/WebRequest;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse;>; RuntimeVisibleAnnotations :Lorg/springframework/web/bind/annotation/ExceptionHandler; value handleValidationExceptions (Lorg/springframework/web/bind/MethodArgumentNotValidException;Lorg/springframework/web/context/request/WebRequest;)Lorg/springframework/http/ResponseEntity; >Lorg/springframework/web/bind/MethodArgumentNotValidException; Ljava/util/List; LocalVariableTypeTable $Ljava/util/List<Ljava/lang/String;>; Ì(Lorg/springframework/web/bind/MethodArgumentNotValidException;Lorg/springframework/web/context/request/WebRequest;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse;>; handleGlobalException t(Ljava/lang/Exception;Lorg/springframework/web/context/request/WebRequest;)Lorg/springframework/http/ResponseEntity; Ljava/lang/Exception; £(Ljava/lang/Exception;Lorg/springframework/web/context/request/WebRequest;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse;>; #lambda$handleValidationExceptions$0 @(Lorg/springframework/validation/ObjectError;)Ljava/lang/String; ,Lorg/springframework/validation/ObjectError; 	fieldName Ljava/lang/String; errorMessage 
StackMapTable <clinit> 
SourceFile GlobalExceptionHandler.java :Lorg/springframework/web/bind/annotation/ControllerAdvice; BootstrapMethods ñ
 ò ó ô õ ö "java/lang/invoke/LambdaMetafactory metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; ø &(Ljava/lang/Object;)Ljava/lang/Object; ú
  û ä å å InnerClasses BaseResponseBuilder  %java/lang/invoke/MethodHandles$Lookup java/lang/invoke/MethodHandles Lookup !                Æ   /     *· ±    Ç       ! È        É Ê    Ë Ì  Æ   ¸     P² 
+¶ ,¹  ¹  ¸ !² '¶ -+¶ ¶ 3+¶ 7¸ :¶ @¸ D¶ J+¶ N¸ R¶ @¶ XN» \Y-+¶ ^· b°    Ç   & 	   0  2  3  4 & 5 / 6 6 7 ? 8 C : È   *    P É Ê     P Í Î    P Ï Ð  C 
 Ñ Ò  Ó   	 Í   Ï   Ô    Õ Ö     ×  Ø[ c Î  Ù Ú  Æ  	     u+¶ e¹ k ¹ q º u  ¹ y ¸ ¹  À ;N² ½ Y+¶ SY-SY,¹  S¹  ¸ !² '¶ -² ¶ ¶ 3-¶ @¸ D¶ J¶ X:» \Y² · b°    Ç   6 
   M  N  U $ W < X B W G Z M [ S \ Z ] ] ^ c _ h a È   4    u É Ê     u Í Û    u Ï Ð  $ Q B Ü  h 
 Ñ Ò  Ý     $ Q B Þ  Ó   	 Í   Ï   Ô    ß Ö     ×  Ø[ c Û  à á  Æ   »     W² ½ Y+¶ SY,¹  SY+S¹ ¡ ¸ !² '¶ -² ¤¶ ¶ 3² ¤¶ §¸ :¶ @¸ D¶ J¶ XN» \Y-² ¨· b°    Ç   "    r # t ) u / v 8 w A y G z K | È   *    W É Ê     W Í â    W Ï Ð  K  Ñ Ò  Ó   	 Í   Ï   Ô    ã Ö     ×  Ø[ c â
 ä å  Æ        -*Á « 
*À «¶ ­§ *¶ °L*¶ µM¸½ Y+SY,S¸ º°    Ç       O  P  Q  R  S È        - £ æ     ç è    é è  ê    C »  ë   Æ   !      	¸ À³ ±    Ç         ì    í Ö     î   ï     ð  ÷ ù ü ý     . " þ 	 ÿ 
```
```java
Êþº¾   = E
      java/lang/Object <init> ()V  *br/com/legalconnect/common/exception/Roles 
 ROLE_
  
    java/lang/String 
startsWith (Ljava/lang/String;)Z      makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String;
     length ()I
     	substring (I)Ljava/lang/String; 
ROLE_ADMIN Ljava/lang/String; 
ConstantValue  ROLE_TENANT_ADMIN ! 
ROLE_ADVOCATE # ROLE_CLIENT % 	ROLE_USER ' PREFIX Code LineNumberTable LocalVariableTable this ,Lbr/com/legalconnect/common/exception/Roles; 
withPrefix roleName 
StackMapTable MethodParameters 
withoutPrefix 
SourceFile 
Roles.java BootstrapMethods 8
 9 : ;  < $java/lang/invoke/StringConcatFactory (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; > ROLE_ InnerClasses A %java/lang/invoke/MethodHandles$Lookup C java/lang/invoke/MethodHandles Lookup 1                 !       "  #       $  %       &  '       (  )       	      *   3     *· ±    +   
       ,        - .   	 /   *   Q     *Æ *	¶  
*º   °*°    +       ( 
 )  + ,        0    1     2    0   	 3   *   T     *Æ *	¶  
*	¶ ¶ °*°    +       4 
 5  7 ,        0    1     2    0    4    5 6     7  = ?   
  @ B D 
```
```java
Êþº¾   = S
      java/lang/Object <init> ()V
  	 
   java/lang/String length ()I  
(\d)\1{10}
     matches (Ljava/lang/String;)Z
     charAt (I)C   java/util/InputMismatchException  
(\d)\1{13}	       -br/com/legalconnect/common/util/ValidatorUtil 
EMAIL_PATTERN Ljava/util/regex/Pattern;
 " # $ % & java/util/regex/Pattern matcher 3(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
 ( ) *  + java/util/regex/Matcher ()Z - M^[a-zA-Z0-9_+&*-]+(?:\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,7}$
 " / 0 1 compile -(Ljava/lang/String;)Ljava/util/regex/Pattern; EMAIL_REGEX Ljava/lang/String; 
ConstantValue Code LineNumberTable LocalVariableTable this /Lbr/com/legalconnect/common/util/ValidatorUtil; 
isValidCPF num I dig10 C dig11 sm i r peso erro "Ljava/util/InputMismatchException; cpf 
StackMapTable MethodParameters isValidCNPJ dig13 dig14 cnpj isValidEmail email Ljava/util/regex/Matcher; <clinit> 
SourceFile ValidatorUtil.java 1       2 3  4    ,            5   3     *· ±    6   
       7        8 9   	 :   5  H  	   Ü*Æ *¶   *
¶  ¬>
66	¢ "*¶ 0d6h`>d6§ÿÝpd6
 
  	0<§ 
0`<>66
¢ "*¶ 0d6h`>d6§ÿÝpd6
 
  	0=§ 
0`=*	¶   *
¶   § ¬:¬   × Ø   6   n    %  &  .  /  0 ( 1 3 2 ; 3 A 0 G 6 P 7 ^ 8 d : k = m > q ? { @  A  B  ?  E £ F ± G · I ¾ L Ø M Ú N 7   z  3  ; <  a  = >    ; <  ´  ? >  k m = >  ¾  ? >   ¾ @ <  ! · A <  P  B <   º C <  Ú  D E    Ü F 3   G   ^ ÿ         %ÿ        ÿ       %ÿ      @ÿ       H    F   	 I   5  ¤  	   æ*Æ *¶   *¶  ¬>66 ,*¶ 0d6h`>`6
  6ÿ§ÿÕp6 	  	0<§ 
d0`<>66 ,*¶ 0d6h`>`6
  6ÿ§ÿÕp6 	  	0=§ 
d0`=*¶   *
¶   § ¬:¬   á â   6   ~    \  ]  e  f  g & h 1 i 9 j ? k F l I g O o U p ` q f s p v r w u x ~ y  z  {  |  } ¡ x §  ­  ¸  ¾  È  â  ä  7   z  1  ; <  c  J >    ; <  »  K >  p r J >  È  K >   È @ <  ! Á A <  U  B <   Å C <  ä  D E    æ L 3   G     ÿ         ÿ '       ÿ         ÿ        ÿ 	      ÿ '     ÿ       ÿ 	     @ÿ       H    L   	 M   5   \     *Ç ¬² *¶ !L+¶ '¬    6              7        N 3     % O  G     H    N    P   5   !      	,¸ .³ ±    6         Q    R
```
```java
Êþº¾   = 9  (br/com/legalconnect/enums/StatusResponse	     SUCESSO *Lbr/com/legalconnect/enums/StatusResponse;	   	  ERRO	     AVISO	     $VALUES +[Lbr/com/legalconnect/enums/StatusResponse;
      clone ()Ljava/lang/Object;
      java/lang/Enum valueOf 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
     <init> (Ljava/lang/String;I)V 
   	 
  % & ' $values -()[Lbr/com/legalconnect/enums/StatusResponse; values Code LineNumberTable >(Ljava/lang/String;)Lbr/com/legalconnect/enums/StatusResponse; LocalVariableTable name Ljava/lang/String; MethodParameters this 
$enum$name 
$enum$ordinal 	Signature ()V <clinit> <Ljava/lang/Enum<Lbr/com/legalconnect/enums/StatusResponse;>; 
SourceFile StatusResponse.java@1     @    @ 	   @          	 ( '  )   "      
² 
¶ À °    *        	  +  )   4     
*¸ À °    *        ,       
 - .   /    -      )   1     *+· ±    *        ,        0    /   	 1  2  3    4
 & '  )   /      ½ Y² SY² SY² 
S°    *         5 4  )   R      .» Y · !³ » Y"· !³ » Y#· !³ 
¸ $³ 
±    *        
    '   3    6 7    8
```
```java
artifactId=common-lib
groupId=br.com.legalconnect.common
version=1.0.0

```
```java
br\com\legalconnect\common\dto\BaseEntity.class
br\com\legalconnect\common\exception\BusinessException.class
br\com\legalconnect\common\exception\Roles.class
br\com\legalconnect\common\exception\GlobalExceptionHandler.class
br\com\legalconnect\common\dto\SuccessResponseDTO.class
br\com\legalconnect\common\dto\BaseResponse$BaseResponseBuilder.class
br\com\legalconnect\enums\StatusResponse.class
br\com\legalconnect\common\exception\ErrorCode.class
br\com\legalconnect\common\dto\BaseResponse.class
br\com\legalconnect\common\dto\BaseEntity$BaseEntityBuilder.class
br\com\legalconnect\common\util\ValidatorUtil.class

```
```java
E:\legalconnect\legalconnect\microservices\common-lib\src\main\java\br\com\legalconnect\common\exception\ErrorCode.java
E:\legalconnect\legalconnect\microservices\common-lib\src\main\java\br\com\legalconnect\common\exception\GlobalExceptionHandler.java
E:\legalconnect\legalconnect\microservices\common-lib\src\main\java\br\com\legalconnect\common\dto\BaseEntity.java
E:\legalconnect\legalconnect\microservices\common-lib\src\main\java\br\com\legalconnect\common\dto\SuccessResponseDTO.java
E:\legalconnect\legalconnect\microservices\common-lib\src\main\java\br\com\legalconnect\common\dto\BaseResponse.java
E:\legalconnect\legalconnect\microservices\common-lib\src\main\java\br\com\legalconnect\common\exception\Roles.java
E:\legalconnect\legalconnect\microservices\common-lib\src\main\java\br\com\legalconnect\common\util\ValidatorUtil.java
E:\legalconnect\legalconnect\microservices\common-lib\src\main\java\br\com\legalconnect\common\exception\BusinessException.java
E:\legalconnect\legalconnect\microservices\common-lib\src\main\java\br\com\legalconnect\enums\StatusResponse.java

```
```java

```
```java

```
```java
/mvnw text eol=lf
*.cmd text eol=crlf

```
```java
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

```
```java
# Read Me First
The following was discovered as part of building this project:

* The original package name 'br.com.legalconnect.common.common-lib' is invalid and this project uses 'br.com.legalconnect.common.common_lib' instead.

# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.5.3/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.5.3/maven-plugin/build-image.html)
* [Flyway Migration](https://docs.spring.io/spring-boot/3.5.3/how-to/data-initialization.html#howto.data-initialization.migration-tool.flyway)
* [Spring Boot DevTools](https://docs.spring.io/spring-boot/3.5.3/reference/using/devtools.html)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.


```
```java
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

```
```java
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

```
```java
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.12</version> <!-- Usando a versão que você sugeriu -->
        <relativePath /> <!-- lookup parent from repository -->
    </parent>

    <groupId>br.com.legalconnect.common</groupId> <!-- Alterado conforme sua sugestão -->
    <artifactId>common-tenent</artifactId>
    <version>1.0.0</version>
    <name>LegalConnect Common Library</name>
    <description>Common utilities, entities, and configurations for LegalConnect microservices</description>
    <packaging>jar</packaging> <!-- Define este como um JAR de biblioteca -->

    <properties>
        <java.version>17</java.version> <!-- Defina a versão do Java que você está usando -->
        <lombok.version>1.18.30</lombok.version> <!-- Versão explícita para Lombok -->
        <org.mapstruct.version>1.5.5.Final</org.mapstruct.version> <!-- Versão explícita para
        MapStruct -->
        <springdoc.version>2.3.0</springdoc.version> <!-- Versão explícita para SpringDoc -->
        <flyway.version>9.22.3</flyway.version> <!-- Versão explícita para Flyway -->
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Validation para anotações de validação em DTOs -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>com.zaxxer</groupId>
                    <artifactId>HikariCP</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Spring Context para anotações como @Configuration, @Component, etc. -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <!-- Spring Security Core para GrantedAuthority (usado em UserDetails, por exemplo) -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>6.0.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency> -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version> <!-- Usando a versão definida nas propriedades -->
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${org.mapstruct.version}</version> <!-- Usando a versão definida nas propriedades -->
        </dependency>

        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${org.mapstruct.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>0.2.0</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
```
```java
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip

```
```java
{
  "java.configuration.updateBuildConfiguration": "interactive"
}

```
```java
legalconnect/
├── common-lib/
│   ├── pom.xml                                 # Configurações do Maven para a biblioteca comum
│   └── src/
│       └── main/
│           └── java/
│               └── br/com/legalconnect/common/
│                   ├── BaseEntity.java         # Entidade base para todos os modelos de dados
│                   ├── config/
│                   │   ├── FlywayMultiTenantConfig.java # Configuração Flyway para multitenancy (se global)
│                   │   ├── OpenApiConfig.java           # Configuração OpenAPI/Swagger UI
│                   │   └── WebConfig.java               # Configurações CORS e MVC gerais
│                   ├── constants/
│                   │   ├── ErrorCode.java               # Códigos de erro padronizados
│                   │   └── Roles.java                   # Constantes para papéis de usuário
│                   ├── dto/
│                   │   ├── BaseResponse.java            # DTO base para respostas da API
│                   │   └── SuccessResponseDTO.java      # DTO para respostas de sucesso simples
│                   ├── exception/
│                   │   ├── BusinessException.java       # Exceção de negócio personalizada
│                   │   └── GlobalExceptionHandler.java  # Manipulador global de exceções
│                   ├── multitenancy/
│                   │   ├── HibernateMultiTenantConfig.java # Configuração Hibernate para multitenancy
│                   │   ├── SchemaMultiTenantConnectionProvider.java # Provedor de conexão multi-tenant
│                   │   ├── SchemaTenantIdentifierResolver.java    # Resolvedor de identificador de tenant
│                   │   ├── TenantContext.java                     # Contexto da thread para o tenant atual
│                   │   └── TenantFilter.java                    # Filtro HTTP para extrair o tenant ID
│                   └── util/
│                       └── ValidatorUtil.java           # Utilitários de validação (ex: CPF, CNPJ)
```
```java
package br.com.legalconnect.common; // Importa da common-lib

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import br.com.legalconnect.common.config.TenantMigrationService;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 * @class TenantFilter
 * @brief Filtro HTTP para interceptar requisições e extrair o ID do tenant.
 *        Define o tenant ID no TenantContext para que o Hibernate possa usá-lo.
 */
@Component
public class TenantFilter extends OncePerRequestFilter {

    @Value("${application.tenant.default-id}")
    private String defaultTenantId;

    @Autowired
    private TenantMigrationService tenantMigrationService;

    private static final String TENANT_HEADER = "X-Tenant-ID";

    /**
     * @brief Filtra a requisição para extrair e definir o ID do tenant.
     * @param request     A requisição HTTP.
     * @param response    A resposta HTTP.
     * @param filterChain A cadeia de filtros.
     * @throws ServletException Se ocorrer um erro de servlet.
     * @throws IOException      Se ocorrer um erro de I/O.
     */
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        String tenantIdHeader = request.getHeader(TENANT_HEADER);
        String tenantId = "public";

        if (tenantIdHeader != null && !tenantIdHeader.isEmpty()) {
            try {
                tenantId = (tenantIdHeader);
            } catch (IllegalArgumentException e) {
                // Logar ou tratar o erro de UUID inválido, talvez retornar um 400 Bad Request
                System.err.println("UUID de Tenant inválido no cabeçalho X-Tenant-ID: " + tenantIdHeader);
                response.sendError(HttpServletResponse.SC_BAD_REQUEST, "UUID de Tenant inválido.");
                return;
            }
        } else {
            // Usar o tenant padrão se o cabeçalho não for fornecido
            try {
                tenantId = (defaultTenantId);
            } catch (IllegalArgumentException e) {
                System.err.println("UUID de Tenant padrão inválido na configuração: " + defaultTenantId);
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                        "Configuração de Tenant padrão inválida.");
                return;
            }
        }

        tenantMigrationService.migrateTenant(tenantId);
        filterChain.doFilter(request, response);

    }
}
```
```java
package br.com.legalconnect.common.config;

import java.util.HashMap;
import java.util.Map;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;

import br.com.legalconnect.common.config.multitenancy.CurrentTenantIdentifierResolverImpl;
import br.com.legalconnect.common.config.multitenancy.MultiTenantConnectionProviderImpl;

/**
 * @class HibernateConfig
 * @brief Configuração do Hibernate para suporte a multitenancy.
 *        Define como o Hibernate interage com o banco de dados em um ambiente
 *        multi-tenant por schema.
 */
@Configuration
public class HibernateConfig {

    private static final Logger log = LoggerFactory.getLogger(HibernateConfig.class);

    private final JpaProperties jpaProperties;
    private final DataSource dataSource;
    private final MultiTenantConnectionProviderImpl multiTenantConnectionProvider;
    private final CurrentTenantIdentifierResolverImpl currentTenantIdentifierResolver;

    @Autowired
    public HibernateConfig(
            JpaProperties jpaProperties,
            DataSource dataSource,
            MultiTenantConnectionProviderImpl multiTenantConnectionProvider,
            CurrentTenantIdentifierResolverImpl currentTenantIdentifierResolver) {
        this.jpaProperties = jpaProperties;
        this.dataSource = dataSource;
        this.multiTenantConnectionProvider = multiTenantConnectionProvider;
        this.currentTenantIdentifierResolver = currentTenantIdentifierResolver;
        log.debug("HibernateConfig inicializado.");
    }

    /**
     * Configura o JpaVendorAdapter para Hibernate.
     * 
     * @return O JpaVendorAdapter configurado.
     */
    @Bean
    public JpaVendorAdapter jpaVendorAdapter() {
        log.debug("Configurando JpaVendorAdapter.");
        return new HibernateJpaVendorAdapter();
    }

    /**
     * Configura o EntityManagerFactory para suportar multitenancy.
     * 
     * @return O LocalContainerEntityManagerFactoryBean configurado.
     */
    @Bean
    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
        log.info("Configurando EntityManagerFactory para multitenancy de schema.");
        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
        em.setDataSource(dataSource);
        em.setPackagesToScan(
                "br.com.legalconnect.user.entity", "br.com.legalconnect.entity",
                "br.com.legalconnect.auth.entity"); // Pacotes onde suas entidades estão localizadas
        em.setJpaVendorAdapter(jpaVendorAdapter());

        Map<String, Object> properties = new HashMap<>(jpaProperties.getProperties());
        properties.put("hibernate.multiTenancy", "SCHEMA");
        properties.put("hibernate.multi_tenant_connection_provider", multiTenantConnectionProvider);
        properties.put("hibernate.tenant_identifier_resolver", currentTenantIdentifierResolver);
        properties.put("hibernate.dialect", "org.hibernate.dialect.PostgreSQLDialect");
        properties.put("hibernate.show_sql", true);
        properties.put("hibernate.format_sql", true);

        em.setJpaPropertyMap(properties);
        log.debug("EntityManagerFactory configurado com propriedades de multitenancy: {}", properties);
        return em;
    }
}
```
```java
package br.com.legalconnect.common.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;

@Configuration
public class OpenApiConfig {

        @Bean
        public OpenAPI customOpenAPI() {
                final String securitySchemeName = "JWT";

                return new OpenAPI()
                                .info(new Info()
                                                .title("LegalConnect Gateway API")
                                                .version("1.0")
                                                .description("API Gateway para o sistema LegalConnect"))
                                .addSecurityItem(new SecurityRequirement().addList(securitySchemeName))
                                .components(new Components()
                                                .addSecuritySchemes(securitySchemeName,
                                                                new SecurityScheme()
                                                                                .name(securitySchemeName)
                                                                                .type(SecurityScheme.Type.HTTP)
                                                                                .scheme("bearer")
                                                                                .bearerFormat("JWT")));
        }
}
```
```java
package br.com.legalconnect.common.config;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.UUID; // Import UUID

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import br.com.legalconnect.common.config.multitenancy.TenantContext;
import jakarta.annotation.PostConstruct;

/**
 * @class TenantMigrationService
 * @brief Serviço responsável por gerenciar as migrações do Flyway para cada
 *        tenant.
 *        Garante que cada esquema de tenant tenha a versão mais recente do
 *        banco de dados.
 */
@Service
public class TenantMigrationService {

    private static final Logger log = LoggerFactory.getLogger(TenantMigrationService.class);

    private final DataSource dataSource;
    // private final TenantRepository tenantRepository;

    @Value("${spring.flyway.locations}")
    private String[] flywayLocations; // Localização dos scripts de migração (ex: classpath:db/migration)

    @Value("${spring.flyway.baseline-on-migrate}")
    private boolean flywayBaselineOnMigrate;

    @Value("${spring.flyway.baseline-version}")
    private String flywayBaselineVersion;

    @Value("${application.tenant.default-id}") // Injeção da propriedade defaultTenantId
    private String defaultTenantIdString; // Usar String para o valor da propriedade

    private UUID defaultTenantId; // Para armazenar o UUID parseado

    public TenantMigrationService(DataSource dataSource) {
        this.dataSource = dataSource;
        // this.tenantRepository = tenantRepository;
    }

    @PostConstruct
    public void init() {
        this.defaultTenantId = UUID.fromString(defaultTenantIdString);
    }

    /**
     * Executa as migrações do Flyway para todos os tenants existentes ao iniciar a
     * aplicação.
     * Marcado com @PostConstruct para ser executado após a injeção de dependências.
     */
    @PostConstruct
    public void migrateAllTenantsOnStartup() { // Renomeado para clareza
        log.info("Iniciando migrações do Flyway para todos os tenants existentes.");
        // Temporariamente define o TenantContext para o schema do tenant padrão (onde
        // tb_tenant reside)
        // Isso é crucial para que o tenantRepository consiga acessar a tabela
        // tb_tenant.
        // Assumimos que o schema do defaultTenantId é o "public" ou o schema onde
        // tb_tenant está.
        // Se tb_tenant estiver em um schema diferente do defaultTenantId, isso precisa
        // ser ajustado.
        // Pelo seu SQL, tb_tenant não especifica schema, então estará no schema padrão
        // do DB (geralmente public).
        TenantContext.setCurrentTenant(defaultTenantId.toString()); // Ou o schema onde tb_tenant está.
        migrateTenant(defaultTenantId.toString());
        try {
            // List<Tenant> tenants = tenantRepository.findAll();
            // for (Tenant tenant : tenants) {
            // log.info("Migrando esquema para o tenant: {}", tenant.getSchemaName());
            // migrateTenant(tenant.getSchemaName());
            // }
            log.info("Migrações do Flyway para todos os tenants concluídas.");
        } catch (Exception e) {
            log.error("Erro ao executar migrações do Flyway para tenants: {}", e.getMessage(), e);
            throw new RuntimeException("Falha ao migrar tenants na inicialização.", e);
        }
        // finally {
        // TenantContext.clear(); // Limpa o contexto do tenant
        // }
    }

    /**
     * Executa as migrações do Flyway para um esquema de tenant específico.
     * Pode ser chamado ao provisionar um novo tenant.
     *
     * @param schemaName O nome do esquema do tenant a ser migrado.
     */
    public void migrateTenant(String schemaName) {
        // Garante que o esquema exista antes de tentar migrar
        createSchemaIfNotExist(schemaName);

        // Flyway flyway = Flyway.configure()
        // .dataSource(dataSource)
        // .locations(flywayLocations)
        // .schemas(schemaName) // Define o esquema específico para esta migração
        // .baselineOnMigrate(flywayBaselineOnMigrate)
        // .baselineVersion(flywayBaselineVersion)
        // .load();

        // try {
        // flyway.migrate();
        // log.info("Migração do Flyway concluída com sucesso para o esquema: {}",
        // schemaName);
        // } catch (FlywayValidateException ve) {
        // log.error("Validação do Flyway falhou para o schema {}: {}", schemaName,
        // ve.getMessage());

        // // Verifica se o erro foi por incompatibilidade de checksum e executa o
        // repair
        // if (ve.getMessage() != null && ve.getMessage().contains("Migration checksum
        // mismatch")) {
        // log.warn("Checksum mismatch detectado para o schema {}. Executando
        // Flyway.repair()...", schemaName);
        // try {
        // flyway.repair();
        // log.info("Flyway.repair() executado com sucesso. Tentando migrar novamente
        // para o schema: {}",
        // schemaName);
        // flyway.migrate();
        // } catch (Exception re) {
        // log.error("Falha ao executar Flyway.repair() ou nova tentativa de migrate
        // para o schema {}: {}",
        // schemaName, re.getMessage(), re);
        // throw new RuntimeException(
        // "Falha na migração mesmo após tentativa de repair para o schema " +
        // schemaName, re);
        // }
        // } else {
        // throw new RuntimeException("Erro de validação Flyway para o schema " +
        // schemaName, ve);
        // }
        // }
    }

    /**
     * Cria o esquema no banco de dados se ele ainda não existir.
     *
     * @param schemaName O nome do esquema a ser criado.
     */
    private void createSchemaIfNotExist(String schemaName) {
        try (Connection connection = dataSource.getConnection();
                Statement statement = connection.createStatement()) {
            String sql = String.format("CREATE SCHEMA IF NOT EXISTS \"%s\"", schemaName);
            statement.execute(sql);
            TenantContext.setCurrentTenant(schemaName);
            log.debug("Esquema '{}' verificado/criado com sucesso.", schemaName);
        } catch (SQLException e) {
            log.error("Erro ao criar/verificar esquema '{}': {}", schemaName, e.getMessage(), e);
            throw new RuntimeException("Falha ao criar/verificar esquema " + schemaName, e);
        }
    }
}
```
```java
package br.com.legalconnect.common.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import br.com.legalconnect.common.config.multitenancy.TenantInterceptor;
import lombok.RequiredArgsConstructor;

/**
 * @class WebConfig
 * @brief Configuração web para registrar interceptores.
 *        Adiciona o TenantInterceptor para gerenciar o contexto do tenant em
 *        cada requisição.
 */
@Configuration
@RequiredArgsConstructor
public class WebConfig implements WebMvcConfigurer {

    private static final Logger log = LoggerFactory.getLogger(WebConfig.class);

    private final TenantInterceptor tenantInterceptor;

    /**
     * Adiciona interceptores à lista de interceptores do Spring MVC.
     * 
     * @param registry O registro de interceptores.
     */
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        log.debug("Registrando TenantInterceptor.");
        registry.addInterceptor(tenantInterceptor);
    }
}
```
```java
package br.com.legalconnect.common.config.multitenancy;

import org.hibernate.context.spi.CurrentTenantIdentifierResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

/**
 * @class CurrentTenantIdentifierResolverImpl
 * @brief Implementação de CurrentTenantIdentifierResolver do Hibernate.
 *        Informa ao Hibernate qual é o tenant atual para rotear as operações de
 *        banco de dados.
 */
@Component
public class CurrentTenantIdentifierResolverImpl implements CurrentTenantIdentifierResolver {

    private static final Logger log = LoggerFactory.getLogger(CurrentTenantIdentifierResolverImpl.class);
    private static final String DEFAULT_TENANT_ID = "public"; // Schema padrão para tabelas globais (ex: tb_tenant)

    /**
     * Resolve o identificador do tenant atual.
     * Se um tenant estiver definido no TenantContext, ele é retornado.
     * Caso contrário, o tenant padrão "public" é retornado.
     * 
     * @return O identificador do tenant atual.
     */
    @Override
    public String resolveCurrentTenantIdentifier() {
        String tenantId = TenantContext.getCurrentTenant();
        if (tenantId == null) {
            log.debug("Nenhum tenant definido no contexto, usando tenant padrão: {}", DEFAULT_TENANT_ID);
            return DEFAULT_TENANT_ID;
        }
        log.trace("Resolvendo tenant atual: {}", tenantId);
        return tenantId;
    }

    /**
     * Indica se o identificador do tenant é validado.
     * 
     * @return True se a validação é necessária, false caso contrário.
     */
    @Override
    public boolean validateExistingCurrentSessions() {
        return true;
    }
}
```
```java
package br.com.legalconnect.common.config.multitenancy;

import java.sql.Connection;
import java.sql.SQLException;

import javax.sql.DataSource;

import org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * @class MultiTenantConnectionProviderImpl
 * @brief Implementação de MultiTenantConnectionProvider do Hibernate.
 *        Fornece a conexão de banco de dados para o schema do tenant atual.
 */
@Component
public class MultiTenantConnectionProviderImpl implements MultiTenantConnectionProvider {

    private static final Logger log = LoggerFactory.getLogger(MultiTenantConnectionProviderImpl.class);

    private final DataSource dataSource;

    @Autowired
    public MultiTenantConnectionProviderImpl(DataSource dataSource) {
        this.dataSource = dataSource;
        log.debug("MultiTenantConnectionProviderImpl inicializado com DataSource.");
    }

    /**
     * Obtém uma conexão para o tenant especificado.
     * 
     * @return A conexão SQL para o tenant.
     * @throws SQLException Se ocorrer um erro ao obter a conexão.
     */
    @Override
    public Connection getAnyConnection() throws SQLException {
        log.trace("Obtendo qualquer conexão do DataSource.");
        return dataSource.getConnection();
    }

    /**
     * Libera a conexão para qualquer tenant.
     * 
     * @param connection A conexão a ser liberada.
     * @throws SQLException Se ocorrer um erro ao liberar a conexão.
     */
    @Override
    public void releaseAnyConnection(Connection connection) throws SQLException {
        log.trace("Liberando qualquer conexão.");
        connection.close();
    }

    /**
     * Obtém uma conexão para o tenant especificado.
     * Define o schema da conexão com base no tenantIdentifier.
     * 
     * @param tenantIdentifier O identificador do tenant (nome do schema).
     * @return A conexão SQL para o tenant.
     * @throws SQLException Se ocorrer um erro ao obter ou definir o schema da
     *                      conexão.
     */
    @Override
    public Connection getConnection(Object tenantIdentifier) throws SQLException {
        log.debug("Obtendo conexão para o tenant: {}", tenantIdentifier);
        final Connection connection = getAnyConnection();
        // Define o schema para a conexão. Isso é crucial para o multitenancy por
        // schema.
        try {
            connection.createStatement().execute("SET search_path to \"" + tenantIdentifier + "\", public");
            log.trace("Schema da conexão definido para: {}", tenantIdentifier);
        } catch (SQLException e) {
            log.error("Erro ao definir search_path para o tenant {}: {}", tenantIdentifier, e.getMessage(), e);
            throw e;
        }
        return connection;
    }

    /**
     * Libera a conexão para o tenant especificado.
     * 
     * @param tenantIdentifier O identificador do tenant.
     * @param connection       A conexão a ser liberada.
     * @throws SQLException Se ocorrer um erro ao liberar a conexão.
     */
    @Override
    public void releaseConnection(Object tenantIdentifier, Connection connection) throws SQLException {
        log.debug("Liberando conexão para o tenant: {}", tenantIdentifier);
        releaseAnyConnection(connection);
    }

    /**
     * Indica se este provedor de conexão suporta o conceito de "multi-tenancy".
     * 
     * @return True, pois suporta.
     */
    @Override
    public boolean supportsAggressiveRelease() {
        return false;
    }

    /**
     * Indica se a conexão atual é para o tenant especificado.
     * 
     * @param connection       A conexão a ser verificada.
     * @param tenantIdentifier O identificador do tenant.
     * @return True se a conexão pertence ao tenant, false caso contrário.
     */
    @Override
    public boolean isUnwrappableAs(Class unwrapType) {
        return unwrapType.isAssignableFrom(getClass());
    }

    /**
     * Verifica se o provedor de conexão é um proxy.
     * 
     * @return False, pois esta não é uma implementação de proxy.
     */
    @Override
    public <T> T unwrap(Class<T> unwrapType) {
        if (unwrapType.isAssignableFrom(getClass())) {
            return (T) this;
        } else {
            return null;
        }
    }
}
```
```java
package br.com.legalconnect.common.config.multitenancy;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;

/**
 * @class TenantContext
 * @brief Contexto de Tenant usando ThreadLocal para armazenar o ID do tenant
 *        atual.
 *        Permite que o ID do tenant seja acessado em qualquer parte da
 *        aplicação
 *        dentro do mesmo thread de execução.
 *        Adiciona o tenantId ao MDC para logging contextual.
 */
public class TenantContext {

    private static final Logger log = LoggerFactory.getLogger(TenantContext.class);
    private static final ThreadLocal<String> currentTenant = new ThreadLocal<>();
    private static final String MDC_TENANT_ID_KEY = "tenantId";

    /**
     * Define o ID do tenant atual para o thread e o adiciona ao MDC.
     * 
     * @param tenantId O ID do tenant a ser definido.
     */
    public static void setCurrentTenant(String tenantId) {
        currentTenant.set(tenantId);
        MDC.put(MDC_TENANT_ID_KEY, tenantId);
        log.trace("Tenant ID '{}' definido no contexto e MDC.", tenantId);
    }

    /**
     * Obtém o ID do tenant atual do thread.
     * 
     * @return O ID do tenant atual.
     */
    public static String getCurrentTenant() {
        return currentTenant.get();
    }

    /**
     * Limpa o ID do tenant do thread e remove do MDC.
     * Deve ser chamado ao final de cada requisição para evitar vazamentos de
     * contexto.
     */
    public static void clear() {
        currentTenant.remove();
        MDC.remove(MDC_TENANT_ID_KEY);
        log.trace("Tenant ID removido do contexto e MDC.");
    }
}
```
```java
package br.com.legalconnect.common.config.multitenancy;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.lang.NonNull;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 * @class TenantInterceptor
 * @brief Interceptor de requisições para definir o ID do tenant no
 *        TenantContext.
 *        Extrai o ID do tenant do cabeçalho da requisição (ex: "X-Tenant-ID").
 */
@Component
public class TenantInterceptor implements HandlerInterceptor {

    private static final Logger log = LoggerFactory.getLogger(TenantInterceptor.class);
    private static final String TENANT_HEADER = "X-Tenant-ID";

    @Value("${application.tenant.default-id}") // Injeção da propriedade defaultTenantId
    private String defaultTenantId;

    /**
     * Pré-processamento da requisição: extrai o ID do tenant do cabeçalho
     * e o define no TenantContext.
     * 
     * @param request  A requisição HTTP.
     * @param response A resposta HTTP.
     * @param handler  O handler da requisição.
     * @return True para continuar o processamento, false para interromper.
     * @throws Exception Se ocorrer um erro.
     */
    @Override
    public boolean preHandle(
            @NonNull HttpServletRequest request,
            @NonNull HttpServletResponse response,
            @NonNull Object handler) throws Exception {

        String tenantId = request.getHeader(TENANT_HEADER);

        if (tenantId != null && !tenantId.isEmpty()) {
            TenantContext.setCurrentTenant(defaultTenantId);
            log.debug("Tenant ID '{}' extraído do cabeçalho da requisição.", tenantId);
        } else {
            // Se o cabeçalho não for fornecido, usa o defaultTenantId configurado
            TenantContext.setCurrentTenant(defaultTenantId);
            log.warn("Cabeçalho '{}' não encontrado ou vazio. Usando tenant padrão '{}'.", TENANT_HEADER,
                    defaultTenantId);
        }
        return true;
    }

    /**
     * Pós-processamento da requisição: limpa o TenantContext.
     * 
     * @param request      A requisição HTTP.
     * @param response     A resposta HTTP.
     * @param handler      O handler da requisição.
     * @param modelAndView O ModelAndView gerado pelo handler.
     * @throws Exception Se ocorrer um erro.
     */
    @Override
    public void postHandle(
            @NonNull HttpServletRequest request,
            @NonNull HttpServletResponse response,
            @NonNull Object handler,
            ModelAndView modelAndView) throws Exception {
        // Não é estritamente necessário limpar aqui se o afterCompletion for sempre
        // chamado,
        // mas pode ser útil para cenários específicos.
    }

    /**
     * Conclusão da requisição: garante que o TenantContext seja limpo,
     * independentemente do resultado da requisição (sucesso ou erro).
     * 
     * @param request  A requisição HTTP.
     * @param response A resposta HTTP.
     * @param handler  O handler da requisição.
     * @param ex       A exceção que ocorreu durante o processamento (se houver).
     * @throws Exception Se ocorrer um erro.
     */
    @Override
    public void afterCompletion(
            @NonNull HttpServletRequest request,
            @NonNull HttpServletResponse response,
            @NonNull Object handler,
            Exception ex) throws Exception {
        TenantContext.clear(); // Garante que o ThreadLocal e MDC sejam limpos após a requisição
        log.debug("TenantContext limpo após a requisição.");
    }
}
```
```java
spring.application.name=common-lib

# Configuração Multi-Tenant
# spring.jpa.properties.hibernate.multiTenancy=SCHEMA 
# spring.jpa.properties.hibernate.tenant_identifier_resolver=br.com.legalconnect.common.multitenancy.HeaderTenantIdentifierResolver
# # For application.properties
# spring.jpa.properties.hibernate.multi_tenant_connection_provider=br.com.legalconnect.common.multitenancy.SchemaMultiTenantConnectionProvider
# # Configuração do tenant
# application.tenant.header-name=X-Tenant-ID
# application.tenant.default-id=public

# # Configurações do DataSource
spring.datasource.url=jdbc:postgresql://localhost:5432/jusplatform_db
spring.datasource.username=jususer
spring.datasource.password=juspassword
spring.datasource.driver-class-name=org.postgresql.Driver
spring.main.allow-bean-definition-overriding=true
springdoc.packages-to-scan=br.com.legalconnect
springdoc.paths-to-match=/api/v1/**
springdoc.openapi.version=3.0.1
spring.flyway.enabled=true
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
spring.flyway.locations=classpath:db/migration
```
```java
PK
    ùZ            	   META-INF/PK   ùZeU´ï   £      META-INF/MANIFEST.MFeA
0E÷Bî0´¸(dW³ª(H[º©&cÁÛWwîß{ÿwÈþE³èåÙ'6p,ª°PÈéz5Ðáóú°¡*«©nÜ[ß&6ñ¤KEbAÙbúî%F61Ó `S¡õÏyýS~ì+ªøPK
    ùZ               br/PK
    ùZ               br/com/PK
    ùZ               br/com/legalconnect/PK
    ùZ               br/com/legalconnect/common/PK
    ùZ            "   br/com/legalconnect/common/config/PK
    ùZ            /   br/com/legalconnect/common/config/multitenancy/PK
    ùZ               META-INF/maven/PK
    ùZ            *   META-INF/maven/br.com.legalconnect.common/PK
    ùZ            8   META-INF/maven/br.com.legalconnect.common/common-tenent/PK   ùZÙëÛî       application.propertiesMnÛ0÷>dTÓ´Zvda ¨»èN#E²$eÃ(z.z ëèÏq]-¼ßÌ¼yOÁye*Îi% *k¸3aÆ¦U±XÜ$+kJUµ^~¿ü²É¦ÕQ±¯hÀDz
Ãî¼uè£ÂÀkU 77ÞÓâmW7+Úb??WMT¥B{VïÑgç$k¬@kÈÅÃ²8,ãý ôé4çË84Ü$¬OÎ¯ríeù(tBCr÷¤ûz¡[QcQquöyÕ«½BÚ$N)1yÝÏú@¿y±§õ<,±ÚÏÌ\[Ðëâ¿0t+×ak[/p1$©ú
o½Îv²KgC¬(±ïz¦Ú
Ð5Uïß=¼Mwmpbi}ËbnJè&ÙDvß3ÖË¾g0éEÍ&dpÂú¿ãë:PÖöÀ
ÃÈeTç³y%Ê¢o§Û¥$E<CEË 3û?x¬{¶(ê,§Òý}zwwÆÐÏf¨Îig åÙÃï'¥>àÈ(4Ês5ÓSÂíÙt~^¢dï<;fpÙp2~®iz¼lê~ÎÅõIt,e6ªò}ý/PK   ùZêTh  ¼  7   br/com/legalconnect/common/config/HibernateConfig.classµVkWG~âz!¢[5V­$@Vë¥*Hå*Ú H0µÅ!ÅÍnÜÝpÑÞìý~ïé÷þÚzÚÐÿÔ¾³IHQñû!wyÞË<3ÿûÇ_ Nã êàñÁ« 
[fø,WundÔ©tº4Csº<­áD#ühô! `ÃS4³ª.2\OA+ä¬iPc¤µ:¤M	ËàèsÇgr|Ô2sÂr4a3tÇL+£Ú9K32igÅiÝP§LÓQyÞ10yK¨¦Ui­z¾r}§d´IÁfla¤¸ÃãfÞJ
í1éË¼jßÔÕþï®}PÁV43ìÊæuG7¾{Í4|VK	a,öxÿ\GB$ÔáGáËætwûí
và=É¼e	Ã),8¢®Ö5&lSÆ@ß£W(ìTð,£ê&¥$XH>:£ÆÌLFX~ì¦øT%/DÔ¸®Ýâ)3º!ìõáyû°J§¡>%¦ò¿­5V®«¸#3ÝNøñÃî¾b~¹2CÚ Õâ9GXQZºjH©f]ûrUCp?Ú¨ÐVm5@¡q¹Áê O:¦µÊq*JYîºÛ¡ *}õjFÚôáCï£¸ÅÌ$×iWk°jíØ+¸
ü;¢à(Ñ	±Ó_QÉ-­µK9ðá¥Ug¶[?NRqMYQ*heåDó6ÅT¸<üèdØYË¨4ú! t*§FõË
Î ¡Xòä
òÎ7ãInÐl½Z+óªÀ>ýì«Æp¨5\S*`ÕNIã¬!cØJ4ª
H¨ZQöòÉ%w4]âöô0Ï0>(ÅÅæzµ2¡UÈóò´¹vq)ÎãtL[«&åJP§KÅ-Z2ø*©w¼oh`¸g®àª×¼×¥Wâäò¤ô'*iAþ;×~	¯ýäÇuHI÷9É!ÌÐ)ýeû¢¥¶¢WVQ°üHQTÊ)Ró#Ípb]35m'cøÅXÉxbW6´§Í¹I:JÌàº,R®]·zMS²~}³\Ï´¬ä+-Ès^s;MæN]¥Àk*Ôd1Ó$9?ò55¨T4$±ÔÏ(hT_"ÅSÂrT)O§B·ßº4'5xBRChkdà-Üöá
oâ-ÕÒ]äÂÐHZRóà}:·íÎðÚáÚgmÝ7zm±{úWñÿq·é8zûÌ©öæþ|JcOéÂ½fé>HpKãâG¯3­ÑÉ?²6U·1zË°p¦ÍÔ(Q&Ý" ±<Ëfk´Aa¾ÓÜÚ¡B¶Õt!å*_Y öP²æ4K¤h§K#æÊEòF#ûfQ£¶#íë»1	¿NdúV W!Á«4V>$W¥m!WJÝ±Õ¦]ë9{ÝèïJêÅ7u PÝÄk®JpT®f8¾ÞÐ¯¼oä¨{é­£W~=vÊÇõòÕî¶ô\v[z»-½G©õÞlx¼C£/iu=µû#÷À"mðEÚ±1Ò±¦HwÛ~EKp×2öÔá.ÙÕáýïþ#ÕF´c:h(ZH÷áÞ¥Ù£\¼÷·'y1·'Õ¹=ÉÍãö$;/> ~LAF iÐð!ýhñGÔ2ù¦ åþj%dP²<à²|÷þelÀÝê$µ§\bÁ"±òÇ.ò'ø´ÌÚ¾$ö³D,£]"«|8Öùðb[Ã8>á	Ox§âõÁ®øºÛ"Kè]Âà Kßb÷06Ü¼¼¼	.·'i¢©4à4ØV$¢ÔÍxïC+
Ìò ­}	7%-§}³´I_=®¯ÝnÔúÉ×òpâ,Óëâ$bôrFp#tb)Ücøãøðn|B¿ñ	Òügøb3køÂ-¯Q,|ù¾TFÑoÜ¾ÌÏ^7Ö@cÐ¿¡å®æ;EsYIu´LÕw+ ßÿPK   ùZ®ÍïJ  -  X   br/com/legalconnect/common/config/multitenancy/CurrentTenantIdentifierResolverImpl.class­T[oE=;YÇÝÜÜ¤¡)MÜµ´[ \Z'ËM¤H&Hñ/Õx=ÞLº;cíÎÄ¯á$hyà$~B|{i: @B+Íì|3sÎwÎ73¿ýñÓÏ 6Ñ,cEã`=äGÜñ¹òO{Â5RIó¡P«wË(aÒBÙÆ9Ø½ÐquàøÂã¾«¢I Ð:5Ä¾F(®Üc§ô¦¥OzÖ¦¡P&a¯ÕÛ¯rØ7¡T^cÓ±0kc½ÿÈúÅN~å@pODÚ?áN0ôI¯=J[ù»N[{%Ì3lî
uÕÒTûb@¦ôuUéª©ÑëÕ8âbù!ï¿|£ïW¿úºäã0îùÒ=7pÑÂKx,åcï^L¹Ü¬u¢=ZF½[Â2Ã¥\Í©¸¹Ð'UW¾qrWÉÐk6®'5\³ãRoá¦:VGóÝæ®Ñá1Ã$ó§Soù<õ³ÎZXg¸dOáän:ÑPþSÝænm7?kwu¶v»G;
1a\d¥ËýX0[ºOÝL[*±DÞá=_¤õw¹ßå¡LÆy°hdÄÐiÿÿçr+|ÒÜ7Ü}ü	¦Ä>|íBfjV¸/ûdÖÖ
å<û"$éLoêç£W)?.Ä·áúù.ïë8tÅ¶LTÖþEº·<{1M¢+#I6Ò{5«ó0Éuò@|¡ÃÇNdD(´9
§¥¡VÞ 9MÏÃµKÉÝ¦7i	·pbýa%<MÔÞ¡C=£~|õG°§é·©H3xZ;[wqzò|ó(Ðzàú3Xíµ_QùSóçX, ²p/¯=ÇJk'´®b/:pE,Óã·yT±«ô]Kù.d9_fßK¼O£ØïX´ðïá~Çz.b¬øí[§e³MÂnÿ®lþù%l¼ôîJ:LV¦áÆ÷zúó
`à6SÐø(~ü	PK   ùZ$=    V   br/com/legalconnect/common/config/multitenancy/MultiTenantConnectionProviderImpl.class­WÙ_×=WFÈCXq8LlG,¶ÆISCÜbcba;à§MÑEfÄÌC¤{ºï[Ò½¿>ô¥N7ä÷kûÐ·þýGÚ;3HBNú0ÛÕý¾ósÏ]ôÏð7 /â7i$ÔÐ¡£]}kÆ¦³
§»¾¼&Í@ kÒr¬à@2;²Øº5¤u.pcÙËn9gËa®ã0B5]gÅ*åÊU;°é¹Sóê#z[®sÃs7­¢ôfË[ ]4£àV=S
åU=[9ÃÎ]ªµO¨*ÑÑ>Ve»%¼ër¾½rn-wK%éM¤0 páC3dgZm½nÝkÏÔÎÀ iÒqRfÎ¢\®²CÙ|]ºBàYNibd1Ç²×ÉÉ7ª½QQ¹õßº66¡Õñê<Ãð$2ëÆSíÔè)Ér³#Q1ªcý*rRàhÞZÑ¶Vð4²Ft*7l¥¶ëËÆw©ÕUÏÈ¸pÀó{o*Rg~9§ÛoveKs|ÑñÅ¹ä¦ízªÆs:Ãó½¦'@ÞÊÒ¡[¹×Ú'ÒxÓp^Ç&÷Ø<*C@Û4ìª¼¾"p*Û¦¦ÖÂ8.èø8>AÅËÆºd¦Ü²U¾ùùûMÉv}ÑÚt 1­á\¦[)°B¹%Íj ÷1ÛR
WNÌUY62E£Áer&/F³;&/+£å4ä®öJ~fË¥s
×ÎÎx1vsx_¹úZÅV÷5ÓªÔi\Å
¯à&§2nNú¾QbÍÙ¶´1¯c´$gT¶
¹;í\Â'É·nçý=¨ü´¤ã^e´¥áË=x4ÛvÊ(/&ði¯á3)5ÑlÃç¸ÜC'l¤Éaj(ê z~§í,Ê÷­c,Ûò²ç,-iFÒX¥aMÇ:¸$n^v.fàzÛÝ,hw%:Ù&Sëª¨d_RÍ«J8îÊI§d92·V\6sf»ó+ÖÃWl#Ùö+ô´cÚ-rà{óL~­Z&Ú¼â.Ö¦a/¥¾ãÆ`Õ¢D7óÿï-eºÏÉ`Õ-Þ /Ê2qÜ¬:UoÊq\Î4E[àH¶²Þ
¹ëzë¹eiPHúQÈMU÷®åÉ"ÒµéÃ<i³Á`ÚúK`dÿÕ¦¥¯ Nómg«b~¶ÈÕÂZ±Ôð´æævÁ5Å\3*±òýñh£mªÚgPK¿Z©¸^àOJç»µ)oF)ÃCÃ=`ùÎ]Ï¨TäÒ¦~ÏoWT-Îå±#ê°¯ÛÐÚë*&ù
5ÇOÎÏO\`DwAMÅ ê±Ó3óç[³^hÁbGxçr0iÚñÙ(ùþ²¥ O}¨'Ï¨¬T¹­Ñ|:Tº	Pèr«£øõ]tÝÀç± ¹ÙïíÂÓø~¬á'jz«a½ZËÙt×e¼F[SmÙx§VÜ1Jz+©-ýy×]¯V&º]ï	Tz·éÞnánM1mØv3'
+ÌÌïÙg73,Ç3ê²mú,5õÂá¾_Ð#ÿ
¿böw¥ñ¢Î8ÎM#2ï©³&÷ûuìå³ípD_óìàspô/£cöôôïà`ï±=0¶÷Çy?Êø'pÇà±e( ß@ïÀ&¯.6ÝåS¨cCðÅ°@(¼#;x<Ñ?AÛÁ1û5àtås$Ô£pW[®òâS)õ«Ì'ÂÌc;8%ø<Â®À9¦}Ú<ßÀ¥¿Æ¥Ûxë 1«íÉ0îÅxÿ"?%ÏÂ#Ôé$FàìÜø{ýW°©n©N/±Ól¿ÃS×Ôç\×_¸+Üî8ý ×·;OvPHâôßÇïªgñ,ñaí§8À4Å½Ä_®à$fùû{¼LFWy|É£k!§Qvçð7ðfÈx¡Ænoá³aîg4øñOUJCBãiUh¸úd«o|_5¸ÅgrWó[±ãp»Yó%Ö}¨¯õe¢ Í£ªvÕO4!w'Bäh¾/ñ®ÐÇùTAäïkp]alpM"ø2Vb¾{¥{#ö©0l4x£»Vg7ÞÆWê>;ÌúU|-Vc%ÎÚ»õ]tÞ÷C.u-îQ7ÐCJuÞFoñõÕò
¾©JBô4Â3¬û[÷ß+We£Xí@ê}þ÷Â:ëäXÎwÂÀïÖæé÷øü>¯ßÀë]ü,?Ç/ñkù/PK   ùZ`äCÒ(    B   br/com/legalconnect/common/config/multitenancy/TenantContext.class¥TkOA=C-eÒò¥ XZåå(R	
	È°%Û]³Ýñ?)$<41~öGïlJâ¿Ìtnï=÷³wæ×ïo? Ìa3:Ô«h@#CøqÍâ¶¡mì
ÝchL¶éÍ3FÛM¢IAHE3Tô«éNA³Á-Ý±mªcÓfïV(Yé	Ûú±»qlO|$è½äºÂöÊaîl¥}îÀ<utn¥BhE°vD:ïÌ"EA £ÙÛ"Rí :>o%Bºô¨èEñp\C+Zû3ÚÚb>(^
´å¹¦m¤j#eOTÜÃ}ª´!­ fÃn*C²,4¶²úåÅ>ywb¶ÓË¦81#ãÍÆUà}Û
ËuñO×HGU$$tªc4Q¨àñ1(#ÊâqFW#!=¡©[_ÄÃHE³_'åæïûLj
á^*UBFâ¶ðe®{{ÌÐDþz1RÝ?cñb1¨ýRD
·LÃæ^É%óÆî¸t­ùC;QÝÍ-­/¬çvWwWvä·®I¥¢/z${[%jSqò´µeM[¬
{ÂÍñ=KøBí¶¹kÊóU°Þ;0óÙÿ¹]Ä"L÷!só×wàä7¹ËÂ.µ	5Y7ãZUn	NnÓºuõ&¶«eÓsÀ¸DÀ]:zjè7~õÉ§$~×á_cÎoüsÞ!&ß"Z3Ñhg´7$ÏÁ¾ú)´6úÁ0hUË	XÆ[ÚðS%7¨­ü¯÷Jò-hò'è&/1@0zZ ËâÙÁ*ð^tG`E6"ü>ï±zErØOBÔçñûB'VÅ4NùÙkQ³¾%@ÿ$½Àd5}§u>)VEjê&É´)tbì\«2§/ðüýßÑºs¹S(¡Â(EÖ}Å PK   ùZÛzô!  ¾  F   br/com/legalconnect/common/config/multitenancy/TenantInterceptor.class½]SUÇÿ,
%mS)µ.µ-J¶­Ô¾@«4A­@c­/ôds,Ýì®»(vú5¼ðÖÞèE­£Å½`Æ?ãøMXÈ(êL'Ù={Þç÷üÏsÎîïþüë0èB,EE71Yãë\·¸]Ño×02m3¸Á;;Z£áÝ¢§NM·D[cÛ4N6Ô
»lVôZÝ
Ì@ØÜ66õYóv <C¸ãõ ÁÐww¼Ñ1>?Óýq$UÆ5þ{×}á­["Ð«Aàêst[n4,/êÂ'¸Þæ/	áÌÙü.ýràvertS)ã%8Þqc CÜôs57ØC¾×8^VÆÃá(s
­Q!ÕÉÁ«x-*^Æ0õÔÊ:$×Cð/lÝóÝôÊ0Ð)Ðä<©â
"nË©H6Ç«è¾UXÓóN¥"¼Éa¸Ü0¤ÍÏh#häÇãÛßþ/í'ÜªRk	múæöíoLÎb41çð&íµÎÐ]Å:yé@ßZÄÜC.»ë2ä±É&l¸É©këüKÓÉhw|nSCÐàwyÉCå¤î¼¸È lpÏf¸z N\r	'T\[¢Û°§½Ì0Ú¶6eÖ\Gãîö3_ë ÕU©À$¦â¸®âÞaÜ+Ú,7hGl6RyGÇÓ­äYû>eò¾ÅcábØìÊàÊ¯
Ç{ ob´wæH2Kx-Û¡%·8½¸²:É-QBò
­À­º`H/ÕíÀ¬T´Ä´m;LÄ0ïä±(¸íëåF0:&è¡ÅIq½aZ;õ»®eaw¦±æ¾7Kiù²NFÎ¶X¬×Â[áD&´Á­÷LYo6*AÕ$¬ùÿ{*d¯ë^U¹:&0ÐwI<Ñ)ÙîÑãíg£öÉÐã5­2¼UÑ~x5qÈlnýË7,p·)u"÷PJ%ó íNzè\XAÕ)Ýæ29H]Zíùuµ%ÖÉZ_tìÅºe]Âuü`g¾z1KÔ«u-P¾ZÓv©`
:=ÔZKCæßY ÔçeR'ëÔ\êE}üBí°¢aD]â!½x:vSÊLVó#!±ìÔi?Ír}ïÛci@æk'A|&`ÓºÝ±é7az¯u¾:Ã|½ÑËnÒÅ¥ç.ôÒë3Tï£2G×¬÷è£ÉºÏQN%£²{ì'°§áÜyº
ð>ÝÕÆ |<XNþÊn*gÏ¥z·Ð×kJZù
ÃiåGýé±0ø¯|áÔé´²`¨¥u<Õ+k[Ð(ß¥XèýÅ#Ax8OõT ß%çJH5ÑðÜ¤O·p;$ÅX¢8äÓ2VÈfS¸Cj((P+ióÆãHÇGTUhÒ]Ü£§þÙ ÍÍ>¡ëXz?
Ãn½Ï,Ò`¿v-,¢d%(YR>­â>nÇ:ª´a­6Ñh²ä(6áªd_úO>Ç[Rî··p¥»¤ÉÐë*Ýï£æí'#âdDqJÿDlü=qDÃ¡'Z£Tü9®=ÃðÓpà®¬P¨©-[«À_PK   ùZS=°  Ú  5   br/com/legalconnect/common/config/OpenApiConfig.class¥UmwE~¤M¦¼,PZ´JÒmD^H	¦¬mmbt²ìnÜÝ´ö_©sÌ9~ô?ÊãÝÊá4&ÌËÍç>Ï½óòç_¿ýà9B*4ÇÆ½;Âl	·i®×_J;d¿­\ÞeHæ·²ÈÒ`õq-C^yf°+Mé;WLO¦ã5d+0×ÛÒ]Ú¨ä0¡Ñ'.èªÜmÏ¬PG*cÓlVÙs]b(B¹+öò1Áq'ÆB¶$Ãõt5ôÛ,Í[ÿ®Åi).,jÔiÙ~ <7÷.RÈ~ø¶ðEÞË*¥#òû)jsïkÃ
Ø¾j¢åç9>À´Ì°RÚ þ½Ì2c¸z [ í¯Â=³ÚlÊ;Êtî,Rº¹ÈQÀ<EºÌAQJZýÇà2ÃQðOòÇðt@"Âaö@·²ç´=°ôþüaqx2Uû1É¡¨XÄUk¸NvCÛqùf0A/Mà&nePâ¸;#:«íµMz¥VÛ`¸>2x}Iëûã*_R·ýXÿ!	Yéþ©KáK_SùcY§z<è`£¢M<ñZö|Gº¬8,|É`ìÛy	lx§H£Ó èÍÁ:Ç¾bÈÙ};Ce@&÷­j¿WÌºo¼ÙÒ\LÚàx.uî¶j&þmUgTÑ2ÁÐÙ´+×:N]ú5Q×Wªay¶hm	_éyÏ_(b]´FSb´;Aè9=ºs!Dà­|¯ÅçËx·r37TÜR"²K®ëBßÀDø²åùM3hk×m0v=ÿfÊBSô]ÍûR¸«zßË*ÎÄ[RthkÃ"&«:~<#h^¡lùå½Óú\Ðë°Io°þÓ¯0µ5Ô3êÇ.½û%þûkjÇcã$¶¨åãêà[òÒÿ «}nd¬.&¼Æá.8uG£§"6ÎD8á|³ôÇF&ÂG.u±@ÓE#ÓEW´ý³_q#Â]ã~zþ0Âjµû¬náµÇ¢·ùNaS8ÓÈã$= Óx³X%Ë:=5'Ægë·V2°í)Iá)}¿#EÏzÇÖïãx?ô­ú:ýr4¾I}oæoPK   ùZÁa÷g  	  >   br/com/legalconnect/common/config/TenantMigrationService.classWkwÔÖÝ²ÇÖ0`ÌÓA
ø=´%ØÆqp3¶1>5[X#
ÆØqé6é3mÓwÚ¤-}¥-I08]-XýÔ¿/M÷4ã±=Úµð\Ý{Î=÷}ö9÷ò¯ÿ¼÷O Ïb):ÔË)h@£æËÚ¬´4{*96yÙÐ}	GMÛôI¨oïÈ®Cëd$4ApdÒMêN!iS¥;¶Íb¡àØì¼97lÍöGÌ)WóMÇÎî¬©9Í×2NÉmiqî\Ò»b%OTÖûÅilD³­9#¯,?´7Ëø®iOIhI/»®õ'ÐÍ2¶(Øm6
%ß´gÏàÑy×)÷·µ¯5Ð^¹%pdVì°q#­ú
>ÝDÍr/w*éYùCigjÊpûãP%Û¦njvÎQ¢û7ïß6<Ó!kþª6¯5WS}'çx*ÿùÁjÌ¿}ÃëmÂ^|TF}ØO_V#!fÚy Ö
4+°jWÐN	qß)£²¥½£®ÝèÑ« ):úáÉ/'3pZ0èÐí9òªÙ3üÁë2P jSðqa{}o8k#ÿ@<_·J÷ßÊi^¯§%l^&5§EÁÅ8H8r]GÕbjè%_sÐ|ºp-§Ð§ _ 2üÃó´)C¤ãYÇðI	
M3ÏÔ@>½ºÐj¬tdeHØ¹,8S²}³`TE0(¡kH³¦5Bà¹[ÁÖT3 e¾(zÓéMà9¤D­Iè|´[ãÓ®sU´%qT0,R³Mw
f&£Om8?êø)ÁÆ&¼´£#j4óJ¤CªÐ}	ÛË<Ëþ&Æã8[ÎÞJVbäÏiDßªÍUÖYjç$¨gRã)53x252 ©£cãjêüpf<£îÝçíM`d\Tði|fE+,WEcÞq_;£k$p­V>K24ÐÙÖz+A©h<¤f/ÄAQWÊ»RbÔ×¨³kæM]Ë9IÝ59°
ªWÒÉJ'èS
¦a9c²ÄX<);²Âá¸tËñözª%
®_¯årR±èÒ=rGûC¨%2=#£Ä`±8®¢øU	íå"Á¹Ér´®jTV¥>î¢¸ó13má}xMÁðE²² Íd®ùçL_/*JÂþß+;åñ_Uð5\§½ÕMyHÓ}Ç°õPîÓûªmZçÑôk´Ï)íèÁJ¯6_\ëÖ¨[dMÏ$Ö¶íøåBÃE¡wµqÕqgf{É|è\R«lHf5«dÐdÃ¬ø`Kj[÷ö¾ôZeg®1Úpí¸æicvxùst÷íê­^c÷D]F¶®45\/¨ù=Ý>ªp¯Ú¶ ºÔ¶ÃÞèÚî1sTim¯ýâèÈò¾trtvcVGKIÃ\
.q]³²9Èy´ó§MÚþBµyÄð§Ü)MdÂgÁ¥m²ì¥3ëkÕÙ8åx~ÀI·Dê2láÙl'®_*sÑFÒ5n?n\O-}fD+F±$¼ ©Ò>\
	ê-÷¥-µz+wéU=ykÍvNR¤kV7%ñ£º½0aLáÌ®Úpõ
;¬ëæ£È5¾h$«Ð=î8>ÁÒ!ÌÞÆFü9·ðÿ7²r Óuf¨Â&P)×Vh¤=É7exmiÇ)ûÙ[Wl§³5Ô?ä6Ljá7ÜÛ$Kå!ð°6)IP7h/'ã6ûÎc$ãÝVå
*cuì¨2vg0¿ZÄÿ8Öáëø$¼Äï&/óï¾EÁ·ñµïRð=4¯¼BÁÆZïSÀ:¹ÐpþCÎ8
w uvÝ|+ðçUþn@=á Öñ	ú#Î¶Úø1~_"ß
'àäg<$4ßÇQâ¨tv¾õw±é6¶/=Í]ãJ¨)röçÍ_TlÞ¢CbßÉ·±«åÉ%ì©o_Ä»èê>qP?obwZÌw-â®%áïxn¢åx×¸wÖäc¿×úÀ¯ý|&ø|Û4¥ÊÏQc=8£Èây\¬ ÒC`_Ã/ïOFÞ¿$ºÎñÔÎU¡ð1r,B¿±=¿yz¥
õÆ
ê¸$9BýF°q¸lVú7¹¶H0ä%|JÂH÷NImÉÆþºú®Ì]ïõ´ÆðÙ:ë"t¡ÑÉ×£çô,á²$ £Úl-O¾ÖXkÃ"ÖØ½îh£eOvr¶¥<k
S«çÞM¶g££'bÝËL4tg0_ä¢ë=|èóÑM8_N/ð!4Î1Kü-ÀÅ8×	ªåë9 ó6dlé`Fz#ÌD²K¯ã×Üù:ëâ~_á6Þ >FÄTìàJ3ùµ	cÔ{ö<ïMüÈ¾Ìü¿ß©X¬¤b1JÈ÷y$>àa1q2NË|'J2
°ªW¹âï£.(¬_±-ÊïC:.Ãï®Ntn.	þì	(¬kßÅÞÁ®[Á^è<ÁXnìø}àøÇÀ?ñïÞ	('á]Fs­ÿPK   ùZçíÆ£  ø  1   br/com/legalconnect/common/config/WebConfig.class­TYSAþ&I \Wa=T)*<Ïneq3KÍN@ýIxë?ÀeÙ»ä­
¾lO÷Î|ýu÷7óãç·ï áa1tÅÑBz
2m¿jzÂáíK)lª¾$#w\ÇÜÖr´bèò|úfJ¾rÌÀÛß3K¾ãUL Á0¹!7ÐË?µ%$ú¹ÔBÙb_ûj®úâH¥pi³ =aÕ(ÁH¶´Ç¸éqéZ¹Ò)æÊ!óaÔgá:×R­yÚÎÚGæo1Çh
c¸È°QÜóï(^¾zm
Ë:ðn r)}ÍµKyÚÐêÝ8bHóJåÕ·ÙR'ègÔEO¨vv¹ÎÃ'S¥¸Çå®`Ñê÷+kúÆÐ»èJW/ÑÐ³¹²)LÇ1Â5\g;;»UnS*5éÝçö1.{<%´K'4»¿¯d¹v`(³¦Â|ý§Û0¼èÜçsÔÇÐ½ìWe)¹R¼¬U-¡¶¸åè>ØÜ+så~=Ø­w]b0{Q6/X!¡ªyú¸Ót×Þõ+ë<D¡
Äk%ûï·%lJbÑöê:16ýýZuÃòÓÍ¢æB
0oÔ¤v«¢ì.5èq3Yøc¥DB7º½¼Æ´O4iz&@B,½gôÄeÂlÅo!Krä­~E2Bþú?ahûâ1äé¦S T3"¥È=9Û¢ÕLÂ¾CëFÈ¹»õDKõDFþ3ÆóèoÁ÷ÒNpÖhÂí&ì À=LR(qbÑ¶d&öWßGy[¨!Þý(Ó<Ô£À/PK   agùZ"òíùñ  y  ?   META-INF/maven/br.com.legalconnect.common/common-tenent/pom.xmlÅX[Oä6~çW¸£}h¥MC/[fKAl»-*ê«ã<$qj;séjLÕJúØ_Àë±dæXÊ2/Ø>>ï\ðõ,MÈ¤â";ìíù»=1ÏF½«÷§Þ«ÞëÁNK1¦	Rgê°w£u~)@æÓ²ðïÎ¯ý]ä²CðÏRÌ¯oL§Sºoiû»»{Á¯çgx9¥Ï¦ò¦âÊ	FµUn«Pb(Ô*Ý¦g	}\÷VPkÀÀAkÏåTB¦ÝÂn¤(òã²÷U.¯¡¤)L¼õ#!tT;Tj>¤Lã¦»âJ
¤çdAlq·ôÑ`ßïû{ý0¨Ö$üÂóÈ¢Y,µ®¼ûSß
 Áîþ&ªäñ¼7		¢:ªoHP2I¸-râÔ C)R"!k!çõý0¨°ØiIÔO`D&²ÃÅl¤"[@áä%h-Eul(d
¨#µz*mt¯%5p<
ÙJjxö'-çeèÁQìØ)F-;rÆ#Iå<,#A1Éss¬Ð<ázÉ¡Ëÿpk ÒF¨"hiI9Bp*¬«°b·t0Si­©òâ(+¤HÉÛ£_H$âQÂF-^%;)rF¿¯ÇtBýïÂ µÑDñÞyd82Îù.ÐZÁ4·þÞ+poßIº.À,Oîþa\SpYâ6c[)ÍÓÿ7ø;E}0XM²QTÍÿæö^[ªKÍX°]ßß7Aµ|°Ù¤KK"Xÿ0Oé¼æñ½ßGþapo{3ëSKÜÌÉç«8Î!±·£Ápu±øKW|È5MxlãØI Ðôî¯»ApØc\eRròþj[U/6[(»ËI­ï45ú|zN!Z­ ½3Æßª}Ð>\>û»j®E­w½òå5J6Ô:§|6`ÜPoÓÿÛ1¦þNg3pÅOüJ~|ñÀ7¶,
3½ü¶ïüpÜìt/Í:ÍéÅØ5ó?½tw%svIûU^+$×s´X3÷¤È2>*ô°G_bm¡»Âî}ò[~ýfæøê	ª*5énzu1ð  ;ÅÆqÄVÁ1Å¼ÐÔ7ãT]ôºwÃ£9ßñUãývÅY)mvÍvÂcq$°ë­MÇ_7¸) :çH»Â#âµ|ô¹1®BáV_|h·>gb3b¿'UÄÌ:CLqnõp=zÐì F¶+ÇØ§å	F!z;¤õòÓ­9¥æ]ðÅ¥Aûã|\vdc§1GOI'¾°îµõrwEmbQ~QpJ>:{;Ì×ì¥9OÌSß^ÞÒâ[¯ËuCfZµ!¸JHó¦_1µ,LÅóõÇKFw©,ßVîv¨ë6[÷Pã·eü&Ãë»^^¹æQ(l«
ÏÆÓD·À%âùÐøTvýþÚ&ÝÛ9yÂ`C2¢{Õ£ÚQUa*}§ÿPK   ùZÜ ÐÞH   M   F   META-INF/maven/br.com.legalconnect.common/common-tenent/pom.propertiesK,*ÉLKL.ñL±MÎÏÍÍÏÓ-IÍKÍ+áåJ/Ê/- 
'éeôrRÓsóóòRKô Jy¹ÊR3óól
õôx¹ PK
    ùZ            	          íA    META-INF/PK   ùZeU´ï   £              ¤'   META-INF/MANIFEST.MFPK
    ùZ                      íAÜ   br/PK
    ùZ                      íAý   br/com/PK
    ùZ                      íA"  br/com/legalconnect/PK
    ùZ                      íAT  br/com/legalconnect/common/PK
    ùZ            "          íA  br/com/legalconnect/common/config/PK
    ùZ            /          íAÍ  br/com/legalconnect/common/config/multitenancy/PK
    ùZ                      íA  META-INF/maven/PK
    ùZ            *          íAG  META-INF/maven/br.com.legalconnect.common/PK
    ùZ            8          íA  META-INF/maven/br.com.legalconnect.common/common-tenent/PK   ùZÙëÛî               ¤å  application.propertiesPK   ùZêTh  ¼  7           ¤  br/com/legalconnect/common/config/HibernateConfig.classPK   ùZ®ÍïJ  -  X           ¤Ä  br/com/legalconnect/common/config/multitenancy/CurrentTenantIdentifierResolverImpl.classPK   ùZ$=    V           ¤  br/com/legalconnect/common/config/multitenancy/MultiTenantConnectionProviderImpl.classPK   ùZ`äCÒ(    B           ¤5  br/com/legalconnect/common/config/multitenancy/TenantContext.classPK   ùZÛzô!  ¾  F           ¤½  br/com/legalconnect/common/config/multitenancy/TenantInterceptor.classPK   ùZS=°  Ú  5           ¤B   br/com/legalconnect/common/config/OpenApiConfig.classPK   ùZÁa÷g  	  >           ¤E$  br/com/legalconnect/common/config/TenantMigrationService.classPK   ùZçíÆ£  ø  1           ¤-  br/com/legalconnect/common/config/WebConfig.classPK   agùZ"òíùñ  y  ?           ¤ú/  META-INF/maven/br.com.legalconnect.common/common-tenent/pom.xmlPK   ùZÜ ÐÞH   M   F           ¤H5  META-INF/maven/br.com.legalconnect.common/common-tenent/pom.propertiesPK      ¸  ô5    
```
```java
spring.application.name=common-lib

# Configuração Multi-Tenant
# spring.jpa.properties.hibernate.multiTenancy=SCHEMA 
# spring.jpa.properties.hibernate.tenant_identifier_resolver=br.com.legalconnect.common.multitenancy.HeaderTenantIdentifierResolver
# # For application.properties
# spring.jpa.properties.hibernate.multi_tenant_connection_provider=br.com.legalconnect.common.multitenancy.SchemaMultiTenantConnectionProvider
# # Configuração do tenant
# application.tenant.header-name=X-Tenant-ID
# application.tenant.default-id=public

# # Configurações do DataSource
spring.datasource.url=jdbc:postgresql://localhost:5432/jusplatform_db
spring.datasource.username=jususer
spring.datasource.password=juspassword
spring.datasource.driver-class-name=org.postgresql.Driver
spring.main.allow-bean-definition-overriding=true
springdoc.packages-to-scan=br.com.legalconnect
springdoc.paths-to-match=/api/v1/**
springdoc.openapi.version=3.0.1
spring.flyway.enabled=true
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
spring.flyway.locations=classpath:db/migration
```
```java
Êþº¾   = {  'br/com/legalconnect/common/TenantFilter  3org/springframework/web/filter/OncePerRequestFilter defaultTenantId Ljava/lang/String; RuntimeVisibleAnnotations 4Lorg/springframework/beans/factory/annotation/Value; value  ${application.tenant.default-id} tenantMigrationService :Lbr/com/legalconnect/common/config/TenantMigrationService; 8Lorg/springframework/beans/factory/annotation/Autowired; 
TENANT_HEADER 
ConstantValue  X-Tenant-ID <init> ()V Code
     LineNumberTable LocalVariableTable this )Lbr/com/legalconnect/common/TenantFilter; doFilterInternal s(Ljakarta/servlet/http/HttpServletRequest;Ljakarta/servlet/http/HttpServletResponse;Ljakarta/servlet/FilterChain;)V 
Exceptions   jakarta/servlet/ServletException ! java/io/IOException # % $ 'jakarta/servlet/http/HttpServletRequest & ' 	getHeader &(Ljava/lang/String;)Ljava/lang/String; ) public
 + - , java/lang/String . / isEmpty ()Z	 1 3 2 java/lang/System 4 5 err Ljava/io/PrintStream;   7 8 ' makeConcatWithConstants
 : < ; java/io/PrintStream = > println (Ljava/lang/String;)V @ (jakarta/servlet/http/HttpServletResponse B UUID de Tenant invÃ¡lido. ? D E F 	sendError (ILjava/lang/String;)V	  H    7 K +ConfiguraÃ§Ã£o de Tenant padrÃ£o invÃ¡lida.	  M  
 O Q P 8br/com/legalconnect/common/config/TenantMigrationService R > 
migrateTenant T V U jakarta/servlet/FilterChain W X doFilter D(Ljakarta/servlet/ServletRequest;Ljakarta/servlet/ServletResponse;)V Z "java/lang/IllegalArgumentException request )Ljakarta/servlet/http/HttpServletRequest; response *Ljakarta/servlet/http/HttpServletResponse; filterChain Ljakarta/servlet/FilterChain; tenantIdHeader tenantId e $Ljava/lang/IllegalArgumentException; 
StackMapTable MethodParameters 
SourceFile TenantFilter.java *Lorg/springframework/stereotype/Component; BootstrapMethods
 l n m $java/lang/invoke/StringConcatFactory 8 o (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; k r 5UUID de Tenant invÃ¡lido no cabeÃ§alho X-Tenant-ID:  t 5UUID de Tenant padrÃ£o invÃ¡lido na configuraÃ§Ã£o:  InnerClasses w %java/lang/invoke/MethodHandles$Lookup y java/lang/invoke/MethodHandles Lookup !                 	s 
          
                    /     *· ±                                      c     u+¹ " :(:Æ -¶ * %:§ D:² 0º 6  ¶ 9,A¹ C ±*´ G:§  :² 0*´ Gº I  ¶ 9,ôJ¹ C ±*´ L¶ N-+,¹ S ±    " Y = C F Y     J    , 
 -  /  1  2 $ 4 1 5 < 6 = ; C < H = W > [ ? ] > b @ c D l E t G    R    u       u [ \    u ] ^    u _ `  
 k a    g b   $  c d  H  c d  e   $ ÿ "   # ? T + +  YH Y f   
 [   ]   _    g    h      i   j     p  q p  s u   
  v x z 
```
```java
Êþº¾   =   1br/com/legalconnect/common/config/HibernateConfig  java/lang/Object log Lorg/slf4j/Logger; 
jpaProperties >Lorg/springframework/boot/autoconfigure/orm/jpa/JpaProperties; 
dataSource Ljavax/sql/DataSource; multiTenantConnectionProvider RLbr/com/legalconnect/common/config/multitenancy/MultiTenantConnectionProviderImpl; currentTenantIdentifierResolver TLbr/com/legalconnect/common/config/multitenancy/CurrentTenantIdentifierResolverImpl; <clinit> ()V Code
    org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init> ý(Lorg/springframework/boot/autoconfigure/orm/jpa/JpaProperties;Ljavax/sql/DataSource;Lbr/com/legalconnect/common/config/multitenancy/MultiTenantConnectionProviderImpl;Lbr/com/legalconnect/common/config/multitenancy/CurrentTenantIdentifierResolverImpl;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired;
  !  	  #  	  % 	 
	  '  	  ) 
  + HibernateConfig inicializado. - / . org/slf4j/Logger 0 1 debug (Ljava/lang/String;)V this 3Lbr/com/legalconnect/common/config/HibernateConfig; MethodParameters jpaVendorAdapter 0()Lorg/springframework/orm/jpa/JpaVendorAdapter; -Lorg/springframework/context/annotation/Bean; 9 Configurando JpaVendorAdapter. ; <org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter
 : ! entityManagerFactory F()Lorg/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean; @ >Configurando EntityManagerFactory para multitenancy de schema. - B C 1 info E Borg/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean
 D !
 D H I J 
setDataSource (Ljavax/sql/DataSource;)V L java/lang/String N br.com.legalconnect.user.entity P br.com.legalconnect.entity R br.com.legalconnect.auth.entity
 D T U V setPackagesToScan ([Ljava/lang/String;)V
  X 5 6
 D Z [ \ setJpaVendorAdapter 1(Lorg/springframework/orm/jpa/JpaVendorAdapter;)V ^ java/util/HashMap
 ` b a <org/springframework/boot/autoconfigure/orm/jpa/JpaProperties c d 
getProperties ()Ljava/util/Map;
 ] f  g (Ljava/util/Map;)V i hibernate.multiTenancy k SCHEMA m o n 
java/util/Map p q put 8(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; s *hibernate.multi_tenant_connection_provider u $hibernate.tenant_identifier_resolver w hibernate.dialect y 'org.hibernate.dialect.PostgreSQLDialect { hibernate.show_sql
 }  ~ java/lang/Boolean   valueOf (Z)Ljava/lang/Boolean;  hibernate.format_sql
 D   g setJpaPropertyMap  EEntityManagerFactory configurado com propriedades de multitenancy: {} -  0  '(Ljava/lang/String;Ljava/lang/Object;)V em DLorg/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean; 
properties Ljava/util/Map; LocalVariableTypeTable 5Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>; 
SourceFile HibernateConfig.java 6Lorg/springframework/context/annotation/Configuration; !                 	 
         
            )      	¸ ³ ±                                      $*·  *+µ "*,µ $*-µ &*µ (² *¹ , ±           &  + 	 ,  -  .  / # 0    4    $ 2 3     $      $ 	 
    $      $ 
   4       	      
    5 6       7      @     ² 8¹ , » :Y· <°       
    9 
 :         2 3    = >       7     8     ¤² ?¹ A » DY· FL+*´ $¶ G+½ KYMSYOSYQS¶ S+*¶ W¶ Y» ]Y*´ "¶ _· eM,hj¹ l W,r*´ &¹ l W,t*´ (¹ l W,vx¹ l W,z¸ |¹ l W,¸ |¹ l W+,¶ ² ,¹  +°       J    D 
 E  F  G ! H + I . G 1 J 9 L H M S N ` O m P x Q  R  T  U ¢ V         ¤ 2 3        H \         H \                 
```
```java
Êþº¾   = d  /br/com/legalconnect/common/config/OpenApiConfig  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this 1Lbr/com/legalconnect/common/config/OpenApiConfig; 
customOpenAPI $()Lio/swagger/v3/oas/models/OpenAPI; RuntimeVisibleAnnotations -Lorg/springframework/context/annotation/Bean;  JWT   io/swagger/v3/oas/models/OpenAPI
  	  "io/swagger/v3/oas/models/info/Info
  	  LegalConnect Gateway API
     title 8(Ljava/lang/String;)Lio/swagger/v3/oas/models/info/Info; ! 1.0
  # $  version & 'API Gateway para o sistema LegalConnect
  ( )  description
  + , - info H(Lio/swagger/v3/oas/models/info/Info;)Lio/swagger/v3/oas/models/OpenAPI; / 5io/swagger/v3/oas/models/security/SecurityRequirement
 . 	
 . 2 3 4 addList K(Ljava/lang/String;)Lio/swagger/v3/oas/models/security/SecurityRequirement;
  6 7 8 addSecurityItem [(Lio/swagger/v3/oas/models/security/SecurityRequirement;)Lio/swagger/v3/oas/models/OpenAPI; : #io/swagger/v3/oas/models/Components
 9 	 = 0io/swagger/v3/oas/models/security/SecurityScheme
 < 	
 < @ A B name F(Ljava/lang/String;)Lio/swagger/v3/oas/models/security/SecurityScheme;	 D F E 5io/swagger/v3/oas/models/security/SecurityScheme$Type G H HTTP 7Lio/swagger/v3/oas/models/security/SecurityScheme$Type;
 < J K L type k(Lio/swagger/v3/oas/models/security/SecurityScheme$Type;)Lio/swagger/v3/oas/models/security/SecurityScheme; N bearer
 < P Q B scheme
 < S T B bearerFormat
 9 V W X addSecuritySchemes k(Ljava/lang/String;Lio/swagger/v3/oas/models/security/SecurityScheme;)Lio/swagger/v3/oas/models/Components;
  Z [ \ 
components I(Lio/swagger/v3/oas/models/Components;)Lio/swagger/v3/oas/models/OpenAPI; securitySchemeName Ljava/lang/String; 
SourceFile OpenApiConfig.java 6Lorg/springframework/context/annotation/Configuration; InnerClasses Type !               /     *· ±    
       
          
                  Ö     ^L» Y· » Y· ¶  ¶ "%¶ '¶ *» .Y· 0¶ 1¶ 5» 9Y· ;» <Y· >¶ ?² C¶ IM¶ O¶ R¶ U¶ Y°    
   J       
           #  2  9  ;  B  G  M  R  W  Z  ]         ^  
    [ ] ^   _    `      a   b   
  D < c@
```
```java
Êþº¾   = ¹  8br/com/legalconnect/common/config/TenantMigrationService  java/lang/Object log Lorg/slf4j/Logger; 
dataSource Ljavax/sql/DataSource; flywayLocations [Ljava/lang/String; RuntimeVisibleAnnotations 4Lorg/springframework/beans/factory/annotation/Value; value ${spring.flyway.locations} flywayBaselineOnMigrate Z $${spring.flyway.baseline-on-migrate} flywayBaselineVersion Ljava/lang/String; !${spring.flyway.baseline-version} defaultTenantIdString  ${application.tenant.default-id} defaultTenantId Ljava/util/UUID; <clinit> ()V Code
    org/slf4j/LoggerFactory   ! 	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	  #   LineNumberTable LocalVariableTable <init> (Ljavax/sql/DataSource;)V
  ) & 	  +   this :Lbr/com/legalconnect/common/config/TenantMigrationService; MethodParameters init "Ljakarta/annotation/PostConstruct;	  2  
 4 6 5 java/util/UUID 7 8 
fromString $(Ljava/lang/String;)Ljava/util/UUID;	  :   migrateAllTenantsOnStartup = AIniciando migraÃ§Ãµes do Flyway para todos os tenants existentes. ? A @ org/slf4j/Logger B C info (Ljava/lang/String;)V
 4 E F G toString ()Ljava/lang/String;
 I K J <br/com/legalconnect/common/config/multitenancy/TenantContext L C setCurrentTenant
  N O C 
migrateTenant Q 8MigraÃ§Ãµes do Flyway para todos os tenants concluÃ­das. S 7Erro ao executar migraÃ§Ãµes do Flyway para tenants: {}
 U W V java/lang/Exception X G 
getMessage ? Z [ \ error 9(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V ^ java/lang/RuntimeException ` +Falha ao migrar tenants na inicializaÃ§Ã£o.
 ] b & c *(Ljava/lang/String;Ljava/lang/Throwable;)V e Ljava/lang/Exception; 
StackMapTable
  h i C createSchemaIfNotExist 
schemaName l n m javax/sql/DataSource o p 
getConnection ()Ljava/sql/Connection; r t s java/sql/Connection u v createStatement ()Ljava/sql/Statement; x  CREATE SCHEMA IF NOT EXISTS "%s"
 z | { java/lang/String } ~ format 9(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;    java/sql/Statement   execute (Ljava/lang/String;)Z  +Esquema '{}' verificado/criado com sucesso. ?    debug '(Ljava/lang/String;Ljava/lang/Object;)V     close r 
    java/lang/Throwable   
addSuppressed (Ljava/lang/Throwable;)V  (Erro ao criar/verificar esquema '{}': {}
  W  java/sql/SQLException ?  [  ((Ljava/lang/String;[Ljava/lang/Object;)V       makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String; 
connection Ljava/sql/Connection; 	statement Ljava/sql/Statement; sql Ljava/sql/SQLException; 
SourceFile TenantMigrationService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
 ¬ ® ­ $java/lang/invoke/StringConcatFactory  ¯ (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; « ² "Falha ao criar/verificar esquema  InnerClasses µ %java/lang/invoke/MethodHandles$Lookup · java/lang/invoke/MethodHandles Lookup !                 	 
         
s             
s             
s             
s               )      	¸ ³ "±    $        %       & '     F     
*· (*+µ *±    $       /  0 	 2 %       
 , -     
    .        /        0      :     **´ 1¸ 3µ 9±    $   
    6  7 %        , -    ;        0      ­     H² "<¹ > *´ 9¶ D¸ H**´ 9¶ D¶ M² "P¹ > § L² "R+¶ T+¹ Y » ]Y_+· a¿±   ) , U  $   "    @ 
 K  L  S ) T - U < V G [ %       H , -   -  d e  f    l U  O C     >     *+¶ g±    $   
    e   %        , -      j   .    j    i C    »     ÓMN*´ *¹ k :¹ q :w½ Y+S¸ y:¹  W+¸ H² "+¹  Æ ¹  § MÆ 
¹  ,¿Æ r¹  § hN,Ç -M§ 
,-¥ ,-¶ Æ 
¹  ,¿N,Ç -M§ 
,-¥ ,-¶ ,¿M² "½ Y+SY,¶ SY,S¹  » ]Y+º   ,· a¿±   @ O    ^ m          ¥ ¥   $   * 
        '  1  5  @  ¦  Ã   Ò ¢ %   >    Ó , -     Ó j    ~ ¡ ¢   D £ ¤  '  ¥   ¦ , d ¦  f   B ÿ O   z   r   ú N 		ú A 		ÿ    z  , .    j    §    ¨      ©   ª     °  ± ³   
  ´ ¶ ¸ 
```
```java
Êþº¾   = 9  +br/com/legalconnect/common/config/WebConfig  java/lang/Object  Borg/springframework/web/servlet/config/annotation/WebMvcConfigurer log Lorg/slf4j/Logger; tenantInterceptor BLbr/com/legalconnect/common/config/multitenancy/TenantInterceptor; <clinit> ()V Code
    org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable addInterceptors J(Lorg/springframework/web/servlet/config/annotation/InterceptorRegistry;)V  Registrando TenantInterceptor.    org/slf4j/Logger   ! debug (Ljava/lang/String;)V	  # 	 

 % ' & Eorg/springframework/web/servlet/config/annotation/InterceptorRegistry ( ) addInterceptor (Lorg/springframework/web/servlet/HandlerInterceptor;)Lorg/springframework/web/servlet/config/annotation/InterceptorRegistration; this -Lbr/com/legalconnect/common/config/WebConfig; registry GLorg/springframework/web/servlet/config/annotation/InterceptorRegistry; MethodParameters <init> E(Lbr/com/legalconnect/common/config/multitenancy/TenantInterceptor;)V RuntimeInvisibleAnnotations Llombok/Generated;
  4 /  
SourceFile WebConfig.java RuntimeVisibleAnnotations 6Lorg/springframework/context/annotation/Configuration; !            	 
        
   )      	¸ ³ ±                      
   P     ² ¹  +*´ "¶ $W±           ! 
 "  #         * +      , -  .    ,    / 0  1     2   
   >     
*· 3*+µ "±                   
 * +     
 	 
  .    	   5    6 7     8  
```
```java
Êþº¾   = A  Rbr/com/legalconnect/common/config/multitenancy/CurrentTenantIdentifierResolverImpl  java/lang/Object  9org/hibernate/context/spi/CurrentTenantIdentifierResolver log Lorg/slf4j/Logger; DEFAULT_TENANT_ID Ljava/lang/String; 
ConstantValue 
 public <clinit> ()V Code
    org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>
     this TLbr/com/legalconnect/common/config/multitenancy/CurrentTenantIdentifierResolverImpl; resolveCurrentTenantIdentifier ()Ljava/lang/String;
 # % $ <br/com/legalconnect/common/config/multitenancy/TenantContext & ! getCurrentTenant ( =Nenhum tenant definido no contexto, usando tenant padrÃ£o: {} * , + org/slf4j/Logger - . debug '(Ljava/lang/String;Ljava/lang/Object;)V 0 Resolvendo tenant atual: {} * 2 3 . trace tenantId 
StackMapTable 7 java/lang/String validateExistingCurrentSessions ()Z ()Ljava/lang/Object;
  <   ! 
SourceFile (CurrentTenantIdentifierResolverImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; !            	 
               -      	¸ ³ ±       
                    /     *· ±                           !     z     $¸ "L+Ç ² '¹ ) °² /+¹ 1 +°                    " " #        $        4 
  5    ü  6  8 9     ,     ¬           -            A   :     %     *¶ ;°                   =    > ?     @  
```
```java
Êþº¾   = ¡  Pbr/com/legalconnect/common/config/multitenancy/MultiTenantConnectionProviderImpl  java/lang/Object  Gorg/hibernate/engine/jdbc/connections/spi/MultiTenantConnectionProvider log Lorg/slf4j/Logger; 
dataSource Ljavax/sql/DataSource; <clinit> ()V Code
    org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init> (Ljavax/sql/DataSource;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired;
    	   	 
 ! >MultiTenantConnectionProviderImpl inicializado com DataSource. # % $ org/slf4j/Logger & ' debug (Ljava/lang/String;)V this RLbr/com/legalconnect/common/config/multitenancy/MultiTenantConnectionProviderImpl; MethodParameters getAnyConnection ()Ljava/sql/Connection; 
Exceptions / java/sql/SQLException 1 (Obtendo qualquer conexÃ£o do DataSource. # 3 4 ' trace 6 8 7 javax/sql/DataSource 9 , 
getConnection releaseAnyConnection (Ljava/sql/Connection;)V = Liberando qualquer conexÃ£o. ? A @ java/sql/Connection B  close 
connection Ljava/sql/Connection; )(Ljava/lang/Object;)Ljava/sql/Connection; G "Obtendo conexÃ£o para o tenant: {} # I & J '(Ljava/lang/String;Ljava/lang/Object;)V
  L + , ? N O P createStatement ()Ljava/sql/Statement;
 R T S java/lang/String U V valueOf &(Ljava/lang/Object;)Ljava/lang/String;   X Y Z makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String; \ ^ ] java/sql/Statement _ ` execute (Ljava/lang/String;)Z b $Schema da conexÃ£o definido para: {} # d 4 J f 0Erro ao definir search_path para o tenant {}: {}
 . h i j 
getMessage ()Ljava/lang/String; # l m n error ((Ljava/lang/String;[Ljava/lang/Object;)V tenantIdentifier Ljava/lang/Object; e Ljava/sql/SQLException; 
StackMapTable releaseConnection *(Ljava/lang/Object;Ljava/sql/Connection;)V w $Liberando conexÃ£o para o tenant: {}
  y : ; supportsAggressiveRelease ()Z isUnwrappableAs (Ljava/lang/Class;)Z
     getClass ()Ljava/lang/Class;
    java/lang/Class  } isAssignableFrom 
unwrapType Ljava/lang/Class; unwrap %(Ljava/lang/Class;)Ljava/lang/Object; 	Signature 1<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)TT; LocalVariableTypeTable Ljava/lang/Class<TT;>; 
SourceFile &MultiTenantConnectionProviderImpl.java *Lorg/springframework/stereotype/Component; BootstrapMethods
    $java/lang/invoke/StringConcatFactory Y  (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;   SET search_path to "", public InnerClasses  %java/lang/invoke/MethodHandles$Lookup  java/lang/invoke/MethodHandles Lookup !            	 
   	     
   )      	¸ ³ ±                              
   T     *· *+µ ²  ¹ " ±              	            ( )      	 
  *    	    + ,  -     . 
   B     ² 0¹ 2 *´ ¹ 5 °       
    ( 
 )         ( )    : ;  -     . 
   M     ² <¹ 2 +¹ > ±           4 
 5  6         ( )      C D  *    C    9 E  -     . 
   Ý     U² F+¹ H *¶ KM,¹ M +¸ Qº W  ¹ [ W² a+¹ c § #N² e½ Y+SY-¶ gSY-S¹ k -¿,°   0 3 .     "    C  D  H % I 0 J 4 K Q L S N    *    U ( )     U o p   E C D  4  q r  s    ÿ 3    ?  . *    o    t u  -     . 
   W     ² v+¹ H *,¶ x±           Z  [  \          ( )      o p     C D  *   	 o   C    z {  
   ,     ¬           e         ( )    | }  
   =     	+*¶ ~¶ ¬           q        	 ( )     	    *                
   f     +*¶ ~¶  *°°           {  | 
 ~         ( )                    s    
 *                                
      
```
```java
Êþº¾   = P  <br/com/legalconnect/common/config/multitenancy/TenantContext  java/lang/Object log Lorg/slf4j/Logger; 
currentTenant Ljava/lang/ThreadLocal; 	Signature +Ljava/lang/ThreadLocal<Ljava/lang/String;>; MDC_TENANT_ID_KEY Ljava/lang/String; 
ConstantValue  tenantId <clinit> ()V Code
    org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	      java/lang/ThreadLocal
     <init>	  !   LineNumberTable LocalVariableTable
   this >Lbr/com/legalconnect/common/config/multitenancy/TenantContext; setCurrentTenant (Ljava/lang/String;)V
  * + , set (Ljava/lang/Object;)V
 . 0 / 
org/slf4j/MDC 1 2 put '(Ljava/lang/String;Ljava/lang/String;)V 4 *Tenant ID '{}' definido no contexto e MDC. 6 8 7 org/slf4j/Logger 9 : trace '(Ljava/lang/String;Ljava/lang/Object;)V MethodParameters getCurrentTenant ()Ljava/lang/String;
  ? @ A get ()Ljava/lang/Object; C java/lang/String clear
  F G  remove
 . I G ( K %Tenant ID removido do contexto e MDC. 6 M 9 ( 
SourceFile TenantContext.java !               	    
     
             ;      ¸ ³ » Y· ³  ±    "            #             /     *· $±    "        #        % &   	 ' (     O     ²  *¶ )*¸ -² 3*¹ 5 ±    "          
    #            ;       	 < =     *      
²  ¶ >À B°    "       ' #      	 D      B      ²  ¶ E¸ H² J¹ L ±    "       0  1  2  3 #       N    O
```
```java
Êþº¾   = i  @br/com/legalconnect/common/config/multitenancy/TenantInterceptor  java/lang/Object  2org/springframework/web/servlet/HandlerInterceptor log Lorg/slf4j/Logger; 
TENANT_HEADER Ljava/lang/String; 
ConstantValue 
 X-Tenant-ID defaultTenantId RuntimeVisibleAnnotations 4Lorg/springframework/beans/factory/annotation/Value; value  ${application.tenant.default-id} <clinit> ()V Code
    org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>
  "    this BLbr/com/legalconnect/common/config/multitenancy/TenantInterceptor; 	preHandle h(Ljakarta/servlet/http/HttpServletRequest;Ljakarta/servlet/http/HttpServletResponse;Ljava/lang/Object;)Z 
Exceptions ) java/lang/Exception "RuntimeVisibleParameterAnnotations "Lorg/springframework/lang/NonNull; - / . 'jakarta/servlet/http/HttpServletRequest 0 1 	getHeader &(Ljava/lang/String;)Ljava/lang/String;
 3 5 4 java/lang/String 6 7 isEmpty ()Z	  9  

 ; = < <br/com/legalconnect/common/config/multitenancy/TenantContext > ? setCurrentTenant (Ljava/lang/String;)V A 7Tenant ID '{}' extraÃ­do do cabeÃ§alho da requisiÃ§Ã£o. C E D org/slf4j/Logger F G debug '(Ljava/lang/String;Ljava/lang/Object;)V I ECabeÃ§alho '{}' nÃ£o encontrado ou vazio. Usando tenant padrÃ£o '{}'. C K L M warn 9(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V request )Ljakarta/servlet/http/HttpServletRequest; response *Ljakarta/servlet/http/HttpServletResponse; handler Ljava/lang/Object; tenantId 
StackMapTable MethodParameters 
postHandle (Ljakarta/servlet/http/HttpServletRequest;Ljakarta/servlet/http/HttpServletResponse;Ljava/lang/Object;Lorg/springframework/web/servlet/ModelAndView;)V modelAndView .Lorg/springframework/web/servlet/ModelAndView; afterCompletion }(Ljakarta/servlet/http/HttpServletRequest;Ljakarta/servlet/http/HttpServletResponse;Ljava/lang/Object;Ljava/lang/Exception;)V
 ; ^ _  clear a )TenantContext limpo apÃ³s a requisiÃ§Ã£o. C c F ? ex Ljava/lang/Exception; 
SourceFile TenantInterceptor.java *Lorg/springframework/stereotype/Component; !            	 
         
         s          -      	¸ ³ ±       
                     /     *· !±                    # $    % &  '     ( *     +    +    +      Ë     F+¹ , :Æ !¶ 2 *´ 8¸ :² @¹ B § *´ 8¸ :² H*´ 8¹ J ¬       * 
   - 
 /  0  1 * 2 - 4 4 5 ; 6 ? 5 D 8    4    F # $     F N O    F P Q    F R S  
 < T 
  U   	 ü - 3 V   
 N   P   R    W X  '     ( *     +    +    +        S      ±           M    4     # $      N O     P Q     R S     Y Z  V    N   P   R   Y    [ \  '     ( *     +    +    +        h     ¸ ]² `¹ b ±           _  ` 
 a    4     # $      N O     P Q     R S     d e  V    N   P   R   d    f    g      h  
```
```java
artifactId=common-tenent
groupId=br.com.legalconnect.common
version=1.0.0

```
```java
br\com\legalconnect\common\config\multitenancy\CurrentTenantIdentifierResolverImpl.class
br\com\legalconnect\common\config\TenantMigrationService.class
br\com\legalconnect\common\config\HibernateConfig.class
br\com\legalconnect\common\config\WebConfig.class
br\com\legalconnect\common\config\multitenancy\TenantContext.class
br\com\legalconnect\common\config\multitenancy\MultiTenantConnectionProviderImpl.class
br\com\legalconnect\common\config\OpenApiConfig.class
br\com\legalconnect\common\config\multitenancy\TenantInterceptor.class

```
```java
E:\legalconnect\legalconnect\microservices\common-tenent\src\main\java\br\com\legalconnect\common\config\multitenancy\TenantInterceptor.java
E:\legalconnect\legalconnect\microservices\common-tenent\src\main\java\br\com\legalconnect\common\config\multitenancy\CurrentTenantIdentifierResolverImpl.java
E:\legalconnect\legalconnect\microservices\common-tenent\src\main\java\br\com\legalconnect\common\config\TenantMigrationService.java
E:\legalconnect\legalconnect\microservices\common-tenent\src\main\java\br\com\legalconnect\common\config\multitenancy\TenantContext.java
E:\legalconnect\legalconnect\microservices\common-tenent\src\main\java\br\com\legalconnect\common\config\HibernateConfig.java
E:\legalconnect\legalconnect\microservices\common-tenent\src\main\java\br\com\legalconnect\common\config\multitenancy\MultiTenantConnectionProviderImpl.java
E:\legalconnect\legalconnect\microservices\common-tenent\src\main\java\br\com\legalconnect\common\config\OpenApiConfig.java
E:\legalconnect\legalconnect\microservices\common-tenent\src\main\java\br\com\legalconnect\common\config\WebConfig.java

```
```java

```
```java

```
```java
version: '3.8'
services:
  nginx:
    image: seu_nginx_image
    ports:
      - "80:80"
      - "443:443"
    environment:
      # Estas variáveis devem ser definidas aqui se você as usa em um template Nginx
      AUTH_SERVICE_HOST: auth-service
      AUTH_SERVICE_PORT: 8082
      USER_SERVICE_HOST: user-service
      USER_SERVICE_PORT: 8083
      # ... e assim por diante para todos os seus serviços
    depends_on:
      - auth-service
      - user-service
      # ...
    networks:
      - minha_rede_app # Ambos os serviços devem estar na mesma rede

  auth-service:
    image: seu_auth_service_image
    networks:
      - minha_rede_app

  user-service:
    image: seu_user_service_image
    networks:
      - minha_rede_app

networks:
  minha_rede_app:
    driver: bridge
```
```java
# Use a imagem oficial do NGINX como base
FROM nginx:alpine

# Remove a configuração padrão (se existir)
RUN rm -f /etc/nginx/nginx.conf

# Cria diretório para nossos arquivos de configuração
WORKDIR /app

# Copia o arquivo de configuração (certifique-se que nginx.conf é um arquivo, não diretório)
COPY  /nginx/nginx.conf /etc/nginx/nginx.conf

# Verifica se o arquivo foi copiado corretamente
RUN ls -la /etc/nginx/ && \
    test -f /etc/nginx/nginx.conf && \
    echo "Arquivo de configuração existe" || \
    (echo "ERRO: nginx.conf não é um arquivo válido" && exit 1)

# Verifica a sintaxe do NGINX
RUN nginx -t

# Expõe a porta 80
EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
```
```java
# Use a imagem oficial do NGINX como base
FROM nginx:latest

# Remove o arquivo de configuração padrão
RUN rm /etc/nginx/nginx.conf

# Copia o arquivo de configuração personalizado
COPY ./nginx.conf /etc/nginx/nginx.conf

# Verifica a sintaxe do arquivo de configuração
RUN nginx -t

# Expõe a porta 80
EXPOSE 80

# Comando para iniciar o NGINX
CMD ["nginx", "-g", "daemon off;"]
```
```java
# /infrastructure/nginx/nginx.conf

worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;

    # Compressão Gzip para melhorar a velocidade de carregamento
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types application/javascript application/json application/xml text/css text/javascript text/plain text/xml;

    # Definição dos backends (microsserviços) - TODOS APONTANDO PARA LOCALHOST
    # As portas devem ser as mesmas que seus microsserviços Spring Boot estão configurados para rodar.
    upstream auth_service {
        server localhost:8082; # auth-service rodando localmente na porta 8081
    }

    upstream user_profile_service {
        server localhost:8083; # user-profile-service rodando localmente na porta 8082
    }

    upstream lawyer_profile_service {
        server localhost:8084; # lawyer-profile-service rodando localmente na porta 8083
    }

    upstream service_scheduling_service {
        server localhost:8085; # service-scheduling-service rodando localmente na porta 8084
    }

    upstream payment_subscription_service {
        server localhost:8086; # payment-subscription-service rodando localmente na porta 8085
    }

    upstream communication_lead_service {
        server localhost:8087; # communication-lead-service rodando localmente na porta 8086
    }

    upstream review_visit_service {
        server localhost:8088; # review-visit-service rodando localmente na porta 8087
    }

    upstream admin_platform_service {
        server localhost:8089; # admin-platform-service rodando localmente na porta 8088
    }

    upstream public_api_gateway {
        server localhost:8090; # public-api-gateway rodando localmente na porta 8089
    }

    # Servidor principal para o API Gateway
    server {
        listen 80; # Nginx escuta na porta 80

        # Para desenvolvimento, permita CORS para todos os origens
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

        # Manipula requisições OPTIONS (preflight CORS)
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Roteamento dos Microsserviços para seus endereços locais
        location /auth/ {
            proxy_pass http://auth_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /public/ {
            proxy_pass http://public_api_gateway/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /users/ {
            proxy_pass http://user_profile_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /lawyers/ {
            proxy_pass http://lawyer_profile_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /services/ {
            proxy_pass http://service_scheduling_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /schedule/ {
            proxy_pass http://service_scheduling_service/agendamento/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /payments/ {
            proxy_pass http://payment_subscription_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /subscriptions/ {
            proxy_pass http://payment_subscription_service/plano/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /messages/ {
            proxy_pass http://communication_lead_service/mensagem/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /leads/ {
            proxy_pass http://communication_lead_service/lead/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /reviews/ {
            proxy_pass http://review_visit_service/avaliacao/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /visits/ {
            proxy_pass http://review_visit_service/visit/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /admin/ {
            proxy_pass http://admin_platform_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            return 200 'Nginx API Gateway is running!';
            add_header Content-Type text/plain;
        }
    }
}
```
```java
# /infrastructure/nginx/nginx.conf

worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;

    # Compressão Gzip para melhorar a velocidade de carregamento
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types application/javascript application/json application/xml text/css text/javascript text/plain text/xml;

    # Definição dos backends (microsserviços) - TODOS APONTANDO PARA LOCALHOST
    # As portas devem ser as mesmas que seus microsserviços Spring Boot estão configurados para rodar.
    upstream auth_service {
        server localhost:8081; # auth-service rodando localmente na porta 8081
    }

    upstream user_profile_service {
        server localhost:8082; # user-profile-service rodando localmente na porta 8082
    }

    upstream lawyer_profile_service {
        server localhost:8083; # lawyer-profile-service rodando localmente na porta 8083
    }

    upstream service_scheduling_service {
        server localhost:8084; # service-scheduling-service rodando localmente na porta 8084
    }

    upstream payment_subscription_service {
        server localhost:8085; # payment-subscription-service rodando localmente na porta 8085
    }

    upstream communication_lead_service {
        server localhost:8086; # communication-lead-service rodando localmente na porta 8086
    }

    upstream review_visit_service {
        server localhost:8087; # review-visit-service rodando localmente na porta 8087
    }

    upstream admin_platform_service {
        server localhost:8088; # admin-platform-service rodando localmente na porta 8088
    }

    upstream public_api_gateway {
        server localhost:8089; # public-api-gateway rodando localmente na porta 8089
    }

    # Servidor principal para o API Gateway
    server {
        listen 80; # Nginx escuta na porta 80

        # Para desenvolvimento, permita CORS para todos os origens
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

        # Manipula requisições OPTIONS (preflight CORS)
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Roteamento dos Microsserviços para seus endereços locais
        location /auth/ {
            proxy_pass http://auth_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /public/ {
            proxy_pass http://public_api_gateway/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /users/ {
            proxy_pass http://user_profile_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /lawyers/ {
            proxy_pass http://lawyer_profile_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /services/ {
            proxy_pass http://service_scheduling_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /schedule/ {
            proxy_pass http://service_scheduling_service/agendamento/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /payments/ {
            proxy_pass http://payment_subscription_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /subscriptions/ {
            proxy_pass http://payment_subscription_service/plano/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /messages/ {
            proxy_pass http://communication_lead_service/mensagem/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /leads/ {
            proxy_pass http://communication_lead_service/lead/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /reviews/ {
            proxy_pass http://review_visit_service/avaliacao/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /visits/ {
            proxy_pass http://review_visit_service/visit/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /admin/ {
            proxy_pass http://admin_platform_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            return 200 'Nginx API Gateway is running!';
            add_header Content-Type text/plain;
        }
    }
}
```
```java
events {
    worker_connections 1024; # Número de conexões por worker process
}

http {
    # Define os upstreams para cada microsserviço.
    # 'host.docker.internal' é usado para que o contêiner Nginx possa se comunicar
    # com os microsserviços rodando diretamente na máquina host.
    # As portas são as portas padrão de cada microsserviço (conforme application.yml de cada um).
    upstream auth_service_local {
        server host.docker.internal:8081; # Porta do Auth Service
    }
    upstream user_profile_service_local {
        server host.docker.internal:8082; # Porta do User Profile Service
    }
    upstream lawyer_profile_service_local {
        server host.docker.internal:8083; # Porta do Lawyer Profile Service
    }
    upstream service_scheduling_service_local {
        server host.docker.internal:8084; # Porta do Service Scheduling Service
    }
    upstream payment_subscription_service_local {
        server host.docker.internal:8085; # Porta do Payment Subscription Service
    }
    upstream communication_lead_service_local {
        server host.docker.internal:8086; # Porta do Communication Lead Service
    }
    upstream review_visit_service_local {
        server host.docker.internal:8087; # Porta do Review Visit Service
    }
    upstream admin_platform_service_local {
        server host.docker.internal:8088; # Porta do Admin Platform Service
    }
    upstream public_api_gateway_local {
        server host.docker.internal:8089; # Porta do Public API Gateway
    }

    # Bloco de servidor HTTP (porta 80) para redirecionamento para HTTPS
    server {
        listen 80; # Nginx escutando na porta 80 (HTTP)
        server_name localhost; # Para acesso local via localhost
        # Redireciona todas as requisições HTTP para HTTPS.
        # Em desenvolvimento, você pode comentar esta linha se não estiver usando HTTPS localmente.
        return 301 https://$host$request_uri;
    }

    # Bloco de servidor HTTPS (porta 443)
    server {
        listen 443 ssl; # Nginx escutando na porta 443 (HTTPS)
        server_name localhost; # Para acesso local via localhost

        # Configuração SSL/TLS para desenvolvimento local.
        # Certifique-se de que estes arquivos existam no contêiner Nginx
        # (montados a partir do seu sistema de arquivos local).
        ssl_certificate /etc/nginx/certs/legalconnect-dev.crt;
        ssl_certificate_key /etc/nginx/certs/legalconnect-dev.key;
        ssl_protocols TLSv1.2 TLSv1.3; # Protocolos SSL/TLS seguros
        ssl_prefer_server_ciphers on; # Preferir cifras do servidor
        ssl_ciphers HIGH:!aNULL:!MD5; # Cifras seguras

        # Configurações de segurança adicionais para cabeçalhos HTTP (boas práticas)
        add_header X-Frame-Options "DENY"; # Previne clickjacking
        add_header X-Content-Type-Options "nosniff"; # Previne MIME-sniffing
        add_header X-XSS-Protection "1; mode=block"; # Proteção contra XSS
        add_header Referrer-Policy "no-referrer-when-downgrade"; # Controle de informações do referrer

        # Configuração de validação JWT para o Nginx.
        # O Nginx buscará o JWKS (JSON Web Key Set) do endpoint público do auth-service.
        # Este endpoint deve ser acessível pelo Nginx (host.docker.internal).
        # O Nginx irá armazenar em cache e periodicamente atualizar as chaves.
        auth_jwt_key_file "http://host.docker.internal:8081/.well-known/jwks.json";
        auth_jwt_realm "LegalConnect Protected Area"; # Nome do realm para o desafio de autenticação (aparece em erros 401)

        # ---------------------------------------------------------------------
        # Roteamento para Microsserviços e Aplicação de Validação JWT
        # ---------------------------------------------------------------------

        # Roteamento para o serviço de autenticação (endpoints públicos que não precisam de JWT)
        # Este é o serviço que EMITE o token, então suas rotas de login/refresh não devem validar JWT.
        location /api/v1/public/auth/ {
            proxy_pass http://auth_service_local/api/v1/public/auth/;
            proxy_set_header Host $host; # Preserva o cabeçalho Host original
            proxy_set_header X-Real-IP $remote_addr; # Endereço IP real do cliente
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Cadeia de proxies
            proxy_set_header X-Forwarded-Proto $scheme; # Protocolo original (HTTP/HTTPS)
        }

        # Endpoint para o JWKS (chave pública do JWT)
        # Este endpoint é público para que o Nginx e outros clientes possam obter as chaves de validação.
        location /.well-known/jwks.json {
            proxy_pass http://auth_service_local/.well-known/jwks.json;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Roteamento para o serviço de perfil de usuário (PROTEGIDO por JWT)
        # Exemplo de consumo: /api/v1/users/me, /api/v1/users/{id}
        location /api/v1/users/ {
            auth_jwt "on"; # Ativa a validação JWT para este endpoint
            # Extrai claims do JWT e os injeta como cabeçalhos HTTP para o microsserviço
            proxy_set_header X-User-ID $jwt_claim_sub; # 'sub' é a claim padrão para o ID do sujeito (usuário)
            proxy_set_header X-User-Roles $jwt_claim_roles; # Assume que o JWT tem uma claim 'roles'
            proxy_set_header X-Tenant-ID $jwt_claim_tenantId; # Assume que o JWT tem uma claim 'tenantId'

            proxy_pass http://user_profile_service_local/api/v1/users/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Roteamento para o serviço de perfil de advogado (endpoints PROTEGIDOS)
        # Exemplo de consumo: /api/v1/advogados/me, /api/v1/advogados/documents
        location /api/v1/advogados/me/ {
            auth_jwt "on"; # Ativa a validação JWT
            proxy_set_header X-User-ID $jwt_claim_sub;
            proxy_set_header X-User-Roles $jwt_claim_roles;
            proxy_set_header X-Tenant-ID $jwt_claim_tenantId;
            proxy_pass http://lawyer_profile_service_local/api/v1/advogados/me/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /api/v1/advogados/documents/ {
            auth_jwt "on"; # Ativa a validação JWT
            proxy_set_header X-User-ID $jwt_claim_sub;
            proxy_set_header X-User-Roles $jwt_claim_roles;
            proxy_set_header X-Tenant-ID $jwt_claim_tenantId;
            proxy_pass http://lawyer_profile_service_local/api/v1/advogados/documents/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }


        # Roteamento para o serviço de serviços e agendamento (endpoints PROTEGIDOS)
        # Exemplo de consumo: /api/v1/servicos, /api/v1/agendamentos
        location /api/v1/servicos/ {
            auth_jwt "on";
            proxy_set_header X-User-ID $jwt_claim_sub;
            proxy_set_header X-User-Roles $jwt_claim_roles;
            proxy_set_header X-Tenant-ID $jwt_claim_tenantId;
            proxy_pass http://service_scheduling_service_local/api/v1/servicos/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /api/v1/agendamentos/ {
            auth_jwt "on";
            proxy_set_header X-User-ID $jwt_claim_sub;
            proxy_set_header X-User-Roles $jwt_claim_roles;
            proxy_set_header X-Tenant-ID $jwt_claim_tenantId;
            proxy_pass http://service_scheduling_service_local/api/v1/agendamentos/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Roteamento para o serviço de pagamento e assinatura (endpoints PROTEGIDOS)
        # Exemplo de consumo: /api/v1/planos, /api/v1/assinaturas
        location /api/v1/planos/ {
            auth_jwt "on";
            proxy_set_header X-User-ID $jwt_claim_sub;
            proxy_set_header X-User-Roles $jwt_claim_roles;
            proxy_set_header X-Tenant-ID $jwt_claim_tenantId;
            proxy_pass http://payment_subscription_service_local/api/v1/planos/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /api/v1/assinaturas/ {
            auth_jwt "on";
            proxy_set_header X-User-ID $jwt_claim_sub;
            proxy_set_header X-User-Roles $jwt_claim_roles;
            proxy_set_header X-Tenant-ID $jwt_claim_tenantId;
            proxy_pass http://payment_subscription_service_local/api/v1/assinaturas/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Roteamento para o serviço de comunicação e leads (endpoints PROTEGIDOS)
        # Exemplo de consumo: /api/v1/mensagens, /api/v1/leads
        location /api/v1/mensagens/ {
            auth_jwt "on";
            proxy_set_header X-User-ID $jwt_claim_sub;
            proxy_set_header X-User-Roles $jwt_claim_roles;
            proxy_set_header X-Tenant-ID $jwt_claim_tenantId;
            proxy_pass http://communication_lead_service_local/api/v1/mensagens/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /api/v1/leads/ {
            auth_jwt "on";
            proxy_set_header X-User-ID $jwt_claim_sub;
            proxy_set_header X-User-Roles $jwt_claim_roles;
            proxy_set_header X-Tenant-ID $jwt_claim_tenantId;
            proxy_pass http://communication_lead_service_local/api/v1/leads/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Roteamento para o serviço de avaliação e visita (endpoints PROTEGIDOS)
        # Exemplo de consumo: /api/v1/avaliacoes, /api/v1/perfil-visits
        location /api/v1/avaliacoes/ {
            auth_jwt "on";
            proxy_set_header X-User-ID $jwt_claim_sub;
            proxy_set_header X-User-Roles $jwt_claim_roles;
            proxy_set_header X-Tenant-ID $jwt_claim_tenantId;
            proxy_pass http://review_visit_service_local/api/v1/avaliacoes/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /api/v1/perfil-visits/ {
            auth_jwt "on";
            proxy_set_header X-User-ID $jwt_claim_sub;
            proxy_set_header X-User-Roles $jwt_claim_roles;
            proxy_set_header X-Tenant-ID $jwt_claim_tenantId;
            proxy_pass http://review_visit_service_local/api/v1/perfil-visits/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Roteamento para o serviço de administração da plataforma (endpoints PROTEGIDOS)
        # Exemplo de consumo: /api/v1/admin
        location /api/v1/admin/ {
            auth_jwt "on";
            proxy_set_header X-User-ID $jwt_claim_sub;
            proxy_set_header X-User-Roles $jwt_claim_roles;
            proxy_set_header X-Tenant-ID $jwt_claim_tenantId;
            proxy_pass http://admin_platform_service_local/api/v1/admin/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Roteamento para o Public API Gateway (endpoints PÚBLICOS que NÃO requerem JWT)
        # Estes endpoints são acessíveis sem autenticação forte na borda.
        location /api/v1/public/advogados/ {
            proxy_pass http://public_api_gateway_local/api/v1/advogados/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Tenant-ID $http_x_tenant_id; # Pode ser necessário se a API pública também for multi-tenant
        }
        location /api/v1/public/agendamentos/ {
            proxy_pass http://public_api_gateway_local/api/v1/agendamentos/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Tenant-ID $http_x_tenant_id;
        }
        location /api/v1/public/avaliacoes/ {
            proxy_pass http://public_api_gateway_local/api/v1/avaliacoes/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Tenant-ID $http_x_tenant_id;
        }
        location /api/v1/public/ { # Catch-all para outros endpoints públicos genéricos
            proxy_pass http://public_api_gateway_local/api/v1/public/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Tenant-ID $http_x_tenant_id;
        }

        # Roteamento para documentação da API (Swagger UI) - geralmente não protegido por JWT
        location /v3/api-docs/ {
            proxy_pass http://public_api_gateway_local/v3/api-docs/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /swagger-ui/ {
            proxy_pass http://public_api_gateway_local/swagger-ui/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Fallback para qualquer outra requisição não mapeada
        location / {
            return 404 "Recurso não encontrado no LegalConnect API Gateway.";
            add_header Content-Type text/plain;
        }
    }
}

# docker run --name legalconnect-nginx-local -p 80:80   -v E:/legalconnect/microservices/infrastructure/nginx/nginx-local-dev.conf:/etc/nginx/nginx.conf:ro            nginx:latest
# docker run --name legalconnect-nginx-local -p 80:80 -p 443:443  -v E:/legalconnect/microservices/infrastructure/nginx/nginx-local-dev.conf:/etc/nginx/nginx.conf:ro   -v E:/legalconnect/infrastructure/nginx/certs:/etc/nginx/certs:ro  legalconnect-nginx-jwt:latest
# docker run --name legalconnect-nginx-local -p 80:80 -p 443:443  -v E:/legalconnect/microservices/infrastructure/nginx/nginx-local-dev.conf:/etc/nginx/nginx.conf:ro   -v E:/legalconnect/infrastructure/nginx/certs:/etc/nginx/certs:ro  legalconnect-nginx-jwt:latest 

# docker run --name legalconnect-nginx -p 80:80   -v ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro ` nginx:latest
```
```java
user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ==================== OTIMIZAÇÕES GLOBAIS ====================
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 75s;
    server_tokens off;
    client_max_body_size 20M;
    
    # Cache de arquivos abertos
    open_file_cache max=2000 inactive=20s;
    open_file_cache_valid 60s;
    open_file_cache_min_uses 5;
    open_file_cache_errors off;

    # ==================== COMPRESSÃO ====================
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 256;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/x-javascript
        application/xml
        font/opentype
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # ==================== CORS (ADAPTADO PARA AMBIENTE LOCAL) ====================
    # Permite origens locais (ex: localhost:3000, 127.0.0.1:8080)
    map $http_origin $cors_origin {
        default "";
        "~^https?://([a-z0-9-]+\.)?legalconnect\.com\.br(:[0-9]+)?$" $http_origin; # Manter para compatibilidade se precisar testar com domínio real
        "~^https?://localhost(:[0-9]+)?$" $http_origin;
        "~^https?://127\.0\.0\.1(:[0-9]+)?$" $http_origin; # Adicionado para 127.0.0.1
        "~^https?://0\.0\.0\.0(:[0-9]+)?$" $http_origin; # Adicionado para 0.0.0.0
    }

    # ==================== UPSTREAMS (ADAPTADO PARA SERVIÇOS LOCAIS) ====================
    # Assumindo que seus microsserviços estão rodando em localhost com portas diferentes
    upstream auth_service { server 127.0.0.1:8082; keepalive 32; }
    upstream user_profile_service { server 127.0.0.1:8083; keepalive 32; }
    upstream lawyer_profile_service { server 127.0.0.1:8084; keepalive 32; }
    upstream service_scheduling_service { server 127.0.0.1:8085; keepalive 32; }
    upstream payment_subscription_service { server 127.0.0.1:8086; keepalive 32; }
    upstream communication_lead_service { server 127.0.0.1:8087; keepalive 32; }
    upstream review_visit_service { server 127.0.0.1:8088; keepalive 32; }
    upstream admin_platform_service { server 127.0.0.1:8089; keepalive 32; }
    upstream public_api_gateway { server 127.0.0.1:8090; keepalive 32; } # Exemplo, ajuste a porta se o gateway não for 8090
    
    # Se você quiser que o Nginx sirva na porta 80, e os serviços na 80xx:
    # upstream auth_service { server localhost:8082; keepalive 32; }
    # ... e assim por diante.

    # ==================== SERVIDOR HTTP (PARA DEBUG LOCAL MAIS SIMPLES) ====================
    # Para simplificar o debug local, é mais comum rodar em HTTP.
    # Você pode manter o HTTPS se tiver um certificado autoassinado, mas para debug, HTTP é suficiente.
    server {
        listen 80; # Usar a porta 80 para facilitar o acesso local
        listen [::]:80;
        server_name localhost 127.0.0.1; # Adicionar localhost e 127.0.0.1

        # Nginx não emitirá HTTPS localmente, então removemos as configurações SSL
        # Caso queira HTTPS localmente, você precisará gerar certificados autoassinados
        # e ajustar os caminhos e configurações ssl_*.

        # ==================== HEADERS DE SEGURANÇA (MANTIDOS) ====================
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        add_header Permissions-Policy "geolocation=(), camera=(), microphone=()";

        # ==================== CONFIGURAÇÃO CORS ====================
        # O $cors_origin agora permite localhost e 127.0.0.1
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Tenant-ID, X-Requested-With' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Disposition' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        location / {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Se você tiver uma interface web que precise ser servida pelo Nginx localmente,
            # ajuste o root para o diretório dos seus arquivos estáticos.
            # Se o Nginx for apenas um proxy para APIs, pode remover ou deixar como está.
            root /usr/share/nginx/html; 
            index index.html;
            try_files $uri $uri/ =404;
        }

        # ==================== CONFIGURAÇÃO DOS MICROSSERVIÇOS ====================
        # A lógica para direcionar os microsserviços permanece a mesma,
        # mas agora eles apontam para 127.0.0.1 nas portas especificadas nos upstreams.
        location ~ ^/(auth|users|lawyers|services|payments|admin|communications|reviews)/ {
            proxy_pass http://${service}_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # ==================== SWAGGER UI CONFIGURADO PROFISSIONALMENTE ====================
        location ~ ^/(?<service>auth|user|lawyer|scheduling|payment|communication|review|admin)-docs/?$ {
            # O proxy_pass apontará para localhost:PORTA do seu serviço
            proxy_pass http://${service}-service/swagger-ui/; 
            proxy_set_header Host $host;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Fix para recursos estáticos do Swagger
            sub_filter_once off;
            sub_filter_types *;
            sub_filter '/swagger-ui/' '/$service-docs/';
            sub_filter 'url: "' 'url: "/$service-api"';
        }

        location ~ ^/(?<service>auth|user|lawyer|scheduling|payment|communication|review|admin)-api$ {
            # O proxy_pass apontará para localhost:PORTA do seu serviço
            proxy_pass http://${service}-service/v3/api-docs;
            proxy_set_header Host $host;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # ==================== HEALTH CHECKS ====================
        location /health {
            access_log off;
            add_header Content-Type application/json;
            return 200 '{"status":"healthy"}';
        }

        # ==================== MONITORAMENTO ====================
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }

        # ==================== PÁGINAS DE ERRO ====================
        error_page 400 401 403 404 /error-page.html;
        error_page 500 502 503 504 /error-server.html;
        
        location = /error-page.html {
            root /usr/share/nginx/html/errors;
            internal;
        }
        
        location = /error-server.html {
            root /usr/share/nginx/html/errors;
            internal;
        }
    }

    # ==================== REDIRECIONAMENTO HTTP → HTTPS (REMOVIDO PARA DEBUG LOCAL) ====================
    # Para debug local, geralmente não precisamos redirecionar para HTTPS,
    # pois a porta 80 já é a principal de acesso.
    # Se você quiser simular HTTPS localmente, precisará de certificados autoassinados
    # e um servidor HTTPS configurado.
    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name api.legalconnect.com.br;
    #     return 301 https://$host$request_uri;
    # }
}
```
```java
172.18.0.1 - - [16/Jul/2025:02:24:55 +0000] "GET / HTTP/1.1" 200 29 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0"
172.18.0.1 - - [16/Jul/2025:02:24:56 +0000] "GET /favicon.ico HTTP/1.1" 200 29 "http://localhost/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0"
172.18.0.1 - - [16/Jul/2025:14:29:45 +0000] "GET / HTTP/1.1" 200 29 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0"
172.18.0.1 - - [16/Jul/2025:14:29:46 +0000] "GET /favicon.ico HTTP/1.1" 200 29 "http://localhost/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0"

```
```java
2025/07/16 02:43:49 [emerg] 1#1: unknown directive "auth_jwt_key_file" in /etc/nginx/nginx.conf:124
2025/07/16 02:43:56 [emerg] 1#1: unknown directive "auth_jwt_key_file" in /etc/nginx/nginx.conf:124
2025/07/16 02:43:58 [emerg] 1#1: unknown directive "auth_jwt_key_file" in /etc/nginx/nginx.conf:124

```
```java
# Usa a imagem base Alpine Linux, que é leve e segura.
# 'alpine:3.19' é uma versão explícita e estável para garantir reprodutibilidade e evitar problemas de cache/resolução.
FROM alpine:3.19

# Instala as dependências de build necessárias para compilar o Nginx e o módulo JWT.
# - git: para clonar o repositório do módulo nginx-jwt.
# - build-base: pacote que inclui ferramentas essenciais de compilação (gcc, make, etc.).
# - openssl-dev: cabeçalhos e bibliotecas de desenvolvimento para OpenSSL (necessário para SSL/TLS no Nginx).
# - pcre-dev: cabeçalhos e bibliotecas de desenvolvimento para PCRE (Perl Compatible Regular Expressions, usado pelo Nginx).
# - zlib-dev: cabeçalhos e bibliotecas de desenvolvimento para zlib (biblioteca de compressão, usada pelo Nginx).
# - curl: para baixar o código-fonte do Nginx.
# - gnupg: (Opcional, não estritamente necessário para este build, mas pode ser útil para verificação de assinaturas em outros contextos).
# - linux-headers: (Opcional, geralmente não necessário para compilação de Nginx, mais para módulos de kernel).
RUN apk add --no-cache \
  git \
  build-base \
  openssl-dev \
  pcre-dev \
  zlib-dev \
  curl \
  gnupg \
  linux-headers

# Define a versão do NGINX que será baixada e compilada.
ENV NGINX_VERSION=1.25.3

# Baixa o código-fonte do NGINX, extrai e move para o diretório de compilação.
# CORREÇÃO: Alterado 'NGING_VERSION' para 'NGINX_VERSION' na linha do 'tar'.
RUN curl -O http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz && \
    tar -zxvf nginx-${NGINX_VERSION}.tar.gz && \
    mv nginx-${NGINX_VERSION} /usr/src/nginx

# Clona o repositório do módulo nginx-jwt para um diretório temporário.
# É recomendável especificar uma tag ou commit hash para o módulo para garantir builds repetíveis.
# Ex: RUN git clone --branch v1.0.0 https://github.com/auth0/nginx-jwt.git /tmp/nginx-jwt
RUN git clone https://github.com/auth0/nginx-jwt.git /tmp/nginx-jwt

# Define o diretório de trabalho para o processo de compilação do Nginx.
WORKDIR /usr/src/nginx

# Configura e compila o NGINX com os módulos desejados, incluindo o nginx-jwt.
# - --prefix=/etc/nginx: Define o diretório de instalação base do Nginx.
# - --sbin-path=/usr/sbin/nginx: Caminho para o executável principal do Nginx.
# - --modules-path=/usr/lib/nginx/modules: Caminho para os módulos dinâmicos (se usados).
# - --conf-path=/etc/nginx/nginx.conf: Caminho para o arquivo de configuração principal.
# - --error-log-path, --http-log-path, --pid-path, --lock-path: Caminhos para logs e PID.
# - --http-client-body-temp-path, --http-proxy-temp-path, etc.: Caminhos para caches temporários.
# - --add-module=/tmp/nginx-jwt: Adiciona o módulo JWT compilado.
# - --with-http_ssl_module: Habilita o módulo SSL para HTTPS.
# - --with-http_realip_module: Habilita o módulo para obter o IP real do cliente.
# - --with-http_v2_module: Habilita o suporte a HTTP/2.
# - --with-http_gzip_static_module: Habilita o módulo para servir arquivos .gz estáticos.
# - --with-pcre: Habilita o suporte a expressões regulares PCRE.
# - --with-zlib: Habilita o suporte a compressão zlib (explícito).
# - --with-threads: Habilita o suporte a threads (para operações não bloqueantes).
# - --with-stream: Habilita o módulo stream (para proxy TCP/UDP).
# - --with-stream_ssl_module: Habilita SSL para o módulo stream.
# 'make' compila o Nginx, e 'make install' o instala.
# Os '&& \' garantem que cada comando é executado sequencialmente e que a build falha se um falhar.
RUN ./configure \
    --prefix=/etc/nginx \
    --sbin-path=/usr/sbin/nginx \
    --modules-path=/usr/lib/nginx/modules \
    --conf-path=/etc/nginx/nginx.conf \
    --error-log-path=/var/log/nginx/error.log \
    --http-log-path=/var/log/nginx/access.log \
    --pid-path=/var/run/nginx.pid \
    --lock-path=/var/run/nginx.lock \
    --http-client-body-temp-path=/var/cache/nginx/client_temp \
    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \
    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
    --http-scgi-temp-path=/var/cache/nginx/scgi_temp \
    --add-module=/tmp/nginx-jwt \
    --with-http_ssl_module \
    --with-http_realip_module \
    --with-http_v2_module \
    --with-http_gzip_static_module \
    --with-pcre \
    --with-threads \
    --with-stream \
    --with-stream_ssl_module && \
    make && \
    make install

# Limpeza de arquivos de build e cache APK para reduzir o tamanho final da imagem.
# Remove o código-fonte do Nginx, o módulo JWT clonado e o cache do gerenciador de pacotes.
# Também remove as dependências de build instaladas anteriormente.
RUN rm -rf /usr/src/nginx* /tmp/nginx-jwt /var/cache/apk/* && \
    apk del git build-base openssl-dev pcre-dev zlib-dev gnupg linux-headers curl

# Cria os diretórios de cache necessários para o Nginx.
# O Nginx precisa desses diretórios para armazenar arquivos temporários de proxy e cliente.
RUN mkdir -p /var/cache/nginx/client_temp \
    && mkdir -p /var/cache/nginx/proxy_temp

# Define o usuário e grupo para o processo Nginx.
# É uma boa prática de segurança rodar o Nginx com um usuário não-root.
# A imagem Alpine geralmente já tem um usuário 'nginx' ou 'www-data' pré-configurado.
USER nginx

# Comando padrão para iniciar o Nginx quando o contêiner é executado.
# "daemon off;" mantém o processo Nginx em primeiro plano, necessário para Docker.
CMD ["nginx", "-g", "daemon off;"]

# Expõe as portas 80 (HTTP) e 443 (HTTPS) do contêiner.
# Isso informa ao Docker que essas portas são usadas pela aplicação.
EXPOSE 80 443

```
```java
/mvnw text eol=lf
*.cmd text eol=crlf

```
```java
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

```
```java
# Read Me First
The following was discovered as part of building this project:

* The original package name 'br.com.legalconnect.legal-usuario' is invalid and this project uses 'br.com.legalconnect.legal_usuario' instead.

# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.5.3/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.5.3/maven-plugin/build-image.html)
* [Spring Data JPA](https://docs.spring.io/spring-boot/3.5.3/reference/data/sql.html#data.sql.jpa-and-spring-data)
* [Spring Boot DevTools](https://docs.spring.io/spring-boot/3.5.3/reference/using/devtools.html)
* [PostgresML](https://docs.spring.io/spring-ai/reference/api/embeddings/postgresml-embeddings.html)
* [Spring Web](https://docs.spring.io/spring-boot/3.5.3/reference/web/servlet.html)

### Guides
The following guides illustrate how to use some features concretely:

* [Accessing Data with JPA](https://spring.io/guides/gs/accessing-data-jpa/)
* [Building a RESTful Web Service](https://spring.io/guides/gs/rest-service/)
* [Serving Web Content with Spring MVC](https://spring.io/guides/gs/serving-web-content/)
* [Building REST services with Spring](https://spring.io/guides/tutorials/rest/)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.


```
```java
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

```
```java
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

```
```java
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.5</version> <!-- Mantendo 3.2.5 para consistência com o Gateway, mas você pode usar
        3.2.12 se preferir -->
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>br.com.legalconnect</groupId>
	<artifactId>legalconnect-advogado</artifactId> <!-- Certifique-se de que o artifactId está correto para o auth-service -->
	<version>0.0.1-SNAPSHOT</version>
	<name>legalconnect-advogado</name>
	<description>Authentication Microservice for LegalConnect</description>

	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2023.0.1</spring-cloud.version>

		<jjwt.version>0.11.5</jjwt.version> <!-- Mantido 0.12.5 para compatibilidade com a classe
        JwtUtil -->
		<flyway.version>11.8.2</flyway.version> <!-- CORRIGIDO: Define a versão do Flyway para 11.8.2 -->
		<lombok.version>1.18.30</lombok.version> <!-- Adicionado/Atualizado para garantir
        compatibilidade -->
		<org.mapstruct.version>1.5.5.Final</org.mapstruct.version> <!-- Adicionado/Atualizado para
        garantir compatibilidade -->
		<springdoc.version>2.5.0</springdoc.version> <!-- Atualizado para 2.5.0 para consistência com
        o Gateway -->
	</properties>

	<dependencies>
		<!-- Spring Boot Starters -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<!-- Database -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>${jjwt.version}</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>${jjwt.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>${jjwt.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- MapStruct for DTO-Entity mapping -->
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${org.mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-processor</artifactId>
			<version>${org.mapstruct.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- common-lib (se aplicável, mantenha a versão correta) -->
		<dependency>
			<groupId>br.com.legalconnect.common</groupId>
			<artifactId>common-lib</artifactId>
			<version>1.0.0</version>
		</dependency>

		<!-- Lombok for boilerplate code reduction -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Spring Boot Test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- OpenAPI/Swagger UI -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${springdoc.version}</version>
		</dependency>

		<!-- Jackson for JSON processing (used by JwtAuthEntryPoint) -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>


	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<!-- Plugin para MapStruct -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${org.mapstruct.version}</version>
						</path>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok-mapstruct-binding</artifactId>
							<version>0.2.0</version>
						</path>
					</annotationProcessorPaths>
					<compilerArgs>
						<arg>-Amapstruct.defaultComponentModel=spring</arg>
					</compilerArgs>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
```
```java
{
  "openapi": "3.0.1",
  "info": { "title": "OpenAPI definition", "version": "v0" },
  "servers": [
    { "url": "http://localhost:8080", "description": "Generated server url" }
  ],
  "tags": [
    {
      "name": "Locais de Atuação",
      "description": "Gerenciamento de dados mestre de Locais de Atuação"
    },
    {
      "name": "Idiomas",
      "description": "Gerenciamento de dados mestre de Idiomas"
    },
    {
      "name": "Profissionais",
      "description": "Gerenciamento de perfis de Advogados"
    },
    {
      "name": "Agendamentos",
      "description": "Gerenciamento de agendamentos de consultas e avaliações"
    },
    {
      "name": "Áreas de Atuação",
      "description": "Gerenciamento de dados mestre de Áreas de Atuação"
    },
    {
      "name": "Tipos de Atendimento",
      "description": "Gerenciamento de dados mestre de Tipos de Atendimento"
    }
  ],
  "paths": {
    "/api/v1/profissionais/{profissionalId}/formacoes/{formacaoId}": {
      "get": {
        "tags": ["Profissionais"],
        "summary": "Busca uma formação acadêmica específica de um profissional",
        "description": "Retorna os detalhes de uma formação acadêmica específica de um advogado.",
        "operationId": "getFormacaoAcademicaById",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "formacaoId",
            "in": "path",
            "description": "ID da formação",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Formação acadêmica encontrada com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseFormacaoAcademicaResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (formação pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseFormacaoAcademicaResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Formação acadêmica não encontrada para este profissional",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseFormacaoAcademicaResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseFormacaoAcademicaResponseDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Profissionais"],
        "summary": "Atualiza uma formação acadêmica de um profissional",
        "description": "Atualiza os detalhes de uma formação acadêmica existente associada a um advogado.",
        "operationId": "updateFormacaoAcademica",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "formacaoId",
            "in": "path",
            "description": "ID da formação a ser atualizada",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormacaoAcademicaRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Formação acadêmica atualizada com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseFormacaoAcademicaResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Dados de requisição inválidos",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseFormacaoAcademicaResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (formação pertence a outro tenant ou profissional)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseFormacaoAcademicaResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Formação acadêmica não encontrada para este profissional",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseFormacaoAcademicaResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseFormacaoAcademicaResponseDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Profissionais"],
        "summary": "Deleta uma formação acadêmica de um profissional",
        "description": "Remove uma formação acadêmica específica do perfil de um advogado.",
        "operationId": "deleteFormacaoAcademica",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "formacaoId",
            "in": "path",
            "description": "ID da formação a ser deletada",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Formação acadêmica deletada com sucesso",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "403": {
            "description": "Acesso negado (formação pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "404": {
            "description": "Formação acadêmica não encontrada para deleção",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          }
        }
      }
    },
    "/api/v1/profissionais/{profissionalId}/experiencias/{experienciaId}": {
      "get": {
        "tags": ["Profissionais"],
        "summary": "Busca uma experiência profissional específica de um profissional",
        "description": "Retorna os detalhes de uma experiência profissional específica de um advogado.",
        "operationId": "getExperienciaProfissionalById",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "experienciaId",
            "in": "path",
            "description": "ID da experiência",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Experiência profissional encontrada com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseExperienciaProfissionalResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (experiência pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseExperienciaProfissionalResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Experiência profissional não encontrada para este profissional",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseExperienciaProfissionalResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseExperienciaProfissionalResponseDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Profissionais"],
        "summary": "Atualiza uma experiência profissional de um profissional",
        "description": "Atualiza os detalhes de uma experiência profissional existente associada a um advogado.",
        "operationId": "updateExperienciaProfissional",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "experienciaId",
            "in": "path",
            "description": "ID da experiência a ser atualizada",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExperienciaProfissionalRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Experiência profissional atualizada com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseExperienciaProfissionalResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Dados de requisição inválidos",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseExperienciaProfissionalResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (experiência pertence a outro tenant ou profissional)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseExperienciaProfissionalResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Experiência profissional não encontrada para este profissional",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseExperienciaProfissionalResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseExperienciaProfissionalResponseDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Profissionais"],
        "summary": "Deleta uma experiência profissional de um profissional",
        "description": "Remove uma experiência profissional específica do perfil de um advogado.",
        "operationId": "deleteExperienciaProfissional",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "experienciaId",
            "in": "path",
            "description": "ID da experiência a ser deletada",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Experiência profissional deletada com sucesso",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "403": {
            "description": "Acesso negado (experiência pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "404": {
            "description": "Experiência profissional não encontrada para deleção",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          }
        }
      }
    },
    "/api/v1/profissionais/{profissionalId}/certificacoes/{certificacaoId}": {
      "get": {
        "tags": ["Profissionais"],
        "summary": "Busca uma certificação específica de um profissional",
        "description": "Retorna os detalhes de uma certificação específica de um advogado.",
        "operationId": "getCertificacaoById",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "certificacaoId",
            "in": "path",
            "description": "ID da certificação",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Certificação encontrada com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseCertificacaoResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (certificação pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseCertificacaoResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Certificação não encontrada para este profissional",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseCertificacaoResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseCertificacaoResponseDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Profissionais"],
        "summary": "Atualiza uma certificação de um profissional",
        "description": "Atualiza os detalhes de uma certificação existente associada a um advogado.",
        "operationId": "updateCertificacao",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "certificacaoId",
            "in": "path",
            "description": "ID da certificação a ser atualizada",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificacaoRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Certificação atualizada com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseCertificacaoResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Dados de requisição inválidos",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseCertificacaoResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (certificação pertence a outro tenant ou profissional)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseCertificacaoResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Certificação não encontrada para este profissional",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseCertificacaoResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseCertificacaoResponseDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Profissionais"],
        "summary": "Deleta uma certificação de um profissional",
        "description": "Remove uma certificação específica do perfil de um advogado.",
        "operationId": "deleteCertificacao",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "certificacaoId",
            "in": "path",
            "description": "ID da certificação a ser deletada",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Certificação deletada com sucesso",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "403": {
            "description": "Acesso negado (certificação pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "404": {
            "description": "Certificação não encontrada para deleção",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          }
        }
      }
    },
    "/api/v1/profissionais/{id}": {
      "get": {
        "tags": ["Profissionais"],
        "summary": "Busca um profissional pelo ID",
        "description": "Retorna os detalhes completos de um advogado específico.",
        "operationId": "getProfissionalById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Profissional encontrado com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseProfissionalResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (profissional pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseProfissionalResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Profissional não encontrado",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseProfissionalResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseProfissionalResponseDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Profissionais"],
        "summary": "Atualiza um profissional existente",
        "description": "Atualiza os dados de um advogado, incluindo informações pessoais e coleções relacionadas.",
        "operationId": "updateProfissional",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID do profissional a ser atualizado",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfissionalUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Profissional atualizado com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseProfissionalResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Dados de requisição inválidos",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseProfissionalResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (profissional pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseProfissionalResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Profissional não encontrado",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseProfissionalResponseDTO"
                }
              }
            }
          },
          "409": {
            "description": "Conflito de dados (ex: email duplicado)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseProfissionalResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseProfissionalResponseDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Profissionais"],
        "summary": "Deleta um profissional pelo ID",
        "description": "Remove um advogado e todos os seus dados associados do sistema.",
        "operationId": "deleteProfissional",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID do profissional a ser deletado",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Profissional deletado com sucesso",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "403": {
            "description": "Acesso negado (profissional pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "404": {
            "description": "Profissional não encontrado",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          }
        }
      }
    },
    "/api/v1/profissionais": {
      "get": {
        "tags": ["Profissionais"],
        "summary": "Lista todos os profissionais com paginação",
        "description": "Retorna uma lista paginada de todos os advogados associados ao tenant atual.",
        "operationId": "getAllProfissionais",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Número da página (0-indexed)",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 0 },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "Tamanho da página",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 10 },
            "example": 10
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Critério de ordenação (ex: nomeCompleto,asc ou numeroOab,desc)",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "default": ["nomeCompleto", "asc"]
            },
            "example": "nomeCompleto,asc"
          }
        ],
        "responses": {
          "200": {
            "description": "Profissionais listados com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponsePageProfissionalResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponsePageProfissionalResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Profissionais"],
        "summary": "Cria um novo profissional",
        "description": "Registra um novo advogado com seus dados pessoais e informações profissionais.",
        "operationId": "createProfissional",
        "parameters": [
          {
            "name": "X-Correlation-Id",
            "in": "header",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfissionalCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Profissional criado com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseProfissionalResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Dados de requisição inválidos",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseProfissionalResponseDTO"
                }
              }
            }
          },
          "409": {
            "description": "OAB, CPF ou Email já cadastrado",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseProfissionalResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseProfissionalResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/profissionais/{profissionalId}/formacoes": {
      "get": {
        "tags": ["Profissionais"],
        "summary": "Lista todas as formações acadêmicas de um profissional",
        "description": "Retorna uma lista de todas as formações acadêmicas associadas a um advogado específico.",
        "operationId": "getAllFormacoesAcademicas",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Formações acadêmicas listadas com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListFormacaoAcademicaResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (profissional pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListFormacaoAcademicaResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Profissional não encontrado",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListFormacaoAcademicaResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListFormacaoAcademicaResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Profissionais"],
        "summary": "Adiciona uma formação acadêmica a um profissional",
        "description": "Adiciona uma nova formação acadêmica ao perfil de um advogado.",
        "operationId": "addFormacaoAcademica",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormacaoAcademicaRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Formação acadêmica adicionada com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseFormacaoAcademicaResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Dados de requisição inválidos",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseFormacaoAcademicaResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (profissional pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseFormacaoAcademicaResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Profissional não encontrado",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseFormacaoAcademicaResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseFormacaoAcademicaResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/profissionais/{profissionalId}/experiencias": {
      "get": {
        "tags": ["Profissionais"],
        "summary": "Lista todas as experiências profissionais de um profissional",
        "description": "Retorna uma lista de todas as experiências profissionais associadas a um advogado específico.",
        "operationId": "getAllExperienciasProfissionais",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Experiências profissionais listadas com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListExperienciaProfissionalResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (profissional pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListExperienciaProfissionalResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Profissional não encontrado",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListExperienciaProfissionalResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListExperienciaProfissionalResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Profissionais"],
        "summary": "Adiciona uma experiência profissional a um profissional",
        "description": "Adiciona uma nova experiência profissional ao perfil de um advogado.",
        "operationId": "addExperienciaProfissional",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExperienciaProfissionalRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Experiência profissional adicionada com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseExperienciaProfissionalResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Dados de requisição inválidos",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseExperienciaProfissionalResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (profissional pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseExperienciaProfissionalResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Profissional não encontrado",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseExperienciaProfissionalResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseExperienciaProfissionalResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/profissionais/{profissionalId}/documentos/upload": {
      "post": {
        "tags": ["Profissionais"],
        "summary": "Realiza o upload de um documento para um profissional",
        "description": "Faz o upload de um documento para o S3 e persiste seus metadados para um advogado.",
        "operationId": "uploadDocumento",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentoUploadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Documento enviado com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseDocumentoResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Dados de requisição inválidos (ex: Base64 inválido)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseDocumentoResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (profissional pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseDocumentoResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Profissional não encontrado",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseDocumentoResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Falha ao fazer upload do documento ou erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseDocumentoResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/profissionais/{profissionalId}/certificacoes": {
      "get": {
        "tags": ["Profissionais"],
        "summary": "Lista todas as certificações de um profissional",
        "description": "Retorna uma lista de todas as certificações associadas a um advogado específico.",
        "operationId": "getAllCertificacoes",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Certificações listadas com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListCertificacaoResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (profissional pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListCertificacaoResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Profissional não encontrado",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListCertificacaoResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListCertificacaoResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Profissionais"],
        "summary": "Adiciona uma certificação a um profissional",
        "description": "Adiciona uma nova certificação ao perfil de um advogado.",
        "operationId": "addCertificacao",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificacaoRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Certificação adicionada com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseCertificacaoResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Dados de requisição inválidos",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseCertificacaoResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (profissional pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseCertificacaoResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Profissional não encontrado",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseCertificacaoResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseCertificacaoResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agendamentos/avaliar": {
      "post": {
        "tags": ["Agendamentos"],
        "summary": "Avalia uma consulta",
        "description": "Permite a um cliente fornecer uma nota e um comentário para uma consulta já realizada.",
        "operationId": "avaliarConsulta",
        "parameters": [
          {
            "name": "agendamentoId",
            "in": "query",
            "description": "ID do agendamento a ser avaliado",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "clienteId",
            "in": "query",
            "description": "ID do cliente que está avaliando",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "rating",
            "in": "query",
            "description": "Nota da avaliação (1 a 5)",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "comentario",
            "in": "query",
            "description": "Comentário opcional sobre a avaliação",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Consulta avaliada com sucesso",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseBoolean" }
              }
            }
          },
          "400": {
            "description": "Dados de requisição inválidos (ex: nota fora do intervalo)",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseBoolean" }
              }
            }
          },
          "404": {
            "description": "Agendamento não encontrado",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseBoolean" }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseBoolean" }
              }
            }
          }
        }
      }
    },
    "/api/v1/agendamentos/agendar": {
      "post": {
        "tags": ["Agendamentos"],
        "summary": "Agenda uma nova consulta",
        "description": "Permite a um cliente agendar uma consulta com um profissional, verificando disponibilidade e enviando notificações.",
        "operationId": "agendarConsulta",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "query",
            "description": "ID do profissional para o agendamento",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "clienteId",
            "in": "query",
            "description": "ID do cliente que está agendando",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "horarioAgendamento",
            "in": "query",
            "description": "Horário desejado para a consulta (formato ISO 8601, ex: 2024-07-25T10:00:00)",
            "required": true,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "tipoServico",
            "in": "query",
            "description": "Tipo de serviço a ser agendado (ex: 'Consulta Online', 'Reunião Presencial')",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Consulta agendada com sucesso",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseBoolean" }
              }
            }
          },
          "400": {
            "description": "Dados de requisição inválidos (ex: horário indisponível)",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseBoolean" }
              }
            }
          },
          "404": {
            "description": "Profissional não encontrado",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseBoolean" }
              }
            }
          },
          "409": {
            "description": "Conflito de agendamento (horário já ocupado)",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseBoolean" }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseBoolean" }
              }
            }
          }
        }
      }
    },
    "/api/v1/tipos-atendimento": {
      "get": {
        "tags": ["Tipos de Atendimento"],
        "summary": "Lista todos os tipos de atendimento",
        "description": "Retorna uma lista de todos os tipos de atendimento cadastrados.",
        "operationId": "getAllTiposAtendimento",
        "responses": {
          "200": {
            "description": "Tipos de Atendimento listados com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListTipoAtendimentoResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListTipoAtendimentoResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tipos-atendimento/{id}": {
      "get": {
        "tags": ["Tipos de Atendimento"],
        "summary": "Busca um tipo de atendimento pelo ID",
        "description": "Retorna os detalhes de um tipo de atendimento específico.",
        "operationId": "getTipoAtendimentoById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID do Tipo de Atendimento",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Tipo de Atendimento encontrado com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseTipoAtendimentoResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Tipo de Atendimento não encontrado",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseTipoAtendimentoResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseTipoAtendimentoResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/profissionais/{profissionalId}/documentos": {
      "get": {
        "tags": ["Profissionais"],
        "summary": "Lista todos os documentos de um profissional",
        "description": "Retorna uma lista de todos os documentos associados a um advogado específico.",
        "operationId": "getAllDocumentos",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Documentos listados com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListDocumentoResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (profissional pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListDocumentoResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Profissional não encontrado",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListDocumentoResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListDocumentoResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/profissionais/{profissionalId}/documentos/{documentoId}": {
      "get": {
        "tags": ["Profissionais"],
        "summary": "Busca um documento específico de um profissional",
        "description": "Retorna os detalhes de um documento específico de um advogado.",
        "operationId": "getDocumentoById",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "documentoId",
            "in": "path",
            "description": "ID do documento",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Documento encontrado com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseDocumentoResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado (documento pertence a outro tenant ou profissional)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseDocumentoResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Documento não encontrado para este profissional",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseDocumentoResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseDocumentoResponseDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Profissionais"],
        "summary": "Deleta um documento de um profissional",
        "description": "Remove um documento específico do perfil de um advogado, incluindo a remoção do S3.",
        "operationId": "deleteDocumento",
        "parameters": [
          {
            "name": "profissionalId",
            "in": "path",
            "description": "ID do profissional",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "documentoId",
            "in": "path",
            "description": "ID do documento a ser deletado",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Documento deletado com sucesso",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "403": {
            "description": "Acesso negado (documento pertence a outro tenant)",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "404": {
            "description": "Documento não encontrado para deleção",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          },
          "500": {
            "description": "Falha ao deletar o documento do S3 ou erro interno do servidor",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          }
        }
      }
    },
    "/api/v1/locais-atuacao": {
      "get": {
        "tags": ["Locais de Atuação"],
        "summary": "Lista todos os locais de atuação",
        "description": "Retorna uma lista de todos os locais de atuação cadastrados.",
        "operationId": "getAllLocaisAtuacao",
        "responses": {
          "200": {
            "description": "Locais de Atuação listados com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListLocalAtuacaoResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListLocalAtuacaoResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/locais-atuacao/{id}": {
      "get": {
        "tags": ["Locais de Atuação"],
        "summary": "Busca um local de atuação pelo ID",
        "description": "Retorna os detalhes de um local de atuação específico.",
        "operationId": "getLocalAtuacaoById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID do Local de Atuação",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Local de Atuação encontrado com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseLocalAtuacaoResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Local de Atuação não encontrado",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseLocalAtuacaoResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseLocalAtuacaoResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/idiomas": {
      "get": {
        "tags": ["Idiomas"],
        "summary": "Lista todos os idiomas",
        "description": "Retorna uma lista de todos os idiomas cadastrados.",
        "operationId": "getAllIdiomas",
        "responses": {
          "200": {
            "description": "Idiomas listados com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListIdiomaResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListIdiomaResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/idiomas/{id}": {
      "get": {
        "tags": ["Idiomas"],
        "summary": "Busca um idioma pelo ID",
        "description": "Retorna os detalhes de um idioma específico.",
        "operationId": "getIdiomaById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID do idioma",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Idioma encontrado com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseIdiomaResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Idioma não encontrado",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseIdiomaResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseIdiomaResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/areas-atuacao": {
      "get": {
        "tags": ["Áreas de Atuação"],
        "summary": "Lista todas as áreas de atuação",
        "description": "Retorna uma lista de todas as áreas de atuação cadastradas.",
        "operationId": "getAllAreasAtuacao",
        "responses": {
          "200": {
            "description": "Áreas de Atuação listadas com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListAreaAtuacaoResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseListAreaAtuacaoResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/areas-atuacao/{id}": {
      "get": {
        "tags": ["Áreas de Atuação"],
        "summary": "Busca uma área de atuação pelo ID",
        "description": "Retorna os detalhes de uma área de atuação específica.",
        "operationId": "getAreaAtuacaoById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID da Área de Atuação",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Área de Atuação encontrada com sucesso",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseAreaAtuacaoResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Área de Atuação não encontrada",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseAreaAtuacaoResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseAreaAtuacaoResponseDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "FormacaoAcademicaRequestDTO": {
        "required": ["curso", "dataConclusao", "instituicao"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "curso": { "maxLength": 255, "minLength": 0, "type": "string" },
          "instituicao": { "maxLength": 255, "minLength": 0, "type": "string" },
          "dataConclusao": { "type": "string", "format": "date" }
        }
      },
      "BaseResponseFormacaoAcademicaResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": {
            "$ref": "#/components/schemas/FormacaoAcademicaResponseDTO"
          },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "FormacaoAcademicaResponseDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "curso": { "type": "string" },
          "instituicao": { "type": "string" },
          "dataConclusao": { "type": "string", "format": "date" }
        }
      },
      "ExperienciaProfissionalRequestDTO": {
        "required": ["cargo", "dataInicio", "empresa"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "cargo": { "maxLength": 255, "minLength": 0, "type": "string" },
          "empresa": { "maxLength": 255, "minLength": 0, "type": "string" },
          "dataInicio": { "type": "string", "format": "date" },
          "dataFim": { "type": "string", "format": "date" },
          "descricao": { "type": "string" }
        }
      },
      "BaseResponseExperienciaProfissionalResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": {
            "$ref": "#/components/schemas/ExperienciaProfissionalResponseDTO"
          },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "ExperienciaProfissionalResponseDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "cargo": { "type": "string" },
          "empresa": { "type": "string" },
          "dataInicio": { "type": "string", "format": "date" },
          "dataFim": { "type": "string", "format": "date" },
          "descricao": { "type": "string" }
        }
      },
      "CertificacaoRequestDTO": {
        "required": ["dataConclusao", "nome"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "nome": { "maxLength": 255, "minLength": 0, "type": "string" },
          "instituicao": { "maxLength": 255, "minLength": 0, "type": "string" },
          "dataConclusao": { "type": "string", "format": "date" }
        }
      },
      "BaseResponseCertificacaoResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": { "$ref": "#/components/schemas/CertificacaoResponseDTO" },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "CertificacaoResponseDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "nome": { "type": "string" },
          "instituicao": { "type": "string" },
          "dataConclusao": { "type": "string", "format": "date" }
        }
      },
      "EnderecoRequestDTO": {
        "required": [
          "bairro",
          "cep",
          "cidade",
          "estado",
          "logradouro",
          "numero",
          "tipoEndereco"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "logradouro": { "maxLength": 255, "minLength": 0, "type": "string" },
          "numero": { "maxLength": 20, "minLength": 0, "type": "string" },
          "complemento": { "maxLength": 255, "minLength": 0, "type": "string" },
          "bairro": { "maxLength": 100, "minLength": 0, "type": "string" },
          "cidade": { "maxLength": 100, "minLength": 0, "type": "string" },
          "estado": { "maxLength": 2, "minLength": 0, "type": "string" },
          "cep": { "maxLength": 9, "minLength": 0, "type": "string" },
          "pais": { "maxLength": 50, "minLength": 0, "type": "string" },
          "tipoEndereco": {
            "type": "string",
            "enum": [
              "RESIDENCIAL",
              "COMERCIAL",
              "ESCRITORIO",
              "COBRANCA",
              "ENTREGA",
              "OUTRO"
            ]
          }
        }
      },
      "PessoaRequestDTO": {
        "required": ["cpf", "dataNascimento", "nomeCompleto", "usuario"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "usuario": { "$ref": "#/components/schemas/UserRequestDTO" },
          "nomeCompleto": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "cpf": {
            "maxLength": 14,
            "minLength": 11,
            "pattern": "^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$|^\\d{11}$",
            "type": "string"
          },
          "dataNascimento": { "type": "string", "format": "date" },
          "telefones": {
            "maxItems": 10,
            "minItems": 0,
            "type": "array",
            "items": { "type": "string" }
          },
          "enderecos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EnderecoRequestDTO" }
          }
        }
      },
      "ProfissionalUpdateRequest": {
        "required": ["id", "numeroOab", "usaMarketplace"],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "pessoa": { "$ref": "#/components/schemas/PessoaRequestDTO" },
          "numeroOab": { "type": "string" },
          "usaMarketplace": { "type": "boolean" },
          "empresaId": { "type": "string", "format": "uuid" },
          "planoId": { "type": "string", "format": "uuid" },
          "locaisAtuacaoIds": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          },
          "areaAtuacaoIds": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          },
          "idiomaIds": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          },
          "tipoAtendimentoIds": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          },
          "certificacoes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CertificacaoRequestDTO" }
          },
          "experiencias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperienciaProfissionalRequestDTO"
            }
          },
          "formacoes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormacaoAcademicaRequestDTO"
            }
          }
        }
      },
      "UserRequestDTO": {
        "required": ["email"],
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "email": { "maxLength": 255, "minLength": 0, "type": "string" },
          "senha": { "maxLength": 255, "minLength": 8, "type": "string" },
          "nomeCompleto": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "cpf": { "maxLength": 14, "minLength": 0, "type": "string" },
          "telefone": { "maxLength": 20, "minLength": 0, "type": "string" },
          "fotoUrl": { "type": "string" }
        }
      },
      "AreaAtuacaoResponseDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "nome": { "type": "string" },
          "descricao": { "type": "string" }
        }
      },
      "BaseResponseProfissionalResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": { "$ref": "#/components/schemas/ProfissionalResponseDTO" },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "DocumentoResponseDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "nomeArquivo": { "type": "string" },
          "urlS3": { "type": "string" },
          "tipoDocumento": { "type": "string" }
        }
      },
      "EnderecoResponseDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "logradouro": { "type": "string" },
          "numero": { "type": "string" },
          "complemento": { "type": "string" },
          "bairro": { "type": "string" },
          "cidade": { "type": "string" },
          "estado": { "type": "string" },
          "cep": { "type": "string" },
          "pais": { "type": "string" },
          "tipoEndereco": {
            "type": "string",
            "enum": [
              "RESIDENCIAL",
              "COMERCIAL",
              "ESCRITORIO",
              "COBRANCA",
              "ENTREGA",
              "OUTRO"
            ]
          }
        }
      },
      "IdiomaResponseDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "nome": { "type": "string" },
          "codigo": { "type": "string" },
          "nivel": { "type": "string" }
        }
      },
      "LocalAtuacaoResponseDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "nome": { "type": "string" }
        }
      },
      "PessoaResponseDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "usuario": { "$ref": "#/components/schemas/UserResponseDTO" },
          "nomeCompleto": { "type": "string" },
          "cpf": { "type": "string" },
          "dataNascimento": { "type": "string", "format": "date" },
          "telefones": { "type": "array", "items": { "type": "string" } },
          "enderecos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EnderecoResponseDTO" }
          }
        }
      },
      "ProfissionalResponseDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "pessoa": { "$ref": "#/components/schemas/PessoaResponseDTO" },
          "numeroOab": { "type": "string" },
          "statusProfissional": { "type": "string" },
          "usaMarketplace": { "type": "boolean" },
          "fazParteDePlano": { "type": "boolean" },
          "empresaId": { "type": "string", "format": "uuid" },
          "planoId": { "type": "string", "format": "uuid" },
          "tenantId": { "type": "string", "format": "uuid" },
          "certificacoes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CertificacaoResponseDTO" }
          },
          "documentos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DocumentoResponseDTO" }
          },
          "experiencias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperienciaProfissionalResponseDTO"
            }
          },
          "formacoes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormacaoAcademicaResponseDTO"
            }
          },
          "locaisAtuacao": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LocalAtuacaoResponseDTO" }
          },
          "areasAtuacao": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AreaAtuacaoResponseDTO" }
          },
          "idiomas": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/IdiomaResponseDTO" }
          },
          "tiposAtendimento": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TipoAtendimentoResponseDTO"
            }
          },
          "rolesProfissional": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleProfissionalResponseDTO"
            }
          }
        }
      },
      "RoleProfissionalResponseDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "name": { "type": "string" }
        }
      },
      "TipoAtendimentoResponseDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "nome": { "type": "string" }
        }
      },
      "UserResponseDTO": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "nomeCompleto": { "type": "string" },
          "email": { "type": "string" },
          "cpf": { "type": "string" },
          "telefone": { "type": "string" },
          "fotoUrl": { "type": "string" },
          "userType": {
            "type": "string",
            "enum": ["CLIENTE", "ADVOGADO", "PLATAFORMA_ADMIN", "SOCIO"]
          },
          "userStatus": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "PENDING_APPROVAL",
              "REJECTED",
              "PENDING"
            ]
          }
        }
      },
      "ProfissionalCreateRequest": {
        "required": [
          "cpf",
          "dataNascimento",
          "nomeCompleto",
          "numeroOab",
          "planoId",
          "tenantId",
          "usaMarketplace",
          "usuario"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "usuario": { "$ref": "#/components/schemas/UserRequestDTO" },
          "nomeCompleto": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "cpf": {
            "maxLength": 14,
            "minLength": 11,
            "pattern": "^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$|^\\d{11}$",
            "type": "string"
          },
          "dataNascimento": { "type": "string", "format": "date" },
          "telefones": {
            "maxItems": 10,
            "minItems": 0,
            "type": "array",
            "items": { "type": "string" }
          },
          "enderecos": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EnderecoRequestDTO" }
          },
          "numeroOab": { "maxLength": 50, "minLength": 5, "type": "string" },
          "usaMarketplace": { "type": "boolean" },
          "planoId": { "type": "string", "format": "uuid" },
          "tenantId": { "type": "string", "format": "uuid" },
          "locaisAtuacaoIds": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          },
          "areaAtuacaoIds": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          },
          "idiomaIds": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          },
          "tipoAtendimentoIds": {
            "type": "array",
            "items": { "type": "string", "format": "uuid" }
          },
          "certificacoes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CertificacaoRequestDTO" }
          },
          "experiencias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperienciaProfissionalRequestDTO"
            }
          },
          "formacoes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormacaoAcademicaRequestDTO"
            }
          }
        }
      },
      "DocumentoUploadRequest": {
        "required": [
          "arquivoBase64",
          "mimeType",
          "nomeArquivo",
          "tipoDocumento"
        ],
        "type": "object",
        "properties": {
          "nomeArquivo": { "maxLength": 255, "minLength": 0, "type": "string" },
          "tipoDocumento": {
            "type": "string",
            "enum": ["OAB", "RG", "CPF", "COMPROVANTE_ENDERECO", "OUTRO"]
          },
          "arquivoBase64": { "type": "string" },
          "mimeType": { "maxLength": 100, "minLength": 0, "type": "string" }
        }
      },
      "BaseResponseDocumentoResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": { "$ref": "#/components/schemas/DocumentoResponseDTO" },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BaseResponseBoolean": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": { "type": "boolean" },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BaseResponseListTipoAtendimentoResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TipoAtendimentoResponseDTO"
            }
          },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BaseResponseTipoAtendimentoResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": { "$ref": "#/components/schemas/TipoAtendimentoResponseDTO" },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BaseResponsePageProfissionalResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": {
            "$ref": "#/components/schemas/PageProfissionalResponseDTO"
          },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "PageProfissionalResponseDTO": {
        "type": "object",
        "properties": {
          "totalElements": { "type": "integer", "format": "int64" },
          "totalPages": { "type": "integer", "format": "int32" },
          "size": { "type": "integer", "format": "int32" },
          "content": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProfissionalResponseDTO" }
          },
          "number": { "type": "integer", "format": "int32" },
          "sort": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SortObject" }
          },
          "first": { "type": "boolean" },
          "last": { "type": "boolean" },
          "numberOfElements": { "type": "integer", "format": "int32" },
          "pageable": { "$ref": "#/components/schemas/PageableObject" },
          "empty": { "type": "boolean" }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": { "type": "integer", "format": "int64" },
          "sort": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SortObject" }
          },
          "unpaged": { "type": "boolean" },
          "paged": { "type": "boolean" },
          "pageNumber": { "type": "integer", "format": "int32" },
          "pageSize": { "type": "integer", "format": "int32" }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "direction": { "type": "string" },
          "nullHandling": { "type": "string" },
          "ascending": { "type": "boolean" },
          "property": { "type": "string" },
          "ignoreCase": { "type": "boolean" }
        }
      },
      "BaseResponseListFormacaoAcademicaResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormacaoAcademicaResponseDTO"
            }
          },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BaseResponseListExperienciaProfissionalResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperienciaProfissionalResponseDTO"
            }
          },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BaseResponseListDocumentoResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DocumentoResponseDTO" }
          },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BaseResponseListCertificacaoResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CertificacaoResponseDTO" }
          },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BaseResponseListLocalAtuacaoResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LocalAtuacaoResponseDTO" }
          },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BaseResponseLocalAtuacaoResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": { "$ref": "#/components/schemas/LocalAtuacaoResponseDTO" },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BaseResponseListIdiomaResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/IdiomaResponseDTO" }
          },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BaseResponseIdiomaResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": { "$ref": "#/components/schemas/IdiomaResponseDTO" },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BaseResponseListAreaAtuacaoResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AreaAtuacaoResponseDTO" }
          },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BaseResponseAreaAtuacaoResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": { "$ref": "#/components/schemas/AreaAtuacaoResponseDTO" },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "BaseResponseVoid": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": { "type": "object" },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      }
    }
  }
}

```
```java
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip

```
```java
{
  "configurations": [
    {
      "type": "java",
      "name": "LegalUsuarioApplication",
      "request": "launch",
      "mainClass": "br.com.legalconnect.LegalUsuarioApplication",
      "projectName": "legalconnect-advogado"
    },
    {
      "type": "java",
      "name": "Spring Boot-LegalUsuarioApplication<legal-usuario>",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "mainClass": "br.com.legalconnect.LegalUsuarioApplication",
      "projectName": "legal-usuario",
      "args": "",
      "envFile": "${workspaceFolder}/.env"
    }
  ]
}

```
```java
{
  "java.configuration.updateBuildConfiguration": "interactive"
}

```
```java
```java
package br.com.legalconnect;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class LegalUsuarioApplication {
	// @Value("${application.tenant.default-id}")
	// private String defaultTenantId;

	// @Autowired
	// private TenantMigrationService tenantMigrationService;

	public static void main(String[] args) {
		SpringApplication.run(LegalUsuarioApplication.class, args);
	}
}
// @Bean
// boolean inicio() {
// tenantMigrationService.migrateTenant(defaultTenantId);
// return true;
// }
// }

```
```java
package br.com.legalconnect.advogado.application.dto.enums;

/**
 * Enumeração para os tipos de documentos de um Profissional (Advogado).
 * 
 */
public enum DocumentoTipo {
    OAB, // Ordem dos Advogados do Brasil
    RG, // Registro Geral (identidade)
    CPF, // Cadastro de Pessoas Físicas
    COMPROVANTE_ENDERECO, // Comprovante de residência
    OUTRO // Outros tipos de documentos não listados explicitamente
}
```
```java
package br.com.legalconnect.advogado.application.dto.request;

import java.time.LocalDate;
import java.util.UUID;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para requisição de Certificação.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class CertificacaoRequestDTO {

    private UUID id; // Para identificação em operações de atualização/deleção

    @NotBlank(message = "O nome da certificação é obrigatório.")
    @Size(max = 255, message = "O nome da certificação deve ter no máximo 255 caracteres.")
    private String nome;

    @Size(max = 255, message = "A instituição da certificação deve ter no máximo 255 caracteres.")
    private String instituicao;

    @NotNull(message = "A data de conclusão da certificação é obrigatória.")
    @PastOrPresent(message = "A data de conclusão da certificação não pode ser uma data futura.")
    private LocalDate dataConclusao;
}
```
```java
package br.com.legalconnect.advogado.application.dto.request;

import br.com.legalconnect.advogado.application.dto.enums.DocumentoTipo;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para requisição de upload de documento.
 * O campo 'tipoDocumento' foi alterado de String para o enum DocumentoTipo
 * para garantir tipagem segura e validação.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class DocumentoUploadRequest {
    @NotBlank(message = "O nome do arquivo é obrigatório.")
    @Size(max = 255, message = "O nome do arquivo deve ter no máximo 255 caracteres.")
    private String nomeArquivo;

    // Alterado de String para o enum DocumentoTipo para tipagem segura
    @NotNull(message = "O tipo do documento é obrigatório.")
    private DocumentoTipo tipoDocumento;

    @NotBlank(message = "O conteúdo do arquivo em Base64 é obrigatório.")
    private String arquivoBase64;

    @NotBlank(message = "O tipo MIME do arquivo é obrigatório.")
    @Size(max = 100, message = "O tipo MIME do arquivo deve ter no máximo 100 caracteres.")
    private String mimeType;
}
```
```java
package br.com.legalconnect.advogado.application.dto.request;

import java.time.LocalDate;
import java.util.UUID;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para requisição de Experiência Profissional.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ExperienciaProfissionalRequestDTO {
    private UUID id; // Para identificação em operações de atualização/deleção

    @NotBlank(message = "O cargo da experiência é obrigatório.")
    @Size(max = 255, message = "O cargo da experiência deve ter no máximo 255 caracteres.")
    private String cargo;

    @NotBlank(message = "O nome da empresa da experiência é obrigatório.")
    @Size(max = 255, message = "O nome da empresa da experiência deve ter no máximo 255 caracteres.")
    private String empresa;

    @NotNull(message = "A data de início da experiência é obrigatória.")
    @PastOrPresent(message = "A data de início da experiência não pode ser uma data futura.")
    private LocalDate dataInicio;

    @PastOrPresent(message = "A data de fim da experiência não pode ser uma data futura.")
    private LocalDate dataFim; // Pode ser nulo se for a experiência atual

    private String descricao;
}
```
```java
package br.com.legalconnect.advogado.application.dto.request;

import java.time.LocalDate;
import java.util.UUID;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para requisição de Formação Acadêmica.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class FormacaoAcademicaRequestDTO {

    private UUID id; // Para identificação em operações de atualização/deleção

    @NotBlank(message = "O nome do curso é obrigatório.")
    @Size(max = 255, message = "O nome do curso deve ter no máximo 255 caracteres.")
    private String curso;

    @NotBlank(message = "O nome da instituição é obrigatório.")
    @Size(max = 255, message = "O nome da instituição deve ter no máximo 255 caracteres.")
    private String instituicao;

    @NotNull(message = "A data de conclusão da formação é obrigatória.")
    @PastOrPresent(message = "A data de conclusão da formação não pode ser uma data futura.")
    private LocalDate dataConclusao;
}
```
```java
package br.com.legalconnect.advogado.application.dto.request;

import java.util.List;
import java.util.UUID;

import br.com.legalconnect.commom.dto.request.PessoaRequestDTO; // Importar PessoaRequestDTO
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para criação de um novo Profissional.
 * Este DTO agora compõe um PessoaRequestDTO para os dados de Pessoa e Usuário.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class ProfissionalCreateRequest extends PessoaRequestDTO {

    @NotBlank(message = "O número da OAB é obrigatório.")
    @Size(min = 5, max = 50, message = "O número da OAB deve ter entre 5 e 50 caracteres.")
    private String numeroOab;

    @NotNull(message = "A indicação de uso do marketplace é obrigatória.")
    private Boolean usaMarketplace;

    @NotNull(message = "O ID do plano é obrigatório.")
    private UUID planoId;

    @NotNull(message = "O ID do tenant é obrigatório.")
    private UUID tenantId;

    // Relacionamentos para dados mestres que podem ser definidos na criação
    private List<UUID> locaisAtuacaoIds;
    private List<UUID> areaAtuacaoIds;
    private List<UUID> idiomaIds;
    private List<UUID> tipoAtendimentoIds;

    // DTOs para certificações, experiências e formações na criação (opcional)
    @Valid
    private List<CertificacaoRequestDTO> certificacoes;
    @Valid
    private List<ExperienciaProfissionalRequestDTO> experiencias;
    @Valid
    private List<FormacaoAcademicaRequestDTO> formacoes;
}
```
```java
package br.com.legalconnect.advogado.application.dto.request;

import java.util.List;
import java.util.UUID;

import br.com.legalconnect.commom.dto.request.PessoaRequestDTO; // Importar PessoaRequestDTO
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para atualização de um Profissional.
 * Permite a atualização dos dados da Pessoa associada e dos campos específicos
 * de Profissional,
 * bem como de listas aninhadas.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ProfissionalUpdateRequest {
    @NotNull(message = "O ID do profissional é obrigatório para atualização.")
    private UUID id;

    @Valid
    // A PessoaRequestDTO interna deve ter seu próprio ID se for uma atualização de
    // pessoa existente
    private PessoaRequestDTO pessoa; // Composição: Profissional 'tem uma' Pessoa

    @NotBlank(message = "O número da OAB do profissional é obrigatório para atualização.")
    private String numeroOab;

    @NotNull(message = "A indicação de uso do marketplace é obrigatória.")
    private Boolean usaMarketplace;

    private UUID empresaId; // Pode ser nulo se não houver empresa associada ou se for desvinculada

    private UUID planoId; // Pode ser nulo se o plano não for alterado

    // Listas de UUIDs para dados mestres
    private List<UUID> locaisAtuacaoIds;
    private List<UUID> areaAtuacaoIds;
    private List<UUID> idiomaIds;
    private List<UUID> tipoAtendimentoIds;

    // Listas de DTOs aninhados para certificações, experiências, formações
    // O ID em cada DTO aninhado indicará se é uma criação, atualização ou remoção.
    @Valid
    private List<CertificacaoRequestDTO> certificacoes;
    @Valid
    private List<ExperienciaProfissionalRequestDTO> experiencias;
    @Valid
    private List<FormacaoAcademicaRequestDTO> formacoes;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.util.UUID;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Área de Atuação.
 * Usado para retornar detalhes completos da Área de Atuação.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AreaAtuacaoResponseDTO {
    private UUID id;
    private String nome;
    private String descricao;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.time.LocalDate;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Certificação.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class CertificacaoResponseDTO {
    private UUID id;
    private String nome;
    private String instituicao;
    private LocalDate dataConclusao;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Documento.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class DocumentoResponseDTO {
    private UUID id;
    private String nomeArquivo;
    private String urlS3;
    private String tipoDocumento;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.time.LocalDate;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Experiência Profissional.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ExperienciaProfissionalResponseDTO {
    private UUID id;
    private String cargo;
    private String empresa;
    private LocalDate dataInicio;
    private LocalDate dataFim;
    private String descricao;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.time.LocalDate;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Formação Acadêmica.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class FormacaoAcademicaResponseDTO {
    private UUID id;
    private String curso;
    private String instituicao;
    private LocalDate dataConclusao;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.util.UUID;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Idioma.
 * Usado para retornar detalhes completos do Idioma.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class IdiomaResponseDTO {
    private UUID id;
    private String nome;
    private String codigo;
    private String nivel;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.util.UUID;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Local de Atuação.
 * Usado para retornar detalhes completos do Local de Atuação.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class LocalAtuacaoResponseDTO {
    private UUID id;
    private String nome;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.util.List;
import java.util.UUID;

import br.com.legalconnect.commom.dto.response.PessoaResponseDTO; // Importar PessoaResponseDTO
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO de resposta detalhada para um Profissional.
 * Agora compõe um PessoaResponseDTO para os dados de Pessoa e Usuário.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ProfissionalResponseDTO {
    private UUID id; // ID do Profissional

    private PessoaResponseDTO pessoa; // Composição: Profissional 'tem uma' Pessoa

    private String numeroOab;
    private String statusProfissional;
    private Boolean usaMarketplace;
    private Boolean fazParteDePlano;

    // IDs de entidades relacionadas
    private UUID empresaId;
    private UUID planoId;
    private UUID tenantId;

    // Listas de DTOs aninhados
    private List<CertificacaoResponseDTO> certificacoes;
    private List<DocumentoResponseDTO> documentos;
    private List<ExperienciaProfissionalResponseDTO> experiencias;
    private List<FormacaoAcademicaResponseDTO> formacoes;

    // Listas de DTOs de dados mestres (detalhados)
    private List<LocalAtuacaoResponseDTO> locaisAtuacao;
    private List<AreaAtuacaoResponseDTO> areasAtuacao;
    private List<IdiomaResponseDTO> idiomas;
    private List<TipoAtendimentoResponseDTO> tiposAtendimento;
    private List<RoleProfissionalResponseDTO> rolesProfissional; // DTO para Role do Profissional
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.util.UUID;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Role de Profissional.
 * Usado para retornar detalhes completos da Role.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RoleProfissionalResponseDTO {
    private UUID id;
    private String name;
    // O tenantId pode ser incluído se for relevante para o frontend
    // private UUID tenantId;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.util.UUID;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Tipo de Atendimento.
 * Usado para retornar detalhes completos do Tipo de Atendimento.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TipoAtendimentoResponseDTO {
    private UUID id;
    private String nome;
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.response.AreaAtuacaoResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.AreaAtuacao;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

/**
 * Mapper MapStruct para a entidade AreaAtuacao e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface AreaAtuacaoMapper {
    AreaAtuacaoMapper INSTANCE = Mappers.getMapper(AreaAtuacaoMapper.class);

    /**
     * Mapeia uma entidade AreaAtuacao para um AreaAtuacaoResponseDTO.
     * @param entity A entidade AreaAtuacao.
     * @return O DTO de resposta correspondente.
     */
    AreaAtuacaoResponseDTO toResponseDTO(AreaAtuacao entity);

    /**
     * Mapeia um AreaAtuacaoResponseDTO para uma entidade AreaAtuacao.
     * Útil para cenários de re-conversão ou testes, embora a criação normalmente venha de um RequestDTO.
     * @param dto O DTO de resposta.
     * @return A entidade AreaAtuacao correspondente.
     */
    AreaAtuacao toEntity(AreaAtuacaoResponseDTO dto);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.request.CertificacaoRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.CertificacaoResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.Certificacao;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;

/**
 * Mapper MapStruct para a entidade Certificacao e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface CertificacaoMapper {
    CertificacaoMapper INSTANCE = Mappers.getMapper(CertificacaoMapper.class);

    /**
     * Mapeia um CertificacaoRequestDTO para uma entidade Certificacao.
     * O campo 'profissional' e 'tenantId' na entidade devem ser setados no serviço.
     *
     * @param dto O DTO de requisição.
     * @return A entidade Certificacao correspondente.
     */
    @Mapping(target = "profissional", ignore = true)
    @Mapping(target = "tenantId", ignore = true)
    Certificacao toEntity(CertificacaoRequestDTO dto);

    /**
     * Mapeia uma entidade Certificacao para um CertificacaoResponseDTO.
     *
     * @param entity A entidade Certificacao.
     * @return O DTO de resposta correspondente.
     */
    CertificacaoResponseDTO toResponseDTO(Certificacao entity);

    /**
     * Atualiza uma entidade Certificacao existente com os dados de um CertificacaoRequestDTO.
     * O campo 'profissional' e 'tenantId' não são atualizados via DTO.
     *
     * @param dto O DTO de requisição com os dados para atualização.
     * @param entity A entidade Certificacao a ser atualizada.
     */
    @Mapping(target = "id", ignore = true) // ID não deve ser atualizado pelo DTO
    @Mapping(target = "profissional", ignore = true)
    @Mapping(target = "tenantId", ignore = true)
    void updateEntityFromDto(CertificacaoRequestDTO dto, @MappingTarget Certificacao entity);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.request.DocumentoUploadRequest;
import br.com.legalconnect.advogado.application.dto.response.DocumentoResponseDTO;
import br.com.legalconnect.advogado.application.dto.enums.DocumentoTipo;
import br.com.legalconnect.advogado.domain.modal.entity.Documento;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.Named;
import org.mapstruct.factory.Mappers;

/**
 * Mapper MapStruct para a entidade Documento e seus DTOs.
 * Gerencia a conversão entre DocumentoUploadRequest, Documento e DocumentoResponseDTO.
 */
@Mapper(componentModel = "spring")
public interface DocumentoMapper {
    DocumentoMapper INSTANCE = Mappers.getMapper(DocumentoMapper.class);

    /**
     * Mapeia um DocumentoUploadRequest para uma entidade Documento.
     * Ignora 'arquivoBase64' e 'mimeType' (dados para upload, não persistentes na entidade).
     * 'urlS3', 'profissional' e 'tenantId' devem ser setados no serviço.
     *
     * @param dto O DTO de requisição para upload de documento.
     * @return A entidade Documento correspondente.
     */
    @Mapping(target = "urlS3", ignore = true) // Preenchido após o upload bem-sucedido
    @Mapping(target = "profissional", ignore = true) // Relacionamento com Profissional, preenchido no serviço
    @Mapping(target = "tenantId", ignore = true) // TenantId, preenchido no serviço
    @Mapping(source = "tipoDocumento", target = "tipoDocumento", qualifiedByName = "mapDocumentoTipoToString")
    Documento toEntity(DocumentoUploadRequest dto);

    /**
     * Mapeia uma entidade Documento para um DocumentoResponseDTO.
     *
     * @param entity A entidade Documento.
     * @return O DTO de resposta correspondente.
     */
    @Mapping(source = "tipoDocumento", target = "tipoDocumento") // Mapeamento direto de String para String
    DocumentoResponseDTO toResponseDTO(Documento entity);

    /**
     * Atualiza uma entidade Documento existente com os dados de um DocumentoUploadRequest.
     * Campos ignorados: 'id', 'urlS3', 'profissional', 'tenantId'.
     *
     * @param dto O DTO de requisição.
     * @param entity A entidade Documento a ser atualizada.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "urlS3", ignore = true)
    @Mapping(target = "profissional", ignore = true)
    @Mapping(target = "tenantId", ignore = true)
    @Mapping(source = "tipoDocumento", target = "tipoDocumento", qualifiedByName = "mapDocumentoTipoToString")
    void updateEntityFromDto(DocumentoUploadRequest dto, @MappingTarget Documento entity);

    /**
     * Converte um enum DocumentoTipo para sua representação em String.
     * Usado para mapear de DTO (enum) para Entidade (String).
     *
     * @param tipo O enum DocumentoTipo.
     * @return A representação em String do enum.
     */
    @Named("mapDocumentoTipoToString")
    default String mapDocumentoTipoToString(DocumentoTipo tipo) {
        return tipo != null ? tipo.name() : null;
    }
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.request.ExperienciaProfissionalRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.ExperienciaProfissionalResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.ExperienciaProfissional;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;

/**
 * Mapper MapStruct para a entidade ExperienciaProfissional e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface ExperienciaProfissionalMapper {
    ExperienciaProfissionalMapper INSTANCE = Mappers.getMapper(ExperienciaProfissionalMapper.class);

    /**
     * Mapeia um ExperienciaProfissionalRequestDTO para uma entidade ExperienciaProfissional.
     * Os campos 'profissional' e 'tenantId' devem ser setados no serviço.
     *
     * @param dto O DTO de requisição.
     * @return A entidade ExperienciaProfissional correspondente.
     */
    @Mapping(target = "profissional", ignore = true)
    @Mapping(target = "tenantId", ignore = true)
    ExperienciaProfissional toEntity(ExperienciaProfissionalRequestDTO dto);

    /**
     * Mapeia uma entidade ExperienciaProfissional para um ExperienciaProfissionalResponseDTO.
     *
     * @param entity A entidade ExperienciaProfissional.
     * @return O DTO de resposta correspondente.
     */
    ExperienciaProfissionalResponseDTO toResponseDTO(ExperienciaProfissional entity);

    /**
     * Atualiza uma entidade ExperienciaProfissional existente com os dados de um ExperienciaProfissionalRequestDTO.
     * Os campos 'profissional' e 'tenantId' não são atualizados via DTO.
     *
     * @param dto O DTO de requisição com os dados para atualização.
     * @param entity A entidade ExperienciaProfissional a ser atualizada.
     */
    @Mapping(target = "id", ignore = true) // ID não deve ser atualizado pelo DTO
    @Mapping(target = "profissional", ignore = true)
    @Mapping(target = "tenantId", ignore = true)
    void updateEntityFromDto(ExperienciaProfissionalRequestDTO dto, @MappingTarget ExperienciaProfissional entity);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.request.FormacaoAcademicaRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.FormacaoAcademicaResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.FormacaoAcademica;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;

/**
 * Mapper MapStruct para a entidade FormacaoAcademica e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface FormacaoAcademicaMapper {
    FormacaoAcademicaMapper INSTANCE = Mappers.getMapper(FormacaoAcademicaMapper.class);

    /**
     * Mapeia um FormacaoAcademicaRequestDTO para uma entidade FormacaoAcademica.
     * Os campos 'profissional' e 'tenantId' devem ser setados no serviço.
     *
     * @param dto O DTO de requisição.
     * @return A entidade FormacaoAcademica correspondente.
     */
    @Mapping(target = "profissional", ignore = true)
    @Mapping(target = "tenantId", ignore = true)
    FormacaoAcademica toEntity(FormacaoAcademicaRequestDTO dto);

    /**
     * Mapeia uma entidade FormacaoAcademica para um FormacaoAcademicaResponseDTO.
     *
     * @param entity A entidade FormacaoAcademica.
     * @return O DTO de resposta correspondente.
     */
    FormacaoAcademicaResponseDTO toResponseDTO(FormacaoAcademica entity);

    /**
     * Atualiza uma entidade FormacaoAcademica existente com os dados de um FormacaoAcademicaRequestDTO.
     * Os campos 'profissional' e 'tenantId' não são atualizados via DTO.
     *
     * @param dto O DTO de requisição com os dados para atualização.
     * @param entity A entidade FormacaoAcademica a ser atualizada.
     */
    @Mapping(target = "id", ignore = true) // ID não deve ser atualizado pelo DTO
    @Mapping(target = "profissional", ignore = true)
    @Mapping(target = "tenantId", ignore = true)
    void updateEntityFromDto(FormacaoAcademicaRequestDTO dto, @MappingTarget FormacaoAcademica entity);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.response.IdiomaResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.Idioma;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

/**
 * Mapper MapStruct para a entidade Idioma e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface IdiomaMapper {
    IdiomaMapper INSTANCE = Mappers.getMapper(IdiomaMapper.class);

    /**
     * Mapeia uma entidade Idioma para um IdiomaResponseDTO.
     * @param entity A entidade Idioma.
     * @return O DTO de resposta correspondente.
     */
    IdiomaResponseDTO toResponseDTO(Idioma entity);

    /**
     * Mapeia um IdiomaResponseDTO para uma entidade Idioma.
     * @param dto O DTO de resposta.
     * @return A entidade Idioma correspondente.
     */
    Idioma toEntity(IdiomaResponseDTO dto);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.response.LocalAtuacaoResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.LocalAtuacao;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

/**
 * Mapper MapStruct para a entidade LocalAtuacao e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface LocalAtuacaoMapper {
    LocalAtuacaoMapper INSTANCE = Mappers.getMapper(LocalAtuacaoMapper.class);

    /**
     * Mapeia uma entidade LocalAtuacao para um LocalAtuacaoResponseDTO.
     * @param entity A entidade LocalAtuacao.
     * @return O DTO de resposta correspondente.
     */
    LocalAtuacaoResponseDTO toResponseDTO(LocalAtuacao entity);

    /**
     * Mapeia um LocalAtuacaoResponseDTO para uma entidade LocalAtuacao.
     * @param dto O DTO de resposta.
     * @return A entidade LocalAtuacao correspondente.
     */
    LocalAtuacao toEntity(LocalAtuacaoResponseDTO dto);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.advogado.application.dto.request.ProfissionalCreateRequest;
import br.com.legalconnect.advogado.application.dto.request.ProfissionalUpdateRequest;
import br.com.legalconnect.advogado.application.dto.response.ProfissionalResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.commom.mapper.PessoaMapper;

/**
 * Mapper MapStruct para a entidade Profissional e seus DTOs de requisição e
 * resposta.
 * Lida com mapeamentos complexos e aninhados, delegando para outros mappers
 * quando necessário.
 */
@Mapper(componentModel = "spring", uses = {
        PessoaMapper.class,
        CertificacaoMapper.class,
        DocumentoMapper.class,
        ExperienciaProfissionalMapper.class,
        FormacaoAcademicaMapper.class,
        RoleProfissionalMapper.class
        // Mappers para AreaAtuacao, Idioma, LocalAtuacao, TipoAtendimento NÃO são
        // usados diretamente aqui
        // para mapear UUIDs para DTOs completos, pois isso é responsabilidade do
        // serviço.
})
public interface ProfissionalMapper {
    ProfissionalMapper INSTANCE = Mappers.getMapper(ProfissionalMapper.class);

    /**
     * Mapeia um ProfissionalCreateRequest para uma nova entidade Profissional.
     *
     * @param dto O DTO de requisição para criação.
     * @return A nova entidade Profissional.
     */
    // @Mapping(source = "pessoa.user", target = "usuario") // Mapeia o
    // PessoaRequestDTO (que é 'pessoa') para a superclasse 'usuario'
    @Mapping(target = "id", ignore = true) // ID do Profissional será gerado
    @Mapping(target = "pessoaId", ignore = true) // Será preenchido no serviço após a persistência da Pessoa
    @Mapping(target = "statusProfissional", ignore = true) // Definido pela lógica de negócio
    @Mapping(target = "fazParteDePlano", ignore = true) // Definido pela lógica de negócio
    @Mapping(target = "certificacoes", ignore = true) // Coleções aninhadas gerenciadas no serviço
    @Mapping(target = "documentos", ignore = true) // Coleções aninhadas gerenciadas no serviço
    @Mapping(target = "experiencias", ignore = true) // Coleções aninhadas gerenciadas no serviço
    @Mapping(target = "formacoes", ignore = true) // Coleções aninhadas gerenciadas no serviço
    @Mapping(target = "roleProfissionals", ignore = true) // Coleções aninhadas gerenciadas no serviço
    @Mapping(source = "locaisAtuacaoIds", target = "locaisAtuacaoIds") // List<UUID> para Set<UUID>
    @Mapping(source = "areaAtuacaoIds", target = "areaAtuacaoIds") // List<UUID> para Set<UUID>
    @Mapping(source = "idiomaIds", target = "idiomaIds") // List<UUID> para Set<UUID>
    @Mapping(source = "tipoAtendimentoIds", target = "tipoAtendimentoIds") // List<UUID> para Set<UUID>
    Profissional toEntity(ProfissionalCreateRequest dto);

    /**
     * Atualiza uma entidade Profissional existente com os dados de um
     * ProfissionalUpdateRequest.
     *
     * @param dto    O DTO de requisição para atualização.
     * @param entity A entidade Profissional a ser atualizada.
     */
    @Mapping(target = "id", ignore = true) // ID da entidade não deve ser alterado pelo DTO
    @Mapping(source = "pessoa.usuario", target = "usuario") // Mapeia o DTO 'pessoa.usuario' para a superclasse
                                                            // 'usuario'
    @Mapping(target = "pessoaId", ignore = true) // Gerenciado pelo sistema
    @Mapping(target = "statusProfissional", ignore = true) // Definido pela lógica de negócio
    @Mapping(target = "fazParteDePlano", ignore = true) // Definido pela lógica de negócio
    @Mapping(target = "certificacoes", ignore = true) // Gerenciado pelo serviço (criação/atualização/remoção)
    @Mapping(target = "documentos", ignore = true) // Gerenciado pelo serviço
    @Mapping(target = "experiencias", ignore = true) // Gerenciado pelo serviço
    @Mapping(target = "formacoes", ignore = true) // Gerenciado pelo serviço
    @Mapping(target = "roleProfissionals", ignore = true) // Gerenciado pelo serviço
    @Mapping(source = "locaisAtuacaoIds", target = "locaisAtuacaoIds") // List<UUID> para Set<UUID>
    @Mapping(source = "areaAtuacaoIds", target = "areaAtuacaoIds") // List<UUID> para Set<UUID>
    @Mapping(source = "idiomaIds", target = "idiomaIds") // List<UUID> para Set<UUID>
    @Mapping(source = "tipoAtendimentoIds", target = "tipoAtendimentoIds") // List<UUID> para Set<UUID>
    void updateEntityFromDto(ProfissionalUpdateRequest dto, @MappingTarget Profissional entity);

    /**
     * Mapeia uma entidade Profissional para um ProfissionalResponseDTO.
     * Campos de dados mestres (locaisAtuacao, areasAtuacao, idiomas,
     * tiposAtendimento)
     * são ignorados aqui e devem ser populados pela camada de serviço,
     * pois a entidade Profissional armazena apenas os IDs dessas relações.
     *
     * @param entity A entidade Profissional.
     * @return O DTO de resposta correspondente.
     */
    @Mapping(source = "usuario", target = "pessoa") // Mapeia a superclasse 'usuario' para 'pessoa' no DTO
    @Mapping(target = "locaisAtuacao", ignore = true) // Populado pelo serviço
    @Mapping(target = "areasAtuacao", ignore = true) // Populado pelo serviço
    @Mapping(target = "idiomas", ignore = true) // Populado pelo serviço
    @Mapping(target = "tiposAtendimento", ignore = true) // Populado pelo serviço
    @Mapping(source = "roleProfissionals", target = "rolesProfissional") // Mapeia Set<RoleProfissional> para
                                                                         // List<RoleProfissionalResponseDTO>
    ProfissionalResponseDTO toResponseDTO(Profissional entity);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.response.RoleProfissionalResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.RoleProfissional;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

/**
 * Mapper MapStruct para a entidade RoleProfissional e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface RoleProfissionalMapper {
    RoleProfissionalMapper INSTANCE = Mappers.getMapper(RoleProfissionalMapper.class);

    /**
     * Mapeia uma entidade RoleProfissional para um RoleProfissionalResponseDTO.
     * Ignora 'tenantId' na resposta se não for relevante para o frontend.
     *
     * @param entity A entidade RoleProfissional.
     * @return O DTO de resposta correspondente.
     */
    @Mapping(target = "id", source = "id")
    @Mapping(target = "name", source = "name")
    RoleProfissionalResponseDTO toResponseDTO(RoleProfissional entity);

    /**
     * Mapeia um RoleProfissionalResponseDTO para uma entidade RoleProfissional.
     * 'tenantId' deve ser definido pelo serviço.
     *
     * @param dto O DTO de resposta.
     * @return A entidade RoleProfissional correspondente.
     */
    @Mapping(target = "tenantId", ignore = true)
    RoleProfissional toEntity(RoleProfissionalResponseDTO dto);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.response.TipoAtendimentoResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.TipoAtendimento;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

/**
 * Mapper MapStruct para a entidade TipoAtendimento e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface TipoAtendimentoMapper {
    TipoAtendimentoMapper INSTANCE = Mappers.getMapper(TipoAtendimentoMapper.class);

    /**
     * Mapeia uma entidade TipoAtendimento para um TipoAtendimentoResponseDTO.
     * @param entity A entidade TipoAtendimento.
     * @return O DTO de resposta correspondente.
     */
    TipoAtendimentoResponseDTO toResponseDTO(TipoAtendimento entity);

    /**
     * Mapeia um TipoAtendimentoResponseDTO para uma entidade TipoAtendimento.
     * @param dto O DTO de resposta.
     * @return A entidade TipoAtendimento correspondente.
     */
    TipoAtendimento toEntity(TipoAtendimentoResponseDTO dto);
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.time.LocalDateTime;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.advogado.domain.repository.ProfissionalRepository;
import br.com.legalconnect.commom.service.EmailService; // Para enviar e-mails de confirmação
import br.com.legalconnect.commom.service.TenantContext;
import br.com.legalconnect.commom.tmp.exception.BusinessException;
import br.com.legalconnect.commom.tmp.exception.ErrorCode;
import jakarta.transaction.Transactional;
import lombok.extern.slf4j.Slf4j;

/**
 * Serviço responsável pela lógica de agendamento de consultas no Marketplace.
 */
@Slf4j
@Service
public class AgendamentoService {

    private final ProfissionalRepository profissionalRepository;
    private final GoogleCalendarService googleCalendarService;
    private final EmailService emailService;
    // Repositório de agendamentos (assumindo a entidade Agendamento)
    // private final AgendamentoRepository agendamentoRepository;

    @Autowired
    public AgendamentoService(ProfissionalRepository profissionalRepository,
            GoogleCalendarService googleCalendarService,
            EmailService emailService) {
        this.profissionalRepository = profissionalRepository;
        this.googleCalendarService = googleCalendarService;
        this.emailService = emailService;
        // this.agendamentoRepository = agendamentoRepository;
    }

    /**
     * Realiza o agendamento de uma consulta entre um cliente e um profissional.
     * Regras de Negócio:
     * - Verifica a disponibilidade do profissional na data/hora solicitada.
     * - Garante que o profissional existe e está ativo no marketplace.
     * - Integra com Google Calendar para adicionar o evento na agenda do
     * profissional.
     * - Envia e-mails de confirmação para cliente e profissional.
     *
     * @param profissionalId     ID do profissional.
     * @param clienteId          ID do cliente.
     * @param horarioAgendamento Horário da consulta.
     * @param tipoServico        Tipo de serviço agendado.
     * @return Sucesso do agendamento.
     * @throws BusinessException se o profissional não estiver disponível ou outras
     *                           regras de negócio forem violadas.
     */
    @Transactional
    public boolean agendarConsulta(UUID profissionalId, UUID clienteId, LocalDateTime horarioAgendamento,
            String tipoServico) {
        UUID tenantId = TenantContext.getCurrentTenantId(); // O agendamento ocorre dentro do contexto de um tenant

        Profissional profissional = profissionalRepository.findById(profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado."));

        // Regra de Negócio: Profissional deve estar ativo e usar marketplace
        if (!profissional.getUsaMarketplace() || !profissional.getStatusProfissional().equals("ACTIVE")) { // Assuming
                                                                                                           // "ACTIVE"
                                                                                                           // status
            throw new BusinessException(ErrorCode.ADVOCATE_NOT_AVAILABLE, HttpStatus.BAD_REQUEST,
                    "Profissional não disponível para agendamento.");
        }

        // Regra de Negócio: Verificar disponibilidade real do profissional (com Google
        // Calendar)
        boolean isAvailable = googleCalendarService.checkAvailability(profissional.getUsuario().getEmail(),
                horarioAgendamento);
        if (!isAvailable) {
            throw new BusinessException(ErrorCode.APPOINTMENT_CONFLICT, HttpStatus.CONFLICT,
                    "Horário indisponível para o profissional.");
        }

        // Regra de Negócio: Criar o registro de agendamento no banco de dados (se
        // houver entidade Agendamento)
        // Agendamento newAppointment = Agendamento.builder()
        // .profissional(profissional)
        // .clienteId(clienteId)
        // .horario(horarioAgendamento)
        // .tipoServico(tipoServico)
        // .tenantId(tenantId)
        // .build();
        // agendamentoRepository.save(newAppointment);

        // Funcionalidade Completa: Adicionar evento ao Google Calendar do profissional
        googleCalendarService.addEvent(
                profissional.getUsuario().getEmail(),
                "Consulta: " + tipoServico + " com Cliente " + clienteId, // Supondo que você pode obter o nome do
                                                                          // cliente
                horarioAgendamento,
                horarioAgendamento.plusHours(1) // Consulta de 1 hora
        );

        // Funcionalidade Completa: Enviar e-mails de confirmação
        emailService.sendAppointmentConfirmationEmail(
                profissional.getUsuario().getEmail(),
                "Você tem uma nova consulta agendada com o cliente " + clienteId + " para " + horarioAgendamento);
        // emailService.sendAppointmentConfirmationEmail(
        // clienteService.findById(clienteId).getEmail(), // Supondo um clienteService
        // "Sua consulta com " + profissional.getNomeCompleto() + " foi confirmada para
        // " + horarioAgendamento
        // );

        return true;
    }

    /**
     * Simula a avaliação de uma consulta pelo cliente.
     * Regras de Negócio:
     * - Associa a avaliação ao agendamento e ao profissional.
     * - Atualiza a média de avaliação do profissional (lógica simplificada).
     *
     * @param agendamentoId ID do agendamento avaliado.
     * @param clienteId     ID do cliente que avaliou.
     * @param rating        Nota da avaliação (1-5).
     * @param comentario    Comentário opcional.
     * @return Sucesso da avaliação.
     */
    @Transactional
    public boolean avaliarConsulta(UUID agendamentoId, UUID clienteId, int rating, String comentario) {
        // Lógica para encontrar o agendamento e associar a avaliação.
        // Agendamento agendamento =
        // agendamentoRepository.findById(agendamentoId).orElseThrow(...)
        // Criar uma entidade Avaliacao.
        // Atualizar a média de avaliação do Profissional.

        // Simulação: Apenas loga a avaliação
        log.info("Cliente {} avaliou agendamento {} com nota {} e comentário: {}", clienteId, agendamentoId, rating,
                comentario);

        // Para fins de demonstração, vamos considerar um sucesso
        return true;
    }

    // Outras funcionalidades como reagendamento, cancelamento, busca de
    // agendamentos
    // seriam implementadas aqui.
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.response.AreaAtuacaoResponseDTO;
import br.com.legalconnect.advogado.application.mapper.AreaAtuacaoMapper;
import br.com.legalconnect.advogado.domain.modal.entity.AreaAtuacao;
import br.com.legalconnect.advogado.domain.repository.AreaAtuacaoRepository;
import br.com.legalconnect.commom.tmp.exception.BusinessException;
import br.com.legalconnect.commom.tmp.exception.ErrorCode;

/**
 * Serviço para gestão de Áreas de Atuação (dados mestre).
 * Essas entidades são consideradas globais ou de um tenant específico da
 * plataforma,
 * mas para este módulo, o acesso é simplificado como dados mestre.
 */
@Service
public class AreaAtuacaoService {

    private final AreaAtuacaoRepository areaAtuacaoRepository;
    private final AreaAtuacaoMapper areaAtuacaoMapper;

    @Autowired
    public AreaAtuacaoService(AreaAtuacaoRepository areaAtuacaoRepository, AreaAtuacaoMapper areaAtuacaoMapper) {
        this.areaAtuacaoRepository = areaAtuacaoRepository;
        this.areaAtuacaoMapper = areaAtuacaoMapper;
    }

    /**
     * Busca uma Área de Atuação pelo ID.
     *
     * @param id ID da Área de Atuação.
     * @return DTO da Área de Atuação.
     * @throws BusinessException se a Área de Atuação não for encontrada.
     */
    public AreaAtuacaoResponseDTO findAreaAtuacaoById(UUID id) {
        AreaAtuacao areaAtuacao = areaAtuacaoRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Área de Atuação não encontrada."));
        return areaAtuacaoMapper.toResponseDTO(areaAtuacao);
    }

    /**
     * Lista todas as Áreas de Atuação.
     *
     * @return Lista de DTOs de Áreas de Atuação.
     */
    public List<AreaAtuacaoResponseDTO> findAllAreasAtuacao() {
        return areaAtuacaoRepository.findAll().stream()
                .map(areaAtuacaoMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    // Métodos para criar, atualizar e deletar podem ser adicionados
    // se essas entidades mestre forem gerenciáveis via API
    // Por exemplo, por um ADMIN da plataforma.
    // Ex:
    /*
     * @Transactional
     * public AreaAtuacaoResponseDTO createAreaAtuacao(AreaAtuacaoRequestDTO
     * requestDTO) {
     * if (areaAtuacaoRepository.findByNome(requestDTO.getNome()).isPresent()) {
     * throw new BusinessException(ErrorCode.DADOS_INVALIDOS, HttpStatus.CONFLICT,
     * "Área de Atuação com este nome já existe.");
     * }
     * AreaAtuacao areaAtuacao = areaAtuacaoMapper.toEntity(requestDTO);
     * areaAtuacao = areaAtuacaoRepository.save(areaAtuacao);
     * return areaAtuacaoMapper.toResponseDTO(areaAtuacao);
     * }
     * 
     * @Transactional
     * public AreaAtuacaoResponseDTO updateAreaAtuacao(UUID id,
     * AreaAtuacaoRequestDTO requestDTO) {
     * AreaAtuacao existing = areaAtuacaoRepository.findById(id)
     * .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
     * HttpStatus.NOT_FOUND, "Área de Atuação não encontrada."));
     * if (!existing.getNome().equalsIgnoreCase(requestDTO.getNome()) &&
     * areaAtuacaoRepository.findByNome(requestDTO.getNome()).isPresent()) {
     * throw new BusinessException(ErrorCode.DADOS_INVALIDOS, HttpStatus.CONFLICT,
     * "Área de Atuação com este nome já existe.");
     * }
     * areaAtuacaoMapper.updateEntityFromDto(requestDTO, existing); // Supondo um
     * updateEntityFromDto no mapper
     * existing = areaAtuacaoRepository.save(existing);
     * return areaAtuacaoMapper.toResponseDTO(existing);
     * }
     * 
     * @Transactional
     * public void deleteAreaAtuacao(UUID id) {
     * if (!areaAtuacaoRepository.existsById(id)) {
     * throw new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
     * HttpStatus.NOT_FOUND, "Área de Atuação não encontrada para deleção.");
     * }
     * // Regra de Negócio: Verificar se está em uso por algum Profissional antes de
     * deletar
     * // if (profissionalRepository.existsByAreaAtuacaoId(id)) { ... }
     * areaAtuacaoRepository.deleteById(id);
     * }
     */
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.request.CertificacaoRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.CertificacaoResponseDTO;
import br.com.legalconnect.advogado.application.mapper.CertificacaoMapper;
import br.com.legalconnect.advogado.domain.modal.entity.Certificacao;
import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.advogado.domain.repository.CertificacaoRepository;
import br.com.legalconnect.advogado.domain.repository.ProfissionalRepository;
import br.com.legalconnect.commom.service.TenantContext;
import br.com.legalconnect.commom.tmp.exception.BusinessException;
import br.com.legalconnect.commom.tmp.exception.ErrorCode;
import jakarta.transaction.Transactional;

/**
 * Serviço responsável pela gestão das certificações de um Profissional.
 * Este serviço é granular e pode ser usado para operações diretas em
 * certificações,
 * embora o ProfissionalService orquestre a maioria.
 */
@Service
public class CertificacaoService {

    private final CertificacaoRepository certificacaoRepository;
    private final CertificacaoMapper certificacaoMapper;
    private final ProfissionalRepository profissionalRepository;

    @Autowired
    public CertificacaoService(CertificacaoRepository certificacaoRepository,
            CertificacaoMapper certificacaoMapper,
            ProfissionalRepository profissionalRepository) {
        this.certificacaoRepository = certificacaoRepository;
        this.certificacaoMapper = certificacaoMapper;
        this.profissionalRepository = profissionalRepository;
    }

    /**
     * Cria uma nova certificação para um profissional específico.
     * Regras de Negócio:
     * - O profissional deve existir e pertencer ao tenant atual.
     * - A certificação é associada ao profissional e ao tenant.
     *
     * @param profissionalId ID do profissional.
     * @param requestDTO     DTO com os dados da certificação.
     * @return DTO da certificação criada.
     */
    @Transactional
    public CertificacaoResponseDTO createCertificacao(UUID profissionalId, CertificacaoRequestDTO requestDTO) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Profissional profissional = profissionalRepository.findById(profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado."));

        if (!profissional.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Profissional pertence a outro tenant.");
        }

        Certificacao certificacao = certificacaoMapper.toEntity(requestDTO);
        certificacao.setProfissional(profissional);
        certificacao.setTenantId(tenantId);

        certificacao = certificacaoRepository.save(certificacao); // profissionalId é passado para o
                                                                  // save no repositório customizado
        return certificacaoMapper.toResponseDTO(certificacao);
    }

    /**
     * Atualiza uma certificação existente de um profissional.
     * Regras de Negócio:
     * - A certificação deve existir e pertencer ao profissional e tenant corretos.
     *
     * @param profissionalId ID do profissional.
     * @param certificacaoId ID da certificação.
     * @param requestDTO     DTO com os dados para atualização.
     * @return DTO da certificação atualizada.
     */
    @Transactional
    public CertificacaoResponseDTO updateCertificacao(UUID profissionalId, UUID certificacaoId,
            CertificacaoRequestDTO requestDTO) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Certificacao existingCertificacao = certificacaoRepository
                .findByIdAndProfissionalId(certificacaoId, profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Certificação não encontrada para este profissional."));

        if (!existingCertificacao.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Certificação pertence a outro tenant ou profissional.");
        }

        certificacaoMapper.updateEntityFromDto(requestDTO, existingCertificacao);
        existingCertificacao = certificacaoRepository.save(existingCertificacao);
        return certificacaoMapper.toResponseDTO(existingCertificacao);
    }

    /**
     * Busca uma certificação pelo ID do profissional e da certificação.
     *
     * @param profissionalId ID do profissional.
     * @param certificacaoId ID da certificação.
     * @return DTO da certificação.
     */
    public CertificacaoResponseDTO findCertificacaoById(UUID profissionalId, UUID certificacaoId) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Certificacao certificacao = certificacaoRepository.findByIdAndProfissionalId(certificacaoId, profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Certificação não encontrada para este profissional."));

        if (!certificacao.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Certificação pertence a outro tenant.");
        }

        return certificacaoMapper.toResponseDTO(certificacao);
    }

    /**
     * Lista todas as certificações de um profissional.
     *
     * @param profissionalId ID do profissional.
     * @return Lista de DTOs de certificações.
     */
    public List<CertificacaoResponseDTO> findAllCertificacoesByProfissionalId(UUID profissionalId) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        // Verificar se o profissional existe e pertence ao tenant
        Profissional profissional = profissionalRepository.findById(profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado."));
        if (!profissional.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Profissional pertence a outro tenant.");
        }

        return certificacaoRepository.findAllByProfissionalId(profissionalId).stream()
                .map(certificacaoMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    /**
     * Deleta uma certificação de um profissional.
     *
     * @param profissionalId ID do profissional.
     * @param certificacaoId ID da certificação a ser deletada.
     */
    @Transactional
    public void deleteCertificacao(UUID profissionalId, UUID certificacaoId) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        // Verificar se a certificação existe e pertence ao profissional e tenant
        Certificacao existingCertificacao = certificacaoRepository
                .findByIdAndProfissionalId(certificacaoId, profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Certificação não encontrada para deleção."));

        if (!existingCertificacao.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Certificação pertence a outro tenant.");
        }

        certificacaoRepository.deleteByIdAndProfissionalId(certificacaoId, profissionalId);
    }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.Base64; // Para decodificar Base64
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.request.DocumentoUploadRequest;
import br.com.legalconnect.advogado.application.dto.response.DocumentoResponseDTO;
import br.com.legalconnect.advogado.application.mapper.DocumentoMapper;
import br.com.legalconnect.advogado.domain.modal.entity.Documento;
import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.advogado.domain.repository.DocumentoRepository;
import br.com.legalconnect.advogado.domain.repository.ProfissionalRepository;
import br.com.legalconnect.commom.service.S3Service;
import br.com.legalconnect.commom.service.TenantContext;
import br.com.legalconnect.commom.tmp.exception.BusinessException;
import br.com.legalconnect.commom.tmp.exception.ErrorCode;
import jakarta.transaction.Transactional;

/**
 * Serviço responsável pela gestão de documentos de um Profissional.
 * Inclui o upload de arquivos para o S3 e o armazenamento dos metadados no
 * banco de dados.
 */
@Service
public class DocumentoService {

    private final DocumentoRepository documentoRepository;
    private final DocumentoMapper documentoMapper;
    private final ProfissionalRepository profissionalRepository;
    private final S3Service s3Service; // Serviço para integração com S3

    @Autowired
    public DocumentoService(DocumentoRepository documentoRepository,
            DocumentoMapper documentoMapper,
            ProfissionalRepository profissionalRepository,
            S3Service s3Service) {
        this.documentoRepository = documentoRepository;
        this.documentoMapper = documentoMapper;
        this.profissionalRepository = profissionalRepository;
        this.s3Service = s3Service;
    }

    /**
     * Realiza o upload de um documento para o S3 e persiste seus metadados.
     * Regras de Negócio:
     * - O profissional deve existir e pertencer ao tenant atual.
     * - O conteúdo do arquivo em Base64 é decodificado e enviado ao S3.
     * - A URL do S3 é armazenada no banco de dados.
     *
     * @param profissionalId ID do profissional.
     * @param request        DTO com os dados do documento e o arquivo em Base64.
     * @return DTO do documento criado.
     * @throws BusinessException em caso de falha no upload ou se o profissional não
     *                           for encontrado.
     */
    @Transactional
    public DocumentoResponseDTO uploadDocumento(UUID profissionalId, DocumentoUploadRequest request) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Profissional profissional = profissionalRepository.findById(profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado para upload de documento."));

        if (!profissional.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Profissional pertence a outro tenant.");
        }

        // Decodificar Base64 e fazer upload para S3
        byte[] fileBytes;
        try {
            fileBytes = Base64.getDecoder().decode(request.getArquivoBase64());
        } catch (IllegalArgumentException e) {
            throw new BusinessException(ErrorCode.INVALID_DOCUMENT_FORMAT, HttpStatus.BAD_REQUEST,
                    "Conteúdo do arquivo em Base64 inválido.");
        }

        String s3Key = "profissionais/" + profissionalId + "/documentos/" + UUID.randomUUID() + "/"
                + request.getNomeArquivo();
        String fileUrl = s3Service.uploadFile(fileBytes, s3Key, request.getMimeType());

        if (fileUrl == null) {
            throw new BusinessException(ErrorCode.DOCUMENT_UPLOAD_FAILED, HttpStatus.INTERNAL_SERVER_ERROR,
                    "Falha ao fazer upload do documento para o S3.");
        }

        Documento documento = documentoMapper.toEntity(request);
        documento.setUrlS3(fileUrl);
        documento.setProfissional(profissional);
        documento.setTenantId(tenantId);

        documento = documentoRepository.save(documento);
        return documentoMapper.toResponseDTO(documento);
    }

    /**
     * Busca um documento pelo seu ID e pelo ID do profissional.
     * Regras de Negócio:
     * - O documento deve pertencer ao profissional e ao tenant correto.
     *
     * @param profissionalId ID do profissional.
     * @param documentoId    ID do documento.
     * @return DTO do documento encontrado.
     * @throws BusinessException se o documento não for encontrado.
     */
    public DocumentoResponseDTO findDocumentoById(UUID profissionalId, UUID documentoId) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Documento documento = documentoRepository.findByIdAndProfissionalId(documentoId, profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Documento não encontrado para este profissional."));

        if (!documento.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Documento pertence a outro tenant ou profissional.");
        }

        return documentoMapper.toResponseDTO(documento);
    }

    /**
     * Lista todos os documentos de um profissional.
     * Regras de Negócio:
     * - Apenas documentos do tenant atual são retornados.
     *
     * @param profissionalId ID do profissional.
     * @return Lista de DTOs de documentos.
     */
    public List<DocumentoResponseDTO> findAllDocumentosByProfissionalId(UUID profissionalId) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Profissional profissional = profissionalRepository.findById(profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado."));
        if (!profissional.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Profissional pertence a outro tenant.");
        }

        return documentoRepository.findAllByProfissionalId(profissionalId).stream()
                .map(documentoMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    /**
     * Deleta um documento pelo seu ID e pelo ID do profissional.
     * Regras de Negócio:
     * - O documento é removido do S3 antes de ser deletado do banco de dados.
     *
     * @param profissionalId ID do profissional.
     * @param documentoId    ID do documento a ser deletado.
     * @throws BusinessException se o documento não for encontrado ou falha na
     *                           deleção do S3.
     */
    @Transactional
    public void deleteDocumento(UUID profissionalId, UUID documentoId) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Documento existingDocumento = documentoRepository.findByIdAndProfissionalId(documentoId, profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Documento não encontrado para deleção."));

        if (!existingDocumento.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Documento pertence a outro tenant.");
        }

        // Deletar do S3 primeiro
        try {
            s3Service.deleteFile(existingDocumento.getUrlS3());
        } catch (Exception e) {
            throw new BusinessException(ErrorCode.ERRO_INTERNO_SERVIDOR, HttpStatus.INTERNAL_SERVER_ERROR,
                    "Falha ao deletar o documento do S3: " + e.getMessage());
        }

        documentoRepository.deleteByIdAndProfissionalId(documentoId, profissionalId);
    }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.request.ExperienciaProfissionalRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.ExperienciaProfissionalResponseDTO;
import br.com.legalconnect.advogado.application.mapper.ExperienciaProfissionalMapper;
import br.com.legalconnect.advogado.domain.modal.entity.ExperienciaProfissional;
import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.advogado.domain.repository.ExperienciaRepository;
import br.com.legalconnect.advogado.domain.repository.ProfissionalRepository;
import br.com.legalconnect.commom.service.TenantContext;
import br.com.legalconnect.commom.tmp.exception.BusinessException;
import br.com.legalconnect.commom.tmp.exception.ErrorCode;
import jakarta.transaction.Transactional;

/**
 * Serviço responsável pela gestão das experiências profissionais de um
 * Profissional.
 */
@Service
public class ExperienciaProfissionalService {

        private final ExperienciaRepository experienciaRepository;
        private final ExperienciaProfissionalMapper experienciaProfissionalMapper;
        private final ProfissionalRepository profissionalRepository;

        @Autowired
        public ExperienciaProfissionalService(ExperienciaRepository experienciaRepository,
                        ExperienciaProfissionalMapper experienciaProfissionalMapper,
                        ProfissionalRepository profissionalRepository) {
                this.experienciaRepository = experienciaRepository;
                this.experienciaProfissionalMapper = experienciaProfissionalMapper;
                this.profissionalRepository = profissionalRepository;
        }

        /**
         * Cria uma nova experiência profissional para um profissional específico.
         * Regras de Negócio:
         * - O profissional deve existir e pertencer ao tenant atual.
         * - A experiência é associada ao profissional e ao tenant.
         *
         * @param profissionalId ID do profissional.
         * @param requestDTO     DTO com os dados da experiência.
         * @return DTO da experiência criada.
         */
        @Transactional
        public ExperienciaProfissionalResponseDTO createExperienciaProfissional(UUID profissionalId,
                        ExperienciaProfissionalRequestDTO requestDTO) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                Profissional profissional = profissionalRepository.findById(profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO,
                                                HttpStatus.NOT_FOUND,
                                                "Profissional não encontrado."));

                if (!profissional.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Profissional pertence a outro tenant.");
                }

                ExperienciaProfissional experiencia = experienciaProfissionalMapper.toEntity(requestDTO);
                experiencia.setProfissional(profissional);
                experiencia.setTenantId(tenantId);

                experiencia = experienciaRepository.save(experiencia);
                return experienciaProfissionalMapper.toResponseDTO(experiencia);
        }

        /**
         * Atualiza uma experiência profissional existente de um profissional.
         * Regras de Negócio:
         * - A experiência deve existir e pertencer ao profissional e tenant corretos.
         *
         * @param profissionalId ID do profissional.
         * @param experienciaId  ID da experiência.
         * @param requestDTO     DTO com os dados para atualização.
         * @return DTO da experiência atualizada.
         */
        @Transactional
        public ExperienciaProfissionalResponseDTO updateExperienciaProfissional(UUID profissionalId, UUID experienciaId,
                        ExperienciaProfissionalRequestDTO requestDTO) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                ExperienciaProfissional existingExperiencia = experienciaRepository
                                .findByIdAndProfissionalId(experienciaId, profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
                                                HttpStatus.NOT_FOUND,
                                                "Experiência profissional não encontrada para este profissional."));

                if (!existingExperiencia.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Experiência pertence a outro tenant ou profissional.");
                }

                experienciaProfissionalMapper.updateEntityFromDto(requestDTO, existingExperiencia);
                existingExperiencia = experienciaRepository.save(existingExperiencia);
                return experienciaProfissionalMapper.toResponseDTO(existingExperiencia);
        }

        /**
         * Busca uma experiência profissional pelo ID do profissional e da experiência.
         *
         * @param profissionalId ID do profissional.
         * @param experienciaId  ID da experiência.
         * @return DTO da experiência.
         */
        public ExperienciaProfissionalResponseDTO findExperienciaProfissionalById(UUID profissionalId,
                        UUID experienciaId) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                ExperienciaProfissional experiencia = experienciaRepository
                                .findByIdAndProfissionalId(experienciaId, profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
                                                HttpStatus.NOT_FOUND,
                                                "Experiência profissional não encontrada para este profissional."));

                if (!experiencia.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Experiência pertence a outro tenant.");
                }

                return experienciaProfissionalMapper.toResponseDTO(experiencia);
        }

        /**
         * Lista todas as experiências profissionais de um profissional.
         *
         * @param profissionalId ID do profissional.
         * @return Lista de DTOs de experiências.
         */
        public List<ExperienciaProfissionalResponseDTO> findAllExperienciasProfissionaisByProfissionalId(
                        UUID profissionalId) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                Profissional profissional = profissionalRepository.findById(profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO,
                                                HttpStatus.NOT_FOUND,
                                                "Profissional não encontrado."));
                if (!profissional.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Profissional pertence a outro tenant.");
                }

                return experienciaRepository.findAllByProfissionalId(profissionalId).stream()
                                .map(experienciaProfissionalMapper::toResponseDTO)
                                .collect(Collectors.toList());
        }

        /**
         * Deleta uma experiência profissional de um profissional.
         *
         * @param profissionalId ID do profissional.
         * @param experienciaId  ID da experiência a ser deletada.
         */
        @Transactional
        public void deleteExperienciaProfissional(UUID profissionalId, UUID experienciaId) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                ExperienciaProfissional existingExperiencia = experienciaRepository
                                .findByIdAndProfissionalId(experienciaId, profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
                                                HttpStatus.NOT_FOUND,
                                                "Experiência profissional não encontrada para deleção."));

                if (!existingExperiencia.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Experiência pertence a outro tenant.");
                }

                experienciaRepository.deleteByIdAndProfissionalId(experienciaId, profissionalId);
        }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.request.FormacaoAcademicaRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.FormacaoAcademicaResponseDTO;
import br.com.legalconnect.advogado.application.mapper.FormacaoAcademicaMapper;
import br.com.legalconnect.advogado.domain.modal.entity.FormacaoAcademica;
import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.advogado.domain.repository.FormacaoRepository;
import br.com.legalconnect.advogado.domain.repository.ProfissionalRepository;
import br.com.legalconnect.commom.service.TenantContext;
import br.com.legalconnect.commom.tmp.exception.BusinessException;
import br.com.legalconnect.commom.tmp.exception.ErrorCode;
import jakarta.transaction.Transactional;

/**
 * Serviço responsável pela gestão das formações acadêmicas de um Profissional.
 */
@Service
public class FormacaoAcademicaService {

        private final FormacaoRepository formacaoRepository;
        private final FormacaoAcademicaMapper formacaoAcademicaMapper;
        private final ProfissionalRepository profissionalRepository;

        @Autowired
        public FormacaoAcademicaService(FormacaoRepository formacaoRepository,
                        FormacaoAcademicaMapper formacaoAcademicaMapper,
                        ProfissionalRepository profissionalRepository) {
                this.formacaoRepository = formacaoRepository;
                this.formacaoAcademicaMapper = formacaoAcademicaMapper;
                this.profissionalRepository = profissionalRepository;
        }

        /**
         * Cria uma nova formação acadêmica para um profissional específico.
         * Regras de Negócio:
         * - O profissional deve existir e pertencer ao tenant atual.
         * - A formação é associada ao profissional e ao tenant.
         *
         * @param profissionalId ID do profissional.
         * @param requestDTO     DTO com os dados da formação.
         * @return DTO da formação criada.
         */
        @Transactional
        public FormacaoAcademicaResponseDTO createFormacaoAcademica(UUID profissionalId,
                        FormacaoAcademicaRequestDTO requestDTO) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                Profissional profissional = profissionalRepository.findById(profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO,
                                                HttpStatus.NOT_FOUND,
                                                "Profissional não encontrado."));

                if (!profissional.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Profissional pertence a outro tenant.");
                }

                FormacaoAcademica formacao = formacaoAcademicaMapper.toEntity(requestDTO);
                formacao.setProfissional(profissional);
                formacao.setTenantId(tenantId);

                formacao = formacaoRepository.save(formacao);
                return formacaoAcademicaMapper.toResponseDTO(formacao);
        }

        /**
         * Atualiza uma formação acadêmica existente de um profissional.
         * Regras de Negócio:
         * - A formação deve existir e pertencer ao profissional e tenant corretos.
         *
         * @param profissionalId ID do profissional.
         * @param formacaoId     ID da formação.
         * @param requestDTO     DTO com os dados para atualização.
         * @return DTO da formação atualizada.
         */
        @Transactional
        public FormacaoAcademicaResponseDTO updateFormacaoAcademica(UUID profissionalId, UUID formacaoId,
                        FormacaoAcademicaRequestDTO requestDTO) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                FormacaoAcademica existingFormacao = formacaoRepository
                                .findByIdAndProfissionalId(formacaoId, profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
                                                HttpStatus.NOT_FOUND,
                                                "Formação acadêmica não encontrada para este profissional."));

                if (!existingFormacao.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Formação pertence a outro tenant ou profissional.");
                }

                formacaoAcademicaMapper.updateEntityFromDto(requestDTO, existingFormacao);
                existingFormacao = formacaoRepository.save(existingFormacao);
                return formacaoAcademicaMapper.toResponseDTO(existingFormacao);
        }

        /**
         * Busca uma formação acadêmica pelo ID do profissional e da formação.
         *
         * @param profissionalId ID do profissional.
         * @param formacaoId     ID da formação.
         * @return DTO da formação.
         */
        public FormacaoAcademicaResponseDTO findFormacaoAcademicaById(UUID profissionalId, UUID formacaoId) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                FormacaoAcademica formacao = formacaoRepository.findByIdAndProfissionalId(formacaoId, profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
                                                HttpStatus.NOT_FOUND,
                                                "Formação acadêmica não encontrada para este profissional."));

                if (!formacao.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Formação pertence a outro tenant.");
                }

                return formacaoAcademicaMapper.toResponseDTO(formacao);
        }

        /**
         * Lista todas as formações acadêmicas de um profissional.
         *
         * @param profissionalId ID do profissional.
         * @return Lista de DTOs de formações.
         */
        public List<FormacaoAcademicaResponseDTO> findAllFormacoesAcademicasByProfissionalId(UUID profissionalId) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                Profissional profissional = profissionalRepository.findById(profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO,
                                                HttpStatus.NOT_FOUND,
                                                "Profissional não encontrado."));
                if (!profissional.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Profissional pertence a outro tenant.");
                }

                return formacaoRepository.findAllByProfissionalId(profissionalId).stream()
                                .map(formacaoAcademicaMapper::toResponseDTO)
                                .collect(Collectors.toList());
        }

        /**
         * Deleta uma formação acadêmica de um profissional.
         *
         * @param profissionalId ID do profissional.
         * @param formacaoId     ID da formação a ser deletada.
         */
        @Transactional
        public void deleteFormacaoAcademica(UUID profissionalId, UUID formacaoId) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                FormacaoAcademica existingFormacao = formacaoRepository
                                .findByIdAndProfissionalId(formacaoId, profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
                                                HttpStatus.NOT_FOUND,
                                                "Formação acadêmica não encontrada para deleção."));

                if (!existingFormacao.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Formação pertence a outro tenant.");
                }

                formacaoRepository.deleteByIdAndProfissionalId(formacaoId, profissionalId);
        }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.time.LocalDateTime;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

/**
 * Serviço de integração simulada com a Google Calendar API.
 * Em um ambiente real, esta classe conteria a lógica de comunicação com a
 * Google Calendar API
 * utilizando as credenciais OAuth2 do aplicativo.
 */
@Service
public class GoogleCalendarService {

    private static final Logger log = LoggerFactory.getLogger(GoogleCalendarService.class);

    /**
     * Simula a adição de um evento à agenda do Google Calendar de um usuário.
     *
     * @param userEmail    O e-mail do usuário cuja agenda será atualizada.
     * @param eventSummary O título do evento.
     * @param startTime    A data e hora de início do evento.
     * @param endTime      A data e hora de fim do evento.
     * @return true se o evento foi "adicionado" com sucesso, false caso contrário.
     */
    public boolean addEvent(String userEmail, String eventSummary, LocalDateTime startTime, LocalDateTime endTime) {
        log.info("Simulando adição de evento ao Google Calendar para {}:", userEmail);
        log.info("  Sumário: {}", eventSummary);
        log.info("  Início: {}", startTime);
        log.info("  Fim: {}", endTime);
        // Lógica real de integração com Google Calendar API seria aqui, por exemplo:
        // Event event = new Event()
        // .setSummary(eventSummary)
        // .setDescription("Agendamento via LegalConnect");
        // DateTime startDateTime = new DateTime(startTime.toString());
        // EventDateTime start = new
        // EventDateTime().setDateTime(startDateTime).setTimeZone("America/Sao_Paulo");
        // event.setStart(start);
        // ...
        // Calendar service = new Calendar.Builder(...).build();
        // service.events().insert(userEmail, event).execute();
        log.info("Evento simulado adicionado com sucesso ao Google Calendar.");
        return true;
    }

    /**
     * Simula a verificação de disponibilidade na agenda do Google Calendar de um
     * usuário.
     *
     * @param userEmail    O e-mail do usuário.
     * @param proposedTime O horário a ser verificado.
     * @return true se o horário estiver disponível, false caso contrário.
     */
    public boolean checkAvailability(String userEmail, LocalDateTime proposedTime) {
        log.info("Simulando verificação de disponibilidade para {} no horário {}", userEmail, proposedTime);
        // Em um cenário real, você consultaria a API do Google Calendar para Free/Busy
        // Por simplicidade, vamos simular que o horário está sempre disponível, a menos
        // que seja um horário "proibido"
        if (proposedTime.getHour() == 13) { // Exemplo de regra de negócio: almoço indisponível
            log.info("Horário indisponível (simulado).");
            return false;
        }
        log.info("Horário disponível (simulado).");
        return true;
    }

    // Outros métodos como updateEvent, deleteEvent, listEvents podem ser
    // adicionados.
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.response.IdiomaResponseDTO;
import br.com.legalconnect.advogado.application.mapper.IdiomaMapper;
import br.com.legalconnect.advogado.domain.modal.entity.Idioma;
import br.com.legalconnect.advogado.domain.repository.IdiomaRepository;
import br.com.legalconnect.commom.tmp.exception.BusinessException;
import br.com.legalconnect.commom.tmp.exception.ErrorCode;

/**
 * Serviço para gestão de Idiomas (dados mestre).
 */
@Service
public class IdiomaService {

    private final IdiomaRepository idiomaRepository;
    private final IdiomaMapper idiomaMapper;

    @Autowired
    public IdiomaService(IdiomaRepository idiomaRepository, IdiomaMapper idiomaMapper) {
        this.idiomaRepository = idiomaRepository;
        this.idiomaMapper = idiomaMapper;
    }

    /**
     * Busca um Idioma pelo ID.
     *
     * @param id ID do Idioma.
     * @return DTO do Idioma.
     * @throws BusinessException se o Idioma não for encontrado.
     */
    public IdiomaResponseDTO findIdiomaById(UUID id) {
        Idioma idioma = idiomaRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Idioma não encontrado."));
        return idiomaMapper.toResponseDTO(idioma);
    }

    /**
     * Lista todos os Idiomas.
     *
     * @return Lista de DTOs de Idiomas.
     */
    public List<IdiomaResponseDTO> findAllIdiomas() {
        return idiomaRepository.findAll().stream()
                .map(idiomaMapper::toResponseDTO)
                .collect(Collectors.toList());
    }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.response.LocalAtuacaoResponseDTO;
import br.com.legalconnect.advogado.application.mapper.LocalAtuacaoMapper;
import br.com.legalconnect.advogado.domain.modal.entity.LocalAtuacao;
import br.com.legalconnect.advogado.domain.repository.LocalAtuacaoRepository;
import br.com.legalconnect.commom.tmp.exception.BusinessException;
import br.com.legalconnect.commom.tmp.exception.ErrorCode;

/**
 * Serviço para gestão de Locais de Atuação (dados mestre).
 */
@Service
public class LocalAtuacaoService {

    private final LocalAtuacaoRepository localAtuacaoRepository;
    private final LocalAtuacaoMapper localAtuacaoMapper;

    @Autowired
    public LocalAtuacaoService(LocalAtuacaoRepository localAtuacaoRepository, LocalAtuacaoMapper localAtuacaoMapper) {
        this.localAtuacaoRepository = localAtuacaoRepository;
        this.localAtuacaoMapper = localAtuacaoMapper;
    }

    /**
     * Busca um Local de Atuação pelo ID.
     *
     * @param id ID do Local de Atuação.
     * @return DTO do Local de Atuação.
     * @throws BusinessException se o Local de Atuação não for encontrado.
     */
    public LocalAtuacaoResponseDTO findLocalAtuacaoById(UUID id) {
        LocalAtuacao localAtuacao = localAtuacaoRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Local de Atuação não encontrado."));
        return localAtuacaoMapper.toResponseDTO(localAtuacao);
    }

    /**
     * Lista todos os Locais de Atuação.
     *
     * @return Lista de DTOs de Locais de Atuação.
     */
    public List<LocalAtuacaoResponseDTO> findAllLocaisAtuacao() {
        return localAtuacaoRepository.findAll().stream()
                .map(localAtuacaoMapper::toResponseDTO)
                .collect(Collectors.toList());
    }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import org.springframework.stereotype.Service;

// Assumindo a existência dessas classes de DTO, Entidade e Repositório
// import br.com.legalconnect.office.application.dto.request.ProcessoRequestDTO;
// import br.com.legalconnect.office.application.dto.response.ProcessoResponseDTO;
// import br.com.legalconnect.office.domain.modal.entity.Processo;
// import br.com.legalconnect.office.domain.repository.ProcessoRepository;
// import br.com.legalconnect.office.application.mapper.ProcessoMapper;

/**
 * Serviço responsável pela gestão de Processos Judiciais e Administrativos no
 * módulo de Gestão de Escritório.
 */
@Service
public class ProcessoService {

    // private final ProcessoRepository processoRepository;
    // private final ProcessoMapper processoMapper;
    // private final AIService aiService; // Para geração de petições com IA
    // private final S3Service s3Service; // Para anexos de documentos

    // @Autowired
    // public ProcessoService(ProcessoRepository processoRepository,
    // ProcessoMapper processoMapper,
    // AIService aiService,
    // S3Service s3Service) {
    // this.processoRepository = processoRepository;
    // this.processoMapper = processoMapper;
    // this.aiService = aiService;
    // this.s3Service = s3Service;
    // }

    /**
     * Cria um novo processo judicial ou administrativo.
     * Regras de Negócio:
     * - Associa o processo ao tenant atual.
     * - Define o status inicial do processo.
     *
     * @param requestDTO DTO com os dados do processo.
     * @return DTO do processo criado.
     */
    // @Transactional
    // public ProcessoResponseDTO createProcesso(ProcessoRequestDTO requestDTO) {
    // UUID tenantId = TenantContext.getCurrentTenantId();
    //
    // Processo processo = processoMapper.toEntity(requestDTO);
    // processo.setTenantId(tenantId);
    // processo.setStatus("INICIADO"); // Regra de Negócio: Status inicial
    //
    // processo = processoRepository.save(processo);
    // return processoMapper.toResponseDTO(processo);
    // }

    /**
     * Atualiza um processo existente.
     * Regras de Negócio:
     * - O processo deve existir e pertencer ao tenant atual.
     *
     * @param id         ID do processo.
     * @param requestDTO DTO com os dados para atualização.
     * @return DTO do processo atualizado.
     */
    // @Transactional
    // public ProcessoResponseDTO updateProcesso(UUID id, ProcessoRequestDTO
    // requestDTO) {
    // UUID tenantId = TenantContext.getCurrentTenantId();
    //
    // Processo existingProcesso = processoRepository.findById(id)
    // .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
    // HttpStatus.NOT_FOUND, "Processo não encontrado."));
    //
    // if (!existingProcesso.getTenantId().equals(tenantId)) {
    // throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
    // "Acesso negado. Processo pertence a outro tenant.");
    // }
    //
    // processoMapper.updateEntityFromDto(requestDTO, existingProcesso);
    // existingProcesso = processoRepository.save(existingProcesso);
    // return processoMapper.toResponseDTO(existingProcesso);
    // }

    /**
     * Busca um processo pelo ID.
     * Regras de Negócio:
     * - O processo deve pertencer ao tenant atual.
     *
     * @param id ID do processo.
     * @return DTO do processo.
     */
    // public ProcessoResponseDTO findProcessoById(UUID id) {
    // UUID tenantId = TenantContext.getCurrentTenantId();
    //
    // Processo processo = processoRepository.findById(id)
    // .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
    // HttpStatus.NOT_FOUND, "Processo não encontrado."));
    //
    // if (!processo.getTenantId().equals(tenantId)) {
    // throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
    // "Acesso negado. Processo pertence a outro tenant.");
    // }
    //
    // return processoMapper.toResponseDTO(processo);
    // }

    /**
     * Lista todos os processos de um tenant.
     *
     * @return Lista de DTOs de processos.
     */
    // public List<ProcessoResponseDTO> findAllProcessos() {
    // UUID tenantId = TenantContext.getCurrentTenantId();
    //
    // return processoRepository.findAllByTenantId(tenantId).stream()
    // .map(processoMapper::toResponseDTO)
    // .collect(Collectors.toList());
    // }

    /**
     * Deleta um processo pelo ID.
     * Regras de Negócio:
     * - O processo deve pertencer ao tenant atual.
     *
     * @param id ID do processo a ser deletado.
     */
    // @Transactional
    // public void deleteProcesso(UUID id) {
    // UUID tenantId = TenantContext.getCurrentTenantId();
    //
    // Processo existingProcesso = processoRepository.findById(id)
    // .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
    // HttpStatus.NOT_FOUND, "Processo não encontrado para deleção."));
    //
    // if (!existingProcesso.getTenantId().equals(tenantId)) {
    // throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
    // "Acesso negado. Processo pertence a outro tenant.");
    // }
    //
    // // Regra de Negócio: Verificar se o processo pode ser deletado (ex: não tem
    // atividades pendentes)
    // // if (hasPendingActivities(existingProcesso)) {
    // // throw new BusinessException(ErrorCode.RECURSO_EM_USO, HttpStatus.CONFLICT,
    // "Processo possui atividades pendentes e não pode ser deletado.");
    // // }
    //
    // processoRepository.deleteById(id);
    // }

    /**
     * Gera um rascunho de petição utilizando IA (OpenAI GPT).
     * Regras de Negócio:
     * - O profissional deve ter permissão e estar em um plano que suporte IA.
     * - A IA gera um texto baseado nas informações do processo.
     *
     * @param processoId ID do processo para o qual a petição será gerada.
     * @param prompt     Instruções adicionais para a IA.
     * @return O rascunho da petição gerado pela IA.
     */
    // public String generatePeticaoWithAI(UUID processoId, String prompt) {
    // UUID tenantId = TenantContext.getCurrentTenantId();
    // // Verifica se o usuário logado tem permissão e plano para usar IA
    // // Profissional profissional =
    // profissionalService.findProfissionalById(userIdFromSecurityContext);
    // // if (!profissional.getPlano().supportsAI()) { ... }
    //
    // Processo processo = processoRepository.findById(processoId)
    // .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
    // HttpStatus.NOT_FOUND, "Processo não encontrado para geração de petição."));
    //
    // if (!processo.getTenantId().equals(tenantId)) {
    // throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
    // "Acesso negado. Processo pertence a outro tenant.");
    // }
    //
    // // Montar o prompt completo para a IA com base nos dados do processo
    // String fullPrompt = String.format("Crie um rascunho de petição para o
    // processo '%s' (Tipo: %s, Partes: %s). Contexto: %s. %s",
    // processo.getNumero(), processo.getTipo(), processo.getPartes(),
    // processo.getDescricao(), prompt);
    //
    // // Chamada ao serviço de IA
    // String generatedText = aiService.generateText(fullPrompt);
    //
    // return generatedText;
    // }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.request.ProfissionalCreateRequest;
import br.com.legalconnect.advogado.application.dto.request.ProfissionalUpdateRequest;
import br.com.legalconnect.advogado.application.dto.response.ProfissionalResponseDTO;
import br.com.legalconnect.advogado.application.mapper.AreaAtuacaoMapper;
import br.com.legalconnect.advogado.application.mapper.CertificacaoMapper;
import br.com.legalconnect.advogado.application.mapper.DocumentoMapper;
import br.com.legalconnect.advogado.application.mapper.ExperienciaProfissionalMapper;
import br.com.legalconnect.advogado.application.mapper.FormacaoAcademicaMapper;
import br.com.legalconnect.advogado.application.mapper.IdiomaMapper;
import br.com.legalconnect.advogado.application.mapper.LocalAtuacaoMapper;
import br.com.legalconnect.advogado.application.mapper.ProfissionalMapper;
import br.com.legalconnect.advogado.application.mapper.TipoAtendimentoMapper;
import br.com.legalconnect.advogado.domain.modal.entity.Certificacao;
import br.com.legalconnect.advogado.domain.modal.entity.ExperienciaProfissional;
import br.com.legalconnect.advogado.domain.modal.entity.FormacaoAcademica;
import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.advogado.domain.repository.AreaAtuacaoRepository;
import br.com.legalconnect.advogado.domain.repository.CertificacaoRepository;
import br.com.legalconnect.advogado.domain.repository.DocumentoRepository;
import br.com.legalconnect.advogado.domain.repository.ExperienciaRepository;
import br.com.legalconnect.advogado.domain.repository.FormacaoRepository;
import br.com.legalconnect.advogado.domain.repository.IdiomaRepository;
import br.com.legalconnect.advogado.domain.repository.LocalAtuacaoRepository;
import br.com.legalconnect.advogado.domain.repository.ProfissionalRepository;
import br.com.legalconnect.advogado.domain.repository.TipoAtendimentoRepository;
import br.com.legalconnect.commom.dto.request.PessoaRequestDTO;
import br.com.legalconnect.commom.model.Pessoa;
import br.com.legalconnect.commom.service.PessoaService;
import br.com.legalconnect.commom.service.S3Service; // Assumindo S3Service para upload de documentos
import br.com.legalconnect.commom.service.TenantContext; // Assumindo TenantContext para multitenancy
import br.com.legalconnect.commom.tmp.exception.BusinessException;
import br.com.legalconnect.commom.tmp.exception.ErrorCode;
import jakarta.transaction.Transactional;

/**
 * Serviço responsável pela gestão completa do Profissional (Advogado).
 * Inclui operações de CRUD, validações de negócio e orquestração com serviços
 * de entidades aninhadas
 * e dados mestre. Gerencia também o upload de documentos e a associação com o
 * tenant.
 */
@Service
public class ProfissionalService {

    private final ProfissionalRepository profissionalRepository;
    private final ProfissionalMapper profissionalMapper;
    private final PessoaService pessoaService; // Para gerenciar a entidade Pessoa
    private final CertificacaoMapper certificacaoMapper;
    private final ExperienciaProfissionalMapper experienciaProfissionalMapper;
    private final FormacaoAcademicaMapper formacaoAcademicaMapper;
    private final DocumentoMapper documentoMapper;
    private final CertificacaoRepository certificacaoRepository;
    private final ExperienciaRepository experienciaRepository;
    private final FormacaoRepository formacaoRepository;
    private final DocumentoRepository documentoRepository;
    private final S3Service s3Service; // Serviço para integração com S3
    private final AreaAtuacaoRepository areaAtuacaoRepository;
    private final IdiomaRepository idiomaRepository;
    private final LocalAtuacaoRepository localAtuacaoRepository;
    private final TipoAtendimentoRepository tipoAtendimentoRepository;
    private final AreaAtuacaoMapper areaAtuacaoMapper;
    private final IdiomaMapper idiomaMapper;
    private final LocalAtuacaoMapper localAtuacaoMapper;
    private final TipoAtendimentoMapper tipoAtendimentoMapper;

    @Autowired
    public ProfissionalService(ProfissionalRepository profissionalRepository,
            ProfissionalMapper profissionalMapper,
            PessoaService pessoaService,
            CertificacaoMapper certificacaoMapper,
            ExperienciaProfissionalMapper experienciaProfissionalMapper,
            FormacaoAcademicaMapper formacaoAcademicaMapper,
            DocumentoMapper documentoMapper,
            CertificacaoRepository certificacaoRepository,
            ExperienciaRepository experienciaRepository,
            FormacaoRepository formacaoRepository,
            DocumentoRepository documentoRepository,
            S3Service s3Service,
            AreaAtuacaoRepository areaAtuacaoRepository,
            IdiomaRepository idiomaRepository,
            LocalAtuacaoRepository localAtuacaoRepository,
            TipoAtendimentoRepository tipoAtendimentoRepository,
            AreaAtuacaoMapper areaAtuacaoMapper,
            IdiomaMapper idiomaMapper,
            LocalAtuacaoMapper localAtuacaoMapper,
            TipoAtendimentoMapper tipoAtendimentoMapper) {
        this.profissionalRepository = profissionalRepository;
        this.profissionalMapper = profissionalMapper;
        this.pessoaService = pessoaService;
        this.certificacaoMapper = certificacaoMapper;
        this.experienciaProfissionalMapper = experienciaProfissionalMapper;
        this.formacaoAcademicaMapper = formacaoAcademicaMapper;
        this.documentoMapper = documentoMapper;
        this.certificacaoRepository = certificacaoRepository;
        this.experienciaRepository = experienciaRepository;
        this.formacaoRepository = formacaoRepository;
        this.documentoRepository = documentoRepository;
        this.s3Service = s3Service;
        this.areaAtuacaoRepository = areaAtuacaoRepository;
        this.idiomaRepository = idiomaRepository;
        this.localAtuacaoRepository = localAtuacaoRepository;
        this.tipoAtendimentoRepository = tipoAtendimentoRepository;
        this.areaAtuacaoMapper = areaAtuacaoMapper;
        this.idiomaMapper = idiomaMapper;
        this.localAtuacaoMapper = localAtuacaoMapper;
        this.tipoAtendimentoMapper = tipoAtendimentoMapper;
    }

    /**
     * Cria um novo Profissional no sistema.
     * Regras de Negócio:
     * - Valida a unicidade do número da OAB.
     * - Associa o Profissional a um Tenant (obtido do contexto de segurança).
     * - Cria a entidade Pessoa associada através do PessoaService.
     * - Gerencia a criação de certificações, experiências e formações aninhadas.
     * - Define o status inicial do profissional.
     * - Valida a existência do plano.
     *
     * @param createRequest DTO com os dados para criação do Profissional.
     * @return DTO do Profissional criado.
     * @throws BusinessException se a OAB já estiver cadastrada, ou se o
     *                           plano/tenant não existirem.
     */
    @Transactional
    public ProfissionalResponseDTO createProfissional(ProfissionalCreateRequest createRequest) {
        UUID tenantId = TenantContext.getCurrentTenantId(); // Assumindo que o tenantId vem do contexto de segurança

        // Regra de Negócio: Validar unicidade da OAB
        if (profissionalRepository.existsByNumeroOab(createRequest.getNumeroOab())) {
            throw new BusinessException(ErrorCode.OAB_DUPLICADA, HttpStatus.CONFLICT, createRequest.getNumeroOab());
        }

        // Regra de Negócio: Validar unicidade da Pessoa (CPF/Email) antes de criar o
        // Profissional
        if (pessoaService.findPessoaByCpf(createRequest.getCpf()).isPresent()) {
            throw new BusinessException(ErrorCode.CPF_DUPLICADO, HttpStatus.CONFLICT, createRequest.getCpf());
        }
        if (pessoaService.findPessoaByEmail(createRequest.getUsuario().getEmail()).isPresent()) {
            throw new BusinessException(ErrorCode.EMAIL_DUPLICADO, HttpStatus.CONFLICT,
                    createRequest.getUsuario().getEmail());
        }

        // Criar a Pessoa associada primeiro, pois Profissional estende Pessoa
        PessoaRequestDTO pessoaRequestDTO = new PessoaRequestDTO();
        pessoaRequestDTO.setUsuario(createRequest.getUsuario());
        pessoaRequestDTO.setNomeCompleto(createRequest.getNomeCompleto());
        pessoaRequestDTO.setCpf(createRequest.getCpf());
        pessoaRequestDTO.setDataNascimento(createRequest.getDataNascimento());
        pessoaRequestDTO.setTelefones(createRequest.getTelefones());
        pessoaRequestDTO.setEnderecos(createRequest.getEnderecos());

        Pessoa newPessoa = pessoaService.createPessoa(pessoaRequestDTO);

        // Regra de Negócio: Validar que o planoId existe (assumindo um PlanoService ou
        // repositório de Plano)
        // if (!planoService.existsById(createRequest.getPlanoId())) {
        // throw new BusinessException(ErrorCode.PLANO_NAO_ENCONTRADO,
        // HttpStatus.NOT_FOUND);
        // }

        Profissional profissional = profissionalMapper.toEntity(createRequest);
        profissional.setPessoaId(newPessoa.getId()); // Associa o ID da Pessoa recém-criada
        profissional.setUsuario(newPessoa.getUsuario()); // Garante que o usuário de Pessoa esteja associado
        profissional.setTenantId(tenantId); // Regra de Negócio: Define o tenant do profissional
        profissional.setStatusProfissional("PENDING_APPROVAL"); // Regra de Negócio: Status inicial

        // Relacionamentos muitos-para-muitos (apenas IDs aqui)
        if (createRequest.getLocaisAtuacaoIds() != null) {
            validateMasterDataExistence(createRequest.getLocaisAtuacaoIds(), localAtuacaoRepository::findById,
                    "Local de Atuação");
            profissional.setLocaisAtuacaoIds(createRequest.getLocaisAtuacaoIds().stream().collect(Collectors.toSet()));
        }
        if (createRequest.getAreaAtuacaoIds() != null) {
            validateMasterDataExistence(createRequest.getAreaAtuacaoIds(), areaAtuacaoRepository::findById,
                    "Área de Atuação");
            profissional.setAreaAtuacaoIds(createRequest.getAreaAtuacaoIds().stream().collect(Collectors.toSet()));
        }
        if (createRequest.getIdiomaIds() != null) {
            validateMasterDataExistence(createRequest.getIdiomaIds(), idiomaRepository::findById, "Idioma");
            profissional.setIdiomaIds(createRequest.getIdiomaIds().stream().collect(Collectors.toSet()));
        }
        if (createRequest.getTipoAtendimentoIds() != null) {
            validateMasterDataExistence(createRequest.getTipoAtendimentoIds(), tipoAtendimentoRepository::findById,
                    "Tipo de Atendimento");
            profissional
                    .setTipoAtendimentoIds(createRequest.getTipoAtendimentoIds().stream().collect(Collectors.toSet()));
        }

        profissional = profissionalRepository.save(profissional);

        // Gerenciar certificações, experiências e formações
        manageNestedEntities(profissional, createRequest);

        return mapToResponseDTOWithDetails(profissional);
    }

    /**
     * Atualiza um Profissional existente.
     * Regras de Negócio:
     * - Valida a existência do Profissional e do Tenant.
     * - Permite a atualização de dados da Pessoa associada.
     * - Gerencia a adição, atualização e remoção de certificações, experiências e
     * formações.
     * - Atualiza relacionamentos com dados mestre.
     *
     * @param id            ID do Profissional a ser atualizado.
     * @param updateRequest DTO com os dados para atualização.
     * @return DTO do Profissional atualizado.
     * @throws BusinessException se o Profissional não for encontrado, ou por outras
     *                           violações de negócio.
     */
    @Transactional
    public ProfissionalResponseDTO updateProfissional(UUID id, ProfissionalUpdateRequest updateRequest) {
        UUID tenantId = TenantContext.getCurrentTenantId(); // Assumindo tenantId do contexto de segurança

        Profissional existingProfissional = profissionalRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado para atualização."));

        // Regra de Negócio: O profissional só pode ser atualizado pelo seu próprio
        // tenant
        if (!existingProfissional.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Profissional pertence a outro tenant.");
        }

        // Atualiza os dados da Pessoa associada (se fornecidos)
        if (updateRequest.getPessoa() != null) {
            pessoaService.updatePessoa(existingProfissional.getPessoaId(), updateRequest.getPessoa());
        }

        // Mapeia os campos atualizáveis para a entidade Profissional
        profissionalMapper.updateEntityFromDto(updateRequest, existingProfissional);

        // Regra de Negócio: Validar que o planoId existe se for alterado
        if (updateRequest.getPlanoId() != null
                && !existingProfissional.getPlanoId().equals(updateRequest.getPlanoId())) {
            // if (!planoService.existsById(updateRequest.getPlanoId())) {
            // throw new BusinessException(ErrorCode.PLANO_NAO_ENCONTRADO,
            // HttpStatus.NOT_FOUND);
            // }
            existingProfissional.setPlanoId(updateRequest.getPlanoId());
        }

        // Atualiza relacionamentos muitos-para-muitos
        if (updateRequest.getLocaisAtuacaoIds() != null) {
            validateMasterDataExistence(updateRequest.getLocaisAtuacaoIds(), localAtuacaoRepository::findById,
                    "Local de Atuação");
            existingProfissional
                    .setLocaisAtuacaoIds(updateRequest.getLocaisAtuacaoIds().stream().collect(Collectors.toSet()));
        }
        if (updateRequest.getAreaAtuacaoIds() != null) {
            validateMasterDataExistence(updateRequest.getAreaAtuacaoIds(), areaAtuacaoRepository::findById,
                    "Área de Atuação");
            existingProfissional
                    .setAreaAtuacaoIds(updateRequest.getAreaAtuacaoIds().stream().collect(Collectors.toSet()));
        }
        if (updateRequest.getIdiomaIds() != null) {
            validateMasterDataExistence(updateRequest.getIdiomaIds(), idiomaRepository::findById, "Idioma");
            existingProfissional.setIdiomaIds(updateRequest.getIdiomaIds().stream().collect(Collectors.toSet()));
        }
        if (updateRequest.getTipoAtendimentoIds() != null) {
            validateMasterDataExistence(updateRequest.getTipoAtendimentoIds(), tipoAtendimentoRepository::findById,
                    "Tipo de Atendimento");
            existingProfissional
                    .setTipoAtendimentoIds(updateRequest.getTipoAtendimentoIds().stream().collect(Collectors.toSet()));
        }

        // Gerenciar coleções aninhadas (certificações, experiências, formações)
        manageNestedEntities(existingProfissional, updateRequest);

        existingProfissional = profissionalRepository.save(existingProfissional);
        return mapToResponseDTOWithDetails(existingProfissional);
    }

    /**
     * Busca um Profissional pelo ID.
     * Regras de Negócio:
     * - Garante que o Profissional pertence ao Tenant do contexto de segurança.
     * - Popula os dados mestre relacionados.
     *
     * @param id ID do Profissional.
     * @return DTO do Profissional com detalhes.
     * @throws BusinessException se o Profissional não for encontrado ou não
     *                           pertencer ao tenant.
     */
    public ProfissionalResponseDTO findProfissionalById(UUID id) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Profissional profissional = profissionalRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado."));

        // Regra de Negócio: Acesso restrito ao tenant
        if (!profissional.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Profissional pertence a outro tenant.");
        }

        return mapToResponseDTOWithDetails(profissional);
    }

    /**
     * Busca todos os Profissionais de um determinado Tenant.
     *
     * @return Lista de DTOs de Profissionais.
     */
    public List<ProfissionalResponseDTO> findAllProfissionais() {
        UUID tenantId = TenantContext.getCurrentTenantId(); // Filtra por tenant

        List<Profissional> profissionais = profissionalRepository.findAllByTenantId(tenantId);
        return profissionais.stream()
                .map(this::mapToResponseDTOWithDetails)
                .collect(Collectors.toList());
    }

    /**
     * Deleta um Profissional pelo ID.
     * Regras de Negócio:
     * - Apenas o proprietário do tenant pode deletar.
     * - Orquestra a deleção de entidades aninhadas (Certificações, Experiências,
     * Formações, Documentos).
     * - Deleção da Pessoa associada.
     *
     * @param id ID do Profissional a ser deletado.
     * @throws BusinessException se o Profissional não for encontrado ou não
     *                           pertencer ao tenant.
     */
    @Transactional
    public void deleteProfissional(UUID id) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Profissional profissional = profissionalRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado para deleção."));

        // Regra de Negócio: Acesso restrito ao tenant
        if (!profissional.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Profissional pertence a outro tenant.");
        }

        // Deleta entidades aninhadas (cascade pode fazer isso, mas explicitar é bom
        // para clareza)
        certificacaoRepository.findAllByProfissionalId(id)
                .forEach(c -> certificacaoRepository.deleteByIdAndProfissionalId(c.getId(), id));
        experienciaRepository.findAllByProfissionalId(id)
                .forEach(e -> experienciaRepository.deleteByIdAndProfissionalId(e.getId(), id));
        formacaoRepository.findAllByProfissionalId(id)
                .forEach(f -> formacaoRepository.deleteByIdAndProfissionalId(f.getId(), id));
        documentoRepository.findAllByProfissionalId(id).forEach(d -> {
            s3Service.deleteFile(d.getUrlS3()); // Deleta arquivo do S3
            documentoRepository.deleteByIdAndProfissionalId(d.getId(), id);
        });

        // Deleta o profissional
        profissionalRepository.deleteById(id);

        // Deleta a pessoa associada
        pessoaService.deletePessoa(profissional.getPessoaId());
    }

    /**
     * Método auxiliar para gerenciar a adição, atualização e remoção de entidades
     * aninhadas
     * (certificações, experiências, formações) para um Profissional.
     *
     * @param profissional O Profissional pai.
     * @param request      O DTO de requisição (Create ou Update) contendo as listas
     *                     aninhadas.
     */
    private void manageNestedEntities(Profissional profissional, ProfissionalCreateRequest request) {
        UUID tenantId = profissional.getTenantId();

        // Certificações
        if (request.getCertificacoes() != null) {
            // Remover certificações que não estão mais no DTO
            profissional.getCertificacoes().removeIf(existingCert -> request.getCertificacoes().stream()
                    .noneMatch(dto -> existingCert.getId().equals(dto.getId())));
            request.getCertificacoes().forEach(dto -> {
                if (dto.getId() == null) { // Nova certificação
                    Certificacao newCert = certificacaoMapper.toEntity(dto);
                    newCert.setProfissional(profissional);
                    newCert.setTenantId(tenantId);
                    profissional.getCertificacoes().add(newCert);
                } else { // Atualizar certificação existente
                    profissional.getCertificacoes().stream()
                            .filter(c -> c.getId().equals(dto.getId()))
                            .findFirst()
                            .ifPresent(c -> certificacaoMapper.updateEntityFromDto(dto, c));
                }
            });
        }

        // Experiências Profissionais
        if (request.getExperiencias() != null) {
            profissional.getExperiencias().removeIf(existingExp -> request.getExperiencias().stream()
                    .noneMatch(dto -> existingExp.getId().equals(dto.getId())));
            request.getExperiencias().forEach(dto -> {
                if (dto.getId() == null) { // Nova experiência
                    ExperienciaProfissional newExp = experienciaProfissionalMapper.toEntity(dto);
                    newExp.setProfissional(profissional);
                    newExp.setTenantId(tenantId);
                    profissional.getExperiencias().add(newExp);
                } else { // Atualizar experiência existente
                    profissional.getExperiencias().stream()
                            .filter(e -> e.getId().equals(dto.getId()))
                            .findFirst()
                            .ifPresent(e -> experienciaProfissionalMapper.updateEntityFromDto(dto, e));
                }
            });
        }

        // Formações Acadêmicas
        if (request.getFormacoes() != null) {
            profissional.getFormacoes().removeIf(existingForm -> request.getFormacoes().stream()
                    .noneMatch(dto -> existingForm.getId().equals(dto.getId())));
            request.getFormacoes().forEach(dto -> {
                if (dto.getId() == null) { // Nova formação
                    FormacaoAcademica newForm = formacaoAcademicaMapper.toEntity(dto);
                    newForm.setProfissional(profissional);
                    newForm.setTenantId(tenantId);
                    profissional.getFormacoes().add(newForm);
                } else { // Atualizar formação existente
                    profissional.getFormacoes().stream()
                            .filter(f -> f.getId().equals(dto.getId()))
                            .findFirst()
                            .ifPresent(f -> formacaoAcademicaMapper.updateEntityFromDto(dto, f));
                }
            });
        }
    }

    /**
     * Sobrecarga para o método de gerenciamento de entidades aninhadas para
     * ProfissionalUpdateRequest.
     */
    private void manageNestedEntities(Profissional profissional, ProfissionalUpdateRequest request) {
        UUID tenantId = profissional.getTenantId();

        // Certificações
        if (request.getCertificacoes() != null) {
            // Coleta IDs das certificações no DTO para identificar as que serão removidas
            Set<UUID> dtoCertIds = request.getCertificacoes().stream()
                    .map(c -> c.getId())
                    .collect(Collectors.toSet());

            // Remove certificações que existem na entidade mas não no DTO (deleção)
            profissional.getCertificacoes().removeIf(
                    existingCert -> existingCert.getId() != null && !dtoCertIds.contains(existingCert.getId()));

            request.getCertificacoes().forEach(dto -> {
                if (dto.getId() == null) { // Nova certificação (ID nulo indica novo)
                    Certificacao newCert = certificacaoMapper.toEntity(dto);
                    newCert.setProfissional(profissional);
                    newCert.setTenantId(tenantId);
                    profissional.getCertificacoes().add(newCert);
                } else { // Atualizar certificação existente
                    profissional.getCertificacoes().stream()
                            .filter(c -> c.getId() != null && c.getId().equals(dto.getId()))
                            .findFirst()
                            .ifPresent(c -> certificacaoMapper.updateEntityFromDto(dto, c));
                }
            });
        } else {
            // Se a lista no DTO for nula, assume-se que todas as certificações devem ser
            // removidas
            profissional.getCertificacoes().clear();
        }

        // Experiências Profissionais (lógica similar às certificações)
        if (request.getExperiencias() != null) {
            Set<UUID> dtoExpIds = request.getExperiencias().stream()
                    .map(e -> e.getId())
                    .collect(Collectors.toSet());
            profissional.getExperiencias()
                    .removeIf(existingExp -> existingExp.getId() != null && !dtoExpIds.contains(existingExp.getId()));
            request.getExperiencias().forEach(dto -> {
                if (dto.getId() == null) {
                    ExperienciaProfissional newExp = experienciaProfissionalMapper.toEntity(dto);
                    newExp.setProfissional(profissional);
                    newExp.setTenantId(tenantId);
                    profissional.getExperiencias().add(newExp);
                } else {
                    profissional.getExperiencias().stream()
                            .filter(e -> e.getId() != null && e.getId().equals(dto.getId()))
                            .findFirst()
                            .ifPresent(e -> experienciaProfissionalMapper.updateEntityFromDto(dto, e));
                }
            });
        } else {
            profissional.getExperiencias().clear();
        }

        // Formações Acadêmicas (lógica similar às certificações)
        if (request.getFormacoes() != null) {
            Set<UUID> dtoFormIds = request.getFormacoes().stream()
                    .map(f -> f.getId())
                    .collect(Collectors.toSet());
            profissional.getFormacoes().removeIf(
                    existingForm -> existingForm.getId() != null && !dtoFormIds.contains(existingForm.getId()));
            request.getFormacoes().forEach(dto -> {
                if (dto.getId() == null) {
                    FormacaoAcademica newForm = formacaoAcademicaMapper.toEntity(dto);
                    newForm.setProfissional(profissional);
                    newForm.setTenantId(tenantId);
                    profissional.getFormacoes().add(newForm);
                } else {
                    profissional.getFormacoes().stream()
                            .filter(f -> f.getId() != null && f.getId().equals(dto.getId()))
                            .findFirst()
                            .ifPresent(f -> formacaoAcademicaMapper.updateEntityFromDto(dto, f));
                }
            });
        } else {
            profissional.getFormacoes().clear();
        }
    }

    /**
     * Mapeia um Profissional para ProfissionalResponseDTO e popula os dados mestre
     * relacionados.
     * Esta é uma funcionalidade completa para apresentar o perfil do advogado.
     *
     * @param profissional A entidade Profissional.
     * @return O DTO de resposta detalhado.
     */
    private ProfissionalResponseDTO mapToResponseDTOWithDetails(Profissional profissional) {
        ProfissionalResponseDTO responseDTO = profissionalMapper.toResponseDTO(profissional);

        // Popula listas de DTOs de dados mestre
        responseDTO.setLocaisAtuacao(
                localAtuacaoRepository.findAllById(profissional.getLocaisAtuacaoIds())
                        .stream()
                        .map(localAtuacaoMapper::toResponseDTO)
                        .collect(Collectors.toList()));
        responseDTO.setAreasAtuacao(
                areaAtuacaoRepository.findAllById(profissional.getAreaAtuacaoIds())
                        .stream()
                        .map(areaAtuacaoMapper::toResponseDTO)
                        .collect(Collectors.toList()));
        responseDTO.setIdiomas(
                idiomaRepository.findAllById(profissional.getIdiomaIds())
                        .stream()
                        .map(idiomaMapper::toResponseDTO)
                        .collect(Collectors.toList()));
        responseDTO.setTiposAtendimento(
                tipoAtendimentoRepository.findAllById(profissional.getTipoAtendimentoIds())
                        .stream()
                        .map(tipoAtendimentoMapper::toResponseDTO)
                        .collect(Collectors.toList()));

        // Popula as coleções aninhadas
        responseDTO.setCertificacoes(
                profissional.getCertificacoes().stream()
                        .map(certificacaoMapper::toResponseDTO)
                        .collect(Collectors.toList()));
        responseDTO.setDocumentos(
                profissional.getDocumentos().stream()
                        .map(documentoMapper::toResponseDTO)
                        .collect(Collectors.toList()));
        responseDTO.setExperiencias(
                profissional.getExperiencias().stream()
                        .map(experienciaProfissionalMapper::toResponseDTO)
                        .collect(Collectors.toList()));
        responseDTO.setFormacoes(
                profissional.getFormacoes().stream()
                        .map(formacaoAcademicaMapper::toResponseDTO)
                        .collect(Collectors.toList()));

        // Define se faz parte de plano com base no planoId (regra de negócio)
        responseDTO.setFazParteDePlano(profissional.getPlanoId() != null); // Simplificado

        return responseDTO;
    }

    /**
     * Valida a existência de entidades de dados mestre.
     *
     * @param ids        Lista de UUIDs a serem validados.
     * @param finder     Função para encontrar a entidade por ID.
     * @param entityName Nome da entidade para mensagens de erro.
     * @param <T>        Tipo da entidade.
     */
    private <T> void validateMasterDataExistence(List<UUID> ids,
            java.util.function.Function<UUID, java.util.Optional<T>> finder, String entityName) {
        for (UUID id : ids) {
            if (finder.apply(id).isEmpty()) {
                throw new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        entityName + " com ID " + id + " não encontrado(a).");
            }
        }
    }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.response.TipoAtendimentoResponseDTO;
import br.com.legalconnect.advogado.application.mapper.TipoAtendimentoMapper;
import br.com.legalconnect.advogado.domain.modal.entity.TipoAtendimento;
import br.com.legalconnect.advogado.domain.repository.TipoAtendimentoRepository;
import br.com.legalconnect.commom.tmp.exception.BusinessException;
import br.com.legalconnect.commom.tmp.exception.ErrorCode;

/**
 * Serviço para gestão de Tipos de Atendimento (dados mestre).
 */
@Service
public class TipoAtendimentoService {

    private final TipoAtendimentoRepository tipoAtendimentoRepository;
    private final TipoAtendimentoMapper tipoAtendimentoMapper;

    @Autowired
    public TipoAtendimentoService(TipoAtendimentoRepository tipoAtendimentoRepository,
            TipoAtendimentoMapper tipoAtendimentoMapper) {
        this.tipoAtendimentoRepository = tipoAtendimentoRepository;
        this.tipoAtendimentoMapper = tipoAtendimentoMapper;
    }

    /**
     * Busca um Tipo de Atendimento pelo ID.
     *
     * @param id ID do Tipo de Atendimento.
     * @return DTO do Tipo de Atendimento.
     * @throws BusinessException se o Tipo de Atendimento não for encontrado.
     */
    public TipoAtendimentoResponseDTO findTipoAtendimentoById(UUID id) {
        TipoAtendimento tipoAtendimento = tipoAtendimentoRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Tipo de Atendimento não encontrado."));
        return tipoAtendimentoMapper.toResponseDTO(tipoAtendimento);
    }

    /**
     * Lista todos os Tipos de Atendimento.
     *
     * @return Lista de DTOs de Tipos de Atendimento.
     */
    public List<TipoAtendimentoResponseDTO> findAllTiposAtendimento() {
        return tipoAtendimentoRepository.findAll().stream()
                .map(tipoAtendimentoMapper::toResponseDTO)
                .collect(Collectors.toList());
    }
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import br.com.legalconnect.commom.tmp.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_area_atuacao")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class AreaAtuacao extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 255)
    private String nome;

    @Column(name = "descricao", columnDefinition = "TEXT")
    private String descricao;
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import java.time.LocalDate;
import java.util.UUID;

import br.com.legalconnect.commom.tmp.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_certificacao_profissional")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Certificacao extends BaseEntity {

    @Column(name = "nome", nullable = false, length = 255)
    private String nome;

    @Column(name = "instituicao", length = 255)
    private String instituicao;

    @Column(name = "data_conclusao")
    private LocalDate dataConclusao;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "profissional_id", nullable = false)
    private Profissional profissional; // Referência à entidade JPA ProfissionalEntity

    @Column(name = "tenant_id", nullable = false)
    private UUID tenantId;
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import java.util.UUID;

import br.com.legalconnect.commom.tmp.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_documento_profissional")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Documento extends BaseEntity {

    @Column(name = "nome_arquivo", nullable = false, length = 255)
    private String nomeArquivo;

    @Column(name = "url_s3", nullable = false, length = 500)
    private String urlS3;

    @Column(name = "tipo_documento", nullable = false, length = 100)
    private String tipoDocumento; // Mapeia o enum DocumentoTipo como String

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "profissional_id", nullable = false)
    private Profissional profissional;

    @Column(name = "tenant_id", nullable = false)
    private UUID tenantId;
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import java.time.LocalDate;
import java.util.UUID;

import br.com.legalconnect.commom.tmp.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_experiencia_profissional")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class ExperienciaProfissional extends BaseEntity {

    @Column(name = "cargo", nullable = false, length = 255)
    private String cargo;

    @Column(name = "empresa", nullable = false, length = 255)
    private String empresa;

    @Column(name = "data_inicio", nullable = false)
    private LocalDate dataInicio;

    @Column(name = "data_fim")
    private LocalDate dataFim;

    @Column(name = "descricao", columnDefinition = "TEXT")
    private String descricao;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "profissional_id", nullable = false)
    private Profissional profissional;

    @Column(name = "tenant_id", nullable = false)
    private UUID tenantId;
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import java.time.LocalDate;
import java.util.UUID;

import br.com.legalconnect.commom.tmp.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_formacao_academica")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class FormacaoAcademica extends BaseEntity {

    @Column(name = "curso", nullable = false, length = 255)
    private String curso;

    @Column(name = "instituicao", nullable = false, length = 255)
    private String instituicao;

    @Column(name = "data_conclusao", nullable = false)
    private LocalDate dataConclusao;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "profissional_id", nullable = false)
    private Profissional profissional;

    @Column(name = "tenant_id", nullable = false)
    private UUID tenantId;
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import br.com.legalconnect.commom.tmp.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_idioma")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Idioma extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 100)
    private String nome;

    @Column(name = "codigo", nullable = false, unique = true, length = 10)
    private String codigo; // Ex: "pt-BR", "en-US"

    @Column(name = "nivel", length = 50)
    private String nivel; // Mapeia o enum NivelIdioma como String
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import br.com.legalconnect.commom.tmp.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_local_atuacao")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class LocalAtuacao extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 255)
    private String nome;
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import br.com.legalconnect.commom.model.Pessoa;
import jakarta.persistence.CascadeType;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_profissional")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Profissional extends Pessoa {

    @Column(name = "numero_oab", nullable = false, unique = true, length = 50)
    private String numeroOab;

    @Column(name = "status_profissional", nullable = false, length = 50)
    private String statusProfissional; // Mapeia o enum do domínio (StatusProfissional) como String

    @Column(name = "usa_marketplace", nullable = false)
    private Boolean usaMarketplace = false;

    @Column(name = "faz_parte_de_plano", nullable = false)
    private Boolean fazParteDePlano = false;

    @Column(name = "pessoa_id", nullable = false, unique = true)
    private UUID pessoaId; // Referência ao ID da Pessoa (do Person Service)

    @Column(name = "empresa_id")
    private UUID empresaId; // Referência ao ID da Empresa (do Company Service)

    @Column(name = "plano_id", nullable = false)
    private UUID planoId; // Referência ao ID do Plano (do Subscription Service)

    @Column(name = "tenant_id", nullable = false)
    private UUID tenantId; // Para isolamento de dados por tenant

    // Relacionamentos com entidades que residem no mesmo Professional Service
    // (infraestrutura)
    @OneToMany(mappedBy = "profissional", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Certificacao> certificacoes = new HashSet<>();

    @OneToMany(mappedBy = "profissional", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Documento> documentos = new HashSet<>();

    @OneToMany(mappedBy = "profissional", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<ExperienciaProfissional> experiencias = new HashSet<>();

    @OneToMany(mappedBy = "profissional", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<FormacaoAcademica> formacoes = new HashSet<>();

    // Tabela de junção para locais de atuação (muitos-para-muitos com IDs de Master
    // Data)
    // Se LocalAtuacao for um serviço separado, esta é a forma correta de
    // referenciar por ID.
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_profissional_local_atuacao", joinColumns = @JoinColumn(name = "profissional_id"))
    @Column(name = "local_atuacao_id", nullable = false)
    private Set<UUID> locaisAtuacaoIds = new HashSet<>();

    // Tabela de junção para áreas de atuação (muitos-para-muitos com IDs de Master
    // Data)
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_profissional_area_atuacao", joinColumns = @JoinColumn(name = "profissional_id"))
    @Column(name = "area_atuacao_id", nullable = false)
    private Set<UUID> areaAtuacaoIds = new HashSet<>();

    // Tabela de junção para idiomas (muitos-para-muitos com IDs de Master Data)
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_profissional_idioma", joinColumns = @JoinColumn(name = "profissional_id"))
    @Column(name = "idioma_id", nullable = false)
    private Set<UUID> idiomaIds = new HashSet<>();

    // Tabela de junção para tipos de atendimento (muitos-para-muitos com IDs de
    // Master Data)
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_profissional_tipo_atendimento", joinColumns = @JoinColumn(name = "profissional_id"))
    @Column(name = "tipo_atendimento_id", nullable = false)
    private Set<UUID> tipoAtendimentoIds = new HashSet<>();

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name = "tb_profissional_roles", joinColumns = @JoinColumn(name = "profissional_id"), inverseJoinColumns = @JoinColumn(name = "role_profissional_id"))
    private Set<RoleProfissional> roleProfissionals = new HashSet<>();
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import java.util.UUID;

import br.com.legalconnect.commom.tmp.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_role_profissional")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class RoleProfissional extends BaseEntity {

    @Column(name = "name", nullable = false, unique = true, length = 50)
    private String name;

    @Column(name = "tenant_id", nullable = false)
    private UUID tenantId;
}

// --- Entidades de Dados Mestres (se gerenciadas localmente no Professional
// Service) ---
// NOTA: Se estas entidades residirem em um "Master Data Service" separado e o
// Professional Service
// apenas referenciar seus IDs, então estas classes de entidade não estariam
// aqui.
// Elas são incluídas assumindo que o Professional Service pode ter uma cópia
// local ou gerenciar
// essas entidades para seu próprio contexto.
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import br.com.legalconnect.commom.tmp.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_tipo_atendimento")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class TipoAtendimento extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 255)
    private String nome;
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.advogado.domain.modal.entity.AreaAtuacao;

@Repository
public interface AreaAtuacaoRepository extends JpaRepository<AreaAtuacao, UUID> {

    /**
     * Busca uma Área de Atuação pelo nome.
     *
     * @param nome O nome da área de atuação.
     * @return Um Optional contendo a Área de Atuação, se encontrada.
     */
    Optional<AreaAtuacao> findByNome(String nome);

    /**
     * 
     * Busca todas as Áreas de Atuação por uma lista de IDs.
     * 
     * @param ids Lista de IDs das áreas de atuação.
     * 
     * @return Uma lista de Áreas de Atuação.
     */
    List<AreaAtuacao> findAllByIdIn(List<UUID> ids);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.advogado.domain.modal.entity.Certificacao;

/**
 * Repositório para a entidade {@link Certificacao}.
 * Gerencia operações de persistência para as certificações de um profissional.
 */
@Repository
public interface CertificacaoRepository extends JpaRepository<Certificacao, UUID> {

    /**
     * Busca uma Certificação pelo seu ID e pelo ID do Profissional associado.
     *
     * @param id             O ID da certificação.
     * @param profissionalId O ID do profissional.
     * @return Um Optional contendo a Certificação, se encontrada.
     */
    Optional<Certificacao> findByIdAndProfissionalId(UUID id, UUID profissionalId);

    /**
     * Busca todas as Certificações de um Profissional.
     *
     * @param profissionalId O ID do profissional.
     * @return Uma lista de Certificações.
     */
    List<Certificacao> findAllByProfissionalId(UUID profissionalId);

    /**
     * Deleta uma Certificação pelo seu ID e pelo ID do Profissional.
     *
     * @param id             O ID da certificação.
     * @param profissionalId O ID do profissional.
     */
    void deleteByIdAndProfissionalId(UUID id, UUID profissionalId);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import br.com.legalconnect.advogado.domain.modal.entity.Documento;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * Repositório para a entidade {@link Documento}.
 * Gerencia operações de persistência para os documentos de um profissional.
 */
@Repository
public interface DocumentoRepository extends JpaRepository<Documento, UUID> {

    /**
     * Busca um Documento pelo seu ID e pelo ID do Profissional associado.
     *
     * @param id O ID do documento.
     * @param profissionalId O ID do profissional.
     * @return Um Optional contendo o Documento, se encontrado.
     */
    Optional<Documento> findByIdAndProfissionalId(UUID id, UUID profissionalId);

    /**
     * Busca todos os Documentos de um Profissional.
     *
     * @param profissionalId O ID do profissional.
     * @return Uma lista de Documentos.
     */
    List<Documento> findAllByProfissionalId(UUID profissionalId);

    /**
     * Deleta um Documento pelo seu ID e pelo ID do Profissional.
     *
     * @param id O ID do documento.
     * @param profissionalId O ID do profissional.
     */
    void deleteByIdAndProfissionalId(UUID id, UUID profissionalId);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.advogado.domain.modal.entity.ExperienciaProfissional;

/**
 * Repositório para a entidade {@link ExperienciaProfissional}.
 * Gerencia operações de persistência para as experiências profissionais de um
 * profissional.
 * O método 'save' é automaticamente fornecido por JpaRepository, não deve ser
 * declarado explicitamente aqui com parâmetros extras.
 */
@Repository
public interface ExperienciaProfissionalRepository extends JpaRepository<ExperienciaProfissional, UUID> {

    /**
     * Busca uma Experiência Profissional pelo seu ID e pelo ID do Profissional
     * associado.
     *
     * @param id             O ID da experiência profissional.
     * @param profissionalId O ID do profissional.
     * @return Um Optional contendo a Experiência Profissional, se encontrada.
     */
    Optional<ExperienciaProfissional> findByIdAndProfissionalId(UUID id, UUID profissionalId);

    /**
     * Busca todas as Experiências Profissionais de um Profissional.
     *
     * @param profissionalId O ID do profissional.
     * @return Uma lista de Experiências Profissionais.
     */
    List<ExperienciaProfissional> findAllByProfissionalId(UUID profissionalId);

    /**
     * Deleta uma Experiência Profissional pelo seu ID e pelo ID do Profissional.
     *
     * @param id             O ID da experiência profissional.
     * @param profissionalId O ID do profissional.
     */
    void deleteByIdAndProfissionalId(UUID id, UUID profissionalId);

    // IMPORTANTE: NÃO HÁ MÉTODO 'save' EXPLICITAMENTE DECLARADO AQUI.
    // Ele é herdado de JpaRepository e tem a assinatura: S save(S entity);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.advogado.domain.modal.entity.ExperienciaProfissional;

@Repository
public interface ExperienciaRepository extends JpaRepository<ExperienciaProfissional, UUID> {

    // Busca uma Experiência Profissional pelo seu ID e pelo ID do Profissional.
    Optional<ExperienciaProfissional> findByIdAndProfissionalId(UUID id, UUID profissionalId);

    // Busca todas as Experiências Profissionais de um Profissional.
    List<ExperienciaProfissional> findAllByProfissionalId(UUID profissionalId);

    // Deleta uma Experiência Profissional pelo seu ID e pelo ID do Profissional.
    void deleteByIdAndProfissionalId(UUID id, UUID profissionalId);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import br.com.legalconnect.advogado.domain.modal.entity.FormacaoAcademica;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * Repositório para a entidade {@link FormacaoAcademica}.
 * Gerencia operações de persistência para as formações acadêmicas de um profissional.
 */
@Repository
public interface FormacaoAcademicaRepository extends JpaRepository<FormacaoAcademica, UUID> {

    /**
     * Busca uma Formação Acadêmica pelo seu ID e pelo ID do Profissional associado.
     *
     * @param id O ID da formação acadêmica.
     * @param profissionalId O ID do profissional.
     * @return Um Optional contendo a Formação Acadêmica, se encontrada.
     */
    Optional<FormacaoAcademica> findByIdAndProfissionalId(UUID id, UUID profissionalId);

    /**
     * Busca todas as Formações Acadêmicas de um Profissional.
     *
     * @param profissionalId O ID do profissional.
     * @return Uma lista de Formações Acadêmicas.
     */
    List<FormacaoAcademica> findAllByProfissionalId(UUID profissionalId);

    /**
     * Deleta uma Formação Acadêmica pelo seu ID e pelo ID do Profissional.
     *
     * @param id O ID da formação acadêmica.
     * @param profissionalId O ID do profissional.
     */
    void deleteByIdAndProfissionalId(UUID id, UUID profissionalId);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.advogado.domain.modal.entity.FormacaoAcademica;

@Repository
public interface FormacaoRepository extends JpaRepository<FormacaoAcademica, UUID> {

    // Busca uma Formação Acadêmica pelo seu ID e pelo ID do Profissional.
    Optional<FormacaoAcademica> findByIdAndProfissionalId(UUID id, UUID profissionalId);

    // Busca todas as Formações Acadêmicas de um Profissional.
    List<FormacaoAcademica> findAllByProfissionalId(UUID profissionalId);

    // Deleta uma Formação Acadêmica pelo seu ID e pelo ID do Profissional.
    void deleteByIdAndProfissionalId(UUID id, UUID profissionalId);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import br.com.legalconnect.advogado.domain.modal.entity.Idioma;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;
import java.util.List;

/**
 * Repositório para a entidade {@link Idioma}.
 * Gerencia operações de persistência para os idiomas disponíveis.
 */
@Repository
public interface IdiomaRepository extends JpaRepository<Idioma, UUID> {

    /**
     * Busca um Idioma pelo nome.
     *
     * @param nome O nome do idioma.
     * @return Um Optional contendo o Idioma, se encontrado.
     */
    Optional<Idioma> findByNome(String nome);

    /**
     * Busca todos os Idiomas por uma lista de IDs.
     * @param ids Lista de IDs dos idiomas.
     * @return Uma lista de Idiomas.
     */
    List<Idioma> findAllByIdIn(List<UUID> ids);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import br.com.legalconnect.advogado.domain.modal.entity.LocalAtuacao;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;
import java.util.List;

/**
 * Repositório para a entidade {@link LocalAtuacao}.
 * Gerencia operações de persistência para os locais de atuação dos profissionais.
 */
@Repository
public interface LocalAtuacaoRepository extends JpaRepository<LocalAtuacao, UUID> {

    /**
     * Busca um Local de Atuação pelo nome.
     *
     * @param nome O nome do local de atuação.
     * @return Um Optional contendo o Local de Atuação, se encontrado.
     */
    Optional<LocalAtuacao> findByNome(String nome);

    /**
     * Busca todos os Locais de Atuação por uma lista de IDs.
     * @param ids Lista de IDs dos locais de atuação.
     * @return Uma lista de Locais de Atuação.
     */
    List<LocalAtuacao> findAllByIdIn(List<UUID> ids);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * Repositório para a entidade {@link Profissional}.
 * Gerencia operações de persistência para os profissionais (advogados).
 */
@Repository
public interface ProfissionalRepository extends JpaRepository<Profissional, UUID> {

    /**
     * Busca um Profissional pelo número da OAB.
     *
     * @param numeroOab O número da OAB do profissional.
     * @return Um Optional contendo o Profissional, se encontrado.
     */
    Optional<Profissional> findByNumeroOab(String numeroOab);

    /**
     * Busca todos os Profissionais associados a um determinado tenant.
     *
     * @param tenantId O ID do tenant.
     * @return Uma lista de Profissionais.
     */
    List<Profissional> findAllByTenantId(UUID tenantId);

    /**
     * Verifica se um Profissional existe pelo número da OAB.
     * Regra de Negócio: Garante a unicidade do número da OAB.
     *
     * @param numeroOab O número da OAB a ser verificado.
     * @return true se um Profissional com a OAB já existe, false caso contrário.
     */
    boolean existsByNumeroOab(String numeroOab);

    /**
     * Verifica se um Profissional existe pelo ID da pessoa associada.
     *
     * @param pessoaId O ID da pessoa.
     * @return true se um Profissional com o ID da pessoa existe, false caso contrário.
     */
    boolean existsByPessoaId(UUID pessoaId);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import br.com.legalconnect.advogado.domain.modal.entity.RoleProfissional;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;
import java.util.List;

/**
 * Repositório para a entidade {@link RoleProfissional}.
 * Gerencia operações de persistência para os papéis (roles) dos profissionais.
 */
@Repository
public interface RoleProfissionalRepository extends JpaRepository<RoleProfissional, UUID> {

    /**
     * Busca uma Role de Profissional pelo nome.
     *
     * @param name O nome da role.
     * @return Um Optional contendo a RoleProfissional, se encontrada.
     */
    Optional<RoleProfissional> findByName(String name);

    /**
     * Busca todas as Roles de Profissional associadas a um determinado tenant.
     *
     * @param tenantId O ID do tenant.
     * @return Uma lista de RoleProfissional.
     */
    List<RoleProfissional> findAllByTenantId(UUID tenantId);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import br.com.legalconnect.advogado.domain.modal.entity.TipoAtendimento;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;
import java.util.List;

/**
 * Repositório para a entidade {@link TipoAtendimento}.
 * Gerencia operações de persistência para os tipos de atendimento disponíveis.
 */
@Repository
public interface TipoAtendimentoRepository extends JpaRepository<TipoAtendimento, UUID> {

    /**
     * Busca um Tipo de Atendimento pelo nome.
     *
     * @param nome O nome do tipo de atendimento.
     * @return Um Optional contendo o TipoAtendimento, se encontrado.
     */
    Optional<TipoAtendimento> findByNome(String nome);

    /**
     * Busca todos os Tipos de Atendimento por uma lista de IDs.
     * @param ids Lista de IDs dos tipos de atendimento.
     * @return Uma lista de Tipos de Atendimento.
     */
    List<TipoAtendimento> findAllByIdIn(List<UUID> ids);
}
```
```java
package br.com.legalconnect.commom.dto.request; // Assumindo um pacote common.dto.request para entidades comuns

import br.com.legalconnect.commom.model.Endereco.TipoEndereco; // Importar o enum TipoEndereco da entidade Endereco
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para requisição de criação ou atualização de Endereço.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EnderecoRequestDTO {
    // ID é opcional para atualização (usado em PUT/PATCH)
    private String id; // Pode ser UUID ou String, dependendo da BaseEntity

    @NotBlank(message = "O logradouro é obrigatório.")
    @Size(max = 255, message = "O logradouro deve ter no máximo 255 caracteres.")
    private String logradouro;

    @NotBlank(message = "O número é obrigatório.")
    @Size(max = 20, message = "O número deve ter no máximo 20 caracteres.")
    private String numero;

    @Size(max = 255, message = "O complemento deve ter no máximo 255 caracteres.")
    private String complemento;

    @NotBlank(message = "O bairro é obrigatório.")
    @Size(max = 100, message = "O bairro deve ter no máximo 100 caracteres.")
    private String bairro;

    @NotBlank(message = "A cidade é obrigatória.")
    @Size(max = 100, message = "A cidade deve ter no máximo 100 caracteres.")
    private String cidade;

    @NotBlank(message = "O estado é obrigatório.")
    @Size(max = 2, message = "O estado deve ter 2 caracteres (UF).")
    private String estado;

    @NotBlank(message = "O CEP é obrigatório.")
    @Size(max = 9, message = "O CEP deve ter no máximo 9 caracteres.") // Com ou sem máscara
    private String cep;

    @Size(max = 50, message = "O país deve ter no máximo 50 caracteres.")
    private String pais; // Valor padrão "Brasil" pode ser setado no serviço

    @NotNull(message = "O tipo de endereço é obrigatório.")
    private TipoEndereco tipoEndereco; // Usando o enum da entidade
}
```
```java
package br.com.legalconnect.commom.dto.request;

import java.time.LocalDate;
import java.util.List;
import java.util.UUID;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * DTO para requisição de criação ou atualização de uma Pessoa.
 * Inclui campos de User e uma lista de Endereços.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class PessoaRequestDTO {
    // ID é opcional para atualização (usado em PUT/PATCH para identificar a Pessoa)
    private UUID id;

    @Valid
    @NotNull(message = "As informações do usuário são obrigatórias.")
    private UserRequestDTO usuario; // Informações de login e contato do usuário

    @NotBlank(message = "O nome completo da pessoa é obrigatório.")
    @Size(max = 255, message = "O nome completo da pessoa deve ter no máximo 255 caracteres.")
    private String nomeCompleto;

    @NotBlank(message = "O CPF da pessoa é obrigatório.")
    @Size(min = 11, max = 14, message = "O CPF deve ter entre 11 e 14 caracteres (com ou sem formatação).")
    @Pattern(regexp = "^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$|^\\d{11}$", message = "Formato de CPF inválido. Use '000.000.000-00' ou apenas dígitos.")
    private String cpf;

    @NotNull(message = "A data de nascimento da pessoa é obrigatória.")
    @PastOrPresent(message = "A data de nascimento não pode ser uma data futura.")
    private LocalDate dataNascimento;

    @Size(max = 10, message = "A lista de telefones não pode exceder 10 itens.")
    private List<String> telefones;

    @Valid
    private List<EnderecoRequestDTO> enderecos; // Lista de endereços associados à pessoa
}
```
```java
package br.com.legalconnect.commom.dto.request;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para requisição de criação ou atualização de um usuário.
 *
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserRequestDTO {
    // ID é opcional para atualização (usado em PUT/PATCH)
    private String id;

    @NotBlank(message = "O e-mail do usuário é obrigatório.")
    @Email(message = "Formato de e-mail inválido.")
    @Size(max = 255, message = "O e-mail do usuário deve ter no máximo 255 caracteres.")
    private String email;

    @Size(min = 8, max = 255, message = "A senha do usuário deve ter no mínimo 8 caracteres.")
    // @NotBlank(message = "A senha do usuário é obrigatória.") // Pode ser @NotBlank apenas na criação
    private String senha; // Em requisições, a senha é enviada em texto limpo para ser hashed no backend

    @Size(max = 255, message = "O nome completo do usuário deve ter no máximo 255 caracteres.")
    private String nomeCompleto; // Campo duplicado com Pessoa, se Pessoa for a principal

    @Size(max = 14, message = "O CPF deve ter no máximo 14 caracteres.")
    private String cpf; // Campo duplicado com Pessoa, se Pessoa for a principal

    @Size(max = 20, message = "O telefone do usuário deve ter no máximo 20 caracteres.")
    private String telefone; // Campo duplicado com Pessoa, se Pessoa for a principal

    private String fotoUrl; // URL para a foto de perfil
}
```
```java
package br.com.legalconnect.commom.dto.response; // Assumindo um pacote common.dto.response para entidades comuns

import java.util.UUID;

import br.com.legalconnect.commom.model.Endereco.TipoEndereco; // Importar o enum TipoEndereco da entidade Endereco
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Endereço.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EnderecoResponseDTO {
    private UUID id;

    private String logradouro;

    private String numero;

    private String complemento;

    private String bairro;

    private String cidade;

    private String estado;

    private String cep;

    private String pais;

    private TipoEndereco tipoEndereco;
}
```
```java
package br.com.legalconnect.commom.dto.response;

import java.time.LocalDate;
import java.util.List;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de uma Pessoa.
 * Inclui informações de User e uma lista de Endereços.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class PessoaResponseDTO {
    private UUID id;

    private UserResponseDTO usuario;

    private String nomeCompleto;

    private String cpf;

    private LocalDate dataNascimento;

    private List<String> telefones;

    private List<EnderecoResponseDTO> enderecos;
}
```
```java
package br.com.legalconnect.commom.dto.response;

import java.util.UUID;

import br.com.legalconnect.commom.model.User.UserStatus; // Importar o enum UserStatus da entidade User
import br.com.legalconnect.commom.model.User.UserType; // Importar o enum UserType da entidade User
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de um usuário.
 * Não inclui a senha hash por questões de segurança.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserResponseDTO {
    private UUID id;
    private String nomeCompleto;
    private String email;
    private String cpf;
    private String telefone;
    private String fotoUrl;
    private UserType userType; // Tipo de usuário (CLIENTE, ADVOGADO, etc.)
    private UserStatus userStatus; // Status da conta do usuário
}
```
```java
package br.com.legalconnect.commom.mapper;

import br.com.legalconnect.commom.dto.request.EnderecoRequestDTO;
import br.com.legalconnect.commom.dto.response.EnderecoResponseDTO;
import br.com.legalconnect.commom.model.Endereco;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.Named;
import org.mapstruct.factory.Mappers;

import java.util.UUID;

/**
 * Mapper MapStruct para a entidade Endereco e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface EnderecoMapper {
    EnderecoMapper INSTANCE = Mappers.getMapper(EnderecoMapper.class);

    /**
     * Mapeia um EnderecoRequestDTO para uma entidade Endereco.
     * Os campos 'pessoa' e 'empresa' devem ser setados no serviço.
     *
     * @param dto O DTO de requisição.
     * @return A entidade Endereco correspondente.
     */
    @Mapping(target = "pessoa", ignore = true)
    // @Mapping(target = "empresa", ignore = true) // Descomente se Empresa for relevante e existir
    @Mapping(target = "id", source = "id", qualifiedByName = "mapStringToUuid")
    Endereco toEntity(EnderecoRequestDTO dto);

    /**
     * Mapeia uma entidade Endereco para um EnderecoResponseDTO.
     *
     * @param entity A entidade Endereco.
     * @return O DTO de resposta correspondente.
     */
    @Mapping(target = "id", source = "id", qualifiedByName = "mapUuidToString")
    EnderecoResponseDTO toResponseDTO(Endereco entity);

    /**
     * Atualiza uma entidade Endereco existente com os dados de um EnderecoRequestDTO.
     * O campo 'pessoa' e 'empresa' não são atualizados via DTO. O ID não deve ser atualizado.
     *
     * @param dto O DTO de requisição com os dados para atualização.
     * @param entity A entidade Endereco a ser atualizada.
     */
    @Mapping(target = "id", ignore = true) // ID não deve ser atualizado pelo DTO
    @Mapping(target = "pessoa", ignore = true)
    // @Mapping(target = "empresa", ignore = true)
    void updateEntityFromDto(EnderecoRequestDTO dto, @MappingTarget Endereco entity);

    /**
     * Converte uma String (ID do DTO) para um UUID (ID da Entidade).
     * @param id A string representando o UUID.
     * @return O objeto UUID.
     */
    @Named("mapStringToUuid")
    default UUID mapStringToUuid(String id) {
        return id != null ? UUID.fromString(id) : null;
    }

    /**
     * Converte um UUID (ID da Entidade) para uma String (ID do DTO).
     * @param id O objeto UUID.
     * @return A string representando o UUID.
     */
    @Named("mapUuidToString")
    default String mapUuidToString(UUID id) {
        return id != null ? id.toString() : null;
    }
}
```
```java
package br.com.legalconnect.commom.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.commom.dto.request.PessoaRequestDTO;
import br.com.legalconnect.commom.dto.response.PessoaResponseDTO;
import br.com.legalconnect.commom.model.Pessoa;

/**
 * Mapper MapStruct para a entidade Pessoa e seus DTOs.
 * Utiliza UserMapper e EnderecoMapper para mapeamentos aninhados.
 */
@Mapper(componentModel = "spring", uses = { UserMapper.class, EnderecoMapper.class })
public interface PessoaMapper {
    PessoaMapper INSTANCE = Mappers.getMapper(PessoaMapper.class);

    /**
     * Mapeia um PessoaRequestDTO para uma entidade Pessoa.
     * Os campos 'usuario' e 'enderecos' serão mapeados pelos mappers especificados
     * em 'uses'.
     * A conversão de List para Set para 'telefones' é feita automaticamente pelo
     * MapStruct.
     *
     * @param dto O DTO de requisição.
     * @return A entidade Pessoa correspondente.
     */
    // @Mapping(target = "id", ignore = true) // ID da Pessoa será gerado na criação
    // Pessoa toEntity(PessoaRequestDTO dto);

    /**
     * Mapeia uma entidade Pessoa para um PessoaResponseDTO.
     *
     * @param entity A entidade Pessoa.
     * @return O DTO de resposta correspondente.
     */
    PessoaResponseDTO toResponseDTO(Pessoa entity);

    /**
     * Atualiza uma entidade Pessoa existente com os dados de um PessoaRequestDTO.
     * O 'id' da Pessoa não deve ser atualizado.
     * A atualização de 'usuario' e 'enderecos' deve ser orquestrada no serviço,
     * pois o MapStruct pode não ter o contexto para atualizar entidades aninhadas
     * existentes.
     *
     * @param dto    O DTO de requisição com os dados para atualização.
     * @param entity A entidade Pessoa a ser atualizada.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "usuario", ignore = true) // O serviço deve gerenciar a atualização do User associado
    @Mapping(target = "enderecos", ignore = true) // O serviço deve gerenciar a atualização dos Enderecos associados
    @Mapping(source = "telefones", target = "telefones") // Converte List<String> para Set<String>
    void updateEntityFromDto(PessoaRequestDTO dto, @MappingTarget Pessoa entity);
}
```
```java
package br.com.legalconnect.commom.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.commom.dto.request.UserRequestDTO;
import br.com.legalconnect.commom.dto.response.UserResponseDTO;
import br.com.legalconnect.commom.model.User;

/**
 * Mapper MapStruct para a entidade User e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface UserMapper {
    UserMapper INSTANCE = Mappers.getMapper(UserMapper.class);

    /**
     * Mapeia um UserRequestDTO para uma entidade User.
     * A senha do DTO é mapeada para 'senhaHash' na entidade.
     * 'userType' e 'userStatus' são definidos pela lógica de negócio e ignorados
     * aqui.
     *
     * @param dto O DTO de requisição.
     * @return A entidade User correspondente.
     */
    @Mapping(source = "senha", target = "senhaHash") // Mapeia a senha do DTO para senhaHash na entidade
    // @Mapping(target = "userType", ignore = true) // Definido pela lógica de
    // negócio
    // @Mapping(target = "userStatus", ignore = true) // Definido pela lógica de
    // negócio
    User toEntity(UserRequestDTO dto);

    /**
     * Mapeia uma entidade User para um UserResponseDTO.
     * 'senhaHash' é ignorado na resposta por segurança.
     *
     * @param entity A entidade User.
     * @return O DTO de resposta correspondente.
     */
    // @Mapping(target = "senha", ignore = true) // 'senhaHash' é um campo interno
    // da entidade, não deve ser exposto no DTO de resposta
    UserResponseDTO toResponseDTO(User entity);

    /**
     * Atualiza uma entidade User existente com os dados de um UserRequestDTO.
     * A senha do DTO é mapeada para 'senhaHash' na entidade.
     * 'userType' e 'userStatus' não são atualizados via DTO.
     *
     * @param dto    O DTO de requisição com os dados para atualização.
     * @param entity A entidade User a ser atualizada.
     */
    @Mapping(target = "id", ignore = true) // ID não deve ser atualizado pelo DTO
    @Mapping(source = "senha", target = "senhaHash")
    // @Mapping(target = "userType", ignore = true)
    // @Mapping(target = "userStatus", ignore = true)
    void updateEntityFromDto(UserRequestDTO dto, @MappingTarget User entity);
}
```
```java
package br.com.legalconnect.commom.model;

import br.com.legalconnect.commom.tmp.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Endereco
 * @brief Entidade que representa um endereço detalhado.
 *        Pode ser associada a Pessoas ou Empresas.
 *        Mapeada para a tabela 'tb_endereco'.
 */
@Entity
@Table(name = "tb_endereco")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Endereco extends BaseEntity {

    @Column(name = "logradouro", nullable = false, length = 255)
    private String logradouro; // Nome da rua, avenida, etc.

    @Column(name = "numero", nullable = false, length = 20)
    private String numero; // Número do imóvel

    @Column(name = "complemento", length = 255)
    private String complemento; // Complemento (ex: apto, sala, bloco)

    @Column(name = "bairro", nullable = false, length = 100)
    private String bairro; // Bairro

    @Column(name = "cidade", nullable = false, length = 100)
    private String cidade; // Cidade

    @Column(name = "estado", nullable = false, length = 2)
    private String estado; // Estado (UF)

    @Column(name = "cep", nullable = false, length = 9) // CEP com máscara
    private String cep; // Código de Endereçamento Postal

    @Column(name = "pais", nullable = false, length = 50)
    private String pais = "Brasil"; // País (valor padrão "Brasil")

    @Enumerated(EnumType.STRING)
    @Column(name = "tipo_endereco", nullable = false, length = 50)
    private TipoEndereco tipoEndereco; // Tipo de endereço (ex: RESIDENCIAL, COMERCIAL, ESCRITORIO)

    /**
     * @brief Relacionamento muitos-para-um com a entidade Pessoa (opcional).
     *        Um endereço pode pertencer a uma pessoa.
     *        Somente um dos campos (pessoa ou empresa) deve ser preenchido.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "pessoa_id")
    private Pessoa pessoa;

    /**
     * @brief Relacionamento muitos-para-um com a entidade Empresa (opcional).
     *        Um endereço pode pertencer a uma empresa.
     *        Somente um dos campos (pessoa ou empresa) deve ser preenchido.
     */
    // @ManyToOne(fetch = FetchType.LAZY)
    // @JoinColumn(name = "empresa_id")
    // private Empresa empresa;

    /**
     * @enum TipoEndereco
     * @brief Enumeração para representar o tipo de endereço.
     */
    public enum TipoEndereco {
        RESIDENCIAL,
        COMERCIAL,
        ESCRITORIO,
        COBRANCA,
        ENTREGA,
        OUTRO
    }
}
```
```java
package br.com.legalconnect.commom.model;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

import br.com.legalconnect.commom.tmp.dto.BaseEntity;
import jakarta.persistence.CascadeType;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.Inheritance;
import jakarta.persistence.InheritanceType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Pessoa
 * @brief Entidade base abstrata para todas as pessoas no sistema (Profissional,
 *        Cliente, Administrador).
 *        Contém dados comuns a todos os tipos de pessoas e um relacionamento
 *        OneToOne com a entidade User.
 *        Utiliza estratégia de herança JOINED para mapear subclasses em tabelas
 *        separadas.
 */
@Entity
@Table(name = "tb_pessoa")
@Inheritance(strategy = InheritanceType.JOINED)
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Pessoa extends BaseEntity {

    /**
     * @brief Relacionamento um-para-um com a entidade User.
     *        Este lado é o dono do relacionamento, e a coluna 'user_id' será criada
     *        em 'tb_pessoa'.
     *        O CascadeType.ALL garante que operações no User (como deleção) se
     *        propaguem para Pessoa.
     */
    @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinColumn(name = "user_id", referencedColumnName = "id", nullable = false, unique = true)
    private User usuario; // O usuário associado a esta pessoa

    @Column(name = "nome_completo", nullable = false, length = 255)
    private String nomeCompleto; // Nome completo da pessoa

    @Column(name = "cpf", nullable = false, unique = true, length = 14)
    private String cpf; // Número do Cadastro de Pessoa Física (CPF), único por pessoa

    @Column(name = "data_nascimento")
    private LocalDate dataNascimento; // Data de nascimento da pessoa

    /**
     * @brief Relacionamento um-para-muitos com a entidade Endereco.
     *        Uma pessoa pode ter múltiplos endereços (residencial, comercial,
     *        etc.).
     *        CascadeType.ALL garante que operações nos Enderecos se propaguem para
     *        Pessoa.
     *        mappedBy indica que o relacionamento é gerenciado pelo campo 'pessoa'
     *        na entidade Endereco.
     */
    @OneToMany(mappedBy = "pessoa", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Endereco> enderecos = new HashSet<>(); // Conjunto de endereços da pessoa

    /**
     * @brief Coleção de strings para armazenar múltiplos números de telefone.
     *        Será mapeada para uma tabela separada 'tb_pessoa_telefones'.
     */
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_pessoa_telefones", joinColumns = @JoinColumn(name = "pessoa_id"))
    @Column(name = "numero_telefone", length = 20)
    private Set<String> telefones = new HashSet<>();
}
```
```java
package br.com.legalconnect.commom.model;

import br.com.legalconnect.commom.tmp.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class User
 * @brief Entidade base para todos os usuários (clientes, advogados,
 *        administradores de tenant, etc.).
 *
 *        Esta entidade representa um usuário na plataforma e está associada a
 *        um tenant
 *        específico. A tabela de usuário reside nos schemas de tenant.
 */
@Entity
@Table(name = "tb_user") // A tabela tb_user agora reside no schema do tenant
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class User extends BaseEntity { // Implementa UserDetails

    @Column(name = "nome_completo", nullable = false, length = 255)
    private String nomeCompleto; // Nome completo do usuário

    @Column(name = "email", nullable = false, unique = true, length = 255)
    private String email; // Endereço de e-mail principal do usuário (único por schema de tenant)

    @Column(name = "cpf", nullable = false, unique = true, length = 14)
    private String cpf; // Número do Cadastro de Pessoa Física do usuário (único por schema de tenant)

    @Column(name = "telefone", length = 20)
    private String telefone; // Número de telefone de contato do usuário

    @Column(name = "senha_hash", nullable = false, columnDefinition = "TEXT")
    private String senhaHash; // Representação criptografada (hashed) da senha do usuário

    @Column(name = "foto_url", columnDefinition = "TEXT")
    private String fotoUrl; // URL da foto de perfil do usuário no S3

    /**
     * @enum UserType
     * @brief Enumeração para categorizar o tipo principal de um usuário.
     *        Define se o usuário é um cliente, advogado ou administrador da
     *        plataforma.
     */
    public enum UserType {
        CLIENTE, // Usuário final que busca serviços jurídicos
        ADVOGADO, // Profissional do direito que oferece serviços
        PLATAFORMA_ADMIN, // Administrador da plataforma com privilégios totais
        SOCIO
    }

    /**
     * @enum UserStatus
     * @brief Enumeração para representar o status atual da conta de um usuário.
     *        Define o estado operacional da conta do usuário na plataforma.
     */
    public enum UserStatus {
        ACTIVE, INACTIVE, PENDING_APPROVAL, REJECTED, PENDING
    }

    // --- Implementação de UserDetails ---

}
```
```java
package br.com.legalconnect.commom.repository;

import br.com.legalconnect.commom.model.Pessoa;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;

/**
 * Repositório para a entidade {@link Pessoa}.
 * Gerencia operações de persistência para informações de pessoas no sistema.
 */
@Repository
public interface PessoaRepository extends JpaRepository<Pessoa, UUID> {

    /**
     * Verifica se existe uma Pessoa com o CPF fornecido.
     * Regra de Negócio: Garante a unicidade do CPF no sistema.
     *
     * @param cpf O CPF a ser verificado.
     * @return true se uma Pessoa com o CPF já existe, false caso contrário.
     */
    boolean existsByCpf(String cpf);

    /**
     * Busca uma Pessoa pelo ID do usuário associado.
     *
     * @param userId O ID do usuário.
     * @return Um Optional contendo a Pessoa, se encontrada.
     */
    Optional<Pessoa> findByUsuarioId(UUID userId);

    /**
     * Busca uma Pessoa pelo CPF.
     *
     * @param cpf O CPF da Pessoa.
     * @return Um Optional contendo a Pessoa, se encontrada.
     */
    Optional<Pessoa> findByCpf(String cpf);
}
```
```java
package br.com.legalconnect.commom.repository;

import br.com.legalconnect.commom.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;

/**
 * Repositório para a entidade {@link User}.
 * Gerencia operações de persistência para informações de usuários no sistema.
 */
@Repository
public interface UserRepository extends JpaRepository<User, UUID> {

    /**
     * Busca um usuário pelo seu endereço de e-mail.
     * Regra de Negócio: O e-mail é único para cada usuário dentro de um tenant.
     *
     * @param email O endereço de e-mail do usuário.
     * @return Um Optional contendo o User, se encontrado.
     */
    Optional<User> findByEmail(String email);

    /**
     * Verifica se um usuário com o endereço de e-mail fornecido já existe.
     * Regra de Negócio: Garante a unicidade do e-mail no sistema.
     *
     * @param email O endereço de e-mail a ser verificado.
     * @return true se um usuário com o e-mail já existe, false caso contrário.
     */
    boolean existsByEmail(String email);
}
```
```java
package br.com.legalconnect.commom.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

/**
 * Serviço simulado para envio de e-mails.
 * Em um ambiente real, esta classe conteria a lógica de comunicação com um provedor de e-mails
 * como SendGrid, Amazon SES, ou o serviço de e-mail do Spring Boot.
 */
@Service
public class EmailService {

    private static final Logger log = LoggerFactory.getLogger(EmailService.class);

    /**
     * Simula o envio de um e-mail de ativação de conta.
     *
     * @param toEmail O endereço de e-mail do destinatário.
     * @param activationLink O link de ativação da conta.
     */
    public void sendActivationEmail(String toEmail, String activationLink) {
        log.info("Simulando envio de e-mail de ativação para: {}", toEmail);
        log.info("Link de Ativação: {}", activationLink);
        // Lógica real de envio de e-mail seria aqui, por exemplo:
        // MimeMessage message = mailSender.createMimeMessage();
        // MimeMessageHelper helper = new MimeMessageHelper(message, true);
        // helper.setTo(toEmail);
        // helper.setSubject("Ative sua conta na LegalConnect!");
        // helper.setText("Olá! Clique no link para ativar sua conta: " + activationLink, true);
        // mailSender.send(message);
        log.info("E-mail de ativação simulado enviado com sucesso.");
    }

    /**
     * Simula o envio de um e-mail de confirmação de agendamento.
     *
     * @param toEmail O endereço de e-mail do destinatário.
     * @param details Detalhes do agendamento.
     */
    public void sendAppointmentConfirmationEmail(String toEmail, String details) {
        log.info("Simulando envio de e-mail de confirmação de agendamento para: {}", toEmail);
        log.info("Detalhes do Agendamento: {}", details);
        log.info("E-mail de confirmação de agendamento simulado enviado com sucesso.");
    }

    // Outros métodos de envio de e-mail podem ser adicionados conforme a necessidade
}
```
```java
package br.com.legalconnect.commom.service;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.domain.modal.entity.LocalAtuacao;
import br.com.legalconnect.commom.dto.request.PessoaRequestDTO;
import br.com.legalconnect.commom.dto.request.UserRequestDTO;
import br.com.legalconnect.commom.dto.response.PessoaResponseDTO;
import br.com.legalconnect.commom.mapper.PessoaMapper;
import br.com.legalconnect.commom.mapper.UserMapper;
import br.com.legalconnect.commom.model.Endereco;
import br.com.legalconnect.commom.model.Pessoa;
import br.com.legalconnect.commom.model.User;
import br.com.legalconnect.commom.repository.PessoaRepository; // Assumindo a existência de PessoaRepository
import br.com.legalconnect.commom.repository.UserRepository; // Assumindo a existência de UserRepository
import br.com.legalconnect.commom.tmp.exception.BusinessException;
import br.com.legalconnect.commom.tmp.exception.ErrorCode;
import jakarta.transaction.Transactional;

/**
 * Serviço responsável pela gestão das entidades Pessoa e User.
 * Centraliza a lógica de negócio para criação, atualização e busca de Pessoas
 * e seus usuários associados, incluindo validações de unicidade e criptografia
 * de senha.
 */
@Service
public class PessoaService {

    private final PessoaRepository pessoaRepository;
    private final UserRepository userRepository;
    private final PessoaMapper pessoaMapper;
    private final UserMapper userMapper;
    // Assumindo um EnderecoMapper se EnderecoRequestDTO for mapeado para Endereco
    // aqui
    // private final EnderecoMapper enderecoMapper;

    @Autowired
    public PessoaService(PessoaRepository pessoaRepository, UserRepository userRepository,
            PessoaMapper pessoaMapper, UserMapper userMapper) {
        this.pessoaRepository = pessoaRepository;
        this.userRepository = userRepository;
        this.pessoaMapper = pessoaMapper;
        this.userMapper = userMapper;
    }

    /**
     * Cria uma nova Pessoa e seu User associado.
     * Regras de Negócio:
     * - Garante que o CPF e o e-mail do usuário sejam únicos no sistema.
     * - Criptografa a senha antes de salvar.
     * - Define o status inicial do usuário como PENDING para aguardar ativação.
     *
     * @param pessoaRequestDTO DTO com os dados da Pessoa e do User.
     * @return DTO da Pessoa criada.
     * @throws BusinessException se o CPF ou e-mail já estiverem cadastrados.
     */
    @Transactional
    public Pessoa createPessoa(PessoaRequestDTO pessoaRequestDTO) {
        // Regra de Negócio: Validar unicidade de CPF
        if (pessoaRepository.existsByCpf(pessoaRequestDTO.getCpf())) {
            throw new BusinessException(ErrorCode.CPF_DUPLICADO, HttpStatus.CONFLICT, pessoaRequestDTO.getCpf());
        }

        // Regra de Negócio: Validar unicidade de e-mail para o usuário
        if (userRepository.existsByEmail(pessoaRequestDTO.getUsuario().getEmail())) {
            throw new BusinessException(ErrorCode.EMAIL_DUPLICADO, HttpStatus.CONFLICT,
                    pessoaRequestDTO.getUsuario().getEmail());
        }

        // Cria e criptografa o usuário

        // Persiste o usuário
        var newUser = new User();
        newUser.setId(UUID.fromString(pessoaRequestDTO.getUsuario().getId()));

        // Cria a Pessoa e associa o usuário
        Pessoa newPessoa = Pessoa.builder()
                .usuario(newUser)
                .nomeCompleto(pessoaRequestDTO.getNomeCompleto())
                .cpf(pessoaRequestDTO.getCpf())
                .dataNascimento(pessoaRequestDTO.getDataNascimento())
                .telefones(new HashSet<>(pessoaRequestDTO.getTelefones()))
                .build();

        // Adiciona endereços
        if (pessoaRequestDTO.getEnderecos() != null && !pessoaRequestDTO.getEnderecos().isEmpty()) {
            Set<Endereco> enderecos = pessoaRequestDTO.getEnderecos().stream()
                    .map(dto -> {
                        Endereco endereco = new Endereco(); // Ou use enderecoMapper.toEntity(dto) se existir
                        endereco.setLogradouro(dto.getLogradouro());
                        endereco.setNumero(dto.getNumero());
                        endereco.setComplemento(dto.getComplemento());
                        endereco.setBairro(dto.getBairro());
                        endereco.setCidade(dto.getCidade());
                        endereco.setEstado(dto.getEstado());
                        endereco.setCep(dto.getCep());
                        endereco.setPais(dto.getPais() != null ? dto.getPais() : "Brasil"); // Define país padrão
                        endereco.setTipoEndereco(dto.getTipoEndereco());
                        endereco.setPessoa(newPessoa); // Associa o endereço à Pessoa
                        return endereco;
                    }).collect(Collectors.toSet());
            newPessoa.setEnderecos(enderecos);
        }
        // Reassigning to make it effectively final
        return (pessoaRepository.save(newPessoa));
    }

    /**
     * Busca uma Pessoa pelo ID.
     *
     * @param id ID da Pessoa.
     * @return DTO da Pessoa encontrada.
     * @throws BusinessException se a Pessoa não for encontrada.
     */
    public PessoaResponseDTO findPessoaById(UUID id) {
        Pessoa pessoa = pessoaRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Pessoa não encontrada."));
        return pessoaMapper.toResponseDTO(pessoa);
    }

    /**
     * Atualiza os dados de uma Pessoa existente.
     * Regras de Negócio:
     * - Permite a atualização de informações da Pessoa e do User associado.
     * - Valida a unicidade do e-mail se for alterado.
     * - Não permite a alteração do CPF.
     *
     * @param id               ID da Pessoa a ser atualizada.
     * @param pessoaRequestDTO DTO com os dados para atualização.
     * @return DTO da Pessoa atualizada.
     * @throws BusinessException se a Pessoa não for encontrada, ou se o e-mail já
     *                           estiver cadastrado.
     */
    @Transactional
    public PessoaResponseDTO updatePessoa(UUID id, PessoaRequestDTO pessoaRequestDTO) {
        Pessoa existingPessoa = pessoaRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Pessoa não encontrada para atualização."));

        // Não permitir alteração de CPF (Regra de Negócio)
        if (!existingPessoa.getCpf().equals(pessoaRequestDTO.getCpf())) {
            throw new BusinessException(ErrorCode.DADOS_INVALIDOS, HttpStatus.BAD_REQUEST,
                    "Não é permitido alterar o CPF de uma pessoa existente.");
        }

        // Atualiza o User associado
        User existingUser = existingPessoa.getUsuario();
        UserRequestDTO userRequestDTO = pessoaRequestDTO.getUsuario();

        // Valida unicidade de e-mail se o e-mail for alterado
        if (!existingUser.getEmail().equals(userRequestDTO.getEmail())
                && userRepository.existsByEmail(userRequestDTO.getEmail())) {
            throw new BusinessException(ErrorCode.EMAIL_DUPLICADO, HttpStatus.CONFLICT, userRequestDTO.getEmail());
        }

        userMapper.updateEntityFromDto(userRequestDTO, existingUser);
        userRepository.save(existingUser); // Salva as alterações no User

        // Atualiza os dados da Pessoa (exceto usuário e endereços que são gerenciados
        // separadamente)
        pessoaMapper.updateEntityFromDto(pessoaRequestDTO, existingPessoa);

        // Lógica para gerenciar Endereços: Adicionar, Atualizar, Remover
        // Isso pode ser complexo e requer lógica manual, pois EndereçoRequestDTO tem ID
        // opcional
        // Para simplificar, vou redefinir os endereços ou adicionar lógica de
        // diferenciação.
        // Uma abordagem mais robusta seria comparar listas e fazer operações de CRUD
        // individualmente.
        if (pessoaRequestDTO.getEnderecos() != null) {
            // Removendo endereços que não estão no DTO
            existingPessoa.getEnderecos().removeIf(existingEndereco -> pessoaRequestDTO.getEnderecos().stream()
                    .noneMatch(dto -> dto.getId() != null && dto.getId().equals(existingEndereco.getId().toString())));

            // Adicionando ou atualizando endereços
            for (br.com.legalconnect.commom.dto.request.EnderecoRequestDTO dto : pessoaRequestDTO.getEnderecos()) {
                if (dto.getId() == null) {
                    // Novo endereço
                    Endereco newEndereco = new Endereco();
                    newEndereco.setLogradouro(dto.getLogradouro());
                    newEndereco.setNumero(dto.getNumero());
                    newEndereco.setComplemento(dto.getComplemento());
                    newEndereco.setBairro(dto.getBairro());
                    newEndereco.setCidade(dto.getCidade());
                    newEndereco.setEstado(dto.getEstado());
                    newEndereco.setCep(dto.getCep());
                    newEndereco.setPais(dto.getPais() != null ? dto.getPais() : "Brasil");
                    newEndereco.setTipoEndereco(dto.getTipoEndereco());
                    newEndereco.setPessoa(existingPessoa);
                    existingPessoa.getEnderecos().add(newEndereco);
                } else {
                    // Atualizar endereço existente
                    existingPessoa.getEnderecos().stream()
                            .filter(e -> e.getId().toString().equals(dto.getId()))
                            .findFirst()
                            .ifPresent(e -> {
                                e.setLogradouro(dto.getLogradouro());
                                e.setNumero(dto.getNumero());
                                e.setComplemento(dto.getComplemento());
                                e.setBairro(dto.getBairro());
                                e.setCidade(dto.getCidade());
                                e.setEstado(dto.getEstado());
                                e.setCep(dto.getCep());
                                e.setPais(dto.getPais() != null ? dto.getPais() : "Brasil");
                                e.setTipoEndereco(dto.getTipoEndereco());
                            });
                }
            }
        }

        existingPessoa = pessoaRepository.save(existingPessoa);
        return pessoaMapper.toResponseDTO(existingPessoa);
    }

    /**
     * Deleta uma Pessoa pelo ID.
     * Regras de Negócio:
     * - Também deleta o User associado devido ao CascadeType.ALL na Pessoa.
     *
     * @param id ID da Pessoa a ser deletada.
     * @throws BusinessException se a Pessoa não for encontrada.
     */
    @Transactional
    public void deletePessoa(UUID id) {
        if (!pessoaRepository.existsById(id)) {
            throw new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                    "Pessoa não encontrada para deleção.");
        }
        pessoaRepository.deleteById(id);
    }

    public Optional<LocalAtuacao> findPessoaByCpf(String cpf) {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'findPessoaByCpf'");
    }

    public Optional<LocalAtuacao> findPessoaByEmail(String email) {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'findPessoaByEmail'");
    }
}
```
```java
package br.com.legalconnect.commom.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.commom.tmp.exception.BusinessException;
import br.com.legalconnect.commom.tmp.exception.ErrorCode;

/**
 * Serviço de integração simulada com AWS S3 para upload e deleção de arquivos.
 * Em um ambiente real, esta classe conteria a lógica de comunicação com a AWS
 * SDK.
 */
@Service
public class S3Service {

    private static final Logger log = LoggerFactory.getLogger(S3Service.class);
    private static final String MOCK_S3_BASE_URL = "https://mock-s3-bucket.s3.amazonaws.com/";

    /**
     * Simula o upload de um arquivo para o S3.
     *
     * @param fileBytes Os bytes do arquivo.
     * @param key       A chave/caminho do arquivo no bucket S3.
     * @param mimeType  O tipo MIME do arquivo.
     * @return A URL pública do arquivo no S3.
     * @throws BusinessException se ocorrer um erro durante o "upload" simulado.
     */
    public String uploadFile(byte[] fileBytes, String key, String mimeType) {
        if (fileBytes == null || fileBytes.length == 0) {
            throw new BusinessException(ErrorCode.DOCUMENT_UPLOAD_FAILED, HttpStatus.BAD_REQUEST,
                    "O conteúdo do arquivo não pode ser vazio.");
        }
        if (key == null || key.isEmpty()) {
            throw new BusinessException(ErrorCode.DOCUMENT_UPLOAD_FAILED, HttpStatus.BAD_REQUEST,
                    "A chave do S3 não pode ser vazia.");
        }

        // Simulação de upload: Loga a operação e retorna uma URL mock
        log.info("Simulando upload para S3. Chave: {}, Tamanho: {} bytes, Tipo: {}", key, fileBytes.length, mimeType);
        String fileUrl = MOCK_S3_BASE_URL + key;
        log.info("Upload simulado concluído. URL: {}", fileUrl);
        return fileUrl;
    }

    /**
     * Simula a deleção de um arquivo do S3.
     *
     * @param fileUrl A URL pública do arquivo a ser deletado.
     * @throws BusinessException se ocorrer um erro durante a "deleção" simulada.
     */
    public void deleteFile(String fileUrl) {
        if (fileUrl == null || fileUrl.isEmpty()) {
            throw new BusinessException(ErrorCode.DADOS_INVALIDOS, HttpStatus.BAD_REQUEST,
                    "URL do arquivo não pode ser vazia para deleção.");
        }

        // Simulação de deleção: Loga a operação
        log.info("Simulando deleção de S3. URL: {}", fileUrl);
        // Em um ambiente real, aqui estaria a chamada para o AWS S3 SDK para deletar o
        // objeto.
        // Por exemplo: s3Client.deleteObject(bucketName, key);
        log.info("Deleção simulada concluída para URL: {}", fileUrl);
    }
}
```
```java
package br.com.legalconnect.commom.service;

import java.util.UUID;

/**
 * Utilitário para gerenciar o ID do Tenant no contexto da thread atual.
 * Usado em arquiteturas multitenant para garantir que as operações de banco de dados
 * sejam filtradas pelo tenant correto.
 */
public class TenantContext {

    private static final ThreadLocal<UUID> currentTenant = new ThreadLocal<>();

    /**
     * Define o ID do Tenant para a thread atual.
     *
     * @param tenantId O ID do Tenant.
     */
    public static void setCurrentTenantId(UUID tenantId) {
        currentTenant.set(tenantId);
    }

    /**
     * Retorna o ID do Tenant da thread atual.
     *
     * @return O ID do Tenant.
     * @throws IllegalStateException se o Tenant ID não estiver definido no contexto.
     */
    public static UUID getCurrentTenantId() {
        UUID tenantId = currentTenant.get();
        if (tenantId == null) {
            // Em um ambiente real, você pode lançar uma exceção ou retornar um tenant padrão
            // dependendo da lógica de segurança e acesso.
            // Por simplicidade para este exercício, lançaremos uma exceção.
            throw new IllegalStateException("Tenant ID não está definido no contexto da requisição. Verifique o filtro de segurança.");
        }
        return tenantId;
    }

    /**
     * Limpa o ID do Tenant da thread atual.
     * Deve ser chamado ao final da requisição para evitar vazamentos de contexto.
     */
    public static void clear() {
        currentTenant.remove();
    }
}
```
```java
package br.com.legalconnect.commom.tmp.dto;
// common/BaseEntity.java

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import jakarta.persistence.Column;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class BaseEntity
 * @brief Classe base abstrata para todas as entidades persistentes.
 *        Fornece campos comuns como ID, data de criação e data de atualização.
 */
@Getter
@Setter
@NoArgsConstructor
@SuperBuilder
@MappedSuperclass // Indica que esta classe é uma superclasse mapeada para outras entidades
public abstract class BaseEntity implements Serializable {

    private static final Logger log = LoggerFactory.getLogger(BaseEntity.class);

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    protected UUID id; // Identificador único da entidade

    @Column(name = "created_at", nullable = false)
    protected LocalDateTime createdAt; // Data e hora de criação do registro

    @Column(name = "updated_at", nullable = false)
    protected LocalDateTime updatedAt; // Data e hora da última atualização do registro

    /**
     * Define a data de criação antes de persistir a entidade.
     */
    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
        log.debug("Criando entidade: {}. Data de criação: {}", this.getClass().getSimpleName(), createdAt);
    }

    /**
     * Atualiza a data de atualização antes de atualizar a entidade.
     */
    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
        log.debug("Atualizando entidade: {}. ID: {}. Data de atualização: {}", this.getClass().getSimpleName(), id,
                updatedAt);
    }
}

```
```java
package br.com.legalconnect.commom.tmp.dto;
// common/BaseEntity.java

import java.time.LocalDateTime;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;

import br.com.legalconnect.enums.StatusResponse;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class BaseResponse
 * @brief DTO base para padronizar as respostas da API.
 *
 *        Inclui campos comuns para todas as respostas, como status, mensagem,
 *        timestamp e, opcionalmente, uma lista de erros.
 *        Utiliza Lombok para reduzir boilerplate (getters, setters,
 *        construtores, builder).
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL) // Inclui apenas campos não nulos na serialização JSON
public class BaseResponse<T> {

    private StatusResponse status; // Status da resposta (ex: StatusResponse.SUCESSO, StatusResponse.ERRO,
                                   // "WARNING")
    private String message; // Mensagem descritiva da resposta
    private LocalDateTime timestamp; // Data e hora da resposta
    private T data; // Payload da resposta (dados de sucesso)
    private List<String> errors; // Lista de mensagens de erro, se houver
}
```
```java
package br.com.legalconnect.commom.tmp.dto;
// common/BaseEntity.java

import java.time.LocalDateTime;

import br.com.legalconnect.enums.StatusResponse;
import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * @class SuccessResponseDTO
 * @brief DTO para respostas de sucesso simples da API.
 *
 *        Estende {@link BaseResponse} e é usado para indicar operações
 *        bem-sucedidas
 *        que podem ou não retornar dados específicos.
 */
@Data
@EqualsAndHashCode(callSuper = true) // Inclui campos da superclasse no equals e hashCode
public class SuccessResponseDTO extends BaseResponse {

    /**
     * Construtor padrão para uma resposta de sucesso.
     * Define o status como StatusResponse.SUCESSO e o timestamp atual.
     */
    public SuccessResponseDTO() {
        this.setStatus(StatusResponse.SUCESSO);
        this.setTimestamp(LocalDateTime.now());
    }

    /**
     * Construtor para uma resposta de sucesso com uma mensagem específica.
     *
     * @param message A mensagem descritiva do sucesso.
     */
    public SuccessResponseDTO(String message) {
        this(); // Chama o construtor padrão para definir status e timestamp
        this.setMessage(message);
    }
}
```
```java
package br.com.legalconnect.commom.tmp.exception;

import org.springframework.http.HttpStatus;

import lombok.Getter;

/**
 * @class BusinessException
 * @brief Exceção personalizada para representar erros de negócio na aplicação.
 *
 *        Esta exceção é lançada quando uma regra de negócio não é satisfeita.
 *        Ela encapsula um {@link ErrorCode} e, opcionalmente, argumentos para
 *        formatar
 *        a mensagem de erro, além de um status HTTP para a resposta da API.
 */
@Getter
public class BusinessException extends RuntimeException {

    private final ErrorCode errorCode; // O código de erro padronizado
    private final String[] args; // Argumentos para formatar a mensagem do erro
    private final HttpStatus httpStatus; // Status HTTP associado a esta exceção

    public BusinessException(ErrorCode errorCode, HttpStatus httpStatus, String args) {
        super(args);
        this.errorCode = errorCode;
        this.args = new String[] { args, errorCode.getMessage() };
        this.httpStatus = httpStatus;
    }

    /**
     * Construtor para BusinessException com um ErrorCode e status HTTP padrão
     * (BAD_REQUEST).
     *
     * @param errorCode O código de erro que define o tipo de exceção de negócio.
     * @param args      Argumentos opcionais para formatar a mensagem do erro.
     */
    public BusinessException(ErrorCode errorCode, String... args) {
        this(errorCode, HttpStatus.BAD_REQUEST, args); // Por padrão, erros de negócio são BAD_REQUEST
    }

    /**
     * Construtor para BusinessException com um ErrorCode e um status HTTP
     * específico.
     *
     * @param errorCode  O código de erro que define o tipo de exceção de negócio.
     * @param httpStatus O status HTTP a ser retornado na resposta da API.
     * @param args       Argumentos opcionais para formatar a mensagem do erro.
     */
    public BusinessException(ErrorCode errorCode, HttpStatus httpStatus, String... args) {
        super(errorCode.getFormattedMessage(args)); // Define a mensagem da exceção usando a mensagem formatada do
                                                    // ErrorCode
        this.errorCode = errorCode;
        this.args = args;
        this.httpStatus = httpStatus;

    }

    /**
     * @brief Retorna a mensagem de erro formatada.
     * @return A mensagem de erro formatada.
     */
    @Override
    public String getMessage() {
        return errorCode.getFormattedMessage(args);
    }

    /**
     * @brief Retorna o código de erro.
     * @return O código de erro.
     */
    public String getCode() {
        return errorCode.getCode();
    }
}
```
```java
package br.com.legalconnect.commom.tmp.exception;

import lombok.Getter;

/**
 * @enum ErrorCode
 * @brief Enumeração que define códigos de erro padronizados para a aplicação.
 *
 *        Cada código de erro possui uma mensagem associada, facilitando a
 *        padronização
 *        de respostas de erro na API e a internacionalização ou localização
 *        futura.
 */
@Getter
public enum ErrorCode {
    // Erros gerais de validação
    DADOS_INVALIDOS("001", "Dados fornecidos são inválidos."),
    REQUISICAO_MAL_FORMADA("002", "A requisição está mal formada."),
    PARAMETRO_AUSENTE("003", "Parâmetro obrigatório ausente."),

    // Erros de entidade / negócio
    ENTIDADE_NAO_ENCONTRADA("100", "Entidade não encontrada."),
    EMPRESA_NAO_ENCONTRADA("101", "Empresa não encontrada."),
    PROFISSIONAL_NAO_ENCONTRADO("102", "Profissional não encontrado."),
    CLIENTE_NAO_ENCONTRADO("103", "Cliente não encontrado."),
    ADMINISTRADOR_NAO_ENCONTRADO("104", "Administrador não encontrado."),
    PLANO_NAO_ENCONTRADO("105", "Plano não encontrado."),
    USER_NAO_ENCONTRADO("106", "Usuário associado não encontrado."),

    // Erros de duplicidade
    CNPJ_DUPLICADO("200", "CNPJ já cadastrado."),
    CPF_DUPLICADO("201", "CPF já cadastrado."),
    OAB_DUPLICADA("202", "Número da OAB já cadastrado."),
    EMAIL_DUPLICADO("203", "Email já cadastrado."),
    NOME_PLANO_DUPLICADO("204", "Nome do plano já cadastrado."),

    // Erros de integridade
    INTEGRIDADE_VIOLADA("300", "Violação de integridade de dados."),
    RECURSO_EM_USO("301", "Recurso não pode ser excluído pois está em uso."),

    // Erros de sistema / internos
    ERRO_INTERNO_SERVIDOR("500", "Ocorreu um erro interno no servidor."),
    SERVICO_INDISPONIVEL("503", "Serviço temporariamente indisponível."),

    // Erros Gerais/Comuns (1000-1999)
    GENERIC_ERROR("1000", "Ocorreu um erro inesperado. Por favor, tente novamente mais tarde."),
    INVALID_INPUT("1001", "Dados de entrada inválidos."),
    RESOURCE_NOT_FOUND("1002", "Recurso não encontrado."),
    UNAUTHORIZED_ACCESS("1003", "Acesso não autorizado. Credenciais inválidas ou ausentes."),
    FORBIDDEN_ACCESS("1004", "Acesso negado. Você não tem permissão para realizar esta ação."),
    SERVICE_UNAVAILABLE("1005", "O serviço está temporariamente indisponível. Tente novamente mais tarde."),
    TOO_MANY_REQUESTS("1006", "Muitas requisições. Por favor, aguarde e tente novamente."),
    VALIDATION_ERROR("1007", "Erro de validação nos dados fornecidos."),
    DATABASE_ERROR("1008", "Erro ao acessar o banco de dados."),
    INTEGRATION_ERROR("1009", "Erro de integração com serviço externo."),

    // Erros de Autenticação e Autorização (2000-2999)
    INVALID_CREDENTIALS("2000", "Credenciais de autenticação inválidas."),
    ACCOUNT_LOCKED("2001", "Sua conta está bloqueada."),
    ACCOUNT_DISABLED("2002", "Sua conta está desativada."),
    TOKEN_EXPIRED("2003", "O token de acesso expirou."),
    INVALID_TOKEN("2004", "O token de acesso é inválido."),
    REFRESH_TOKEN_EXPIRED("2005", "O refresh token expirou. Faça login novamente."),
    INVALID_REFRESH_TOKEN("2006", "O refresh token é inválido."),
    USER_NOT_FOUND("2007", "Usuário não encontrado."),
    EMAIL_ALREADY_REGISTERED("2008", "Este e-mail já está cadastrado."),
    PASSWORD_RESET_FAILED("2009", "Falha ao redefinir a senha."),
    INVALID_CURRENT_PASSWORD("2010", "A senha atual fornecida está incorreta."), // Novo erro
    PASSWORD_RESET_TOKEN_INVALID("2011", "Token de redefinição de senha inválido."), // Novo erro
    PASSWORD_RESET_TOKEN_EXPIRED("2012", "Token de redefinição de senha expirado."), // Novo erro
    PASSWORD_RESET_TOKEN_USED("2013", "Token de redefinição de senha já utilizado."), // Novo erro
    PASSWORD_RESET_TOKEN_EXCEEDED("2014", "Limite de redefinições de senha excedido."), // Novo erro

    // Erros de Negócio Específicos (3000-3999) - Exemplo
    TENANT_NOT_FOUND("3000", "Tenant não encontrado."),
    TENANT_DISABLED("3001", "O tenant está desativado."),
    SUBSCRIPTION_EXPIRED("3002", "Sua assinatura expirou."),
    PLAN_NOT_ACTIVE("3003", "O plano selecionado não está ativo."),
    SERVICE_LIMIT_EXCEEDED("3004", "Limite de serviços agendáveis excedido para o seu plano."),
    ADVOCATE_NOT_AVAILABLE("3005", "Advogado não disponível no horário selecionado."),
    APPOINTMENT_CONFLICT("3006", "Conflito de agendamento. O horário já está ocupado."),
    PAYMENT_FAILED("3007", "Falha no processamento do pagamento."),
    INVALID_PROMO_CODE("3008", "Código promocional inválido ou expirado."),
    DOCUMENT_UPLOAD_FAILED("3009", "Falha ao fazer upload do documento."),
    INVALID_DOCUMENT_FORMAT("3010", "Formato de documento inválido."),

    // Erros de Validação de Campo (4000-4999) - Mais específicos, geralmente
    // tratados por @Valid
    FIELD_REQUIRED("4000", "O campo '%s' é obrigatório."),
    INVALID_FORMAT("4001", "O campo '%s' possui formato inválido."),
    MIN_LENGTH("4002", "O campo '%s' deve ter no mínimo %d caracteres."),
    MAX_LENGTH("4003", "O campo '%s' deve ter no máximo %d caracteres."),
    INVALID_EMAIL("4004", "O e-mail fornecido é inválido."),
    INVALID_CPF("4005", "O CPF fornecido é inválido."),
    INVALID_CNPJ("4006", "O CNPJ fornecido é inválido."),
    PASSWORD_TOO_WEAK("4007", "A senha é muito fraca."),
    DATE_IN_PAST("4008", "A data não pode ser no passado."),
    INVALID_ENUM_VALUE("4009", "Valor inválido para o campo '%s'.");

    private final String code;
    private final String message;

    /**
     * Construtor para ErrorCode.
     *
     * @param code    O código único do erro.
     * @param message A mensagem descritiva do erro.
     */
    ErrorCode(String code, String message) {
        this.code = code;
        this.message = message;
    }

    /**
     * @brief Retorna a mensagem de erro formatada com argumentos.
     * @param args Argumentos para formatar a mensagem.
     * @return A mensagem de erro formatada.
     */
    public String getFormattedMessage(Object... args) {
        return String.format(this.message, args);
    }
}

```
```java
package br.com.legalconnect.commom.tmp.exception;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

import br.com.legalconnect.commom.tmp.dto.BaseResponse;
import lombok.extern.slf4j.Slf4j;

/**
 * @class GlobalExceptionHandler
 * @brief Manipulador global de exceções para a aplicação Spring Boot.
 *
 *        Esta classe intercepta exceções lançadas em qualquer parte da
 *        aplicação
 *        e as transforma em respostas de erro padronizadas da API, utilizando
 *        {@link BaseResponse}.
 *        Lida com {@link BusinessException} e exceções de validação do Spring,
 *        além de capturar exceções genéricas.
 */
@Slf4j
@ControllerAdvice
public class GlobalExceptionHandler {

        /**
         * @brief Manipula exceções de negócio personalizadas
         *        ({@link BusinessException}).
         *
         *        Retorna uma resposta de erro com o status HTTP e a mensagem definidos
         *        na BusinessException.
         *
         * @param ex      A exceção de negócio lançada.
         * @param request A requisição web atual.
         * @return Uma {@link ResponseEntity} contendo a {@link BaseResponse} de erro.
         */
        @ExceptionHandler(BusinessException.class)
        public ResponseEntity<BaseResponse> handleBusinessException(BusinessException ex, WebRequest request) {
                log.warn("Business Exception: {} - Path: {}", ex.getMessage(), request.getDescription(false));

                BaseResponse errorResponse = BaseResponse.builder()
                                .status(StatusResponse.ERRO)
                                .message(ex.getMessage())
                                .errors(List.of(ex.getCode())) // Adiciona o código de erro como parte dos erros
                                .timestamp(LocalDateTime.now())
                                .errors(Arrays.asList(ex.getArgs())) // Adiciona os argumentos da exceção como parte dos
                                .build();

                return new ResponseEntity<>(errorResponse, ex.getHttpStatus());
        }

        /**
         * @brief Manipula exceções de validação de argumentos de método
         *        ({@link MethodArgumentNotValidException}).
         *
         *        Ocorre quando a validação de um DTO de entrada falha (ex:
         *        campos @NotNull, @Size).
         *        Coleta todos os erros de campo e os retorna em uma lista na resposta.
         *
         * @param ex      A exceção de validação.
         * @param request A requisição web atual.
         * @return Uma {@link ResponseEntity} contendo a {@link BaseResponse} com os
         *         erros de validação.
         */
        @ExceptionHandler(MethodArgumentNotValidException.class)
        public ResponseEntity<BaseResponse> handleValidationExceptions(MethodArgumentNotValidException ex,
                        WebRequest request) {
                List<String> errors = ex.getBindingResult().getAllErrors().stream()
                                .map(error -> {
                                        String fieldName = (error instanceof FieldError)
                                                        ? ((FieldError) error).getField()
                                                        : error.getObjectName();
                                        String errorMessage = error.getDefaultMessage();
                                        return String.format("Campo '%s': %s", fieldName, errorMessage);
                                })
                                .collect(Collectors.toList());

                log.warn("Validation Exception: {} - Errors: {} - Path: {}", ex.getMessage(), errors,
                                request.getDescription(false));

                BaseResponse errorResponse = BaseResponse.builder()
                                .status(StatusResponse.ERRO)
                                .message(ErrorCode.VALIDATION_ERROR.getMessage())
                                .errors(errors)
                                .timestamp(LocalDateTime.now())
                                .build();

                return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
        }

        /**
         * @brief Manipula todas as outras exceções não tratadas especificamente.
         *
         *        Captura qualquer {@link Exception} genérica, registra o erro e retorna
         *        uma resposta de erro genérica com status HTTP 500 (Internal Server
         *        Error).
         *
         * @param ex      A exceção genérica.
         * @param request A requisição web atual.
         * @return Uma {@link ResponseEntity} contendo a {@link BaseResponse} de erro
         *         genérico.
         */
        @ExceptionHandler(Exception.class)
        public ResponseEntity<BaseResponse> handleGlobalException(Exception ex, WebRequest request) {
                log.error("Unhandled Exception: {} - Path: {}", ex.getMessage(), request.getDescription(false), ex);

                BaseResponse errorResponse = BaseResponse.builder()
                                .status(StatusResponse.ERRO)
                                .message(ErrorCode.GENERIC_ERROR.getMessage())
                                .errors(List.of(ErrorCode.GENERIC_ERROR.getCode())) // Adiciona o código de erro
                                                                                    // genérico
                                .timestamp(LocalDateTime.now())
                                .build();

                return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
        }
}
```
```java
package br.com.legalconnect.commom.tmp.exception;

public enum StatusResponse {
    SUCESSO,
    ERRO,
    AVISO;
}

```
```java
# src/main/resources/application.properties
# ===================================================================
# Configurações Gerais da Aplicação Spring Boot
# ===================================================================

# Nome da aplicação (usado em logs e monitoramento)
spring.application.name=legalconnect-usuario-service
# Porta em que a aplicação será executada

# Desabilita o management server caso esteja ativo e conflitando (opcional)
# management.endpoints.web.exposure.include=*

 
server.port=${PORT:0}
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.instance.preferIpAddress=true
eureka.instance.lease-renewal-interval-in-seconds=30
# Configurações do SpringDoc OpenAPI
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packagesToScan=br.com.legalconnect
springdoc.pathsToMatch=/api/v1/**
springdoc.swagger-ui.url=/v3/api-docs
# Additional Swagger configuration
springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.swagger-ui.display-request-duration=true
# Swagger config
 

# ===================================================================
# Configurações do Banco de Dados PostgreSQL
# ===================================================================

# URL de conexão com o banco de dados PostgreSQL
# O microsserviço de autenticação se conecta ao banco de dados global (public)
spring.datasource.url=jdbc:postgresql://localhost:5432/jusplatform_db
spring.datasource.username=jususer
spring.datasource.password=juspassword
spring.datasource.driver-class-name=org.postgresql.Driver

spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# ===================================================================
# Configurações do JPA e Hibernate
# ===================================================================

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
# Removido: spring.jpa.properties.hibernate.default_schema=public
# Esta configuração forçava o Hibernate a usar o schema 'public' para DDL, o que não é desejado para entidades multi-tenant.


# ===================================================================
# Configurações de Segurança (JWT)
# ===================================================================

# Chave secreta para assinar e verificar os JWTs.
# **IMPORTANTE**: Esta chave deve ser longa, complexa e armazenada de forma segura (ex: HashiCorp Vault, variáveis de ambiente).
# Nunca exponha esta chave em um repositório público!
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Tempo de expiração do JWT em milissegundos (ex: 3600000ms = 1 hora)
application.security.jwt.expiration=3600000

# Tempo de expiração do Refresh Token em milissegundos (ex: 7 dias = 604800000ms)
application.security.jwt.refresh-expiration=604800000

# Força do encoder de senha (cost factor para BCrypt, padrão é 10)
# Um valor maior aumenta a segurança, mas também o tempo de hash.
application.security.password-encoder.strength=12

# ===================================================================
# Configurações de Logging (Logback)
# ===================================================================

# Nível de log padrão para a aplicação
logging.level.br.com.legalconnect=INFO
# Nível de log para o Spring Framework
logging.level.org.springframework=WARN

# Nível de log para Hibernate (queries SQL) - Desabilite em produção
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicExtractor=WARN

# Nível de log para o processo de DDL do Hibernate (agora menos relevante com Flyway)
logging.level.org.hibernate.hbm2ddl=WARN

# Nível de log para as conexões JDBC do Hibernate
logging.level.org.hibernate.engine.jdbc.connections=WARN

# Nível de log para o Flyway (muito importante para depurar migrações)
logging.level.org.flywaydb=INFO

# Adicione logs específicos para a configuração do JPA e Multi-Tenancy
logging.level.org.hibernate.jpa=INFO
logging.level.org.springframework.orm.jpa=INFO
logging.level.org.springframework.data.jpa=INFO
logging.level.org.hibernate.engine.jdbc.connections.spi=INFO

# ===================================================================
# Configurações de Multitenancy Específicas do Aplicativo
# ===================================================================

# ID do tenant padrão para usuários que não estão associados a um tenant específico (ex: clientes gerais)
# Este UUID deve corresponder a um registro na tabela tb_tenant no schema global (public).
application.tenant.default-id=00000000-0000-0000-0000-000000000001

# ===================================================================
# Configurações do Spring Boot Actuator
# ===================================================================

# Habilita todos os endpoints do Actuator (para monitoramento)
management.endpoints.web.exposure.include=*
# Define o caminho base para os endpoints do Actuator
management.endpoints.web.base-path=/actuator

# ===================================================================
# Configurações de CORS (Cross-Origin Resource Sharing)
# ===================================================================

# Configuração de CORS global (pode ser mais específica nos controladores)
# Esta configuração é um exemplo e pode ser ajustada conforme a necessidade.
# Em produção, 'allowed-origins' deve ser restrito aos domínios do seu frontend.
# spring.web.cors.allowed-origins=*
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
# spring.web.cors.allowed-headers=*
# spring.web.cors.allow-credentials=false
# spring.web.cors.max-age=3600
# ===================================================================
# Configurações do Flyway
# ===================================================================
spring.flyway.enabled=false
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=1
# ===================================================================
# Configurações de Cache (Exemplo com Caffeine, adicione a dependência se usar)
# ===================================================================

# spring.cache.type=caffeine
# spring.cache.cache-names=users,refreshTokens
# spring.cache.caffeine.spec=expireAfterWrite=60m,maximumSize=500

# ===================================================================
# Propriedades de Aplicação Customizadas
# ===================================================================

# Exemplo de uma propriedade customizada
# app.feature.new-registration-enabled=true

# ===================================================================
# Configurações para Proxy Reverso (Nginx)
# ===================================================================

# Habilita o processamento dos cabeçalhos X-Forwarded-* enviados por proxies.
# Isso garante que a aplicação veja o IP real do cliente, o protocolo original (HTTP/HTTPS)
# e o host original, em vez dos detalhes do proxy (Nginx).
server.forward-headers-strategy=FRAMEWORK
spring.main.allow-bean-definition-overriding=true
# Configuração do Outlook SMTP
spring.mail.username=marcelo.llm@outlook.com
spring.mail.password=qlbzudmmytioxztj
spring.mail.from=marcelo.llm@outlook.com
spring.mail.protocol=smtp

# Propriedades avançadas

spring.mail.host=smtp.office365.com
spring.mail.port=587 
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=15000
spring.mail.properties.mail.smtp.timeout=15000
spring.mail.properties.mail.smtp.writetimeout=15000

# Propriedade para o Thymeleaf (se estiver usando)
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false
# (Opcional, mas útil para debug)
spring.mail.properties.mail.debug=true
app.frontend.url=http://localhost:4200

```
```java
package br.com.legalconnect.legal_usuario;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class LegalUsuarioApplicationTests {

	@Test
	void contextLoads() {
	}

}

```
```
```java
package br.com.legalconnect;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@EnableJpaRepositories(basePackages = {
		"br.com.legalconnect.advogado.domain.repository",
		"br.com.legalconnect.commom.repository" })
@EntityScan(basePackages = { "br.com.legalconnect.commom.model", "br.com.legalconnect.advogado.domain.modal.entity" })
@EnableDiscoveryClient
@SpringBootApplication
public class LegalUsuarioApplication {
	// @Value("${application.tenant.default-id}")
	// private String defaultTenantId;

	// @Autowired
	// private TenantMigrationService tenantMigrationService;

	public static void main(String[] args) {
		SpringApplication.run(LegalUsuarioApplication.class, args);
	}
}
// @Bean
// boolean inicio() {
// tenantMigrationService.migrateTenant(defaultTenantId);
// return true;
// }
// }

```
```java
package br.com.legalconnect.advogado.application.dto.enums;

/**
 * Enumeração para os tipos de documentos de um Profissional (Advogado).
 * 
 */
public enum DocumentoTipo {
    OAB, // Ordem dos Advogados do Brasil
    RG, // Registro Geral (identidade)
    CPF, // Cadastro de Pessoas Físicas
    COMPROVANTE_ENDERECO, // Comprovante de residência
    OUTRO // Outros tipos de documentos não listados explicitamente
}
```
```java
package br.com.legalconnect.advogado.application.dto.request;

import java.time.LocalDate;
import java.util.UUID;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para requisição de Certificação.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class CertificacaoRequestDTO {

    private UUID id; // Para identificação em operações de atualização/deleção

    @NotBlank(message = "O nome da certificação é obrigatório.")
    @Size(max = 255, message = "O nome da certificação deve ter no máximo 255 caracteres.")
    private String nome;

    @Size(max = 255, message = "A instituição da certificação deve ter no máximo 255 caracteres.")
    private String instituicao;

    @NotNull(message = "A data de conclusão da certificação é obrigatória.")
    @PastOrPresent(message = "A data de conclusão da certificação não pode ser uma data futura.")
    private LocalDate dataConclusao;
}
```
```java
package br.com.legalconnect.advogado.application.dto.request;

import br.com.legalconnect.advogado.application.dto.enums.DocumentoTipo;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para requisição de upload de documento.
 * O campo 'tipoDocumento' foi alterado de String para o enum DocumentoTipo
 * para garantir tipagem segura e validação.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class DocumentoUploadRequest {
    @NotBlank(message = "O nome do arquivo é obrigatório.")
    @Size(max = 255, message = "O nome do arquivo deve ter no máximo 255 caracteres.")
    private String nomeArquivo;

    // Alterado de String para o enum DocumentoTipo para tipagem segura
    @NotNull(message = "O tipo do documento é obrigatório.")
    private DocumentoTipo tipoDocumento;

    @NotBlank(message = "O conteúdo do arquivo em Base64 é obrigatório.")
    private String arquivoBase64;

    @NotBlank(message = "O tipo MIME do arquivo é obrigatório.")
    @Size(max = 100, message = "O tipo MIME do arquivo deve ter no máximo 100 caracteres.")
    private String mimeType;
}
```
```java
package br.com.legalconnect.advogado.application.dto.request;

import java.time.LocalDate;
import java.util.UUID;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para requisição de Experiência Profissional.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ExperienciaProfissionalRequestDTO {
    private UUID id; // Para identificação em operações de atualização/deleção

    @NotBlank(message = "O cargo da experiência é obrigatório.")
    @Size(max = 255, message = "O cargo da experiência deve ter no máximo 255 caracteres.")
    private String cargo;

    @NotBlank(message = "O nome da empresa da experiência é obrigatório.")
    @Size(max = 255, message = "O nome da empresa da experiência deve ter no máximo 255 caracteres.")
    private String empresa;

    @NotNull(message = "A data de início da experiência é obrigatória.")
    @PastOrPresent(message = "A data de início da experiência não pode ser uma data futura.")
    private LocalDate dataInicio;

    @PastOrPresent(message = "A data de fim da experiência não pode ser uma data futura.")
    private LocalDate dataFim; // Pode ser nulo se for a experiência atual

    private String descricao;
}
```
```java
package br.com.legalconnect.advogado.application.dto.request;

import java.time.LocalDate;
import java.util.UUID;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para requisição de Formação Acadêmica.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class FormacaoAcademicaRequestDTO {

    private UUID id; // Para identificação em operações de atualização/deleção

    @NotBlank(message = "O nome do curso é obrigatório.")
    @Size(max = 255, message = "O nome do curso deve ter no máximo 255 caracteres.")
    private String curso;

    @NotBlank(message = "O nome da instituição é obrigatório.")
    @Size(max = 255, message = "O nome da instituição deve ter no máximo 255 caracteres.")
    private String instituicao;

    @NotNull(message = "A data de conclusão da formação é obrigatória.")
    @PastOrPresent(message = "A data de conclusão da formação não pode ser uma data futura.")
    private LocalDate dataConclusao;
}
```
```java
package br.com.legalconnect.advogado.application.dto.request;

import java.util.List;
import java.util.UUID;

import br.com.legalconnect.commom.dto.request.PessoaRequestDTO; // Importar PessoaRequestDTO
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para criação de um novo Profissional.
 * Este DTO agora compõe um PessoaRequestDTO para os dados de Pessoa e Usuário.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class ProfissionalCreateRequest extends PessoaRequestDTO {

    @NotBlank(message = "O número da OAB é obrigatório.")
    @Size(min = 5, max = 50, message = "O número da OAB deve ter entre 5 e 50 caracteres.")
    private String numeroOab;

    @NotNull(message = "A indicação de uso do marketplace é obrigatória.")
    private Boolean usaMarketplace;

    @NotNull(message = "O ID do plano é obrigatório.")
    private UUID planoId;

    @NotNull(message = "O ID do tenant é obrigatório.")
    private UUID tenantId;

    // Relacionamentos para dados mestres que podem ser definidos na criação
    private List<UUID> locaisAtuacaoIds;
    private List<UUID> areaAtuacaoIds;
    private List<UUID> idiomaIds;
    private List<UUID> tipoAtendimentoIds;

    // DTOs para certificações, experiências e formações na criação (opcional)
    @Valid
    private List<CertificacaoRequestDTO> certificacoes;
    @Valid
    private List<ExperienciaProfissionalRequestDTO> experiencias;
    @Valid
    private List<FormacaoAcademicaRequestDTO> formacoes;
}
```
```java
package br.com.legalconnect.advogado.application.dto.request;

import java.util.List;
import java.util.UUID;

import br.com.legalconnect.commom.dto.request.PessoaRequestDTO; // Importar PessoaRequestDTO
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para atualização de um Profissional.
 * Permite a atualização dos dados da Pessoa associada e dos campos específicos
 * de Profissional,
 * bem como de listas aninhadas.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ProfissionalUpdateRequest {
    @NotNull(message = "O ID do profissional é obrigatório para atualização.")
    private UUID id;

    @Valid
    // A PessoaRequestDTO interna deve ter seu próprio ID se for uma atualização de
    // pessoa existente
    private PessoaRequestDTO pessoa; // Composição: Profissional 'tem uma' Pessoa

    @NotBlank(message = "O número da OAB do profissional é obrigatório para atualização.")
    private String numeroOab;

    @NotNull(message = "A indicação de uso do marketplace é obrigatória.")
    private Boolean usaMarketplace;

    private UUID empresaId; // Pode ser nulo se não houver empresa associada ou se for desvinculada

    private UUID planoId; // Pode ser nulo se o plano não for alterado

    // Listas de UUIDs para dados mestres
    private List<UUID> locaisAtuacaoIds;
    private List<UUID> areaAtuacaoIds;
    private List<UUID> idiomaIds;
    private List<UUID> tipoAtendimentoIds;

    // Listas de DTOs aninhados para certificações, experiências, formações
    // O ID em cada DTO aninhado indicará se é uma criação, atualização ou remoção.
    @Valid
    private List<CertificacaoRequestDTO> certificacoes;
    @Valid
    private List<ExperienciaProfissionalRequestDTO> experiencias;
    @Valid
    private List<FormacaoAcademicaRequestDTO> formacoes;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.util.UUID;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Área de Atuação.
 * Usado para retornar detalhes completos da Área de Atuação.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AreaAtuacaoResponseDTO {
    private UUID id;
    private String nome;
    private String descricao;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.time.LocalDate;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Certificação.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class CertificacaoResponseDTO {
    private UUID id;
    private String nome;
    private String instituicao;
    private LocalDate dataConclusao;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Documento.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class DocumentoResponseDTO {
    private UUID id;
    private String nomeArquivo;
    private String urlS3;
    private String tipoDocumento;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.time.LocalDate;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Experiência Profissional.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ExperienciaProfissionalResponseDTO {
    private UUID id;
    private String cargo;
    private String empresa;
    private LocalDate dataInicio;
    private LocalDate dataFim;
    private String descricao;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.time.LocalDate;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Formação Acadêmica.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class FormacaoAcademicaResponseDTO {
    private UUID id;
    private String curso;
    private String instituicao;
    private LocalDate dataConclusao;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.util.UUID;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Idioma.
 * Usado para retornar detalhes completos do Idioma.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class IdiomaResponseDTO {
    private UUID id;
    private String nome;
    private String codigo;
    private String nivel;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.util.UUID;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Local de Atuação.
 * Usado para retornar detalhes completos do Local de Atuação.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class LocalAtuacaoResponseDTO {
    private UUID id;
    private String nome;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.util.List;
import java.util.UUID;

import br.com.legalconnect.commom.dto.response.PessoaResponseDTO; // Importar PessoaResponseDTO
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO de resposta detalhada para um Profissional.
 * Agora compõe um PessoaResponseDTO para os dados de Pessoa e Usuário.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ProfissionalResponseDTO {
    private UUID id; // ID do Profissional

    private PessoaResponseDTO pessoa; // Composição: Profissional 'tem uma' Pessoa

    private String numeroOab;
    private String statusProfissional;
    private Boolean usaMarketplace;
    private Boolean fazParteDePlano;

    // IDs de entidades relacionadas
    private UUID empresaId;
    private UUID planoId;
    private UUID tenantId;

    // Listas de DTOs aninhados
    private List<CertificacaoResponseDTO> certificacoes;
    private List<DocumentoResponseDTO> documentos;
    private List<ExperienciaProfissionalResponseDTO> experiencias;
    private List<FormacaoAcademicaResponseDTO> formacoes;

    // Listas de DTOs de dados mestres (detalhados)
    private List<LocalAtuacaoResponseDTO> locaisAtuacao;
    private List<AreaAtuacaoResponseDTO> areasAtuacao;
    private List<IdiomaResponseDTO> idiomas;
    private List<TipoAtendimentoResponseDTO> tiposAtendimento;
    private List<RoleProfissionalResponseDTO> rolesProfissional; // DTO para Role do Profissional
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.util.UUID;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Role de Profissional.
 * Usado para retornar detalhes completos da Role.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RoleProfissionalResponseDTO {
    private UUID id;
    private String name;
    // O tenantId pode ser incluído se for relevante para o frontend
    // private UUID tenantId;
}
```
```java
package br.com.legalconnect.advogado.application.dto.response;

import java.util.UUID;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Tipo de Atendimento.
 * Usado para retornar detalhes completos do Tipo de Atendimento.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class TipoAtendimentoResponseDTO {
    private UUID id;
    private String nome;
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.advogado.application.dto.response.AreaAtuacaoResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.AreaAtuacao;

/**
 * Mapper MapStruct para a entidade AreaAtuacao e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface AreaAtuacaoMapper {
    AreaAtuacaoMapper INSTANCE = Mappers.getMapper(AreaAtuacaoMapper.class);

    /**
     * Mapeia uma entidade AreaAtuacao para um AreaAtuacaoResponseDTO.
     * 
     * @param entity A entidade AreaAtuacao.
     * @return O DTO de resposta correspondente.
     */
    AreaAtuacaoResponseDTO toResponseDTO(AreaAtuacao entity);

    /**
     * Mapeia um AreaAtuacaoResponseDTO para uma entidade AreaAtuacao.
     * Útil para cenários de re-conversão ou testes, embora a criação normalmente
     * venha de um RequestDTO.
     * 
     * @param dto O DTO de resposta.
     * @return A entidade AreaAtuacao correspondente.
     */
    AreaAtuacao toEntity(AreaAtuacaoResponseDTO dto);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.advogado.application.dto.request.CertificacaoRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.CertificacaoResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.Certificacao;

/**
 * Mapper MapStruct para a entidade Certificacao e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface CertificacaoMapper {
    CertificacaoMapper INSTANCE = Mappers.getMapper(CertificacaoMapper.class);

    /**
     * Mapeia um CertificacaoRequestDTO para uma entidade Certificacao.
     * O campo 'profissional' e 'tenantId' na entidade devem ser setados no serviço.
     *
     * @param dto O DTO de requisição.
     * @return A entidade Certificacao correspondente.
     */
    @Mapping(target = "profissional", ignore = true)
    @Mapping(target = "tenantId", ignore = true)
    Certificacao toEntity(CertificacaoRequestDTO dto);

    /**
     * Mapeia uma entidade Certificacao para um CertificacaoResponseDTO.
     *
     * @param entity A entidade Certificacao.
     * @return O DTO de resposta correspondente.
     */
    CertificacaoResponseDTO toResponseDTO(Certificacao entity);

    /**
     * Atualiza uma entidade Certificacao existente com os dados de um
     * CertificacaoRequestDTO.
     * O campo 'profissional' e 'tenantId' não são atualizados via DTO.
     *
     * @param dto    O DTO de requisição com os dados para atualização.
     * @param entity A entidade Certificacao a ser atualizada.
     */
    @Mapping(target = "id", ignore = true) // ID não deve ser atualizado pelo DTO
    @Mapping(target = "profissional", ignore = true)
    @Mapping(target = "tenantId", ignore = true)
    void updateEntityFromDto(CertificacaoRequestDTO dto, @MappingTarget Certificacao entity);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.Named;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.advogado.application.dto.enums.DocumentoTipo;
import br.com.legalconnect.advogado.application.dto.request.DocumentoUploadRequest;
import br.com.legalconnect.advogado.application.dto.response.DocumentoResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.Documento;

/**
 * Mapper MapStruct para a entidade Documento e seus DTOs.
 * Gerencia a conversão entre DocumentoUploadRequest, Documento e
 * DocumentoResponseDTO.
 */
@Mapper(componentModel = "spring")
public interface DocumentoMapper {
    DocumentoMapper INSTANCE = Mappers.getMapper(DocumentoMapper.class);

    /**
     * Mapeia um DocumentoUploadRequest para uma entidade Documento.
     * Ignora 'arquivoBase64' e 'mimeType' (dados para upload, não persistentes na
     * entidade).
     * 'urlS3', 'profissional' e 'tenantId' devem ser setados no serviço.
     *
     * @param dto O DTO de requisição para upload de documento.
     * @return A entidade Documento correspondente.
     */
    @Mapping(target = "urlS3", ignore = true) // Preenchido após o upload bem-sucedido
    @Mapping(target = "profissional", ignore = true) // Relacionamento com Profissional, preenchido no serviço
    @Mapping(target = "tenantId", ignore = true) // TenantId, preenchido no serviço
    @Mapping(source = "tipoDocumento", target = "tipoDocumento", qualifiedByName = "mapDocumentoTipoToString")
    Documento toEntity(DocumentoUploadRequest dto);

    /**
     * Mapeia uma entidade Documento para um DocumentoResponseDTO.
     *
     * @param entity A entidade Documento.
     * @return O DTO de resposta correspondente.
     */
    @Mapping(source = "tipoDocumento", target = "tipoDocumento") // Mapeamento direto de String para String
    DocumentoResponseDTO toResponseDTO(Documento entity);

    /**
     * Atualiza uma entidade Documento existente com os dados de um
     * DocumentoUploadRequest.
     * Campos ignorados: 'id', 'urlS3', 'profissional', 'tenantId'.
     *
     * @param dto    O DTO de requisição.
     * @param entity A entidade Documento a ser atualizada.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "urlS3", ignore = true)
    @Mapping(target = "profissional", ignore = true)
    @Mapping(target = "tenantId", ignore = true)
    @Mapping(source = "tipoDocumento", target = "tipoDocumento", qualifiedByName = "mapDocumentoTipoToString")
    void updateEntityFromDto(DocumentoUploadRequest dto, @MappingTarget Documento entity);

    /**
     * Converte um enum DocumentoTipo para sua representação em String.
     * Usado para mapear de DTO (enum) para Entidade (String).
     *
     * @param tipo O enum DocumentoTipo.
     * @return A representação em String do enum.
     */
    @Named("mapDocumentoTipoToString")
    default String mapDocumentoTipoToString(DocumentoTipo tipo) {
        return tipo != null ? tipo.name() : null;
    }
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.advogado.application.dto.request.ExperienciaProfissionalRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.ExperienciaProfissionalResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.ExperienciaProfissional;

/**
 * Mapper MapStruct para a entidade ExperienciaProfissional e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface ExperienciaProfissionalMapper {
    ExperienciaProfissionalMapper INSTANCE = Mappers.getMapper(ExperienciaProfissionalMapper.class);

    /**
     * Mapeia um ExperienciaProfissionalRequestDTO para uma entidade
     * ExperienciaProfissional.
     * Os campos 'profissional' e 'tenantId' devem ser setados no serviço.
     *
     * @param dto O DTO de requisição.
     * @return A entidade ExperienciaProfissional correspondente.
     */
    @Mapping(target = "profissional", ignore = true)
    @Mapping(target = "tenantId", ignore = true)
    ExperienciaProfissional toEntity(ExperienciaProfissionalRequestDTO dto);

    /**
     * Mapeia uma entidade ExperienciaProfissional para um
     * ExperienciaProfissionalResponseDTO.
     *
     * @param entity A entidade ExperienciaProfissional.
     * @return O DTO de resposta correspondente.
     */
    ExperienciaProfissionalResponseDTO toResponseDTO(ExperienciaProfissional entity);

    /**
     * Atualiza uma entidade ExperienciaProfissional existente com os dados de um
     * ExperienciaProfissionalRequestDTO.
     * Os campos 'profissional' e 'tenantId' não são atualizados via DTO.
     *
     * @param dto    O DTO de requisição com os dados para atualização.
     * @param entity A entidade ExperienciaProfissional a ser atualizada.
     */
    @Mapping(target = "id", ignore = true) // ID não deve ser atualizado pelo DTO
    @Mapping(target = "profissional", ignore = true)
    @Mapping(target = "tenantId", ignore = true)
    void updateEntityFromDto(ExperienciaProfissionalRequestDTO dto, @MappingTarget ExperienciaProfissional entity);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.advogado.application.dto.request.FormacaoAcademicaRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.FormacaoAcademicaResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.FormacaoAcademica;

/**
 * Mapper MapStruct para a entidade FormacaoAcademica e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface FormacaoAcademicaMapper {
    FormacaoAcademicaMapper INSTANCE = Mappers.getMapper(FormacaoAcademicaMapper.class);

    /**
     * Mapeia um FormacaoAcademicaRequestDTO para uma entidade FormacaoAcademica.
     * Os campos 'profissional' e 'tenantId' devem ser setados no serviço.
     *
     * @param dto O DTO de requisição.
     * @return A entidade FormacaoAcademica correspondente.
     */
    @Mapping(target = "profissional", ignore = true)
    @Mapping(target = "tenantId", ignore = true)
    FormacaoAcademica toEntity(FormacaoAcademicaRequestDTO dto);

    /**
     * Mapeia uma entidade FormacaoAcademica para um FormacaoAcademicaResponseDTO.
     *
     * @param entity A entidade FormacaoAcademica.
     * @return O DTO de resposta correspondente.
     */
    FormacaoAcademicaResponseDTO toResponseDTO(FormacaoAcademica entity);

    /**
     * Atualiza uma entidade FormacaoAcademica existente com os dados de um
     * FormacaoAcademicaRequestDTO.
     * Os campos 'profissional' e 'tenantId' não são atualizados via DTO.
     *
     * @param dto    O DTO de requisição com os dados para atualização.
     * @param entity A entidade FormacaoAcademica a ser atualizada.
     */
    @Mapping(target = "id", ignore = true) // ID não deve ser atualizado pelo DTO
    @Mapping(target = "profissional", ignore = true)
    @Mapping(target = "tenantId", ignore = true)
    void updateEntityFromDto(FormacaoAcademicaRequestDTO dto, @MappingTarget FormacaoAcademica entity);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.advogado.application.dto.response.IdiomaResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.Idioma;

/**
 * Mapper MapStruct para a entidade Idioma e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface IdiomaMapper {
    IdiomaMapper INSTANCE = Mappers.getMapper(IdiomaMapper.class);

    /**
     * Mapeia uma entidade Idioma para um IdiomaResponseDTO.
     * 
     * @param entity A entidade Idioma.
     * @return O DTO de resposta correspondente.
     */
    IdiomaResponseDTO toResponseDTO(Idioma entity);

    /**
     * Mapeia um IdiomaResponseDTO para uma entidade Idioma.
     * 
     * @param dto O DTO de resposta.
     * @return A entidade Idioma correspondente.
     */
    Idioma toEntity(IdiomaResponseDTO dto);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.advogado.application.dto.response.LocalAtuacaoResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.LocalAtuacao;

/**
 * Mapper MapStruct para a entidade LocalAtuacao e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface LocalAtuacaoMapper {
    LocalAtuacaoMapper INSTANCE = Mappers.getMapper(LocalAtuacaoMapper.class);

    /**
     * Mapeia uma entidade LocalAtuacao para um LocalAtuacaoResponseDTO.
     * 
     * @param entity A entidade LocalAtuacao.
     * @return O DTO de resposta correspondente.
     */
    LocalAtuacaoResponseDTO toResponseDTO(LocalAtuacao entity);

    /**
     * Mapeia um LocalAtuacaoResponseDTO para uma entidade LocalAtuacao.
     * 
     * @param dto O DTO de resposta.
     * @return A entidade LocalAtuacao correspondente.
     */
    LocalAtuacao toEntity(LocalAtuacaoResponseDTO dto);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.advogado.application.dto.request.ProfissionalCreateRequest;
import br.com.legalconnect.advogado.application.dto.request.ProfissionalUpdateRequest;
import br.com.legalconnect.advogado.application.dto.response.ProfissionalResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.commom.mapper.PessoaMapper;

/**
 * Mapper MapStruct para a entidade Profissional e seus DTOs de requisição e
 * resposta.
 * Lida com mapeamentos complexos e aninhados, delegando para outros mappers
 * quando necessário.
 */
@Mapper(componentModel = "spring", uses = {
        PessoaMapper.class,
        CertificacaoMapper.class,
        DocumentoMapper.class,
        ExperienciaProfissionalMapper.class,
        FormacaoAcademicaMapper.class,
        RoleProfissionalMapper.class
        // Mappers para AreaAtuacao, Idioma, LocalAtuacao, TipoAtendimento NÃO são
        // usados diretamente aqui
        // para mapear UUIDs para DTOs completos, pois isso é responsabilidade do
        // serviço.
})
public interface ProfissionalMapper {
    ProfissionalMapper INSTANCE = Mappers.getMapper(ProfissionalMapper.class);

    /**
     * Mapeia um ProfissionalCreateRequest para uma nova entidade Profissional.
     *
     * @param dto O DTO de requisição para criação.
     * @return A nova entidade Profissional.
     */
    // @Mapping(source = "pessoa.user", target = "usuario") // Mapeia o
    // PessoaRequestDTO (que é 'pessoa') para a superclasse 'usuario'
    @Mapping(target = "id", ignore = true) // ID do Profissional será gerado
    @Mapping(target = "pessoaId", ignore = true) // Será preenchido no serviço após a persistência da Pessoa
    @Mapping(target = "statusProfissional", ignore = true) // Definido pela lógica de negócio
    @Mapping(target = "fazParteDePlano", ignore = true) // Definido pela lógica de negócio
    @Mapping(target = "certificacoes", ignore = true) // Coleções aninhadas gerenciadas no serviço
    @Mapping(target = "documentos", ignore = true) // Coleções aninhadas gerenciadas no serviço
    @Mapping(target = "experiencias", ignore = true) // Coleções aninhadas gerenciadas no serviço
    @Mapping(target = "formacoes", ignore = true) // Coleções aninhadas gerenciadas no serviço
    @Mapping(target = "roleProfissionals", ignore = true) // Coleções aninhadas gerenciadas no serviço
    @Mapping(source = "locaisAtuacaoIds", target = "locaisAtuacaoIds") // List<UUID> para Set<UUID>
    @Mapping(source = "areaAtuacaoIds", target = "areaAtuacaoIds") // List<UUID> para Set<UUID>
    @Mapping(source = "idiomaIds", target = "idiomaIds") // List<UUID> para Set<UUID>
    @Mapping(source = "tipoAtendimentoIds", target = "tipoAtendimentoIds") // List<UUID> para Set<UUID>
    Profissional toEntity(ProfissionalCreateRequest dto);

    /**
     * Atualiza uma entidade Profissional existente com os dados de um
     * ProfissionalUpdateRequest.
     *
     * @param dto    O DTO de requisição para atualização.
     * @param entity A entidade Profissional a ser atualizada.
     */
    @Mapping(target = "id", ignore = true) // ID da entidade não deve ser alterado pelo DTO
    @Mapping(source = "pessoa.usuario", target = "usuario") // Mapeia o DTO 'pessoa.usuario' para a superclasse
                                                            // 'usuario'
    @Mapping(target = "pessoaId", ignore = true) // Gerenciado pelo sistema
    @Mapping(target = "statusProfissional", ignore = true) // Definido pela lógica de negócio
    @Mapping(target = "fazParteDePlano", ignore = true) // Definido pela lógica de negócio
    @Mapping(target = "certificacoes", ignore = true) // Gerenciado pelo serviço (criação/atualização/remoção)
    @Mapping(target = "documentos", ignore = true) // Gerenciado pelo serviço
    @Mapping(target = "experiencias", ignore = true) // Gerenciado pelo serviço
    @Mapping(target = "formacoes", ignore = true) // Gerenciado pelo serviço
    @Mapping(target = "roleProfissionals", ignore = true) // Gerenciado pelo serviço
    @Mapping(source = "locaisAtuacaoIds", target = "locaisAtuacaoIds") // List<UUID> para Set<UUID>
    @Mapping(source = "areaAtuacaoIds", target = "areaAtuacaoIds") // List<UUID> para Set<UUID>
    @Mapping(source = "idiomaIds", target = "idiomaIds") // List<UUID> para Set<UUID>
    @Mapping(source = "tipoAtendimentoIds", target = "tipoAtendimentoIds") // List<UUID> para Set<UUID>
    void updateEntityFromDto(ProfissionalUpdateRequest dto, @MappingTarget Profissional entity);

    /**
     * Mapeia uma entidade Profissional para um ProfissionalResponseDTO.
     * Campos de dados mestres (locaisAtuacao, areasAtuacao, idiomas,
     * tiposAtendimento)
     * são ignorados aqui e devem ser populados pela camada de serviço,
     * pois a entidade Profissional armazena apenas os IDs dessas relações.
     *
     * @param entity A entidade Profissional.
     * @return O DTO de resposta correspondente.
     */
    @Mapping(source = "usuario", target = "pessoa") // Mapeia a superclasse 'usuario' para 'pessoa' no DTO
    @Mapping(target = "locaisAtuacao", ignore = true) // Populado pelo serviço
    @Mapping(target = "areasAtuacao", ignore = true) // Populado pelo serviço
    @Mapping(target = "idiomas", ignore = true) // Populado pelo serviço
    @Mapping(target = "tiposAtendimento", ignore = true) // Populado pelo serviço
    @Mapping(source = "roleProfissionals", target = "rolesProfissional") // Mapeia Set<RoleProfissional> para
                                                                         // List<RoleProfissionalResponseDTO>
    ProfissionalResponseDTO toResponseDTO(Profissional entity);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.advogado.application.dto.response.RoleProfissionalResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.RoleProfissional;

/**
 * Mapper MapStruct para a entidade RoleProfissional e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface RoleProfissionalMapper {
    RoleProfissionalMapper INSTANCE = Mappers.getMapper(RoleProfissionalMapper.class);

    /**
     * Mapeia uma entidade RoleProfissional para um RoleProfissionalResponseDTO.
     * Ignora 'tenantId' na resposta se não for relevante para o frontend.
     *
     * @param entity A entidade RoleProfissional.
     * @return O DTO de resposta correspondente.
     */
    @Mapping(target = "id", source = "id")
    @Mapping(target = "name", source = "name")
    RoleProfissionalResponseDTO toResponseDTO(RoleProfissional entity);

    /**
     * Mapeia um RoleProfissionalResponseDTO para uma entidade RoleProfissional.
     * 'tenantId' deve ser definido pelo serviço.
     *
     * @param dto O DTO de resposta.
     * @return A entidade RoleProfissional correspondente.
     */
    @Mapping(target = "tenantId", ignore = true)
    RoleProfissional toEntity(RoleProfissionalResponseDTO dto);
}
```
```java
package br.com.legalconnect.advogado.application.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.advogado.application.dto.response.TipoAtendimentoResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.TipoAtendimento;

/**
 * Mapper MapStruct para a entidade TipoAtendimento e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface TipoAtendimentoMapper {
    TipoAtendimentoMapper INSTANCE = Mappers.getMapper(TipoAtendimentoMapper.class);

    /**
     * Mapeia uma entidade TipoAtendimento para um TipoAtendimentoResponseDTO.
     * 
     * @param entity A entidade TipoAtendimento.
     * @return O DTO de resposta correspondente.
     */
    TipoAtendimentoResponseDTO toResponseDTO(TipoAtendimento entity);

    /**
     * Mapeia um TipoAtendimentoResponseDTO para uma entidade TipoAtendimento.
     * 
     * @param dto O DTO de resposta.
     * @return A entidade TipoAtendimento correspondente.
     */
    TipoAtendimento toEntity(TipoAtendimentoResponseDTO dto);
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.time.LocalDateTime;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.advogado.domain.repository.ProfissionalRepository;
import br.com.legalconnect.commom.service.EmailService; // Para enviar e-mails de confirmação
import br.com.legalconnect.commom.service.TenantContext;
import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import jakarta.transaction.Transactional;
import lombok.extern.slf4j.Slf4j;

/**
 * Serviço responsável pela lógica de agendamento de consultas no Marketplace.
 */
@Slf4j
@Service
public class AgendamentoService {

        private final ProfissionalRepository profissionalRepository;
        private final GoogleCalendarService googleCalendarService;
        private final EmailService emailService;
        // Repositório de agendamentos (assumindo a entidade Agendamento)
        // private final AgendamentoRepository agendamentoRepository;

        @Autowired
        public AgendamentoService(ProfissionalRepository profissionalRepository,
                        GoogleCalendarService googleCalendarService,
                        EmailService emailService) {
                this.profissionalRepository = profissionalRepository;
                this.googleCalendarService = googleCalendarService;
                this.emailService = emailService;
                // this.agendamentoRepository = agendamentoRepository;
        }

        /**
         * Realiza o agendamento de uma consulta entre um cliente e um profissional.
         * Regras de Negócio:
         * - Verifica a disponibilidade do profissional na data/hora solicitada.
         * - Garante que o profissional existe e está ativo no marketplace.
         * - Integra com Google Calendar para adicionar o evento na agenda do
         * profissional.
         * - Envia e-mails de confirmação para cliente e profissional.
         *
         * @param profissionalId     ID do profissional.
         * @param clienteId          ID do cliente.
         * @param horarioAgendamento Horário da consulta.
         * @param tipoServico        Tipo de serviço agendado.
         * @return Sucesso do agendamento.
         * @throws BusinessException se o profissional não estiver disponível ou outras
         *                           regras de negócio forem violadas.
         */
        @Transactional
        public boolean agendarConsulta(UUID profissionalId, UUID clienteId, LocalDateTime horarioAgendamento,
                        String tipoServico) {
                UUID tenantId = TenantContext.getCurrentTenantId(); // O agendamento ocorre dentro do contexto de um
                                                                    // tenant

                Profissional profissional = profissionalRepository.findById(profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO,
                                                HttpStatus.NOT_FOUND,
                                                "Profissional não encontrado."));

                // Regra de Negócio: Profissional deve estar ativo e usar marketplace
                if (!profissional.getUsaMarketplace() || !profissional.getStatusProfissional().equals("ACTIVE")) { // Assuming
                                                                                                                   // "ACTIVE"
                                                                                                                   // status
                        throw new BusinessException(ErrorCode.ADVOCATE_NOT_AVAILABLE, HttpStatus.BAD_REQUEST,
                                        "Profissional não disponível para agendamento.");
                }

                // Regra de Negócio: Verificar disponibilidade real do profissional (com Google
                // Calendar)
                boolean isAvailable = googleCalendarService.checkAvailability(profissional.getUsuario().getEmail(),
                                horarioAgendamento);
                if (!isAvailable) {
                        throw new BusinessException(ErrorCode.APPOINTMENT_CONFLICT, HttpStatus.CONFLICT,
                                        "Horário indisponível para o profissional.");
                }

                // Regra de Negócio: Criar o registro de agendamento no banco de dados (se
                // houver entidade Agendamento)
                // Agendamento newAppointment = Agendamento.builder()
                // .profissional(profissional)
                // .clienteId(clienteId)
                // .horario(horarioAgendamento)
                // .tipoServico(tipoServico)
                // .tenantId(tenantId)
                // .build();
                // agendamentoRepository.save(newAppointment);

                // Funcionalidade Completa: Adicionar evento ao Google Calendar do profissional
                googleCalendarService.addEvent(
                                profissional.getUsuario().getEmail(),
                                "Consulta: " + tipoServico + " com Cliente " + clienteId, // Supondo que você pode obter
                                                                                          // o nome do
                                                                                          // cliente
                                horarioAgendamento,
                                horarioAgendamento.plusHours(1) // Consulta de 1 hora
                );

                // Funcionalidade Completa: Enviar e-mails de confirmação
                emailService.sendAppointmentConfirmationEmail(
                                profissional.getUsuario().getEmail(),
                                "Você tem uma nova consulta agendada com o cliente " + clienteId + " para "
                                                + horarioAgendamento);
                // emailService.sendAppointmentConfirmationEmail(
                // clienteService.findById(clienteId).getEmail(), // Supondo um clienteService
                // "Sua consulta com " + profissional.getNomeCompleto() + " foi confirmada para
                // " + horarioAgendamento
                // );

                return true;
        }

        /**
         * Simula a avaliação de uma consulta pelo cliente.
         * Regras de Negócio:
         * - Associa a avaliação ao agendamento e ao profissional.
         * - Atualiza a média de avaliação do profissional (lógica simplificada).
         *
         * @param agendamentoId ID do agendamento avaliado.
         * @param clienteId     ID do cliente que avaliou.
         * @param rating        Nota da avaliação (1-5).
         * @param comentario    Comentário opcional.
         * @return Sucesso da avaliação.
         */
        @Transactional
        public boolean avaliarConsulta(UUID agendamentoId, UUID clienteId, int rating, String comentario) {
                // Lógica para encontrar o agendamento e associar a avaliação.
                // Agendamento agendamento =
                // agendamentoRepository.findById(agendamentoId).orElseThrow(...)
                // Criar uma entidade Avaliacao.
                // Atualizar a média de avaliação do Profissional.

                // Simulação: Apenas loga a avaliação
                log.info("Cliente {} avaliou agendamento {} com nota {} e comentário: {}", clienteId, agendamentoId,
                                rating,
                                comentario);

                // Para fins de demonstração, vamos considerar um sucesso
                return true;
        }

        // Outras funcionalidades como reagendamento, cancelamento, busca de
        // agendamentos
        // seriam implementadas aqui.
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.response.AreaAtuacaoResponseDTO;
import br.com.legalconnect.advogado.application.mapper.AreaAtuacaoMapper;
import br.com.legalconnect.advogado.domain.modal.entity.AreaAtuacao;
import br.com.legalconnect.advogado.domain.repository.AreaAtuacaoRepository;
import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;

/**
 * Serviço para gestão de Áreas de Atuação (dados mestre).
 * Essas entidades são consideradas globais ou de um tenant específico da
 * plataforma,
 * mas para este módulo, o acesso é simplificado como dados mestre.
 */
@Service
public class AreaAtuacaoService {

    private final AreaAtuacaoRepository areaAtuacaoRepository;
    private final AreaAtuacaoMapper areaAtuacaoMapper;

    @Autowired
    public AreaAtuacaoService(AreaAtuacaoRepository areaAtuacaoRepository, AreaAtuacaoMapper areaAtuacaoMapper) {
        this.areaAtuacaoRepository = areaAtuacaoRepository;
        this.areaAtuacaoMapper = areaAtuacaoMapper;
    }

    /**
     * Busca uma Área de Atuação pelo ID.
     *
     * @param id ID da Área de Atuação.
     * @return DTO da Área de Atuação.
     * @throws BusinessException se a Área de Atuação não for encontrada.
     */
    public AreaAtuacaoResponseDTO findAreaAtuacaoById(UUID id) {
        AreaAtuacao areaAtuacao = areaAtuacaoRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Área de Atuação não encontrada."));
        return areaAtuacaoMapper.toResponseDTO(areaAtuacao);
    }

    /**
     * Lista todas as Áreas de Atuação.
     *
     * @return Lista de DTOs de Áreas de Atuação.
     */
    public List<AreaAtuacaoResponseDTO> findAllAreasAtuacao() {
        return areaAtuacaoRepository.findAll().stream()
                .map(areaAtuacaoMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    // Métodos para criar, atualizar e deletar podem ser adicionados
    // se essas entidades mestre forem gerenciáveis via API
    // Por exemplo, por um ADMIN da plataforma.
    // Ex:
    /*
     * @Transactional
     * public AreaAtuacaoResponseDTO createAreaAtuacao(AreaAtuacaoRequestDTO
     * requestDTO) {
     * if (areaAtuacaoRepository.findByNome(requestDTO.getNome()).isPresent()) {
     * throw new BusinessException(ErrorCode.DADOS_INVALIDOS, HttpStatus.CONFLICT,
     * "Área de Atuação com este nome já existe.");
     * }
     * AreaAtuacao areaAtuacao = areaAtuacaoMapper.toEntity(requestDTO);
     * areaAtuacao = areaAtuacaoRepository.save(areaAtuacao);
     * return areaAtuacaoMapper.toResponseDTO(areaAtuacao);
     * }
     * 
     * @Transactional
     * public AreaAtuacaoResponseDTO updateAreaAtuacao(UUID id,
     * AreaAtuacaoRequestDTO requestDTO) {
     * AreaAtuacao existing = areaAtuacaoRepository.findById(id)
     * .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
     * HttpStatus.NOT_FOUND, "Área de Atuação não encontrada."));
     * if (!existing.getNome().equalsIgnoreCase(requestDTO.getNome()) &&
     * areaAtuacaoRepository.findByNome(requestDTO.getNome()).isPresent()) {
     * throw new BusinessException(ErrorCode.DADOS_INVALIDOS, HttpStatus.CONFLICT,
     * "Área de Atuação com este nome já existe.");
     * }
     * areaAtuacaoMapper.updateEntityFromDto(requestDTO, existing); // Supondo um
     * updateEntityFromDto no mapper
     * existing = areaAtuacaoRepository.save(existing);
     * return areaAtuacaoMapper.toResponseDTO(existing);
     * }
     * 
     * @Transactional
     * public void deleteAreaAtuacao(UUID id) {
     * if (!areaAtuacaoRepository.existsById(id)) {
     * throw new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
     * HttpStatus.NOT_FOUND, "Área de Atuação não encontrada para deleção.");
     * }
     * // Regra de Negócio: Verificar se está em uso por algum Profissional antes de
     * deletar
     * // if (profissionalRepository.existsByAreaAtuacaoId(id)) { ... }
     * areaAtuacaoRepository.deleteById(id);
     * }
     */
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.request.CertificacaoRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.CertificacaoResponseDTO;
import br.com.legalconnect.advogado.application.mapper.CertificacaoMapper;
import br.com.legalconnect.advogado.domain.modal.entity.Certificacao;
import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.advogado.domain.repository.CertificacaoRepository;
import br.com.legalconnect.advogado.domain.repository.ProfissionalRepository;
import br.com.legalconnect.commom.service.TenantContext;
import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import jakarta.transaction.Transactional;

/**
 * Serviço responsável pela gestão das certificações de um Profissional.
 * Este serviço é granular e pode ser usado para operações diretas em
 * certificações,
 * embora o ProfissionalService orquestre a maioria.
 */
@Service
public class CertificacaoService {

    private final CertificacaoRepository certificacaoRepository;
    private final CertificacaoMapper certificacaoMapper;
    private final ProfissionalRepository profissionalRepository;

    @Autowired
    public CertificacaoService(CertificacaoRepository certificacaoRepository,
            CertificacaoMapper certificacaoMapper,
            ProfissionalRepository profissionalRepository) {
        this.certificacaoRepository = certificacaoRepository;
        this.certificacaoMapper = certificacaoMapper;
        this.profissionalRepository = profissionalRepository;
    }

    /**
     * Cria uma nova certificação para um profissional específico.
     * Regras de Negócio:
     * - O profissional deve existir e pertencer ao tenant atual.
     * - A certificação é associada ao profissional e ao tenant.
     *
     * @param profissionalId ID do profissional.
     * @param requestDTO     DTO com os dados da certificação.
     * @return DTO da certificação criada.
     */
    @Transactional
    public CertificacaoResponseDTO createCertificacao(UUID profissionalId, CertificacaoRequestDTO requestDTO) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Profissional profissional = profissionalRepository.findById(profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado."));

        if (!profissional.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Profissional pertence a outro tenant.");
        }

        Certificacao certificacao = certificacaoMapper.toEntity(requestDTO);
        certificacao.setProfissional(profissional);
        certificacao.setTenantId(tenantId);

        certificacao = certificacaoRepository.save(certificacao); // profissionalId é passado para o
                                                                  // save no repositório customizado
        return certificacaoMapper.toResponseDTO(certificacao);
    }

    /**
     * Atualiza uma certificação existente de um profissional.
     * Regras de Negócio:
     * - A certificação deve existir e pertencer ao profissional e tenant corretos.
     *
     * @param profissionalId ID do profissional.
     * @param certificacaoId ID da certificação.
     * @param requestDTO     DTO com os dados para atualização.
     * @return DTO da certificação atualizada.
     */
    @Transactional
    public CertificacaoResponseDTO updateCertificacao(UUID profissionalId, UUID certificacaoId,
            CertificacaoRequestDTO requestDTO) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Certificacao existingCertificacao = certificacaoRepository
                .findByIdAndProfissionalId(certificacaoId, profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Certificação não encontrada para este profissional."));

        if (!existingCertificacao.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Certificação pertence a outro tenant ou profissional.");
        }

        certificacaoMapper.updateEntityFromDto(requestDTO, existingCertificacao);
        existingCertificacao = certificacaoRepository.save(existingCertificacao);
        return certificacaoMapper.toResponseDTO(existingCertificacao);
    }

    /**
     * Busca uma certificação pelo ID do profissional e da certificação.
     *
     * @param profissionalId ID do profissional.
     * @param certificacaoId ID da certificação.
     * @return DTO da certificação.
     */
    public CertificacaoResponseDTO findCertificacaoById(UUID profissionalId, UUID certificacaoId) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Certificacao certificacao = certificacaoRepository.findByIdAndProfissionalId(certificacaoId, profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Certificação não encontrada para este profissional."));

        if (!certificacao.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Certificação pertence a outro tenant.");
        }

        return certificacaoMapper.toResponseDTO(certificacao);
    }

    /**
     * Lista todas as certificações de um profissional.
     *
     * @param profissionalId ID do profissional.
     * @return Lista de DTOs de certificações.
     */
    public List<CertificacaoResponseDTO> findAllCertificacoesByProfissionalId(UUID profissionalId) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        // Verificar se o profissional existe e pertence ao tenant
        Profissional profissional = profissionalRepository.findById(profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado."));
        if (!profissional.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Profissional pertence a outro tenant.");
        }

        return certificacaoRepository.findAllByProfissionalId(profissionalId).stream()
                .map(certificacaoMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    /**
     * Deleta uma certificação de um profissional.
     *
     * @param profissionalId ID do profissional.
     * @param certificacaoId ID da certificação a ser deletada.
     */
    @Transactional
    public void deleteCertificacao(UUID profissionalId, UUID certificacaoId) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        // Verificar se a certificação existe e pertence ao profissional e tenant
        Certificacao existingCertificacao = certificacaoRepository
                .findByIdAndProfissionalId(certificacaoId, profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Certificação não encontrada para deleção."));

        if (!existingCertificacao.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Certificação pertence a outro tenant.");
        }

        certificacaoRepository.deleteByIdAndProfissionalId(certificacaoId, profissionalId);
    }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.Base64; // Para decodificar Base64
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.request.DocumentoUploadRequest;
import br.com.legalconnect.advogado.application.dto.response.DocumentoResponseDTO;
import br.com.legalconnect.advogado.application.mapper.DocumentoMapper;
import br.com.legalconnect.advogado.domain.modal.entity.Documento;
import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.advogado.domain.repository.DocumentoRepository;
import br.com.legalconnect.advogado.domain.repository.ProfissionalRepository;
import br.com.legalconnect.commom.service.S3Service;
import br.com.legalconnect.commom.service.TenantContext;
import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import jakarta.transaction.Transactional;

/**
 * Serviço responsável pela gestão de documentos de um Profissional.
 * Inclui o upload de arquivos para o S3 e o armazenamento dos metadados no
 * banco de dados.
 */
@Service
public class DocumentoService {

    private final DocumentoRepository documentoRepository;
    private final DocumentoMapper documentoMapper;
    private final ProfissionalRepository profissionalRepository;
    private final S3Service s3Service; // Serviço para integração com S3

    @Autowired
    public DocumentoService(DocumentoRepository documentoRepository,
            DocumentoMapper documentoMapper,
            ProfissionalRepository profissionalRepository,
            S3Service s3Service) {
        this.documentoRepository = documentoRepository;
        this.documentoMapper = documentoMapper;
        this.profissionalRepository = profissionalRepository;
        this.s3Service = s3Service;
    }

    /**
     * Realiza o upload de um documento para o S3 e persiste seus metadados.
     * Regras de Negócio:
     * - O profissional deve existir e pertencer ao tenant atual.
     * - O conteúdo do arquivo em Base64 é decodificado e enviado ao S3.
     * - A URL do S3 é armazenada no banco de dados.
     *
     * @param profissionalId ID do profissional.
     * @param request        DTO com os dados do documento e o arquivo em Base64.
     * @return DTO do documento criado.
     * @throws BusinessException em caso de falha no upload ou se o profissional não
     *                           for encontrado.
     */
    @Transactional
    public DocumentoResponseDTO uploadDocumento(UUID profissionalId, DocumentoUploadRequest request) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Profissional profissional = profissionalRepository.findById(profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado para upload de documento."));

        if (!profissional.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Profissional pertence a outro tenant.");
        }

        // Decodificar Base64 e fazer upload para S3
        byte[] fileBytes;
        try {
            fileBytes = Base64.getDecoder().decode(request.getArquivoBase64());
        } catch (IllegalArgumentException e) {
            throw new BusinessException(ErrorCode.INVALID_DOCUMENT_FORMAT, HttpStatus.BAD_REQUEST,
                    "Conteúdo do arquivo em Base64 inválido.");
        }

        String s3Key = "profissionais/" + profissionalId + "/documentos/" + UUID.randomUUID() + "/"
                + request.getNomeArquivo();
        String fileUrl = s3Service.uploadFile(fileBytes, s3Key, request.getMimeType());

        if (fileUrl == null) {
            throw new BusinessException(ErrorCode.DOCUMENT_UPLOAD_FAILED, HttpStatus.INTERNAL_SERVER_ERROR,
                    "Falha ao fazer upload do documento para o S3.");
        }

        Documento documento = documentoMapper.toEntity(request);
        documento.setUrlS3(fileUrl);
        documento.setProfissional(profissional);
        documento.setTenantId(tenantId);

        documento = documentoRepository.save(documento);
        return documentoMapper.toResponseDTO(documento);
    }

    /**
     * Busca um documento pelo seu ID e pelo ID do profissional.
     * Regras de Negócio:
     * - O documento deve pertencer ao profissional e ao tenant correto.
     *
     * @param profissionalId ID do profissional.
     * @param documentoId    ID do documento.
     * @return DTO do documento encontrado.
     * @throws BusinessException se o documento não for encontrado.
     */
    public DocumentoResponseDTO findDocumentoById(UUID profissionalId, UUID documentoId) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Documento documento = documentoRepository.findByIdAndProfissionalId(documentoId, profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Documento não encontrado para este profissional."));

        if (!documento.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Documento pertence a outro tenant ou profissional.");
        }

        return documentoMapper.toResponseDTO(documento);
    }

    /**
     * Lista todos os documentos de um profissional.
     * Regras de Negócio:
     * - Apenas documentos do tenant atual são retornados.
     *
     * @param profissionalId ID do profissional.
     * @return Lista de DTOs de documentos.
     */
    public List<DocumentoResponseDTO> findAllDocumentosByProfissionalId(UUID profissionalId) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Profissional profissional = profissionalRepository.findById(profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado."));
        if (!profissional.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Profissional pertence a outro tenant.");
        }

        return documentoRepository.findAllByProfissionalId(profissionalId).stream()
                .map(documentoMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    /**
     * Deleta um documento pelo seu ID e pelo ID do profissional.
     * Regras de Negócio:
     * - O documento é removido do S3 antes de ser deletado do banco de dados.
     *
     * @param profissionalId ID do profissional.
     * @param documentoId    ID do documento a ser deletado.
     * @throws BusinessException se o documento não for encontrado ou falha na
     *                           deleção do S3.
     */
    @Transactional
    public void deleteDocumento(UUID profissionalId, UUID documentoId) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Documento existingDocumento = documentoRepository.findByIdAndProfissionalId(documentoId, profissionalId)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Documento não encontrado para deleção."));

        if (!existingDocumento.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Documento pertence a outro tenant.");
        }

        // Deletar do S3 primeiro
        try {
            s3Service.deleteFile(existingDocumento.getUrlS3());
        } catch (Exception e) {
            throw new BusinessException(ErrorCode.ERRO_INTERNO_SERVIDOR, HttpStatus.INTERNAL_SERVER_ERROR,
                    "Falha ao deletar o documento do S3: " + e.getMessage());
        }

        documentoRepository.deleteByIdAndProfissionalId(documentoId, profissionalId);
    }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.request.ExperienciaProfissionalRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.ExperienciaProfissionalResponseDTO;
import br.com.legalconnect.advogado.application.mapper.ExperienciaProfissionalMapper;
import br.com.legalconnect.advogado.domain.modal.entity.ExperienciaProfissional;
import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.advogado.domain.repository.ExperienciaRepository;
import br.com.legalconnect.advogado.domain.repository.ProfissionalRepository;
import br.com.legalconnect.commom.service.TenantContext;
import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import jakarta.transaction.Transactional;

/**
 * Serviço responsável pela gestão das experiências profissionais de um
 * Profissional.
 */
@Service
public class ExperienciaProfissionalService {

        private final ExperienciaRepository experienciaRepository;
        private final ExperienciaProfissionalMapper experienciaProfissionalMapper;
        private final ProfissionalRepository profissionalRepository;

        @Autowired
        public ExperienciaProfissionalService(ExperienciaRepository experienciaRepository,
                        ExperienciaProfissionalMapper experienciaProfissionalMapper,
                        ProfissionalRepository profissionalRepository) {
                this.experienciaRepository = experienciaRepository;
                this.experienciaProfissionalMapper = experienciaProfissionalMapper;
                this.profissionalRepository = profissionalRepository;
        }

        /**
         * Cria uma nova experiência profissional para um profissional específico.
         * Regras de Negócio:
         * - O profissional deve existir e pertencer ao tenant atual.
         * - A experiência é associada ao profissional e ao tenant.
         *
         * @param profissionalId ID do profissional.
         * @param requestDTO     DTO com os dados da experiência.
         * @return DTO da experiência criada.
         */
        @Transactional
        public ExperienciaProfissionalResponseDTO createExperienciaProfissional(UUID profissionalId,
                        ExperienciaProfissionalRequestDTO requestDTO) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                Profissional profissional = profissionalRepository.findById(profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO,
                                                HttpStatus.NOT_FOUND,
                                                "Profissional não encontrado."));

                if (!profissional.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Profissional pertence a outro tenant.");
                }

                ExperienciaProfissional experiencia = experienciaProfissionalMapper.toEntity(requestDTO);
                experiencia.setProfissional(profissional);
                experiencia.setTenantId(tenantId);

                experiencia = experienciaRepository.save(experiencia);
                return experienciaProfissionalMapper.toResponseDTO(experiencia);
        }

        /**
         * Atualiza uma experiência profissional existente de um profissional.
         * Regras de Negócio:
         * - A experiência deve existir e pertencer ao profissional e tenant corretos.
         *
         * @param profissionalId ID do profissional.
         * @param experienciaId  ID da experiência.
         * @param requestDTO     DTO com os dados para atualização.
         * @return DTO da experiência atualizada.
         */
        @Transactional
        public ExperienciaProfissionalResponseDTO updateExperienciaProfissional(UUID profissionalId, UUID experienciaId,
                        ExperienciaProfissionalRequestDTO requestDTO) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                ExperienciaProfissional existingExperiencia = experienciaRepository
                                .findByIdAndProfissionalId(experienciaId, profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
                                                HttpStatus.NOT_FOUND,
                                                "Experiência profissional não encontrada para este profissional."));

                if (!existingExperiencia.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Experiência pertence a outro tenant ou profissional.");
                }

                experienciaProfissionalMapper.updateEntityFromDto(requestDTO, existingExperiencia);
                existingExperiencia = experienciaRepository.save(existingExperiencia);
                return experienciaProfissionalMapper.toResponseDTO(existingExperiencia);
        }

        /**
         * Busca uma experiência profissional pelo ID do profissional e da experiência.
         *
         * @param profissionalId ID do profissional.
         * @param experienciaId  ID da experiência.
         * @return DTO da experiência.
         */
        public ExperienciaProfissionalResponseDTO findExperienciaProfissionalById(UUID profissionalId,
                        UUID experienciaId) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                ExperienciaProfissional experiencia = experienciaRepository
                                .findByIdAndProfissionalId(experienciaId, profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
                                                HttpStatus.NOT_FOUND,
                                                "Experiência profissional não encontrada para este profissional."));

                if (!experiencia.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Experiência pertence a outro tenant.");
                }

                return experienciaProfissionalMapper.toResponseDTO(experiencia);
        }

        /**
         * Lista todas as experiências profissionais de um profissional.
         *
         * @param profissionalId ID do profissional.
         * @return Lista de DTOs de experiências.
         */
        public List<ExperienciaProfissionalResponseDTO> findAllExperienciasProfissionaisByProfissionalId(
                        UUID profissionalId) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                Profissional profissional = profissionalRepository.findById(profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO,
                                                HttpStatus.NOT_FOUND,
                                                "Profissional não encontrado."));
                if (!profissional.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Profissional pertence a outro tenant.");
                }

                return experienciaRepository.findAllByProfissionalId(profissionalId).stream()
                                .map(experienciaProfissionalMapper::toResponseDTO)
                                .collect(Collectors.toList());
        }

        /**
         * Deleta uma experiência profissional de um profissional.
         *
         * @param profissionalId ID do profissional.
         * @param experienciaId  ID da experiência a ser deletada.
         */
        @Transactional
        public void deleteExperienciaProfissional(UUID profissionalId, UUID experienciaId) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                ExperienciaProfissional existingExperiencia = experienciaRepository
                                .findByIdAndProfissionalId(experienciaId, profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
                                                HttpStatus.NOT_FOUND,
                                                "Experiência profissional não encontrada para deleção."));

                if (!existingExperiencia.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Experiência pertence a outro tenant.");
                }

                experienciaRepository.deleteByIdAndProfissionalId(experienciaId, profissionalId);
        }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.request.FormacaoAcademicaRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.FormacaoAcademicaResponseDTO;
import br.com.legalconnect.advogado.application.mapper.FormacaoAcademicaMapper;
import br.com.legalconnect.advogado.domain.modal.entity.FormacaoAcademica;
import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.advogado.domain.repository.FormacaoRepository;
import br.com.legalconnect.advogado.domain.repository.ProfissionalRepository;
import br.com.legalconnect.commom.service.TenantContext;
import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import jakarta.transaction.Transactional;

/**
 * Serviço responsável pela gestão das formações acadêmicas de um Profissional.
 */
@Service
public class FormacaoAcademicaService {

        private final FormacaoRepository formacaoRepository;
        private final FormacaoAcademicaMapper formacaoAcademicaMapper;
        private final ProfissionalRepository profissionalRepository;

        @Autowired
        public FormacaoAcademicaService(FormacaoRepository formacaoRepository,
                        FormacaoAcademicaMapper formacaoAcademicaMapper,
                        ProfissionalRepository profissionalRepository) {
                this.formacaoRepository = formacaoRepository;
                this.formacaoAcademicaMapper = formacaoAcademicaMapper;
                this.profissionalRepository = profissionalRepository;
        }

        /**
         * Cria uma nova formação acadêmica para um profissional específico.
         * Regras de Negócio:
         * - O profissional deve existir e pertencer ao tenant atual.
         * - A formação é associada ao profissional e ao tenant.
         *
         * @param profissionalId ID do profissional.
         * @param requestDTO     DTO com os dados da formação.
         * @return DTO da formação criada.
         */
        @Transactional
        public FormacaoAcademicaResponseDTO createFormacaoAcademica(UUID profissionalId,
                        FormacaoAcademicaRequestDTO requestDTO) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                Profissional profissional = profissionalRepository.findById(profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO,
                                                HttpStatus.NOT_FOUND,
                                                "Profissional não encontrado."));

                if (!profissional.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Profissional pertence a outro tenant.");
                }

                FormacaoAcademica formacao = formacaoAcademicaMapper.toEntity(requestDTO);
                formacao.setProfissional(profissional);
                formacao.setTenantId(tenantId);

                formacao = formacaoRepository.save(formacao);
                return formacaoAcademicaMapper.toResponseDTO(formacao);
        }

        /**
         * Atualiza uma formação acadêmica existente de um profissional.
         * Regras de Negócio:
         * - A formação deve existir e pertencer ao profissional e tenant corretos.
         *
         * @param profissionalId ID do profissional.
         * @param formacaoId     ID da formação.
         * @param requestDTO     DTO com os dados para atualização.
         * @return DTO da formação atualizada.
         */
        @Transactional
        public FormacaoAcademicaResponseDTO updateFormacaoAcademica(UUID profissionalId, UUID formacaoId,
                        FormacaoAcademicaRequestDTO requestDTO) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                FormacaoAcademica existingFormacao = formacaoRepository
                                .findByIdAndProfissionalId(formacaoId, profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
                                                HttpStatus.NOT_FOUND,
                                                "Formação acadêmica não encontrada para este profissional."));

                if (!existingFormacao.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Formação pertence a outro tenant ou profissional.");
                }

                formacaoAcademicaMapper.updateEntityFromDto(requestDTO, existingFormacao);
                existingFormacao = formacaoRepository.save(existingFormacao);
                return formacaoAcademicaMapper.toResponseDTO(existingFormacao);
        }

        /**
         * Busca uma formação acadêmica pelo ID do profissional e da formação.
         *
         * @param profissionalId ID do profissional.
         * @param formacaoId     ID da formação.
         * @return DTO da formação.
         */
        public FormacaoAcademicaResponseDTO findFormacaoAcademicaById(UUID profissionalId, UUID formacaoId) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                FormacaoAcademica formacao = formacaoRepository.findByIdAndProfissionalId(formacaoId, profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
                                                HttpStatus.NOT_FOUND,
                                                "Formação acadêmica não encontrada para este profissional."));

                if (!formacao.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Formação pertence a outro tenant.");
                }

                return formacaoAcademicaMapper.toResponseDTO(formacao);
        }

        /**
         * Lista todas as formações acadêmicas de um profissional.
         *
         * @param profissionalId ID do profissional.
         * @return Lista de DTOs de formações.
         */
        public List<FormacaoAcademicaResponseDTO> findAllFormacoesAcademicasByProfissionalId(UUID profissionalId) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                Profissional profissional = profissionalRepository.findById(profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO,
                                                HttpStatus.NOT_FOUND,
                                                "Profissional não encontrado."));
                if (!profissional.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Profissional pertence a outro tenant.");
                }

                return formacaoRepository.findAllByProfissionalId(profissionalId).stream()
                                .map(formacaoAcademicaMapper::toResponseDTO)
                                .collect(Collectors.toList());
        }

        /**
         * Deleta uma formação acadêmica de um profissional.
         *
         * @param profissionalId ID do profissional.
         * @param formacaoId     ID da formação a ser deletada.
         */
        @Transactional
        public void deleteFormacaoAcademica(UUID profissionalId, UUID formacaoId) {
                UUID tenantId = TenantContext.getCurrentTenantId();

                FormacaoAcademica existingFormacao = formacaoRepository
                                .findByIdAndProfissionalId(formacaoId, profissionalId)
                                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
                                                HttpStatus.NOT_FOUND,
                                                "Formação acadêmica não encontrada para deleção."));

                if (!existingFormacao.getTenantId().equals(tenantId)) {
                        throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                                        "Acesso negado. Formação pertence a outro tenant.");
                }

                formacaoRepository.deleteByIdAndProfissionalId(formacaoId, profissionalId);
        }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.time.LocalDateTime;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

/**
 * Serviço de integração simulada com a Google Calendar API.
 * Em um ambiente real, esta classe conteria a lógica de comunicação com a
 * Google Calendar API
 * utilizando as credenciais OAuth2 do aplicativo.
 */
@Service
public class GoogleCalendarService {

    private static final Logger log = LoggerFactory.getLogger(GoogleCalendarService.class);

    /**
     * Simula a adição de um evento à agenda do Google Calendar de um usuário.
     *
     * @param userEmail    O e-mail do usuário cuja agenda será atualizada.
     * @param eventSummary O título do evento.
     * @param startTime    A data e hora de início do evento.
     * @param endTime      A data e hora de fim do evento.
     * @return true se o evento foi "adicionado" com sucesso, false caso contrário.
     */
    public boolean addEvent(String userEmail, String eventSummary, LocalDateTime startTime, LocalDateTime endTime) {
        log.info("Simulando adição de evento ao Google Calendar para {}:", userEmail);
        log.info("  Sumário: {}", eventSummary);
        log.info("  Início: {}", startTime);
        log.info("  Fim: {}", endTime);
        // Lógica real de integração com Google Calendar API seria aqui, por exemplo:
        // Event event = new Event()
        // .setSummary(eventSummary)
        // .setDescription("Agendamento via LegalConnect");
        // DateTime startDateTime = new DateTime(startTime.toString());
        // EventDateTime start = new
        // EventDateTime().setDateTime(startDateTime).setTimeZone("America/Sao_Paulo");
        // event.setStart(start);
        // ...
        // Calendar service = new Calendar.Builder(...).build();
        // service.events().insert(userEmail, event).execute();
        log.info("Evento simulado adicionado com sucesso ao Google Calendar.");
        return true;
    }

    /**
     * Simula a verificação de disponibilidade na agenda do Google Calendar de um
     * usuário.
     *
     * @param userEmail    O e-mail do usuário.
     * @param proposedTime O horário a ser verificado.
     * @return true se o horário estiver disponível, false caso contrário.
     */
    public boolean checkAvailability(String userEmail, LocalDateTime proposedTime) {
        log.info("Simulando verificação de disponibilidade para {} no horário {}", userEmail, proposedTime);
        // Em um cenário real, você consultaria a API do Google Calendar para Free/Busy
        // Por simplicidade, vamos simular que o horário está sempre disponível, a menos
        // que seja um horário "proibido"
        if (proposedTime.getHour() == 13) { // Exemplo de regra de negócio: almoço indisponível
            log.info("Horário indisponível (simulado).");
            return false;
        }
        log.info("Horário disponível (simulado).");
        return true;
    }

    // Outros métodos como updateEvent, deleteEvent, listEvents podem ser
    // adicionados.
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.response.IdiomaResponseDTO;
import br.com.legalconnect.advogado.application.mapper.IdiomaMapper;
import br.com.legalconnect.advogado.domain.modal.entity.Idioma;
import br.com.legalconnect.advogado.domain.repository.IdiomaRepository;
import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;

/**
 * Serviço para gestão de Idiomas (dados mestre).
 */
@Service
public class IdiomaService {

    private final IdiomaRepository idiomaRepository;
    private final IdiomaMapper idiomaMapper;

    @Autowired
    public IdiomaService(IdiomaRepository idiomaRepository, IdiomaMapper idiomaMapper) {
        this.idiomaRepository = idiomaRepository;
        this.idiomaMapper = idiomaMapper;
    }

    /**
     * Busca um Idioma pelo ID.
     *
     * @param id ID do Idioma.
     * @return DTO do Idioma.
     * @throws BusinessException se o Idioma não for encontrado.
     */
    public IdiomaResponseDTO findIdiomaById(UUID id) {
        Idioma idioma = idiomaRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Idioma não encontrado."));
        return idiomaMapper.toResponseDTO(idioma);
    }

    /**
     * Lista todos os Idiomas.
     *
     * @return Lista de DTOs de Idiomas.
     */
    public List<IdiomaResponseDTO> findAllIdiomas() {
        return idiomaRepository.findAll().stream()
                .map(idiomaMapper::toResponseDTO)
                .collect(Collectors.toList());
    }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.response.LocalAtuacaoResponseDTO;
import br.com.legalconnect.advogado.application.mapper.LocalAtuacaoMapper;
import br.com.legalconnect.advogado.domain.modal.entity.LocalAtuacao;
import br.com.legalconnect.advogado.domain.repository.LocalAtuacaoRepository;
import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;

/**
 * Serviço para gestão de Locais de Atuação (dados mestre).
 */
@Service
public class LocalAtuacaoService {

    private final LocalAtuacaoRepository localAtuacaoRepository;
    private final LocalAtuacaoMapper localAtuacaoMapper;

    @Autowired
    public LocalAtuacaoService(LocalAtuacaoRepository localAtuacaoRepository, LocalAtuacaoMapper localAtuacaoMapper) {
        this.localAtuacaoRepository = localAtuacaoRepository;
        this.localAtuacaoMapper = localAtuacaoMapper;
    }

    /**
     * Busca um Local de Atuação pelo ID.
     *
     * @param id ID do Local de Atuação.
     * @return DTO do Local de Atuação.
     * @throws BusinessException se o Local de Atuação não for encontrado.
     */
    public LocalAtuacaoResponseDTO findLocalAtuacaoById(UUID id) {
        LocalAtuacao localAtuacao = localAtuacaoRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Local de Atuação não encontrado."));
        return localAtuacaoMapper.toResponseDTO(localAtuacao);
    }

    /**
     * Lista todos os Locais de Atuação.
     *
     * @return Lista de DTOs de Locais de Atuação.
     */
    public List<LocalAtuacaoResponseDTO> findAllLocaisAtuacao() {
        return localAtuacaoRepository.findAll().stream()
                .map(localAtuacaoMapper::toResponseDTO)
                .collect(Collectors.toList());
    }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import org.springframework.stereotype.Service;

// Assumindo a existência dessas classes de DTO, Entidade e Repositório
// import br.com.legalconnect.office.application.dto.request.ProcessoRequestDTO;
// import br.com.legalconnect.office.application.dto.response.ProcessoResponseDTO;
// import br.com.legalconnect.office.domain.modal.entity.Processo;
// import br.com.legalconnect.office.domain.repository.ProcessoRepository;
// import br.com.legalconnect.office.application.mapper.ProcessoMapper;

/**
 * Serviço responsável pela gestão de Processos Judiciais e Administrativos no
 * módulo de Gestão de Escritório.
 */
@Service
public class ProcessoService {

    // private final ProcessoRepository processoRepository;
    // private final ProcessoMapper processoMapper;
    // private final AIService aiService; // Para geração de petições com IA
    // private final S3Service s3Service; // Para anexos de documentos

    // @Autowired
    // public ProcessoService(ProcessoRepository processoRepository,
    // ProcessoMapper processoMapper,
    // AIService aiService,
    // S3Service s3Service) {
    // this.processoRepository = processoRepository;
    // this.processoMapper = processoMapper;
    // this.aiService = aiService;
    // this.s3Service = s3Service;
    // }

    /**
     * Cria um novo processo judicial ou administrativo.
     * Regras de Negócio:
     * - Associa o processo ao tenant atual.
     * - Define o status inicial do processo.
     *
     * @param requestDTO DTO com os dados do processo.
     * @return DTO do processo criado.
     */
    // @Transactional
    // public ProcessoResponseDTO createProcesso(ProcessoRequestDTO requestDTO) {
    // UUID tenantId = TenantContext.getCurrentTenantId();
    //
    // Processo processo = processoMapper.toEntity(requestDTO);
    // processo.setTenantId(tenantId);
    // processo.setStatus("INICIADO"); // Regra de Negócio: Status inicial
    //
    // processo = processoRepository.save(processo);
    // return processoMapper.toResponseDTO(processo);
    // }

    /**
     * Atualiza um processo existente.
     * Regras de Negócio:
     * - O processo deve existir e pertencer ao tenant atual.
     *
     * @param id         ID do processo.
     * @param requestDTO DTO com os dados para atualização.
     * @return DTO do processo atualizado.
     */
    // @Transactional
    // public ProcessoResponseDTO updateProcesso(UUID id, ProcessoRequestDTO
    // requestDTO) {
    // UUID tenantId = TenantContext.getCurrentTenantId();
    //
    // Processo existingProcesso = processoRepository.findById(id)
    // .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
    // HttpStatus.NOT_FOUND, "Processo não encontrado."));
    //
    // if (!existingProcesso.getTenantId().equals(tenantId)) {
    // throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
    // "Acesso negado. Processo pertence a outro tenant.");
    // }
    //
    // processoMapper.updateEntityFromDto(requestDTO, existingProcesso);
    // existingProcesso = processoRepository.save(existingProcesso);
    // return processoMapper.toResponseDTO(existingProcesso);
    // }

    /**
     * Busca um processo pelo ID.
     * Regras de Negócio:
     * - O processo deve pertencer ao tenant atual.
     *
     * @param id ID do processo.
     * @return DTO do processo.
     */
    // public ProcessoResponseDTO findProcessoById(UUID id) {
    // UUID tenantId = TenantContext.getCurrentTenantId();
    //
    // Processo processo = processoRepository.findById(id)
    // .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
    // HttpStatus.NOT_FOUND, "Processo não encontrado."));
    //
    // if (!processo.getTenantId().equals(tenantId)) {
    // throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
    // "Acesso negado. Processo pertence a outro tenant.");
    // }
    //
    // return processoMapper.toResponseDTO(processo);
    // }

    /**
     * Lista todos os processos de um tenant.
     *
     * @return Lista de DTOs de processos.
     */
    // public List<ProcessoResponseDTO> findAllProcessos() {
    // UUID tenantId = TenantContext.getCurrentTenantId();
    //
    // return processoRepository.findAllByTenantId(tenantId).stream()
    // .map(processoMapper::toResponseDTO)
    // .collect(Collectors.toList());
    // }

    /**
     * Deleta um processo pelo ID.
     * Regras de Negócio:
     * - O processo deve pertencer ao tenant atual.
     *
     * @param id ID do processo a ser deletado.
     */
    // @Transactional
    // public void deleteProcesso(UUID id) {
    // UUID tenantId = TenantContext.getCurrentTenantId();
    //
    // Processo existingProcesso = processoRepository.findById(id)
    // .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
    // HttpStatus.NOT_FOUND, "Processo não encontrado para deleção."));
    //
    // if (!existingProcesso.getTenantId().equals(tenantId)) {
    // throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
    // "Acesso negado. Processo pertence a outro tenant.");
    // }
    //
    // // Regra de Negócio: Verificar se o processo pode ser deletado (ex: não tem
    // atividades pendentes)
    // // if (hasPendingActivities(existingProcesso)) {
    // // throw new BusinessException(ErrorCode.RECURSO_EM_USO, HttpStatus.CONFLICT,
    // "Processo possui atividades pendentes e não pode ser deletado.");
    // // }
    //
    // processoRepository.deleteById(id);
    // }

    /**
     * Gera um rascunho de petição utilizando IA (OpenAI GPT).
     * Regras de Negócio:
     * - O profissional deve ter permissão e estar em um plano que suporte IA.
     * - A IA gera um texto baseado nas informações do processo.
     *
     * @param processoId ID do processo para o qual a petição será gerada.
     * @param prompt     Instruções adicionais para a IA.
     * @return O rascunho da petição gerado pela IA.
     */
    // public String generatePeticaoWithAI(UUID processoId, String prompt) {
    // UUID tenantId = TenantContext.getCurrentTenantId();
    // // Verifica se o usuário logado tem permissão e plano para usar IA
    // // Profissional profissional =
    // profissionalService.findProfissionalById(userIdFromSecurityContext);
    // // if (!profissional.getPlano().supportsAI()) { ... }
    //
    // Processo processo = processoRepository.findById(processoId)
    // .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA,
    // HttpStatus.NOT_FOUND, "Processo não encontrado para geração de petição."));
    //
    // if (!processo.getTenantId().equals(tenantId)) {
    // throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
    // "Acesso negado. Processo pertence a outro tenant.");
    // }
    //
    // // Montar o prompt completo para a IA com base nos dados do processo
    // String fullPrompt = String.format("Crie um rascunho de petição para o
    // processo '%s' (Tipo: %s, Partes: %s). Contexto: %s. %s",
    // processo.getNumero(), processo.getTipo(), processo.getPartes(),
    // processo.getDescricao(), prompt);
    //
    // // Chamada ao serviço de IA
    // String generatedText = aiService.generateText(fullPrompt);
    //
    // return generatedText;
    // }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable; // Importar Pageable
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.request.ProfissionalCreateRequest;
import br.com.legalconnect.advogado.application.dto.request.ProfissionalUpdateRequest;
import br.com.legalconnect.advogado.application.dto.response.ProfissionalResponseDTO;
import br.com.legalconnect.advogado.application.mapper.AreaAtuacaoMapper;
import br.com.legalconnect.advogado.application.mapper.CertificacaoMapper;
import br.com.legalconnect.advogado.application.mapper.DocumentoMapper;
import br.com.legalconnect.advogado.application.mapper.ExperienciaProfissionalMapper;
import br.com.legalconnect.advogado.application.mapper.FormacaoAcademicaMapper;
import br.com.legalconnect.advogado.application.mapper.IdiomaMapper;
import br.com.legalconnect.advogado.application.mapper.LocalAtuacaoMapper;
import br.com.legalconnect.advogado.application.mapper.ProfissionalMapper;
import br.com.legalconnect.advogado.application.mapper.TipoAtendimentoMapper;
import br.com.legalconnect.advogado.domain.modal.entity.Certificacao;
import br.com.legalconnect.advogado.domain.modal.entity.ExperienciaProfissional;
import br.com.legalconnect.advogado.domain.modal.entity.FormacaoAcademica;
import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.advogado.domain.repository.AreaAtuacaoRepository;
import br.com.legalconnect.advogado.domain.repository.CertificacaoRepository;
import br.com.legalconnect.advogado.domain.repository.DocumentoRepository;
import br.com.legalconnect.advogado.domain.repository.ExperienciaRepository;
import br.com.legalconnect.advogado.domain.repository.FormacaoRepository;
import br.com.legalconnect.advogado.domain.repository.IdiomaRepository;
import br.com.legalconnect.advogado.domain.repository.LocalAtuacaoRepository;
import br.com.legalconnect.advogado.domain.repository.ProfissionalRepository;
import br.com.legalconnect.advogado.domain.repository.TipoAtendimentoRepository;
import br.com.legalconnect.commom.dto.request.PessoaRequestDTO;
import br.com.legalconnect.commom.model.Pessoa;
import br.com.legalconnect.commom.service.PessoaService;
import br.com.legalconnect.commom.service.S3Service; // Assumindo S3Service para upload de documentos
import br.com.legalconnect.commom.service.TenantContext; // Assumindo TenantContext para multitenancy
import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import jakarta.transaction.Transactional;

/**
 * Serviço responsável pela gestão completa do Profissional (Advogado).
 * Inclui operações de CRUD, validações de negócio e orquestração com serviços
 * de entidades aninhadas
 * e dados mestre. Gerencia também o upload de documentos e a associação com o
 * tenant.
 */
@Service
public class ProfissionalService {

    private final ProfissionalRepository profissionalRepository;
    private final ProfissionalMapper profissionalMapper;
    private final PessoaService pessoaService; // Para gerenciar a entidade Pessoa
    private final CertificacaoMapper certificacaoMapper;
    private final ExperienciaProfissionalMapper experienciaProfissionalMapper;
    private final FormacaoAcademicaMapper formacaoAcademicaMapper;
    private final DocumentoMapper documentoMapper;
    private final CertificacaoRepository certificacaoRepository;
    private final ExperienciaRepository experienciaRepository;
    private final FormacaoRepository formacaoRepository;
    private final DocumentoRepository documentoRepository;
    private final S3Service s3Service; // Serviço para integração com S3
    private final AreaAtuacaoRepository areaAtuacaoRepository;
    private final IdiomaRepository idiomaRepository;
    private final LocalAtuacaoRepository localAtuacaoRepository;
    private final TipoAtendimentoRepository tipoAtendimentoRepository;
    private final AreaAtuacaoMapper areaAtuacaoMapper;
    private final IdiomaMapper idiomaMapper;
    private final LocalAtuacaoMapper localAtuacaoMapper;
    private final TipoAtendimentoMapper tipoAtendimentoMapper;

    @Autowired
    public ProfissionalService(ProfissionalRepository profissionalRepository,
            ProfissionalMapper profissionalMapper,
            PessoaService pessoaService,
            CertificacaoMapper certificacaoMapper,
            ExperienciaProfissionalMapper experienciaProfissionalMapper,
            FormacaoAcademicaMapper formacaoAcademicaMapper,
            DocumentoMapper documentoMapper,
            CertificacaoRepository certificacaoRepository,
            ExperienciaRepository experienciaRepository,
            FormacaoRepository formacaoRepository,
            DocumentoRepository documentoRepository,
            S3Service s3Service,
            AreaAtuacaoRepository areaAtuacaoRepository,
            IdiomaRepository idiomaRepository,
            LocalAtuacaoRepository localAtuacaoRepository,
            TipoAtendimentoRepository tipoAtendimentoRepository,
            AreaAtuacaoMapper areaAtuacaoMapper,
            IdiomaMapper idiomaMapper,
            LocalAtuacaoMapper localAtuacaoMapper,
            TipoAtendimentoMapper tipoAtendimentoMapper) {
        this.profissionalRepository = profissionalRepository;
        this.profissionalMapper = profissionalMapper;
        this.pessoaService = pessoaService;
        this.certificacaoMapper = certificacaoMapper;
        this.experienciaProfissionalMapper = experienciaProfissionalMapper;
        this.formacaoAcademicaMapper = formacaoAcademicaMapper;
        this.documentoMapper = documentoMapper;
        this.certificacaoRepository = certificacaoRepository;
        this.experienciaRepository = experienciaRepository;
        this.formacaoRepository = formacaoRepository;
        this.documentoRepository = documentoRepository;
        this.s3Service = s3Service;
        this.areaAtuacaoRepository = areaAtuacaoRepository;
        this.idiomaRepository = idiomaRepository;
        this.localAtuacaoRepository = localAtuacaoRepository;
        this.tipoAtendimentoRepository = tipoAtendimentoRepository;
        this.areaAtuacaoMapper = areaAtuacaoMapper;
        this.idiomaMapper = idiomaMapper;
        this.localAtuacaoMapper = localAtuacaoMapper;
        this.tipoAtendimentoMapper = tipoAtendimentoMapper;
    }

    /**
     * Cria um novo Profissional no sistema.
     * Regras de Negócio:
     * - Valida a unicidade do número da OAB.
     * - Associa o Profissional a um Tenant (obtido do contexto de segurança).
     * - Cria a entidade Pessoa associada através do PessoaService.
     * - Gerencia a criação de certificações, experiências e formações aninhadas.
     * - Define o status inicial do profissional.
     * - Valida a existência do plano.
     *
     * @param createRequest DTO com os dados para criação do Profissional.
     * @return DTO do Profissional criado.
     * @throws BusinessException se a OAB já estiver cadastrada, ou se o
     *                           plano/tenant não existirem.
     */
    @Transactional
    public ProfissionalResponseDTO createProfissional(ProfissionalCreateRequest createRequest) {
        UUID tenantId = TenantContext.getCurrentTenantId(); // Assumindo que o tenantId vem do contexto de segurança

        // Regra de Negócio: Validar unicidade da OAB
        if (profissionalRepository.existsByNumeroOab(createRequest.getNumeroOab())) {
            throw new BusinessException(ErrorCode.OAB_DUPLICADA, HttpStatus.CONFLICT, createRequest.getNumeroOab());
        }

        // Regra de Negócio: Validar unicidade da Pessoa (CPF/Email) antes de criar o
        // Profissional
        if (pessoaService.findPessoaByCpf(createRequest.getCpf()).isPresent()) {
            throw new BusinessException(ErrorCode.CPF_DUPLICADO, HttpStatus.CONFLICT, createRequest.getCpf());
        }
        if (pessoaService.findPessoaByEmail(createRequest.getUsuario().getEmail()).isPresent()) {
            throw new BusinessException(ErrorCode.EMAIL_DUPLICADO, HttpStatus.CONFLICT,
                    createRequest.getUsuario().getEmail());
        }

        // Criar a Pessoa associada primeiro, pois Profissional estende Pessoa
        PessoaRequestDTO pessoaRequestDTO = new PessoaRequestDTO();
        pessoaRequestDTO.setUsuario(createRequest.getUsuario());
        pessoaRequestDTO.setNomeCompleto(createRequest.getNomeCompleto());
        pessoaRequestDTO.setCpf(createRequest.getCpf());
        pessoaRequestDTO.setDataNascimento(createRequest.getDataNascimento());
        pessoaRequestDTO.setTelefones(createRequest.getTelefones());
        pessoaRequestDTO.setEnderecos(createRequest.getEnderecos());

        Pessoa newPessoa = pessoaService.createPessoa(pessoaRequestDTO);

        // Regra de Negócio: Validar que o planoId existe (assumindo um PlanoService ou
        // repositório de Plano)
        // if (!planoService.existsById(createRequest.getPlanoId())) {
        // throw new BusinessException(ErrorCode.PLANO_NAO_ENCONTRADO,
        // HttpStatus.NOT_FOUND);
        // }

        Profissional profissional = profissionalMapper.toEntity(createRequest);
        profissional.setPessoaId(newPessoa.getId()); // Associa o ID da Pessoa recém-criada
        profissional.setUsuario(newPessoa.getUsuario()); // Garante que o usuário de Pessoa esteja associado
        profissional.setTenantId(tenantId); // Regra de Negócio: Define o tenant do profissional
        profissional.setStatusProfissional("PENDING_APPROVAL"); // Regra de Negócio: Status inicial

        // Relacionamentos muitos-para-muitos (apenas IDs aqui)
        if (createRequest.getLocaisAtuacaoIds() != null) {
            validateMasterDataExistence(createRequest.getLocaisAtuacaoIds(), localAtuacaoRepository::findById,
                    "Local de Atuação");
            profissional.setLocaisAtuacaoIds(createRequest.getLocaisAtuacaoIds().stream().collect(Collectors.toSet()));
        }
        if (createRequest.getAreaAtuacaoIds() != null) {
            validateMasterDataExistence(createRequest.getAreaAtuacaoIds(), areaAtuacaoRepository::findById,
                    "Área de Atuação");
            profissional.setAreaAtuacaoIds(createRequest.getAreaAtuacaoIds().stream().collect(Collectors.toSet()));
        }
        if (createRequest.getIdiomaIds() != null) {
            validateMasterDataExistence(createRequest.getIdiomaIds(), idiomaRepository::findById, "Idioma");
            profissional.setIdiomaIds(createRequest.getIdiomaIds().stream().collect(Collectors.toSet()));
        }
        if (createRequest.getTipoAtendimentoIds() != null) {
            validateMasterDataExistence(createRequest.getTipoAtendimentoIds(), tipoAtendimentoRepository::findById,
                    "Tipo de Atendimento");
            profissional
                    .setTipoAtendimentoIds(createRequest.getTipoAtendimentoIds().stream().collect(Collectors.toSet()));
        }

        profissional = profissionalRepository.save(profissional);

        // Gerenciar certificações, experiências e formações
        manageNestedEntities(profissional, createRequest);

        return mapToResponseDTOWithDetails(profissional);
    }

    /**
     * Atualiza um Profissional existente.
     * Regras de Negócio:
     * - Valida a existência do Profissional e do Tenant.
     * - Permite a atualização de dados da Pessoa associada.
     * - Gerencia a adição, atualização e remoção de certificações, experiências e
     * formações.
     * - Atualiza relacionamentos com dados mestre.
     *
     * @param id            ID do Profissional a ser atualizado.
     * @param updateRequest DTO com os dados para atualização.
     * @return DTO do Profissional atualizado.
     * @throws BusinessException se o Profissional não for encontrado, ou por outras
     *                           violações de negócio.
     */
    @Transactional
    public ProfissionalResponseDTO updateProfissional(UUID id, ProfissionalUpdateRequest updateRequest) {
        UUID tenantId = TenantContext.getCurrentTenantId(); // Assumindo tenantId do contexto de segurança

        Profissional existingProfissional = profissionalRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado para atualização."));

        // Regra de Negócio: O profissional só pode ser atualizado pelo seu próprio
        // tenant
        if (!existingProfissional.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Profissional pertence a outro tenant.");
        }

        // Atualiza os dados da Pessoa associada (se fornecidos)
        if (updateRequest.getPessoa() != null) {
            pessoaService.updatePessoa(existingProfissional.getPessoaId(), updateRequest.getPessoa());
        }

        // Mapeia os campos atualizáveis para a entidade Profissional
        profissionalMapper.updateEntityFromDto(updateRequest, existingProfissional);

        // Regra de Negócio: Validar que o planoId existe se for alterado
        if (updateRequest.getPlanoId() != null
                && !existingProfissional.getPlanoId().equals(updateRequest.getPlanoId())) {
            // if (!planoService.existsById(updateRequest.getPlanoId())) {
            // throw new BusinessException(ErrorCode.PLANO_NAO_ENCONTRADO,
            // HttpStatus.NOT_FOUND);
            // }
            existingProfissional.setPlanoId(updateRequest.getPlanoId());
        }

        // Atualiza relacionamentos muitos-para-muitos
        if (updateRequest.getLocaisAtuacaoIds() != null) {
            validateMasterDataExistence(updateRequest.getLocaisAtuacaoIds(), localAtuacaoRepository::findById,
                    "Local de Atuação");
            existingProfissional
                    .setLocaisAtuacaoIds(updateRequest.getLocaisAtuacaoIds().stream().collect(Collectors.toSet()));
        }
        if (updateRequest.getAreaAtuacaoIds() != null) {
            validateMasterDataExistence(updateRequest.getAreaAtuacaoIds(), areaAtuacaoRepository::findById,
                    "Área de Atuação");
            existingProfissional
                    .setAreaAtuacaoIds(updateRequest.getAreaAtuacaoIds().stream().collect(Collectors.toSet()));
        }
        if (updateRequest.getIdiomaIds() != null) {
            validateMasterDataExistence(updateRequest.getIdiomaIds(), idiomaRepository::findById, "Idioma");
            existingProfissional.setIdiomaIds(updateRequest.getIdiomaIds().stream().collect(Collectors.toSet()));
        }
        if (updateRequest.getTipoAtendimentoIds() != null) {
            validateMasterDataExistence(updateRequest.getTipoAtendimentoIds(), tipoAtendimentoRepository::findById,
                    "Tipo de Atendimento");
            existingProfissional
                    .setTipoAtendimentoIds(updateRequest.getTipoAtendimentoIds().stream().collect(Collectors.toSet()));
        }

        // Gerenciar coleções aninhadas (certificações, experiências, formações)
        manageNestedEntities(existingProfissional, updateRequest);

        existingProfissional = profissionalRepository.save(existingProfissional);
        return mapToResponseDTOWithDetails(existingProfissional);
    }

    /**
     * Busca um Profissional pelo ID.
     * Regras de Negócio:
     * - Garante que o Profissional pertence ao Tenant do contexto de segurança.
     * - Popula os dados mestre relacionados.
     *
     * @param id ID do Profissional.
     * @return DTO do Profissional com detalhes.
     * @throws BusinessException se o Profissional não for encontrado ou não
     *                           pertencer ao tenant.
     */
    public ProfissionalResponseDTO findProfissionalById(UUID id) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Profissional profissional = profissionalRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado."));

        // Regra de Negócio: Acesso restrito ao tenant
        if (!profissional.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Profissional pertence a outro tenant.");
        }

        return mapToResponseDTOWithDetails(profissional);
    }

    /**
     * Busca todos os Profissionais de um determinado Tenant com paginação.
     *
     * @param pageable Objeto Pageable contendo informações de paginação e
     *                 ordenação.
     * @return Página de DTOs de Profissionais.
     */
    public Page<ProfissionalResponseDTO> findAllProfissionais(Pageable pageable) {
        UUID tenantId = TenantContext.getCurrentTenantId(); // Filtra por tenant

        Page<Profissional> profissionaisPage = profissionalRepository.findAllByTenantId(tenantId, pageable); // This
                                                                                                             // line is
                                                                                                             // correct,
                                                                                                             // no
                                                                                                             // change
                                                                                                             // needed
                                                                                                             // here.
        return profissionaisPage.map(this::mapToResponseDTOWithDetails);
    }

    /**
     * Deleta um Profissional pelo ID.
     * Regras de Negócio:
     * - Apenas o proprietário do tenant pode deletar.
     * - Orquestra a deleção de entidades aninhadas (Certificações, Experiências,
     * Formações, Documentos).
     * - Deleção da Pessoa associada.
     *
     * @param id ID do Profissional a ser deletado.
     * @throws BusinessException se o Profissional não for encontrado ou não
     *                           pertencer ao tenant.
     */
    @Transactional
    public void deleteProfissional(UUID id) {
        UUID tenantId = TenantContext.getCurrentTenantId();

        Profissional profissional = profissionalRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.PROFISSIONAL_NAO_ENCONTRADO, HttpStatus.NOT_FOUND,
                        "Profissional não encontrado para deleção."));

        // Regra de Negócio: Acesso restrito ao tenant
        if (!profissional.getTenantId().equals(tenantId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN_ACCESS, HttpStatus.FORBIDDEN,
                    "Acesso negado. Profissional pertence a outro tenant.");
        }

        // Deleta entidades aninhadas (cascade pode fazer isso, mas explicitar é bom
        // para clareza)
        certificacaoRepository.findAllByProfissionalId(id)
                .forEach(c -> certificacaoRepository.deleteByIdAndProfissionalId(c.getId(), id));
        experienciaRepository.findAllByProfissionalId(id)
                .forEach(e -> experienciaRepository.deleteByIdAndProfissionalId(e.getId(), id));
        formacaoRepository.findAllByProfissionalId(id)
                .forEach(f -> formacaoRepository.deleteByIdAndProfissionalId(f.getId(), id));
        documentoRepository.findAllByProfissionalId(id).forEach(d -> {
            s3Service.deleteFile(d.getUrlS3()); // Deleta arquivo do S3
            documentoRepository.deleteByIdAndProfissionalId(d.getId(), id);
        });

        // Deleta o profissional
        profissionalRepository.deleteById(id);

        // Deleta a pessoa associada
        pessoaService.deletePessoa(profissional.getPessoaId());
    }

    /**
     * Método auxiliar para gerenciar a adição, atualização e remoção de entidades
     * aninhadas
     * (certificações, experiências, formações) para um Profissional.
     *
     * @param profissional O Profissional pai.
     * @param request      O DTO de requisição (Create ou Update) contendo as listas
     *                     aninhadas.
     */
    private void manageNestedEntities(Profissional profissional, ProfissionalCreateRequest request) {
        UUID tenantId = profissional.getTenantId();

        // Certificações
        if (request.getCertificacoes() != null) {
            // Remover certificações que não estão mais no DTO
            profissional.getCertificacoes().removeIf(existingCert -> request.getCertificacoes().stream()
                    .noneMatch(dto -> existingCert.getId().equals(dto.getId())));
            request.getCertificacoes().forEach(dto -> {
                if (dto.getId() == null) { // Nova certificação
                    Certificacao newCert = certificacaoMapper.toEntity(dto);
                    newCert.setProfissional(profissional);
                    newCert.setTenantId(tenantId);
                    profissional.getCertificacoes().add(newCert);
                } else { // Atualizar certificação existente
                    profissional.getCertificacoes().stream()
                            .filter(c -> c.getId().equals(dto.getId()))
                            .findFirst()
                            .ifPresent(c -> certificacaoMapper.updateEntityFromDto(dto, c));
                }
            });
        }

        // Experiências Profissionais
        if (request.getExperiencias() != null) {
            profissional.getExperiencias().removeIf(existingExp -> request.getExperiencias().stream()
                    .noneMatch(dto -> existingExp.getId().equals(dto.getId())));
            request.getExperiencias().forEach(dto -> {
                if (dto.getId() == null) { // Nova experiência
                    ExperienciaProfissional newExp = experienciaProfissionalMapper.toEntity(dto);
                    newExp.setProfissional(profissional);
                    newExp.setTenantId(tenantId);
                    profissional.getExperiencias().add(newExp);
                } else { // Atualizar experiência existente
                    profissional.getExperiencias().stream()
                            .filter(e -> e.getId().equals(dto.getId()))
                            .findFirst()
                            .ifPresent(e -> experienciaProfissionalMapper.updateEntityFromDto(dto, e));
                }
            });
        }

        // Formações Acadêmicas
        if (request.getFormacoes() != null) {
            profissional.getFormacoes().removeIf(existingForm -> request.getFormacoes().stream()
                    .noneMatch(dto -> existingForm.getId().equals(dto.getId())));
            request.getFormacoes().forEach(dto -> {
                if (dto.getId() == null) { // Nova formação
                    FormacaoAcademica newForm = formacaoAcademicaMapper.toEntity(dto);
                    newForm.setProfissional(profissional);
                    newForm.setTenantId(tenantId);
                    profissional.getFormacoes().add(newForm);
                } else { // Atualizar formação existente
                    profissional.getFormacoes().stream()
                            .filter(f -> f.getId().equals(dto.getId()))
                            .findFirst()
                            .ifPresent(f -> formacaoAcademicaMapper.updateEntityFromDto(dto, f));
                }
            });
        }
    }

    /**
     * Sobrecarga para o método de gerenciamento de entidades aninhadas para
     * ProfissionalUpdateRequest.
     */
    private void manageNestedEntities(Profissional profissional, ProfissionalUpdateRequest request) {
        UUID tenantId = profissional.getTenantId();

        // Certificações
        if (request.getCertificacoes() != null) {
            // Coleta IDs das certificações no DTO para identificar as que serão removidas
            Set<UUID> dtoCertIds = request.getCertificacoes().stream()
                    .map(c -> c.getId())
                    .collect(Collectors.toSet());

            // Remove certificações que existem na entidade mas não no DTO (deleção)
            profissional.getCertificacoes().removeIf(
                    existingCert -> existingCert.getId() != null && !dtoCertIds.contains(existingCert.getId()));

            request.getCertificacoes().forEach(dto -> {
                if (dto.getId() == null) { // Nova certificação (ID nulo indica novo)
                    Certificacao newCert = certificacaoMapper.toEntity(dto);
                    newCert.setProfissional(profissional);
                    newCert.setTenantId(tenantId);
                    profissional.getCertificacoes().add(newCert);
                } else { // Atualizar certificação existente
                    profissional.getCertificacoes().stream()
                            .filter(c -> c.getId() != null && c.getId().equals(dto.getId()))
                            .findFirst()
                            .ifPresent(c -> certificacaoMapper.updateEntityFromDto(dto, c));
                }
            });
        } else {
            // Se a lista no DTO for nula, assume-se que todas as certificações devem ser
            // removidas
            profissional.getCertificacoes().clear();
        }

        // Experiências Profissionais (lógica similar às certificações)
        if (request.getExperiencias() != null) {
            Set<UUID> dtoExpIds = request.getExperiencias().stream()
                    .map(e -> e.getId())
                    .collect(Collectors.toSet());
            profissional.getExperiencias()
                    .removeIf(existingExp -> existingExp.getId() != null && !dtoExpIds.contains(existingExp.getId()));
            request.getExperiencias().forEach(dto -> {
                if (dto.getId() == null) {
                    ExperienciaProfissional newExp = experienciaProfissionalMapper.toEntity(dto);
                    newExp.setProfissional(profissional);
                    newExp.setTenantId(tenantId);
                    profissional.getExperiencias().add(newExp);
                } else {
                    profissional.getExperiencias().stream()
                            .filter(e -> e.getId() != null && e.getId().equals(dto.getId()))
                            .findFirst()
                            .ifPresent(e -> experienciaProfissionalMapper.updateEntityFromDto(dto, e));
                }
            });
        } else {
            profissional.getExperiencias().clear();
        }

        // Formações Acadêmicas (lógica similar às certificações)
        if (request.getFormacoes() != null) {
            Set<UUID> dtoFormIds = request.getFormacoes().stream()
                    .map(f -> f.getId())
                    .collect(Collectors.toSet());
            profissional.getFormacoes().removeIf(
                    existingForm -> existingForm.getId() != null && !dtoFormIds.contains(existingForm.getId()));
            request.getFormacoes().forEach(dto -> {
                if (dto.getId() == null) {
                    FormacaoAcademica newForm = formacaoAcademicaMapper.toEntity(dto);
                    newForm.setProfissional(profissional);
                    newForm.setTenantId(tenantId);
                    profissional.getFormacoes().add(newForm);
                } else {
                    profissional.getFormacoes().stream()
                            .filter(f -> f.getId() != null && f.getId().equals(dto.getId()))
                            .findFirst()
                            .ifPresent(f -> formacaoAcademicaMapper.updateEntityFromDto(dto, f));
                }
            });
        } else {
            profissional.getFormacoes().clear();
        }
    }

    /**
     * Mapeia um Profissional para ProfissionalResponseDTO e popula os dados mestre
     * relacionados.
     * Esta é uma funcionalidade completa para apresentar o perfil do advogado.
     *
     * @param profissional A entidade Profissional.
     * @return O DTO de resposta detalhado.
     */
    private ProfissionalResponseDTO mapToResponseDTOWithDetails(Profissional profissional) {
        ProfissionalResponseDTO responseDTO = profissionalMapper.toResponseDTO(profissional);

        // Popula listas de DTOs de dados mestre
        responseDTO.setLocaisAtuacao(
                localAtuacaoRepository.findAllById(profissional.getLocaisAtuacaoIds())
                        .stream()
                        .map(localAtuacaoMapper::toResponseDTO)
                        .collect(Collectors.toList()));
        responseDTO.setAreasAtuacao(
                areaAtuacaoRepository.findAllById(profissional.getAreaAtuacaoIds())
                        .stream()
                        .map(areaAtuacaoMapper::toResponseDTO)
                        .collect(Collectors.toList()));
        responseDTO.setIdiomas(
                idiomaRepository.findAllById(profissional.getIdiomaIds())
                        .stream()
                        .map(idiomaMapper::toResponseDTO)
                        .collect(Collectors.toList()));
        responseDTO.setTiposAtendimento(
                tipoAtendimentoRepository.findAllById(profissional.getTipoAtendimentoIds())
                        .stream()
                        .map(tipoAtendimentoMapper::toResponseDTO)
                        .collect(Collectors.toList()));

        // Popula as coleções aninhadas
        responseDTO.setCertificacoes(
                profissional.getCertificacoes().stream()
                        .map(certificacaoMapper::toResponseDTO)
                        .collect(Collectors.toList()));
        responseDTO.setDocumentos(
                profissional.getDocumentos().stream()
                        .map(documentoMapper::toResponseDTO)
                        .collect(Collectors.toList()));
        responseDTO.setExperiencias(
                profissional.getExperiencias().stream()
                        .map(experienciaProfissionalMapper::toResponseDTO)
                        .collect(Collectors.toList()));
        responseDTO.setFormacoes(
                profissional.getFormacoes().stream()
                        .map(formacaoAcademicaMapper::toResponseDTO)
                        .collect(Collectors.toList()));

        // Define se faz parte de plano com base no planoId (regra de negócio)
        responseDTO.setFazParteDePlano(profissional.getPlanoId() != null); // Simplificado

        return responseDTO;
    }

    /**
     * Valida a existência de entidades de dados mestre.
     *
     * @param ids        Lista de UUIDs a serem validados.
     * @param finder     Função para encontrar a entidade por ID.
     * @param entityName Nome da entidade para mensagens de erro.
     * @param <T>        Tipo da entidade.
     */
    private <T> void validateMasterDataExistence(List<UUID> ids,
            java.util.function.Function<UUID, java.util.Optional<T>> finder, String entityName) {
        for (UUID id : ids) {
            if (finder.apply(id).isEmpty()) {
                throw new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        entityName + " com ID " + id + " não encontrado(a).");
            }
        }
    }
}
```
```java
package br.com.legalconnect.advogado.application.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.application.dto.response.TipoAtendimentoResponseDTO;
import br.com.legalconnect.advogado.application.mapper.TipoAtendimentoMapper;
import br.com.legalconnect.advogado.domain.modal.entity.TipoAtendimento;
import br.com.legalconnect.advogado.domain.repository.TipoAtendimentoRepository;
import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;

/**
 * Serviço para gestão de Tipos de Atendimento (dados mestre).
 */
@Service
public class TipoAtendimentoService {

    private final TipoAtendimentoRepository tipoAtendimentoRepository;
    private final TipoAtendimentoMapper tipoAtendimentoMapper;

    @Autowired
    public TipoAtendimentoService(TipoAtendimentoRepository tipoAtendimentoRepository,
            TipoAtendimentoMapper tipoAtendimentoMapper) {
        this.tipoAtendimentoRepository = tipoAtendimentoRepository;
        this.tipoAtendimentoMapper = tipoAtendimentoMapper;
    }

    /**
     * Busca um Tipo de Atendimento pelo ID.
     *
     * @param id ID do Tipo de Atendimento.
     * @return DTO do Tipo de Atendimento.
     * @throws BusinessException se o Tipo de Atendimento não for encontrado.
     */
    public TipoAtendimentoResponseDTO findTipoAtendimentoById(UUID id) {
        TipoAtendimento tipoAtendimento = tipoAtendimentoRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Tipo de Atendimento não encontrado."));
        return tipoAtendimentoMapper.toResponseDTO(tipoAtendimento);
    }

    /**
     * Lista todos os Tipos de Atendimento.
     *
     * @return Lista de DTOs de Tipos de Atendimento.
     */
    public List<TipoAtendimentoResponseDTO> findAllTiposAtendimento() {
        return tipoAtendimentoRepository.findAll().stream()
                .map(tipoAtendimentoMapper::toResponseDTO)
                .collect(Collectors.toList());
    }
}
```
```java
package br.com.legalconnect.advogado.controller;

import static br.com.legalconnect.enums.StatusResponse.ERRO;
import static br.com.legalconnect.enums.StatusResponse.SUCESSO;

import java.time.LocalDateTime;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.advogado.application.service.AgendamentoService;
import br.com.legalconnect.common.dto.BaseResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.constraints.NotNull;

/**
 * Controller para o módulo de Agendamento de Consultas.
 * Gerencia as operações relacionadas ao agendamento e avaliação de consultas
 * entre clientes e profissionais.
 */
@RestController
@RequestMapping("/api/v1/advogados/agendamentos")
@Tag(name = "Agendamentos", description = "Gerenciamento de agendamentos de consultas e avaliações")
public class AgendamentoController {

        private final AgendamentoService agendamentoService;

        @Autowired
        public AgendamentoController(AgendamentoService agendamentoService) {
                this.agendamentoService = agendamentoService;
        }

        /**
         * Realiza o agendamento de uma consulta.
         * Funcionalidade Completa: Cenário 1 (Cliente busca e agenda) e Cenário 2
         * (Advogado recebe e confirma).
         * Regras de Negócio: Verifica disponibilidade do profissional, profissional
         * deve estar ativo e usar marketplace, integração com Google Calendar, envio de
         * e-mails.
         *
         * @param profissionalId     ID do profissional.
         * @param clienteId          ID do cliente.
         * @param horarioAgendamento Horário da consulta (formato ISO).
         * @param tipoServico        Tipo de serviço agendado.
         * @return ResponseEntity indicando o sucesso do agendamento.
         */
        @Operation(summary = "Agenda uma nova consulta", description = "Permite a um cliente agendar uma consulta com um profissional, verificando disponibilidade e enviando notificações.", responses = {
                        @ApiResponse(responseCode = "201", description = "Consulta agendada com sucesso"),
                        @ApiResponse(responseCode = "400", description = "Dados de requisição inválidos (ex: horário indisponível)"),
                        @ApiResponse(responseCode = "404", description = "Profissional não encontrado"),
                        @ApiResponse(responseCode = "409", description = "Conflito de agendamento (horário já ocupado)"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @PostMapping("/agendar")
        public ResponseEntity<BaseResponse<Boolean>> agendarConsulta(
                        @Parameter(description = "ID do profissional para o agendamento") @RequestParam @NotNull UUID profissionalId,
                        @Parameter(description = "ID do cliente que está agendando") @RequestParam @NotNull UUID clienteId,
                        @Parameter(description = "Horário desejado para a consulta (formato ISO 8601, ex: 2024-07-25T10:00:00)") @RequestParam @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime horarioAgendamento,
                        @Parameter(description = "Tipo de serviço a ser agendado (ex: 'Consulta Online', 'Reunião Presencial')") @RequestParam @NotNull String tipoServico) {

                boolean sucesso = agendamentoService.agendarConsulta(profissionalId, clienteId, horarioAgendamento,
                                tipoServico);
                return ResponseEntity.status(HttpStatus.CREATED)
                                .body(BaseResponse.<Boolean>builder()
                                                .status(SUCESSO)
                                                .message("Consulta agendada com sucesso.")
                                                .data(sucesso)
                                                .timestamp(java.time.LocalDateTime.now())
                                                .build());
        }

        /**
         * Permite ao cliente avaliar uma consulta.
         * Funcionalidade Completa: Cenário 3 (Cliente avalia e influencia ranking).
         * Regras de Negócio: Associa avaliação ao agendamento e profissional, atualiza
         * média de avaliação.
         *
         * @param agendamentoId ID do agendamento avaliado.
         * @param clienteId     ID do cliente que avaliou.
         * @param rating        Nota da avaliação (1-5).
         * @param comentario    Comentário opcional.
         * @return ResponseEntity indicando o sucesso da avaliação.
         */
        @Operation(summary = "Avalia uma consulta", description = "Permite a um cliente fornecer uma nota e um comentário para uma consulta já realizada.", responses = {
                        @ApiResponse(responseCode = "200", description = "Consulta avaliada com sucesso"),
                        @ApiResponse(responseCode = "400", description = "Dados de requisição inválidos (ex: nota fora do intervalo)"),
                        @ApiResponse(responseCode = "404", description = "Agendamento não encontrado"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @PostMapping("/avaliar")
        public ResponseEntity<BaseResponse<Boolean>> avaliarConsulta(
                        @Parameter(description = "ID do agendamento a ser avaliado") @RequestParam @NotNull UUID agendamentoId,
                        @Parameter(description = "ID do cliente que está avaliando") @RequestParam @NotNull UUID clienteId,
                        @Parameter(description = "Nota da avaliação (1 a 5)") @RequestParam @NotNull int rating,
                        @Parameter(description = "Comentário opcional sobre a avaliação") @RequestParam(required = false) String comentario) {

                // Regra de Negócio: Rating deve estar entre 1 e 5
                if (rating < 1 || rating > 5) {
                        return ResponseEntity.badRequest().body(BaseResponse.<Boolean>builder()
                                        .status(ERRO)
                                        .message("A nota da avaliação deve ser entre 1 e 5.")
                                        .data(false)
                                        .timestamp(java.time.LocalDateTime.now())
                                        .build());
                }

                boolean sucesso = agendamentoService.avaliarConsulta(agendamentoId, clienteId, rating, comentario);
                return ResponseEntity.ok(BaseResponse.<Boolean>builder()
                                .status(SUCESSO)
                                .message("Consulta avaliada com sucesso.")
                                .data(sucesso)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }
}
```
```java
package br.com.legalconnect.advogado.controller;

import static br.com.legalconnect.enums.StatusResponse.SUCESSO;

import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.advogado.application.dto.response.AreaAtuacaoResponseDTO;
import br.com.legalconnect.advogado.application.service.AreaAtuacaoService;
import br.com.legalconnect.common.dto.BaseResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

/**
 * Controller para o módulo de Áreas de Atuação (dados mestre).
 * Oferece endpoints para consultar as áreas de atuação disponíveis.
 */
@RestController
@RequestMapping("/api/v1/advogados/areas-atuacao")
@Tag(name = "Áreas de Atuação", description = "Gerenciamento de dados mestre de Áreas de Atuação")
public class AreaAtuacaoController {

        private final AreaAtuacaoService areaAtuacaoService;

        @Autowired
        public AreaAtuacaoController(AreaAtuacaoService areaAtuacaoService) {
                this.areaAtuacaoService = areaAtuacaoService;
        }

        /**
         * Busca uma Área de Atuação pelo ID.
         * Funcionalidade Completa: Consulta de um dado mestre específico.
         * Regras de Negócio: N/A (apenas busca por ID).
         *
         * @param id ID da Área de Atuação.
         * @return ResponseEntity com o DTO da Área de Atuação.
         */
        @Operation(summary = "Busca uma área de atuação pelo ID", description = "Retorna os detalhes de uma área de atuação específica.", responses = {
                        @ApiResponse(responseCode = "200", description = "Área de Atuação encontrada com sucesso"),
                        @ApiResponse(responseCode = "404", description = "Área de Atuação não encontrada"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping("/{id}")
        public ResponseEntity<BaseResponse<AreaAtuacaoResponseDTO>> getAreaAtuacaoById(
                        @Parameter(description = "ID da Área de Atuação") @PathVariable UUID id) {
                AreaAtuacaoResponseDTO response = areaAtuacaoService.findAreaAtuacaoById(id);
                return ResponseEntity.ok(BaseResponse.<AreaAtuacaoResponseDTO>builder()
                                .status(SUCESSO)
                                .message("Área de Atuação encontrada com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Lista todas as Áreas de Atuação.
         * Funcionalidade Completa: Listagem de todas as áreas disponíveis para seleção
         * pelos advogados.
         * Regras de Negócio: N/A (apenas listagem).
         *
         * @return ResponseEntity com a lista de DTOs de Áreas de Atuação.
         */
        @Operation(summary = "Lista todas as áreas de atuação", description = "Retorna uma lista de todas as áreas de atuação cadastradas.", responses = {
                        @ApiResponse(responseCode = "200", description = "Áreas de Atuação listadas com sucesso"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping
        public ResponseEntity<BaseResponse<List<AreaAtuacaoResponseDTO>>> getAllAreasAtuacao() {
                List<AreaAtuacaoResponseDTO> response = areaAtuacaoService.findAllAreasAtuacao();
                return ResponseEntity.ok(BaseResponse.<List<AreaAtuacaoResponseDTO>>builder()
                                .status(SUCESSO)
                                .message("Áreas de Atuação listadas com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }
}
```
```java
package br.com.legalconnect.advogado.controller;

import static br.com.legalconnect.enums.StatusResponse.SUCESSO;

import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.advogado.application.dto.response.IdiomaResponseDTO;
import br.com.legalconnect.advogado.application.service.IdiomaService;
import br.com.legalconnect.common.dto.BaseResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

/**
 * Controller para o módulo de Idiomas (dados mestre).
 * Oferece endpoints para consultar os idiomas disponíveis.
 */
@RestController
@RequestMapping("/api/v1/advogados/idiomas")
@Tag(name = "Idiomas", description = "Gerenciamento de dados mestre de Idiomas")
public class IdiomaController {

        private final IdiomaService idiomaService;

        @Autowired
        public IdiomaController(IdiomaService idiomaService) {
                this.idiomaService = idiomaService;
        }

        /**
         * Busca um Idioma pelo ID.
         * Funcionalidade Completa: Consulta de um dado mestre específico.
         * Regras de Negócio: N/A (apenas busca por ID).
         *
         * @param id ID do Idioma.
         * @return ResponseEntity com o DTO do Idioma.
         */
        @Operation(summary = "Busca um idioma pelo ID", description = "Retorna os detalhes de um idioma específico.", responses = {
                        @ApiResponse(responseCode = "200", description = "Idioma encontrado com sucesso"),
                        @ApiResponse(responseCode = "404", description = "Idioma não encontrado"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping("/{id}")
        public ResponseEntity<BaseResponse<IdiomaResponseDTO>> getIdiomaById(
                        @Parameter(description = "ID do idioma") @PathVariable UUID id) {
                IdiomaResponseDTO response = idiomaService.findIdiomaById(id);
                return ResponseEntity.ok(BaseResponse.<IdiomaResponseDTO>builder()
                                .status(SUCESSO)
                                .message("Idioma encontrado com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Lista todos os Idiomas.
         * Funcionalidade Completa: Listagem de todos os idiomas disponíveis para
         * seleção pelos advogados.
         * Regras de Negócio: N/A (apenas listagem).
         *
         * @return ResponseEntity com a lista de DTOs de Idiomas.
         */
        @Operation(summary = "Lista todos os idiomas", description = "Retorna uma lista de todos os idiomas cadastrados.", responses = {
                        @ApiResponse(responseCode = "200", description = "Idiomas listados com sucesso"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping
        public ResponseEntity<BaseResponse<List<IdiomaResponseDTO>>> getAllIdiomas() {
                List<IdiomaResponseDTO> response = idiomaService.findAllIdiomas();
                return ResponseEntity.ok(BaseResponse.<List<IdiomaResponseDTO>>builder()
                                .status(SUCESSO)
                                .message("Idiomas listados com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }
}
```
```java
package br.com.legalconnect.advogado.controller;

import static br.com.legalconnect.enums.StatusResponse.SUCESSO;

import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.advogado.application.dto.response.LocalAtuacaoResponseDTO;
import br.com.legalconnect.advogado.application.service.LocalAtuacaoService;
import br.com.legalconnect.common.dto.BaseResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

/**
 * Controller para o módulo de Locais de Atuação (dados mestre).
 * Oferece endpoints para consultar os locais de atuação disponíveis.
 */
@RestController
@RequestMapping("/api/v1/advogados/locais-atuacao")
@Tag(name = "Locais de Atuação", description = "Gerenciamento de dados mestre de Locais de Atuação")
public class LocalAtuacaoController {

        private final LocalAtuacaoService localAtuacaoService;

        @Autowired
        public LocalAtuacaoController(LocalAtuacaoService localAtuacaoService) {
                this.localAtuacaoService = localAtuacaoService;
        }

        /**
         * Busca um Local de Atuação pelo ID.
         * Funcionalidade Completa: Consulta de um dado mestre específico.
         * Regras de Negócio: N/A (apenas busca por ID).
         *
         * @param id ID do Local de Atuação.
         * @return ResponseEntity com o DTO do Local de Atuação.
         */
        @Operation(summary = "Busca um local de atuação pelo ID", description = "Retorna os detalhes de um local de atuação específico.", responses = {
                        @ApiResponse(responseCode = "200", description = "Local de Atuação encontrado com sucesso"),
                        @ApiResponse(responseCode = "404", description = "Local de Atuação não encontrado"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping("/{id}")
        public ResponseEntity<BaseResponse<LocalAtuacaoResponseDTO>> getLocalAtuacaoById(
                        @Parameter(description = "ID do Local de Atuação") @PathVariable UUID id) {
                LocalAtuacaoResponseDTO response = localAtuacaoService.findLocalAtuacaoById(id);
                return ResponseEntity.ok(BaseResponse.<LocalAtuacaoResponseDTO>builder()
                                .status(SUCESSO)
                                .message("Local de Atuação encontrado com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Lista todos os Locais de Atuação.
         * Funcionalidade Completa: Listagem de todos os locais disponíveis para seleção
         * pelos advogados.
         * Regras de Negócio: N/A (apenas listagem).
         *
         * @return ResponseEntity com a lista de DTOs de Locais de Atuação.
         */
        @Operation(summary = "Lista todos os locais de atuação", description = "Retorna uma lista de todos os locais de atuação cadastrados.", responses = {
                        @ApiResponse(responseCode = "200", description = "Locais de Atuação listados com sucesso"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping
        public ResponseEntity<BaseResponse<List<LocalAtuacaoResponseDTO>>> getAllLocaisAtuacao() {
                List<LocalAtuacaoResponseDTO> response = localAtuacaoService.findAllLocaisAtuacao();
                return ResponseEntity.ok(BaseResponse.<List<LocalAtuacaoResponseDTO>>builder()
                                .status(SUCESSO)
                                .message("Locais de Atuação listados com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }
}
```
```java
package br.com.legalconnect.advogado.controller;

import static br.com.legalconnect.enums.StatusResponse.SUCESSO;

import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.advogado.application.dto.request.CertificacaoRequestDTO;
import br.com.legalconnect.advogado.application.dto.request.DocumentoUploadRequest;
import br.com.legalconnect.advogado.application.dto.request.ExperienciaProfissionalRequestDTO;
import br.com.legalconnect.advogado.application.dto.request.FormacaoAcademicaRequestDTO;
import br.com.legalconnect.advogado.application.dto.request.ProfissionalCreateRequest;
import br.com.legalconnect.advogado.application.dto.request.ProfissionalUpdateRequest;
import br.com.legalconnect.advogado.application.dto.response.CertificacaoResponseDTO;
import br.com.legalconnect.advogado.application.dto.response.DocumentoResponseDTO;
import br.com.legalconnect.advogado.application.dto.response.ExperienciaProfissionalResponseDTO;
import br.com.legalconnect.advogado.application.dto.response.FormacaoAcademicaResponseDTO;
import br.com.legalconnect.advogado.application.dto.response.ProfissionalResponseDTO;
import br.com.legalconnect.advogado.application.service.CertificacaoService;
import br.com.legalconnect.advogado.application.service.DocumentoService;
import br.com.legalconnect.advogado.application.service.ExperienciaProfissionalService;
import br.com.legalconnect.advogado.application.service.FormacaoAcademicaService;
import br.com.legalconnect.advogado.application.service.ProfissionalService;
import br.com.legalconnect.commom.dto.request.UserRequestDTO;
import br.com.legalconnect.common.dto.BaseResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;

/**
 * Controller para o módulo de Profissionais (Advogados).
 * Gerencia as operações REST para perfis de advogados,
 * incluindo suas certificações, experiências, formações e documentos.
 */
@RestController
@RequestMapping("/api/v1/advogados/profissionais")
@Tag(name = "Profissionais", description = "Gerenciamento de perfis de Advogados")
public class ProfissionalController {

        private final ProfissionalService profissionalService;
        private final CertificacaoService certificacaoService;
        private final ExperienciaProfissionalService experienciaProfissionalService;
        private final FormacaoAcademicaService formacaoAcademicaService;
        private final DocumentoService documentoService;

        @Autowired
        public ProfissionalController(ProfissionalService profissionalService,
                        CertificacaoService certificacaoService,
                        ExperienciaProfissionalService experienciaProfissionalService,
                        FormacaoAcademicaService formacaoAcademicaService,
                        DocumentoService documentoService) {
                this.profissionalService = profissionalService;
                this.certificacaoService = certificacaoService;
                this.experienciaProfissionalService = experienciaProfissionalService;
                this.formacaoAcademicaService = formacaoAcademicaService;
                this.documentoService = documentoService;
        }

        /**
         * Cria um novo profissional (advogado) no sistema.
         * Funcionalidade Completa: Cadastro de Advogado com dados aninhados.
         * Regras de Negócio: Validação de unicidade de OAB, CPF e Email. Associação a
         * um tenant.
         *
         * @param request      DTO com os dados do profissional a ser criado.
         * @param userIdHeader Opcional. ID do usuário logado/solicitante, vindo do
         *                     cabeçalho X-Correlation-Id.
         * @return ResponseEntity com o DTO do profissional criado.
         */
        @Operation(summary = "Cria um novo profissional", description = "Registra um novo advogado com seus dados pessoais e informações profissionais.", responses = {
                        @ApiResponse(responseCode = "201", description = "Profissional criado com sucesso"),
                        @ApiResponse(responseCode = "400", description = "Dados de requisição inválidos"),
                        @ApiResponse(responseCode = "409", description = "OAB, CPF ou Email já cadastrado"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @PostMapping
        public ResponseEntity<BaseResponse<ProfissionalResponseDTO>> createProfissional(
                        @Valid @RequestBody ProfissionalCreateRequest request,
                        @RequestHeader(value = "X-Correlation-Id", required = false) String userIdHeader) {

                // Regra de Negócio: Se o userIdHeader for fornecido e válido, usá-lo para
                // associar o usuário ao profissional.
                // Isso é feito no UserRequestDTO que está aninhado em PessoaRequestDTO, que por
                // sua vez é o pai de ProfissionalCreateRequest.
                // A lógica do PessoaService.createPessoa espera um ID no UserRequestDTO se a
                // criação não for totalmente nova de ID.
                if (userIdHeader != null && !userIdHeader.trim().isEmpty()) {
                        try {
                                UUID userUuid = UUID.fromString(userIdHeader); // Validar se é um UUID válido

                                if (request.getUsuario() == null) {
                                        // Se o DTO de usuário não foi fornecido no corpo, cria um com o ID do header
                                        request.setUsuario(UserRequestDTO.builder().id(userUuid.toString()).build());
                                } else if (request.getUsuario().getId() == null
                                                || request.getUsuario().getId().trim().isEmpty()) {
                                        // Se o DTO de usuário foi fornecido, mas sem ID, usa o do header
                                        request.getUsuario().setId(userUuid.toString());
                                }
                        } catch (IllegalArgumentException e) {
                                // Logar ou tratar erro se userIdHeader não for um UUID válido
                                // Para este caso, vamos apenas logar e ignorar o userIdHeader inválido.
                                System.err.println("X-Correlation-Id inválido: " + userIdHeader
                                                + ". Ignorando ID do cabeçalho.");
                        }
                }

                ProfissionalResponseDTO response = profissionalService.createProfissional(request);
                return ResponseEntity.status(HttpStatus.CREATED)
                                .body(BaseResponse.<ProfissionalResponseDTO>builder()
                                                .status(SUCESSO)
                                                .message("Profissional criado com sucesso.")
                                                .data(response)
                                                .timestamp(java.time.LocalDateTime.now())
                                                .build());
        }

        /**
         * Atualiza um profissional existente.
         * Funcionalidade Completa: Atualização de perfil de advogado, incluindo dados
         * da Pessoa e coleções aninhadas.
         * Regras de Negócio: Acesso restrito ao próprio tenant, validação de
         * existência.
         *
         * @param id      ID do profissional a ser atualizado.
         * @param request DTO com os dados de atualização.
         * @return ResponseEntity com o DTO do profissional atualizado.
         */
        @Operation(summary = "Atualiza um profissional existente", description = "Atualiza os dados de um advogado, incluindo informações pessoais e coleções relacionadas.", responses = {
                        @ApiResponse(responseCode = "200", description = "Profissional atualizado com sucesso"),
                        @ApiResponse(responseCode = "400", description = "Dados de requisição inválidos"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (profissional pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Profissional não encontrado"),
                        @ApiResponse(responseCode = "409", description = "Conflito de dados (ex: email duplicado)"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @PutMapping("/{id}")
        public ResponseEntity<BaseResponse<ProfissionalResponseDTO>> updateProfissional(
                        @Parameter(description = "ID do profissional a ser atualizado") @PathVariable UUID id,
                        @Valid @RequestBody ProfissionalUpdateRequest request) {
                ProfissionalResponseDTO response = profissionalService.updateProfissional(id, request);
                return ResponseEntity.ok(BaseResponse.<ProfissionalResponseDTO>builder()
                                .status(SUCESSO)
                                .message("Profissional atualizado com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Busca um profissional pelo ID.
         * Funcionalidade Completa: Exibição detalhada do perfil de um advogado.
         * Regras de Negócio: Acesso restrito ao próprio tenant.
         *
         * @param id ID do profissional.
         * @return ResponseEntity com o DTO do profissional.
         */
        @Operation(summary = "Busca um profissional pelo ID", description = "Retorna os detalhes completos de um advogado específico.", responses = {
                        @ApiResponse(responseCode = "200", description = "Profissional encontrado com sucesso"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (profissional pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Profissional não encontrado"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping("/{id}")
        public ResponseEntity<BaseResponse<ProfissionalResponseDTO>> getProfissionalById(
                        @Parameter(description = "ID do profissional") @PathVariable UUID id) {
                ProfissionalResponseDTO response = profissionalService.findProfissionalById(id);
                return ResponseEntity.ok(BaseResponse.<ProfissionalResponseDTO>builder()
                                .status(SUCESSO)
                                .message("Profissional encontrado com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Lista todos os profissionais do tenant atual com paginação.
         * Funcionalidade Completa: Listagem paginada de advogados para o marketplace ou
         * para gestão interna do tenant.
         * Regras de Negócio: Filtro automático por tenant_id.
         *
         * @param page Número da página (0-indexed).
         * @param size Tamanho da página.
         * @param sort Critério de ordenação (ex: campo,asc ou campo,desc).
         * @return ResponseEntity com a página de DTOs de profissionais.
         */
        @Operation(summary = "Lista todos os profissionais com paginação", description = "Retorna uma lista paginada de todos os advogados associados ao tenant atual.", responses = {
                        @ApiResponse(responseCode = "200", description = "Profissionais listados com sucesso"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping
        public ResponseEntity<BaseResponse<Page<ProfissionalResponseDTO>>> getAllProfissionais(
                        @Parameter(description = "Número da página (0-indexed)", example = "0") @RequestParam(defaultValue = "0") int page,
                        @Parameter(description = "Tamanho da página", example = "10") @RequestParam(defaultValue = "10") int size,
                        @Parameter(description = "Critério de ordenação (ex: nomeCompleto,asc ou numeroOab,desc)", example = "nomeCompleto,asc") @RequestParam(defaultValue = "nomeCompleto,asc") String[] sort) {

                Sort sortCriteria = Sort.by(Sort.Direction.fromString(sort[1]), sort[0]);
                PageRequest pageable = PageRequest.of(page, size, sortCriteria);

                Page<ProfissionalResponseDTO> response = profissionalService.findAllProfissionais(pageable);
                return ResponseEntity.ok(BaseResponse.<Page<ProfissionalResponseDTO>>builder()
                                .status(SUCESSO)
                                .message("Profissionais listados com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Deleta um profissional pelo ID.
         * Funcionalidade Completa: Remoção completa do perfil do advogado e dados
         * associados.
         * Regras de Negócio: Acesso restrito ao próprio tenant. Deleção em cascata
         * (certificações, experiências, documentos, formação, pessoa).
         *
         * @param id ID do profissional a ser deletado.
         * @return ResponseEntity de sucesso sem conteúdo.
         */
        @Operation(summary = "Deleta um profissional pelo ID", description = "Remove um advogado e todos os seus dados associados do sistema.", responses = {
                        @ApiResponse(responseCode = "200", description = "Profissional deletado com sucesso"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (profissional pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Profissional não encontrado"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @DeleteMapping("/{id}")
        public ResponseEntity<BaseResponse<Void>> deleteProfissional(
                        @Parameter(description = "ID do profissional a ser deletado") @PathVariable UUID id) {
                profissionalService.deleteProfissional(id);
                return ResponseEntity.ok(BaseResponse.<Void>builder()
                                .status(SUCESSO)
                                .message("Profissional deletado com sucesso.")
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        // --- Endpoints para Certificações ---

        /**
         * Adiciona uma certificação a um profissional.
         * Funcionalidade Completa: Gerenciamento granular de certificações.
         * Regras de Negócio: Certificação associada ao profissional e ao tenant.
         *
         * @param profissionalId ID do profissional.
         * @param requestDTO     DTO da certificação.
         * @return ResponseEntity com a certificação criada.
         */
        @Operation(summary = "Adiciona uma certificação a um profissional", description = "Adiciona uma nova certificação ao perfil de um advogado.", responses = {
                        @ApiResponse(responseCode = "201", description = "Certificação adicionada com sucesso"),
                        @ApiResponse(responseCode = "400", description = "Dados de requisição inválidos"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (profissional pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Profissional não encontrado"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @PostMapping("/{profissionalId}/certificacoes")
        public ResponseEntity<BaseResponse<CertificacaoResponseDTO>> addCertificacao(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Valid @RequestBody CertificacaoRequestDTO requestDTO) {
                CertificacaoResponseDTO response = certificacaoService.createCertificacao(profissionalId, requestDTO);
                return ResponseEntity.status(HttpStatus.CREATED)
                                .body(BaseResponse.<CertificacaoResponseDTO>builder()
                                                .status(SUCESSO)
                                                .message("Certificação adicionada com sucesso.")
                                                .data(response)
                                                .timestamp(java.time.LocalDateTime.now())
                                                .build());
        }

        /**
         * Atualiza uma certificação de um profissional.
         * Funcionalidade Completa: Atualização de detalhes de uma certificação
         * existente.
         * Regras de Negócio: Validação de pertencimento ao profissional e tenant.
         *
         * @param profissionalId ID do profissional.
         * @param certificacaoId ID da certificação.
         * @param requestDTO     DTO com os dados de atualização.
         * @return ResponseEntity com a certificação atualizada.
         */
        @Operation(summary = "Atualiza uma certificação de um profissional", description = "Atualiza os detalhes de uma certificação existente associada a um advogado.", responses = {
                        @ApiResponse(responseCode = "200", description = "Certificação atualizada com sucesso"),
                        @ApiResponse(responseCode = "400", description = "Dados de requisição inválidos"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (certificação pertence a outro tenant ou profissional)"),
                        @ApiResponse(responseCode = "404", description = "Certificação não encontrada para este profissional"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @PutMapping("/{profissionalId}/certificacoes/{certificacaoId}")
        public ResponseEntity<BaseResponse<CertificacaoResponseDTO>> updateCertificacao(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Parameter(description = "ID da certificação a ser atualizada") @PathVariable UUID certificacaoId,
                        @Valid @RequestBody CertificacaoRequestDTO requestDTO) {
                CertificacaoResponseDTO response = certificacaoService.updateCertificacao(profissionalId,
                                certificacaoId,
                                requestDTO);
                return ResponseEntity.ok(BaseResponse.<CertificacaoResponseDTO>builder()
                                .status(SUCESSO)
                                .message("Certificação atualizada com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Busca uma certificação específica de um profissional.
         * Funcionalidade Completa: Consulta individual de certificação.
         * Regras de Negócio: Validação de pertencimento ao profissional e tenant.
         *
         * @param profissionalId ID do profissional.
         * @param certificacaoId ID da certificação.
         * @return ResponseEntity com a certificação encontrada.
         */
        @Operation(summary = "Busca uma certificação específica de um profissional", description = "Retorna os detalhes de uma certificação específica de um advogado.", responses = {
                        @ApiResponse(responseCode = "200", description = "Certificação encontrada com sucesso"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (certificação pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Certificação não encontrada para este profissional"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping("/{profissionalId}/certificacoes/{certificacaoId}")
        public ResponseEntity<BaseResponse<CertificacaoResponseDTO>> getCertificacaoById(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Parameter(description = "ID da certificação") @PathVariable UUID certificacaoId) {
                CertificacaoResponseDTO response = certificacaoService.findCertificacaoById(profissionalId,
                                certificacaoId);
                return ResponseEntity.ok(BaseResponse.<CertificacaoResponseDTO>builder()
                                .status(SUCESSO)
                                .message("Certificação encontrada com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Lista todas as certificações de um profissional.
         * Funcionalidade Completa: Visualização de todas as certificações de um
         * advogado.
         * Regras de Negócio: Acesso restrito ao próprio tenant.
         *
         * @param profissionalId ID do profissional.
         * @return ResponseEntity com a lista de certificações.
         */
        @Operation(summary = "Lista todas as certificações de um profissional", description = "Retorna uma lista de todas as certificações associadas a um advogado específico.", responses = {
                        @ApiResponse(responseCode = "200", description = "Certificações listadas com sucesso"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (profissional pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Profissional não encontrado"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping("/{profissionalId}/certificacoes")
        public ResponseEntity<BaseResponse<List<CertificacaoResponseDTO>>> getAllCertificacoes(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId) {
                List<CertificacaoResponseDTO> response = certificacaoService
                                .findAllCertificacoesByProfissionalId(profissionalId);
                return ResponseEntity.ok(BaseResponse.<List<CertificacaoResponseDTO>>builder()
                                .status(SUCESSO)
                                .message("Certificações listadas com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Deleta uma certificação de um profissional.
         * Funcionalidade Completa: Remoção de uma certificação específica.
         * Regras de Negócio: Validação de pertencimento ao profissional e tenant.
         *
         * @param profissionalId ID do profissional.
         * @param certificacaoId ID da certificação.
         * @return ResponseEntity de sucesso sem conteúdo.
         */
        @Operation(summary = "Deleta uma certificação de um profissional", description = "Remove uma certificação específica do perfil de um advogado.", responses = {
                        @ApiResponse(responseCode = "200", description = "Certificação deletada com sucesso"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (certificação pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Certificação não encontrada para deleção"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @DeleteMapping("/{profissionalId}/certificacoes/{certificacaoId}")
        public ResponseEntity<BaseResponse<Void>> deleteCertificacao(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Parameter(description = "ID da certificação a ser deletada") @PathVariable UUID certificacaoId) {
                certificacaoService.deleteCertificacao(profissionalId, certificacaoId);
                return ResponseEntity.ok(BaseResponse.<Void>builder()
                                .status(SUCESSO)
                                .message("Certificação deletada com sucesso.")
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        // --- Endpoints para Experiências Profissionais ---

        /**
         * Adiciona uma experiência profissional a um profissional.
         * Funcionalidade Completa: Gerenciamento granular de experiências.
         * Regras de Negócio: Experiência associada ao profissional e ao tenant.
         *
         * @param profissionalId ID do profissional.
         * @param requestDTO     DTO da experiência.
         * @return ResponseEntity com a experiência criada.
         */
        @Operation(summary = "Adiciona uma experiência profissional a um profissional", description = "Adiciona uma nova experiência profissional ao perfil de um advogado.", responses = {
                        @ApiResponse(responseCode = "201", description = "Experiência profissional adicionada com sucesso"),
                        @ApiResponse(responseCode = "400", description = "Dados de requisição inválidos"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (profissional pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Profissional não encontrado"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @PostMapping("/{profissionalId}/experiencias")
        public ResponseEntity<BaseResponse<ExperienciaProfissionalResponseDTO>> addExperienciaProfissional(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Valid @RequestBody ExperienciaProfissionalRequestDTO requestDTO) {
                ExperienciaProfissionalResponseDTO response = experienciaProfissionalService
                                .createExperienciaProfissional(profissionalId, requestDTO);
                return ResponseEntity.status(HttpStatus.CREATED)
                                .body(BaseResponse.<ExperienciaProfissionalResponseDTO>builder()
                                                .status(SUCESSO)
                                                .message("Experiência profissional adicionada com sucesso.")
                                                .data(response)
                                                .timestamp(java.time.LocalDateTime.now())
                                                .build());
        }

        /**
         * Atualiza uma experiência profissional de um profissional.
         * Funcionalidade Completa: Atualização de detalhes de uma experiência
         * existente.
         * Regras de Negócio: Validação de pertencimento ao profissional e tenant.
         *
         * @param profissionalId ID do profissional.
         * @param experienciaId  ID da experiência.
         * @param requestDTO     DTO com os dados de atualização.
         * @return ResponseEntity com a experiência atualizada.
         */
        @Operation(summary = "Atualiza uma experiência profissional de um profissional", description = "Atualiza os detalhes de uma experiência profissional existente associada a um advogado.", responses = {
                        @ApiResponse(responseCode = "200", description = "Experiência profissional atualizada com sucesso"),
                        @ApiResponse(responseCode = "400", description = "Dados de requisição inválidos"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (experiência pertence a outro tenant ou profissional)"),
                        @ApiResponse(responseCode = "404", description = "Experiência profissional não encontrada para este profissional"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @PutMapping("/{profissionalId}/experiencias/{experienciaId}")
        public ResponseEntity<BaseResponse<ExperienciaProfissionalResponseDTO>> updateExperienciaProfissional(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Parameter(description = "ID da experiência a ser atualizada") @PathVariable UUID experienciaId,
                        @Valid @RequestBody ExperienciaProfissionalRequestDTO requestDTO) {
                ExperienciaProfissionalResponseDTO response = experienciaProfissionalService
                                .updateExperienciaProfissional(profissionalId, experienciaId, requestDTO);
                return ResponseEntity.ok(BaseResponse.<ExperienciaProfissionalResponseDTO>builder()
                                .status(SUCESSO)
                                .message("Experiência profissional atualizada com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Busca uma experiência profissional específica de um profissional.
         * Funcionalidade Completa: Consulta individual de experiência.
         * Regras de Negócio: Validação de pertencimento ao profissional e tenant.
         *
         * @param profissionalId ID do profissional.
         * @param experienciaId  ID da experiência.
         * @return ResponseEntity com a experiência encontrada.
         */
        @Operation(summary = "Busca uma experiência profissional específica de um profissional", description = "Retorna os detalhes de uma experiência profissional específica de um advogado.", responses = {
                        @ApiResponse(responseCode = "200", description = "Experiência profissional encontrada com sucesso"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (experiência pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Experiência profissional não encontrada para este profissional"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping("/{profissionalId}/experiencias/{experienciaId}")
        public ResponseEntity<BaseResponse<ExperienciaProfissionalResponseDTO>> getExperienciaProfissionalById(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Parameter(description = "ID da experiência") @PathVariable UUID experienciaId) {
                ExperienciaProfissionalResponseDTO response = experienciaProfissionalService
                                .findExperienciaProfissionalById(profissionalId, experienciaId);
                return ResponseEntity.ok(BaseResponse.<ExperienciaProfissionalResponseDTO>builder()
                                .status(SUCESSO)
                                .message("Experiência profissional encontrada com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Lista todas as experiências profissionais de um profissional.
         * Funcionalidade Completa: Visualização de todas as experiências de um
         * advogado.
         * Regras de Negócio: Acesso restrito ao próprio tenant.
         *
         * @param profissionalId ID do profissional.
         * @return ResponseEntity com a lista de experiências.
         */
        @Operation(summary = "Lista todas as experiências profissionais de um profissional", description = "Retorna uma lista de todas as experiências profissionais associadas a um advogado específico.", responses = {
                        @ApiResponse(responseCode = "200", description = "Experiências profissionais listadas com sucesso"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (profissional pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Profissional não encontrado"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping("/{profissionalId}/experiencias")
        public ResponseEntity<BaseResponse<List<ExperienciaProfissionalResponseDTO>>> getAllExperienciasProfissionais(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId) {
                List<ExperienciaProfissionalResponseDTO> response = experienciaProfissionalService
                                .findAllExperienciasProfissionaisByProfissionalId(profissionalId);
                return ResponseEntity.ok(BaseResponse.<List<ExperienciaProfissionalResponseDTO>>builder()
                                .status(SUCESSO)
                                .message("Experiências profissionais listadas com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Deleta uma experiência profissional de um profissional.
         * Funcionalidade Completa: Remoção de uma experiência específica.
         * Regras de Negócio: Validação de pertencimento ao profissional e tenant.
         *
         * @param profissionalId ID do profissional.
         * @param experienciaId  ID da experiência.
         * @return ResponseEntity de sucesso sem conteúdo.
         */
        @Operation(summary = "Deleta uma experiência profissional de um profissional", description = "Remove uma experiência profissional específica do perfil de um advogado.", responses = {
                        @ApiResponse(responseCode = "200", description = "Experiência profissional deletada com sucesso"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (experiência pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Experiência profissional não encontrada para deleção"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @DeleteMapping("/{profissionalId}/experiencias/{experienciaId}")
        public ResponseEntity<BaseResponse<Void>> deleteExperienciaProfissional(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Parameter(description = "ID da experiência a ser deletada") @PathVariable UUID experienciaId) {
                experienciaProfissionalService.deleteExperienciaProfissional(profissionalId, experienciaId);
                return ResponseEntity.ok(BaseResponse.<Void>builder()
                                .status(SUCESSO)
                                .message("Experiência profissional deletada com sucesso.")
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        // --- Endpoints para Formações Acadêmicas ---

        /**
         * Adiciona uma formação acadêmica a um profissional.
         * Funcionalidade Completa: Gerenciamento granular de formações.
         * Regras de Negócio: Formação associada ao profissional e ao tenant.
         *
         * @param profissionalId ID do profissional.
         * @param requestDTO     DTO da formação.
         * @return ResponseEntity com a formação criada.
         */
        @Operation(summary = "Adiciona uma formação acadêmica a um profissional", description = "Adiciona uma nova formação acadêmica ao perfil de um advogado.", responses = {
                        @ApiResponse(responseCode = "201", description = "Formação acadêmica adicionada com sucesso"),
                        @ApiResponse(responseCode = "400", description = "Dados de requisição inválidos"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (profissional pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Profissional não encontrado"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @PostMapping("/{profissionalId}/formacoes")
        public ResponseEntity<BaseResponse<FormacaoAcademicaResponseDTO>> addFormacaoAcademica(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Valid @RequestBody FormacaoAcademicaRequestDTO requestDTO) {
                FormacaoAcademicaResponseDTO response = formacaoAcademicaService.createFormacaoAcademica(profissionalId,
                                requestDTO);
                return ResponseEntity.status(HttpStatus.CREATED)
                                .body(BaseResponse.<FormacaoAcademicaResponseDTO>builder()
                                                .status(SUCESSO)
                                                .message("Formação acadêmica adicionada com sucesso.")
                                                .data(response)
                                                .timestamp(java.time.LocalDateTime.now())
                                                .build());
        }

        /**
         * Atualiza uma formação acadêmica de um profissional.
         * Funcionalidade Completa: Atualização de detalhes de uma formação existente.
         * Regras de Negócio: Validação de pertencimento ao profissional e tenant.
         *
         * @param profissionalId ID do profissional.
         * @param formacaoId     ID da formação.
         * @param requestDTO     DTO com os dados de atualização.
         * @return ResponseEntity com a formação atualizada.
         */
        @Operation(summary = "Atualiza uma formação acadêmica de um profissional", description = "Atualiza os detalhes de uma formação acadêmica existente associada a um advogado.", responses = {
                        @ApiResponse(responseCode = "200", description = "Formação acadêmica atualizada com sucesso"),
                        @ApiResponse(responseCode = "400", description = "Dados de requisição inválidos"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (formação pertence a outro tenant ou profissional)"),
                        @ApiResponse(responseCode = "404", description = "Formação acadêmica não encontrada para este profissional"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @PutMapping("/{profissionalId}/formacoes/{formacaoId}")
        public ResponseEntity<BaseResponse<FormacaoAcademicaResponseDTO>> updateFormacaoAcademica(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Parameter(description = "ID da formação a ser atualizada") @PathVariable UUID formacaoId,
                        @Valid @RequestBody FormacaoAcademicaRequestDTO requestDTO) {
                FormacaoAcademicaResponseDTO response = formacaoAcademicaService.updateFormacaoAcademica(profissionalId,
                                formacaoId, requestDTO);
                return ResponseEntity.ok(BaseResponse.<FormacaoAcademicaResponseDTO>builder()
                                .status(SUCESSO)
                                .message("Formação acadêmica atualizada com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Busca uma formação acadêmica específica de um profissional.
         * Funcionalidade Completa: Consulta individual de formação.
         * Regras de Negócio: Validação de pertencimento ao profissional e tenant.
         *
         * @param profissionalId ID do profissional.
         * @param formacaoId     ID da formação.
         * @return ResponseEntity com a formação encontrada.
         */
        @Operation(summary = "Busca uma formação acadêmica específica de um profissional", description = "Retorna os detalhes de uma formação acadêmica específica de um advogado.", responses = {
                        @ApiResponse(responseCode = "200", description = "Formação acadêmica encontrada com sucesso"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (formação pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Formação acadêmica não encontrada para este profissional"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping("/{profissionalId}/formacoes/{formacaoId}")
        public ResponseEntity<BaseResponse<FormacaoAcademicaResponseDTO>> getFormacaoAcademicaById(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Parameter(description = "ID da formação") @PathVariable UUID formacaoId) {
                FormacaoAcademicaResponseDTO response = formacaoAcademicaService.findFormacaoAcademicaById(
                                profissionalId,
                                formacaoId);
                return ResponseEntity.ok(BaseResponse.<FormacaoAcademicaResponseDTO>builder()
                                .status(SUCESSO)
                                .message("Formação acadêmica encontrada com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Lista todas as formações acadêmicas de um profissional.
         * Funcionalidade Completa: Visualização de todas as formações de um advogado.
         * Regras de Negócio: Acesso restrito ao próprio tenant.
         *
         * @param profissionalId ID do profissional.
         * @return ResponseEntity com a lista de formações.
         */
        @Operation(summary = "Lista todas as formações acadêmicas de um profissional", description = "Retorna uma lista de todas as formações acadêmicas associadas a um advogado específico.", responses = {
                        @ApiResponse(responseCode = "200", description = "Formações acadêmicas listadas com sucesso"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (profissional pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Profissional não encontrado"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping("/{profissionalId}/formacoes")
        public ResponseEntity<BaseResponse<List<FormacaoAcademicaResponseDTO>>> getAllFormacoesAcademicas(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId) {
                List<FormacaoAcademicaResponseDTO> response = formacaoAcademicaService
                                .findAllFormacoesAcademicasByProfissionalId(profissionalId);
                return ResponseEntity.ok(BaseResponse.<List<FormacaoAcademicaResponseDTO>>builder()
                                .status(SUCESSO)
                                .message("Formações acadêmicas listadas com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Deleta uma formação acadêmica de um profissional.
         * Funcionalidade Completa: Remoção de uma formação específica.
         * Regras de Negócio: Validação de pertencimento ao profissional e tenant.
         *
         * @param profissionalId ID do profissional.
         * @param formacaoId     ID da formação.
         * @return ResponseEntity de sucesso sem conteúdo.
         */
        @Operation(summary = "Deleta uma formação acadêmica de um profissional", description = "Remove uma formação acadêmica específica do perfil de um advogado.", responses = {
                        @ApiResponse(responseCode = "200", description = "Formação acadêmica deletada com sucesso"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (formação pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Formação acadêmica não encontrada para deleção"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @DeleteMapping("/{profissionalId}/formacoes/{formacaoId}")
        public ResponseEntity<BaseResponse<Void>> deleteFormacaoAcademica(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Parameter(description = "ID da formação a ser deletada") @PathVariable UUID formacaoId) {
                formacaoAcademicaService.deleteFormacaoAcademica(profissionalId, formacaoId);
                return ResponseEntity.ok(BaseResponse.<Void>builder()
                                .status(SUCESSO)
                                .message("Formação acadêmica deletada com sucesso.")
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        // --- Endpoints para Documentos ---

        /**
         * Realiza o upload de um documento para um profissional.
         * Funcionalidade Completa: Armazenamento de documentos no S3 e metadados no DB.
         * Regras de Negócio: Associação ao profissional e tenant, validação de formato
         * Base64.
         *
         * @param profissionalId ID do profissional.
         * @param request        DTO com os dados do documento e o arquivo em Base64.
         * @return ResponseEntity com o DTO do documento criado.
         */
        @Operation(summary = "Realiza o upload de um documento para um profissional", description = "Faz o upload de um documento para o S3 e persiste seus metadados para um advogado.", responses = {
                        @ApiResponse(responseCode = "201", description = "Documento enviado com sucesso"),
                        @ApiResponse(responseCode = "400", description = "Dados de requisição inválidos (ex: Base64 inválido)"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (profissional pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Profissional não encontrado"),
                        @ApiResponse(responseCode = "500", description = "Falha ao fazer upload do documento ou erro interno do servidor")
        })
        @PostMapping("/{profissionalId}/documentos/upload")
        public ResponseEntity<BaseResponse<DocumentoResponseDTO>> uploadDocumento(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Valid @RequestBody DocumentoUploadRequest request) {
                DocumentoResponseDTO response = documentoService.uploadDocumento(profissionalId, request);
                return ResponseEntity.status(HttpStatus.CREATED)
                                .body(BaseResponse.<DocumentoResponseDTO>builder()
                                                .status(SUCESSO)
                                                .message("Documento enviado com sucesso.")
                                                .data(response)
                                                .timestamp(java.time.LocalDateTime.now())
                                                .build());
        }

        /**
         * Busca um documento específico de um profissional.
         * Funcionalidade Completa: Consulta individual de documento.
         * Regras de Negócio: Validação de pertencimento ao profissional e tenant.
         *
         * @param profissionalId ID do profissional.
         * @param documentoId    ID do documento.
         * @return ResponseEntity com o DTO do documento encontrado.
         */
        @Operation(summary = "Busca um documento específico de um profissional", description = "Retorna os detalhes de um documento específico de um advogado.", responses = {
                        @ApiResponse(responseCode = "200", description = "Documento encontrado com sucesso"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (documento pertence a outro tenant ou profissional)"),
                        @ApiResponse(responseCode = "404", description = "Documento não encontrado para este profissional"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping("/{profissionalId}/documentos/{documentoId}")
        public ResponseEntity<BaseResponse<DocumentoResponseDTO>> getDocumentoById(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Parameter(description = "ID do documento") @PathVariable UUID documentoId) {
                DocumentoResponseDTO response = documentoService.findDocumentoById(profissionalId, documentoId);
                return ResponseEntity.ok(BaseResponse.<DocumentoResponseDTO>builder()
                                .status(SUCESSO)
                                .message("Documento encontrado com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Lista todos os documentos de um profissional.
         * Funcionalidade Completa: Visualização de todos os documentos de um advogado.
         * Regras de Negócio: Acesso restrito ao próprio tenant.
         *
         * @param profissionalId ID do profissional.
         * @return ResponseEntity com a lista de documentos.
         */
        @Operation(summary = "Lista todos os documentos de um profissional", description = "Retorna uma lista de todos os documentos associados a um advogado específico.", responses = {
                        @ApiResponse(responseCode = "200", description = "Documentos listados com sucesso"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (profissional pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Profissional não encontrado"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping("/{profissionalId}/documentos")
        public ResponseEntity<BaseResponse<List<DocumentoResponseDTO>>> getAllDocumentos(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId) {
                List<DocumentoResponseDTO> response = documentoService
                                .findAllDocumentosByProfissionalId(profissionalId);
                return ResponseEntity.ok(BaseResponse.<List<DocumentoResponseDTO>>builder()
                                .status(SUCESSO)
                                .message("Documentos listados com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Deleta um documento de um profissional.
         * Funcionalidade Completa: Remoção do documento do S3 e do banco de dados.
         * Regras de Negócio: Validação de pertencimento ao profissional e tenant.
         *
         * @param profissionalId ID do profissional.
         * @param documentoId    ID do documento.
         * @return ResponseEntity de sucesso sem conteúdo.
         */
        @Operation(summary = "Deleta um documento de um profissional", description = "Remove um documento específico do perfil de um advogado, incluindo a remoção do S3.", responses = {
                        @ApiResponse(responseCode = "200", description = "Documento deletado com sucesso"),
                        @ApiResponse(responseCode = "403", description = "Acesso negado (documento pertence a outro tenant)"),
                        @ApiResponse(responseCode = "404", description = "Documento não encontrado para deleção"),
                        @ApiResponse(responseCode = "500", description = "Falha ao deletar o documento do S3 ou erro interno do servidor")
        })
        @DeleteMapping("/{profissionalId}/documentos/{documentoId}")
        public ResponseEntity<BaseResponse<Void>> deleteDocumento(
                        @Parameter(description = "ID do profissional") @PathVariable UUID profissionalId,
                        @Parameter(description = "ID do documento a ser deletado") @PathVariable UUID documentoId) {
                documentoService.deleteDocumento(profissionalId, documentoId);
                return ResponseEntity.ok(BaseResponse.<Void>builder()
                                .status(SUCESSO)
                                .message("Documento deletado com sucesso.")
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }
}
```
```java
package br.com.legalconnect.advogado.controller;

import static br.com.legalconnect.enums.StatusResponse.SUCESSO;

import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.advogado.application.dto.response.TipoAtendimentoResponseDTO;
import br.com.legalconnect.advogado.application.service.TipoAtendimentoService;
import br.com.legalconnect.common.dto.BaseResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

/**
 * Controller para o módulo de Tipos de Atendimento (dados mestre).
 * Oferece endpoints para consultar os tipos de atendimento disponíveis.
 */
@RestController
@RequestMapping("/api/v1/advogados/tipos-atendimento")
@Tag(name = "Tipos de Atendimento", description = "Gerenciamento de dados mestre de Tipos de Atendimento")
public class TipoAtendimentoController {

        private final TipoAtendimentoService tipoAtendimentoService;

        @Autowired
        public TipoAtendimentoController(TipoAtendimentoService tipoAtendimentoService) {
                this.tipoAtendimentoService = tipoAtendimentoService;
        }

        /**
         * Busca um Tipo de Atendimento pelo ID.
         * Funcionalidade Completa: Consulta de um dado mestre específico.
         * Regras de Negócio: N/A (apenas busca por ID).
         *
         * @param id ID do Tipo de Atendimento.
         * @return ResponseEntity com o DTO do Tipo de Atendimento.
         */
        @Operation(summary = "Busca um tipo de atendimento pelo ID", description = "Retorna os detalhes de um tipo de atendimento específico.", responses = {
                        @ApiResponse(responseCode = "200", description = "Tipo de Atendimento encontrado com sucesso"),
                        @ApiResponse(responseCode = "404", description = "Tipo de Atendimento não encontrado"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping("/{id}")
        public ResponseEntity<BaseResponse<TipoAtendimentoResponseDTO>> getTipoAtendimentoById(
                        @Parameter(description = "ID do Tipo de Atendimento") @PathVariable UUID id) {
                TipoAtendimentoResponseDTO response = tipoAtendimentoService.findTipoAtendimentoById(id);
                return ResponseEntity.ok(BaseResponse.<TipoAtendimentoResponseDTO>builder()
                                .status(SUCESSO)
                                .message("Tipo de Atendimento encontrado com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }

        /**
         * Lista todos os Tipos de Atendimento.
         * Funcionalidade Completa: Listagem de todos os tipos disponíveis para seleção
         * pelos advogados.
         * Regras de Negócio: N/A (apenas listagem).
         *
         * @return ResponseEntity com a lista de DTOs de Tipos de Atendimento.
         */
        @Operation(summary = "Lista todos os tipos de atendimento", description = "Retorna uma lista de todos os tipos de atendimento cadastrados.", responses = {
                        @ApiResponse(responseCode = "200", description = "Tipos de Atendimento listados com sucesso"),
                        @ApiResponse(responseCode = "500", description = "Erro interno do servidor")
        })
        @GetMapping
        public ResponseEntity<BaseResponse<List<TipoAtendimentoResponseDTO>>> getAllTiposAtendimento() {
                List<TipoAtendimentoResponseDTO> response = tipoAtendimentoService.findAllTiposAtendimento();
                return ResponseEntity.ok(BaseResponse.<List<TipoAtendimentoResponseDTO>>builder()
                                .status(SUCESSO)
                                .message("Tipos de Atendimento listados com sucesso.")
                                .data(response)
                                .timestamp(java.time.LocalDateTime.now())
                                .build());
        }
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_area_atuacao")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class AreaAtuacao extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 255)
    private String nome;

    @Column(name = "descricao", columnDefinition = "TEXT")
    private String descricao;
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import java.time.LocalDate;
import java.util.UUID;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_certificacao_profissional")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Certificacao extends BaseEntity {

    @Column(name = "nome", nullable = false, length = 255)
    private String nome;

    @Column(name = "instituicao", length = 255)
    private String instituicao;

    @Column(name = "data_conclusao")
    private LocalDate dataConclusao;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "profissional_id", nullable = false)
    private Profissional profissional; // Referência à entidade JPA ProfissionalEntity

    @Column(name = "tenant_id", nullable = false)
    private UUID tenantId;
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import java.util.UUID;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_documento_profissional")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Documento extends BaseEntity {

    @Column(name = "nome_arquivo", nullable = false, length = 255)
    private String nomeArquivo;

    @Column(name = "url_s3", nullable = false, length = 500)
    private String urlS3;

    @Column(name = "tipo_documento", nullable = false, length = 100)
    private String tipoDocumento; // Mapeia o enum DocumentoTipo como String

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "profissional_id", nullable = false)
    private Profissional profissional;

    @Column(name = "tenant_id", nullable = false)
    private UUID tenantId;
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import java.time.LocalDate;
import java.util.UUID;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_experiencia_profissional")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class ExperienciaProfissional extends BaseEntity {

    @Column(name = "cargo", nullable = false, length = 255)
    private String cargo;

    @Column(name = "empresa", nullable = false, length = 255)
    private String empresa;

    @Column(name = "data_inicio", nullable = false)
    private LocalDate dataInicio;

    @Column(name = "data_fim")
    private LocalDate dataFim;

    @Column(name = "descricao", columnDefinition = "TEXT")
    private String descricao;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "profissional_id", nullable = false)
    private Profissional profissional;

    @Column(name = "tenant_id", nullable = false)
    private UUID tenantId;
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import java.time.LocalDate;
import java.util.UUID;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_formacao_academica")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class FormacaoAcademica extends BaseEntity {

    @Column(name = "curso", nullable = false, length = 255)
    private String curso;

    @Column(name = "instituicao", nullable = false, length = 255)
    private String instituicao;

    @Column(name = "data_conclusao", nullable = false)
    private LocalDate dataConclusao;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "profissional_id", nullable = false)
    private Profissional profissional;

    @Column(name = "tenant_id", nullable = false)
    private UUID tenantId;
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_idioma")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Idioma extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 100)
    private String nome;

    @Column(name = "codigo", nullable = false, unique = true, length = 10)
    private String codigo; // Ex: "pt-BR", "en-US"

    @Column(name = "nivel", length = 50)
    private String nivel; // Mapeia o enum NivelIdioma como String
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_local_atuacao")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class LocalAtuacao extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 255)
    private String nome;
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import br.com.legalconnect.commom.model.Pessoa;
import jakarta.persistence.CascadeType;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_profissional")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Profissional extends Pessoa {

    @Column(name = "numero_oab", nullable = false, unique = true, length = 50)
    private String numeroOab;

    @Column(name = "status_profissional", nullable = false, length = 50)
    private String statusProfissional; // Mapeia o enum do domínio (StatusProfissional) como String

    @Column(name = "usa_marketplace", nullable = false)
    private Boolean usaMarketplace = false;

    @Column(name = "faz_parte_de_plano", nullable = false)
    private Boolean fazParteDePlano = false;

    @Column(name = "pessoa_id", nullable = false, unique = true)
    private UUID pessoaId; // Referência ao ID da Pessoa (do Person Service)

    @Column(name = "empresa_id")
    private UUID empresaId; // Referência ao ID da Empresa (do Company Service)

    @Column(name = "plano_id", nullable = false)
    private UUID planoId; // Referência ao ID do Plano (do Subscription Service)

    @Column(name = "tenant_id", nullable = false)
    private UUID tenantId; // Para isolamento de dados por tenant

    // Relacionamentos com entidades que residem no mesmo Professional Service
    // (infraestrutura)
    @OneToMany(mappedBy = "profissional", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Certificacao> certificacoes = new HashSet<>();

    @OneToMany(mappedBy = "profissional", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Documento> documentos = new HashSet<>();

    @OneToMany(mappedBy = "profissional", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<ExperienciaProfissional> experiencias = new HashSet<>();

    @OneToMany(mappedBy = "profissional", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<FormacaoAcademica> formacoes = new HashSet<>();

    // Tabela de junção para locais de atuação (muitos-para-muitos com IDs de Master
    // Data)
    // Se LocalAtuacao for um serviço separado, esta é a forma correta de
    // referenciar por ID.
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_profissional_local_atuacao", joinColumns = @JoinColumn(name = "profissional_id"))
    @Column(name = "local_atuacao_id", nullable = false)
    private Set<UUID> locaisAtuacaoIds = new HashSet<>();

    // Tabela de junção para áreas de atuação (muitos-para-muitos com IDs de Master
    // Data)
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_profissional_area_atuacao", joinColumns = @JoinColumn(name = "profissional_id"))
    @Column(name = "area_atuacao_id", nullable = false)
    private Set<UUID> areaAtuacaoIds = new HashSet<>();

    // Tabela de junção para idiomas (muitos-para-muitos com IDs de Master Data)
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_profissional_idioma", joinColumns = @JoinColumn(name = "profissional_id"))
    @Column(name = "idioma_id", nullable = false)
    private Set<UUID> idiomaIds = new HashSet<>();

    // Tabela de junção para tipos de atendimento (muitos-para-muitos com IDs de
    // Master Data)
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_profissional_tipo_atendimento", joinColumns = @JoinColumn(name = "profissional_id"))
    @Column(name = "tipo_atendimento_id", nullable = false)
    private Set<UUID> tipoAtendimentoIds = new HashSet<>();

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name = "tb_profissional_roles", joinColumns = @JoinColumn(name = "profissional_id"), inverseJoinColumns = @JoinColumn(name = "role_profissional_id"))
    private Set<RoleProfissional> roleProfissionals = new HashSet<>();
}
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import java.util.UUID;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_role_profissional")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class RoleProfissional extends BaseEntity {

    @Column(name = "name", nullable = false, unique = true, length = 50)
    private String name;

    @Column(name = "tenant_id", nullable = false)
    private UUID tenantId;
}

// --- Entidades de Dados Mestres (se gerenciadas localmente no Professional
// Service) ---
// NOTA: Se estas entidades residirem em um "Master Data Service" separado e o
// Professional Service
// apenas referenciar seus IDs, então estas classes de entidade não estariam
// aqui.
// Elas são incluídas assumindo que o Professional Service pode ter uma cópia
// local ou gerenciar
// essas entidades para seu próprio contexto.
```
```java
package br.com.legalconnect.advogado.domain.modal.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

@Entity
@Table(name = "tb_tipo_atendimento")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class TipoAtendimento extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 255)
    private String nome;
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.advogado.domain.modal.entity.AreaAtuacao;

@Repository
public interface AreaAtuacaoRepository extends JpaRepository<AreaAtuacao, UUID> {

    /**
     * Busca uma Área de Atuação pelo nome.
     *
     * @param nome O nome da área de atuação.
     * @return Um Optional contendo a Área de Atuação, se encontrada.
     */
    Optional<AreaAtuacao> findByNome(String nome);

    /**
     * 
     * Busca todas as Áreas de Atuação por uma lista de IDs.
     * 
     * @param ids Lista de IDs das áreas de atuação.
     * 
     * @return Uma lista de Áreas de Atuação.
     */
    List<AreaAtuacao> findAllByIdIn(List<UUID> ids);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.advogado.domain.modal.entity.Certificacao;

/**
 * Repositório para a entidade {@link Certificacao}.
 * Gerencia operações de persistência para as certificações de um profissional.
 */
@Repository
public interface CertificacaoRepository extends JpaRepository<Certificacao, UUID> {

    /**
     * Busca uma Certificação pelo seu ID e pelo ID do Profissional associado.
     *
     * @param id             O ID da certificação.
     * @param profissionalId O ID do profissional.
     * @return Um Optional contendo a Certificação, se encontrada.
     */
    Optional<Certificacao> findByIdAndProfissionalId(UUID id, UUID profissionalId);

    /**
     * Busca todas as Certificações de um Profissional.
     *
     * @param profissionalId O ID do profissional.
     * @return Uma lista de Certificações.
     */
    List<Certificacao> findAllByProfissionalId(UUID profissionalId);

    /**
     * Deleta uma Certificação pelo seu ID e pelo ID do Profissional.
     *
     * @param id             O ID da certificação.
     * @param profissionalId O ID do profissional.
     */
    void deleteByIdAndProfissionalId(UUID id, UUID profissionalId);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import br.com.legalconnect.advogado.domain.modal.entity.Documento;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * Repositório para a entidade {@link Documento}.
 * Gerencia operações de persistência para os documentos de um profissional.
 */
@Repository
public interface DocumentoRepository extends JpaRepository<Documento, UUID> {

    /**
     * Busca um Documento pelo seu ID e pelo ID do Profissional associado.
     *
     * @param id O ID do documento.
     * @param profissionalId O ID do profissional.
     * @return Um Optional contendo o Documento, se encontrado.
     */
    Optional<Documento> findByIdAndProfissionalId(UUID id, UUID profissionalId);

    /**
     * Busca todos os Documentos de um Profissional.
     *
     * @param profissionalId O ID do profissional.
     * @return Uma lista de Documentos.
     */
    List<Documento> findAllByProfissionalId(UUID profissionalId);

    /**
     * Deleta um Documento pelo seu ID e pelo ID do Profissional.
     *
     * @param id O ID do documento.
     * @param profissionalId O ID do profissional.
     */
    void deleteByIdAndProfissionalId(UUID id, UUID profissionalId);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.advogado.domain.modal.entity.ExperienciaProfissional;

/**
 * Repositório para a entidade {@link ExperienciaProfissional}.
 * Gerencia operações de persistência para as experiências profissionais de um
 * profissional.
 * O método 'save' é automaticamente fornecido por JpaRepository, não deve ser
 * declarado explicitamente aqui com parâmetros extras.
 */
@Repository
public interface ExperienciaProfissionalRepository extends JpaRepository<ExperienciaProfissional, UUID> {

    /**
     * Busca uma Experiência Profissional pelo seu ID e pelo ID do Profissional
     * associado.
     *
     * @param id             O ID da experiência profissional.
     * @param profissionalId O ID do profissional.
     * @return Um Optional contendo a Experiência Profissional, se encontrada.
     */
    Optional<ExperienciaProfissional> findByIdAndProfissionalId(UUID id, UUID profissionalId);

    /**
     * Busca todas as Experiências Profissionais de um Profissional.
     *
     * @param profissionalId O ID do profissional.
     * @return Uma lista de Experiências Profissionais.
     */
    List<ExperienciaProfissional> findAllByProfissionalId(UUID profissionalId);

    /**
     * Deleta uma Experiência Profissional pelo seu ID e pelo ID do Profissional.
     *
     * @param id             O ID da experiência profissional.
     * @param profissionalId O ID do profissional.
     */
    void deleteByIdAndProfissionalId(UUID id, UUID profissionalId);

    // IMPORTANTE: NÃO HÁ MÉTODO 'save' EXPLICITAMENTE DECLARADO AQUI.
    // Ele é herdado de JpaRepository e tem a assinatura: S save(S entity);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.advogado.domain.modal.entity.ExperienciaProfissional;

@Repository
public interface ExperienciaRepository extends JpaRepository<ExperienciaProfissional, UUID> {

    // Busca uma Experiência Profissional pelo seu ID e pelo ID do Profissional.
    Optional<ExperienciaProfissional> findByIdAndProfissionalId(UUID id, UUID profissionalId);

    // Busca todas as Experiências Profissionais de um Profissional.
    List<ExperienciaProfissional> findAllByProfissionalId(UUID profissionalId);

    // Deleta uma Experiência Profissional pelo seu ID e pelo ID do Profissional.
    void deleteByIdAndProfissionalId(UUID id, UUID profissionalId);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import br.com.legalconnect.advogado.domain.modal.entity.FormacaoAcademica;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * Repositório para a entidade {@link FormacaoAcademica}.
 * Gerencia operações de persistência para as formações acadêmicas de um profissional.
 */
@Repository
public interface FormacaoAcademicaRepository extends JpaRepository<FormacaoAcademica, UUID> {

    /**
     * Busca uma Formação Acadêmica pelo seu ID e pelo ID do Profissional associado.
     *
     * @param id O ID da formação acadêmica.
     * @param profissionalId O ID do profissional.
     * @return Um Optional contendo a Formação Acadêmica, se encontrada.
     */
    Optional<FormacaoAcademica> findByIdAndProfissionalId(UUID id, UUID profissionalId);

    /**
     * Busca todas as Formações Acadêmicas de um Profissional.
     *
     * @param profissionalId O ID do profissional.
     * @return Uma lista de Formações Acadêmicas.
     */
    List<FormacaoAcademica> findAllByProfissionalId(UUID profissionalId);

    /**
     * Deleta uma Formação Acadêmica pelo seu ID e pelo ID do Profissional.
     *
     * @param id O ID da formação acadêmica.
     * @param profissionalId O ID do profissional.
     */
    void deleteByIdAndProfissionalId(UUID id, UUID profissionalId);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.advogado.domain.modal.entity.FormacaoAcademica;

@Repository
public interface FormacaoRepository extends JpaRepository<FormacaoAcademica, UUID> {

    // Busca uma Formação Acadêmica pelo seu ID e pelo ID do Profissional.
    Optional<FormacaoAcademica> findByIdAndProfissionalId(UUID id, UUID profissionalId);

    // Busca todas as Formações Acadêmicas de um Profissional.
    List<FormacaoAcademica> findAllByProfissionalId(UUID profissionalId);

    // Deleta uma Formação Acadêmica pelo seu ID e pelo ID do Profissional.
    void deleteByIdAndProfissionalId(UUID id, UUID profissionalId);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import br.com.legalconnect.advogado.domain.modal.entity.Idioma;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;
import java.util.List;

/**
 * Repositório para a entidade {@link Idioma}.
 * Gerencia operações de persistência para os idiomas disponíveis.
 */
@Repository
public interface IdiomaRepository extends JpaRepository<Idioma, UUID> {

    /**
     * Busca um Idioma pelo nome.
     *
     * @param nome O nome do idioma.
     * @return Um Optional contendo o Idioma, se encontrado.
     */
    Optional<Idioma> findByNome(String nome);

    /**
     * Busca todos os Idiomas por uma lista de IDs.
     * @param ids Lista de IDs dos idiomas.
     * @return Uma lista de Idiomas.
     */
    List<Idioma> findAllByIdIn(List<UUID> ids);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import br.com.legalconnect.advogado.domain.modal.entity.LocalAtuacao;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;
import java.util.List;

/**
 * Repositório para a entidade {@link LocalAtuacao}.
 * Gerencia operações de persistência para os locais de atuação dos profissionais.
 */
@Repository
public interface LocalAtuacaoRepository extends JpaRepository<LocalAtuacao, UUID> {

    /**
     * Busca um Local de Atuação pelo nome.
     *
     * @param nome O nome do local de atuação.
     * @return Um Optional contendo o Local de Atuação, se encontrado.
     */
    Optional<LocalAtuacao> findByNome(String nome);

    /**
     * Busca todos os Locais de Atuação por uma lista de IDs.
     * @param ids Lista de IDs dos locais de atuação.
     * @return Uma lista de Locais de Atuação.
     */
    List<LocalAtuacao> findAllByIdIn(List<UUID> ids);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable; // Importar Pageable
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.advogado.domain.modal.entity.Profissional;

/**
 * Repositório para a entidade {@link Profissional}.
 * Gerencia operações de persistência para os profissionais (advogados).
 */
@Repository
public interface ProfissionalRepository extends JpaRepository<Profissional, UUID> {

    /**
     * Busca um Profissional pelo número da OAB.
     *
     * @param numeroOab O número da OAB do profissional.
     * @return Um Optional contendo o Profissional, se encontrado.
     */
    Optional<Profissional> findByNumeroOab(String numeroOab);

    /**
     * Busca todos os Profissionais associados a um determinado tenant.
     *
     * @param tenantId O ID do tenant.
     * @return Uma lista de Profissionais.
     */
    Page<Profissional> findAllByTenantId(UUID tenantId, Pageable pageable);

    /**
     * Verifica se um Profissional existe pelo número da OAB.
     * Regra de Negócio: Garante a unicidade do número da OAB.
     *
     * @param numeroOab O número da OAB a ser verificado.
     * @return true se um Profissional com a OAB já existe, false caso contrário.
     */
    boolean existsByNumeroOab(String numeroOab);

    /**
     * Verifica se um Profissional existe pelo ID da pessoa associada.
     *
     * @param pessoaId O ID da pessoa.
     * @return true se um Profissional com o ID da pessoa existe, false caso
     *         contrário.
     */
    boolean existsByPessoaId(UUID pessoaId);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import br.com.legalconnect.advogado.domain.modal.entity.RoleProfissional;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;
import java.util.List;

/**
 * Repositório para a entidade {@link RoleProfissional}.
 * Gerencia operações de persistência para os papéis (roles) dos profissionais.
 */
@Repository
public interface RoleProfissionalRepository extends JpaRepository<RoleProfissional, UUID> {

    /**
     * Busca uma Role de Profissional pelo nome.
     *
     * @param name O nome da role.
     * @return Um Optional contendo a RoleProfissional, se encontrada.
     */
    Optional<RoleProfissional> findByName(String name);

    /**
     * Busca todas as Roles de Profissional associadas a um determinado tenant.
     *
     * @param tenantId O ID do tenant.
     * @return Uma lista de RoleProfissional.
     */
    List<RoleProfissional> findAllByTenantId(UUID tenantId);
}
```
```java
package br.com.legalconnect.advogado.domain.repository;

import br.com.legalconnect.advogado.domain.modal.entity.TipoAtendimento;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;
import java.util.List;

/**
 * Repositório para a entidade {@link TipoAtendimento}.
 * Gerencia operações de persistência para os tipos de atendimento disponíveis.
 */
@Repository
public interface TipoAtendimentoRepository extends JpaRepository<TipoAtendimento, UUID> {

    /**
     * Busca um Tipo de Atendimento pelo nome.
     *
     * @param nome O nome do tipo de atendimento.
     * @return Um Optional contendo o TipoAtendimento, se encontrado.
     */
    Optional<TipoAtendimento> findByNome(String nome);

    /**
     * Busca todos os Tipos de Atendimento por uma lista de IDs.
     * @param ids Lista de IDs dos tipos de atendimento.
     * @return Uma lista de Tipos de Atendimento.
     */
    List<TipoAtendimento> findAllByIdIn(List<UUID> ids);
}
```
```java
package br.com.legalconnect.commom.dto.request; // Assumindo um pacote common.dto.request para entidades comuns

import br.com.legalconnect.commom.model.Endereco.TipoEndereco; // Importar o enum TipoEndereco da entidade Endereco
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para requisição de criação ou atualização de Endereço.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EnderecoRequestDTO {
    // ID é opcional para atualização (usado em PUT/PATCH)
    private String id; // Pode ser UUID ou String, dependendo da BaseEntity

    @NotBlank(message = "O logradouro é obrigatório.")
    @Size(max = 255, message = "O logradouro deve ter no máximo 255 caracteres.")
    private String logradouro;

    @NotBlank(message = "O número é obrigatório.")
    @Size(max = 20, message = "O número deve ter no máximo 20 caracteres.")
    private String numero;

    @Size(max = 255, message = "O complemento deve ter no máximo 255 caracteres.")
    private String complemento;

    @NotBlank(message = "O bairro é obrigatório.")
    @Size(max = 100, message = "O bairro deve ter no máximo 100 caracteres.")
    private String bairro;

    @NotBlank(message = "A cidade é obrigatória.")
    @Size(max = 100, message = "A cidade deve ter no máximo 100 caracteres.")
    private String cidade;

    @NotBlank(message = "O estado é obrigatório.")
    @Size(max = 2, message = "O estado deve ter 2 caracteres (UF).")
    private String estado;

    @NotBlank(message = "O CEP é obrigatório.")
    @Size(max = 9, message = "O CEP deve ter no máximo 9 caracteres.") // Com ou sem máscara
    private String cep;

    @Size(max = 50, message = "O país deve ter no máximo 50 caracteres.")
    private String pais; // Valor padrão "Brasil" pode ser setado no serviço

    @NotNull(message = "O tipo de endereço é obrigatório.")
    private TipoEndereco tipoEndereco; // Usando o enum da entidade
}
```
```java
package br.com.legalconnect.commom.dto.request;

import java.time.LocalDate;
import java.util.List;
import java.util.UUID;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * DTO para requisição de criação ou atualização de uma Pessoa.
 * Inclui campos de User e uma lista de Endereços.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class PessoaRequestDTO {
    // ID é opcional para atualização (usado em PUT/PATCH para identificar a Pessoa)
    private UUID id;

    @Valid
    @NotNull(message = "As informações do usuário são obrigatórias.")
    private UserRequestDTO usuario; // Informações de login e contato do usuário

    @NotBlank(message = "O nome completo da pessoa é obrigatório.")
    @Size(max = 255, message = "O nome completo da pessoa deve ter no máximo 255 caracteres.")
    private String nomeCompleto;

    @NotBlank(message = "O CPF da pessoa é obrigatório.")
    @Size(min = 11, max = 14, message = "O CPF deve ter entre 11 e 14 caracteres (com ou sem formatação).")
    @Pattern(regexp = "^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$|^\\d{11}$", message = "Formato de CPF inválido. Use '000.000.000-00' ou apenas dígitos.")
    private String cpf;

    @NotNull(message = "A data de nascimento da pessoa é obrigatória.")
    @PastOrPresent(message = "A data de nascimento não pode ser uma data futura.")
    private LocalDate dataNascimento;

    @Size(max = 10, message = "A lista de telefones não pode exceder 10 itens.")
    private List<String> telefones;

    @Valid
    private List<EnderecoRequestDTO> enderecos; // Lista de endereços associados à pessoa
}
```
```java
package br.com.legalconnect.commom.dto.request;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para requisição de criação ou atualização de um usuário.
 *
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserRequestDTO {
    // ID é opcional para atualização (usado em PUT/PATCH)
    private String id;

    @NotBlank(message = "O e-mail do usuário é obrigatório.")
    @Email(message = "Formato de e-mail inválido.")
    @Size(max = 255, message = "O e-mail do usuário deve ter no máximo 255 caracteres.")
    private String email;

    @Size(min = 8, max = 255, message = "A senha do usuário deve ter no mínimo 8 caracteres.")
    // @NotBlank(message = "A senha do usuário é obrigatória.") // Pode ser @NotBlank apenas na criação
    private String senha; // Em requisições, a senha é enviada em texto limpo para ser hashed no backend

    @Size(max = 255, message = "O nome completo do usuário deve ter no máximo 255 caracteres.")
    private String nomeCompleto; // Campo duplicado com Pessoa, se Pessoa for a principal

    @Size(max = 14, message = "O CPF deve ter no máximo 14 caracteres.")
    private String cpf; // Campo duplicado com Pessoa, se Pessoa for a principal

    @Size(max = 20, message = "O telefone do usuário deve ter no máximo 20 caracteres.")
    private String telefone; // Campo duplicado com Pessoa, se Pessoa for a principal

    private String fotoUrl; // URL para a foto de perfil
}
```
```java
package br.com.legalconnect.commom.dto.response; // Assumindo um pacote common.dto.response para entidades comuns

import java.util.UUID;

import br.com.legalconnect.commom.model.Endereco.TipoEndereco; // Importar o enum TipoEndereco da entidade Endereco
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de Endereço.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EnderecoResponseDTO {
    private UUID id;

    private String logradouro;

    private String numero;

    private String complemento;

    private String bairro;

    private String cidade;

    private String estado;

    private String cep;

    private String pais;

    private TipoEndereco tipoEndereco;
}
```
```java
package br.com.legalconnect.commom.dto.response;

import java.time.LocalDate;
import java.util.List;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de uma Pessoa.
 * Inclui informações de User e uma lista de Endereços.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class PessoaResponseDTO {
    private UUID id;

    private UserResponseDTO usuario;

    private String nomeCompleto;

    private String cpf;

    private LocalDate dataNascimento;

    private List<String> telefones;

    private List<EnderecoResponseDTO> enderecos;
}
```
```java
package br.com.legalconnect.commom.dto.response;

import java.util.UUID;

import br.com.legalconnect.commom.model.User.UserStatus; // Importar o enum UserStatus da entidade User
import br.com.legalconnect.commom.model.User.UserType; // Importar o enum UserType da entidade User
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO para resposta de um usuário.
 * Não inclui a senha hash por questões de segurança.
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserResponseDTO {
    private UUID id;
    private String nomeCompleto;
    private String email;
    private String cpf;
    private String telefone;
    private String fotoUrl;
    private UserType userType; // Tipo de usuário (CLIENTE, ADVOGADO, etc.)
    private UserStatus userStatus; // Status da conta do usuário
}
```
```java
package br.com.legalconnect.commom.mapper;

import java.util.UUID;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.Named;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.commom.dto.request.EnderecoRequestDTO;
import br.com.legalconnect.commom.dto.response.EnderecoResponseDTO;
import br.com.legalconnect.commom.model.Endereco;

/**
 * Mapper MapStruct para a entidade Endereco e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface EnderecoMapper {
    EnderecoMapper INSTANCE = Mappers.getMapper(EnderecoMapper.class);

    /**
     * Mapeia um EnderecoRequestDTO para uma entidade Endereco.
     * Os campos 'pessoa' e 'empresa' devem ser setados no serviço.
     *
     * @param dto O DTO de requisição.
     * @return A entidade Endereco correspondente.
     */
    @Mapping(target = "pessoa", ignore = true)
    // @Mapping(target = "empresa", ignore = true) // Descomente se Empresa for
    // relevante e existir
    @Mapping(target = "id", source = "id", qualifiedByName = "mapStringToUuid")
    Endereco toEntity(EnderecoRequestDTO dto);

    /**
     * Mapeia uma entidade Endereco para um EnderecoResponseDTO.
     *
     * @param entity A entidade Endereco.
     * @return O DTO de resposta correspondente.
     */
    @Mapping(target = "id", source = "id", qualifiedByName = "mapUuidToString")
    EnderecoResponseDTO toResponseDTO(Endereco entity);

    /**
     * Atualiza uma entidade Endereco existente com os dados de um
     * EnderecoRequestDTO.
     * O campo 'pessoa' e 'empresa' não são atualizados via DTO. O ID não deve ser
     * atualizado.
     *
     * @param dto    O DTO de requisição com os dados para atualização.
     * @param entity A entidade Endereco a ser atualizada.
     */
    @Mapping(target = "id", ignore = true) // ID não deve ser atualizado pelo DTO
    @Mapping(target = "pessoa", ignore = true)
    // @Mapping(target = "empresa", ignore = true)
    void updateEntityFromDto(EnderecoRequestDTO dto, @MappingTarget Endereco entity);

    /**
     * Converte uma String (ID do DTO) para um UUID (ID da Entidade).
     * 
     * @param id A string representando o UUID.
     * @return O objeto UUID.
     */
    @Named("mapStringToUuid")
    default UUID mapStringToUuid(String id) {
        return id != null ? UUID.fromString(id) : null;
    }

    /**
     * Converte um UUID (ID da Entidade) para uma String (ID do DTO).
     * 
     * @param id O objeto UUID.
     * @return A string representando o UUID.
     */
    @Named("mapUuidToString")
    default String mapUuidToString(UUID id) {
        return id != null ? id.toString() : null;
    }
}
```
```java
package br.com.legalconnect.commom.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.commom.dto.request.PessoaRequestDTO;
import br.com.legalconnect.commom.dto.response.PessoaResponseDTO;
import br.com.legalconnect.commom.model.Pessoa;

/**
 * Mapper MapStruct para a entidade Pessoa e seus DTOs.
 * Utiliza UserMapper e EnderecoMapper para mapeamentos aninhados.
 */
@Mapper(componentModel = "spring", uses = { UserMapper.class, EnderecoMapper.class })
public interface PessoaMapper {
    PessoaMapper INSTANCE = Mappers.getMapper(PessoaMapper.class);

    /**
     * Mapeia um PessoaRequestDTO para uma entidade Pessoa.
     * Os campos 'usuario' e 'enderecos' serão mapeados pelos mappers especificados
     * em 'uses'.
     * A conversão de List para Set para 'telefones' é feita automaticamente pelo
     * MapStruct.
     *
     * @param dto O DTO de requisição.
     * @return A entidade Pessoa correspondente.
     */
    // @Mapping(target = "id", ignore = true) // ID da Pessoa será gerado na criação
    // Pessoa toEntity(PessoaRequestDTO dto);

    /**
     * Mapeia uma entidade Pessoa para um PessoaResponseDTO.
     *
     * @param entity A entidade Pessoa.
     * @return O DTO de resposta correspondente.
     */
    PessoaResponseDTO toResponseDTO(Pessoa entity);

    /**
     * Atualiza uma entidade Pessoa existente com os dados de um PessoaRequestDTO.
     * O 'id' da Pessoa não deve ser atualizado.
     * A atualização de 'usuario' e 'enderecos' deve ser orquestrada no serviço,
     * pois o MapStruct pode não ter o contexto para atualizar entidades aninhadas
     * existentes.
     *
     * @param dto    O DTO de requisição com os dados para atualização.
     * @param entity A entidade Pessoa a ser atualizada.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "usuario", ignore = true) // O serviço deve gerenciar a atualização do User associado
    @Mapping(target = "enderecos", ignore = true) // O serviço deve gerenciar a atualização dos Enderecos associados
    @Mapping(source = "telefones", target = "telefones") // Converte List<String> para Set<String>
    void updateEntityFromDto(PessoaRequestDTO dto, @MappingTarget Pessoa entity);
}
```
```java
package br.com.legalconnect.commom.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.commom.dto.request.UserRequestDTO;
import br.com.legalconnect.commom.dto.response.UserResponseDTO;
import br.com.legalconnect.commom.model.User;

/**
 * Mapper MapStruct para a entidade User e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface UserMapper {
    UserMapper INSTANCE = Mappers.getMapper(UserMapper.class);

    /**
     * Mapeia um UserRequestDTO para uma entidade User.
     * A senha do DTO é mapeada para 'senhaHash' na entidade.
     * 'userType' e 'userStatus' são definidos pela lógica de negócio e ignorados
     * aqui.
     *
     * @param dto O DTO de requisição.
     * @return A entidade User correspondente.
     */
    @Mapping(source = "senha", target = "senhaHash") // Mapeia a senha do DTO para senhaHash na entidade
    // @Mapping(target = "userType", ignore = true) // Definido pela lógica de
    // negócio
    // @Mapping(target = "userStatus", ignore = true) // Definido pela lógica de
    // negócio
    User toEntity(UserRequestDTO dto);

    /**
     * Mapeia uma entidade User para um UserResponseDTO.
     * 'senhaHash' é ignorado na resposta por segurança.
     *
     * @param entity A entidade User.
     * @return O DTO de resposta correspondente.
     */
    // @Mapping(target = "senha", ignore = true) // 'senhaHash' é um campo interno
    // da entidade, não deve ser exposto no DTO de resposta
    UserResponseDTO toResponseDTO(User entity);

    /**
     * Atualiza uma entidade User existente com os dados de um UserRequestDTO.
     * A senha do DTO é mapeada para 'senhaHash' na entidade.
     * 'userType' e 'userStatus' não são atualizados via DTO.
     *
     * @param dto    O DTO de requisição com os dados para atualização.
     * @param entity A entidade User a ser atualizada.
     */
    @Mapping(target = "id", ignore = true) // ID não deve ser atualizado pelo DTO
    @Mapping(source = "senha", target = "senhaHash")
    // @Mapping(target = "userType", ignore = true)
    // @Mapping(target = "userStatus", ignore = true)
    void updateEntityFromDto(UserRequestDTO dto, @MappingTarget User entity);
}
```
```java
package br.com.legalconnect.commom.model;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Endereco
 * @brief Entidade que representa um endereço detalhado.
 *        Pode ser associada a Pessoas ou Empresas.
 *        Mapeada para a tabela 'tb_endereco'.
 */
@Entity
@Table(name = "tb_endereco")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Endereco extends BaseEntity {

    @Column(name = "logradouro", nullable = false, length = 255)
    private String logradouro; // Nome da rua, avenida, etc.

    @Column(name = "numero", nullable = false, length = 20)
    private String numero; // Número do imóvel

    @Column(name = "complemento", length = 255)
    private String complemento; // Complemento (ex: apto, sala, bloco)

    @Column(name = "bairro", nullable = false, length = 100)
    private String bairro; // Bairro

    @Column(name = "cidade", nullable = false, length = 100)
    private String cidade; // Cidade

    @Column(name = "estado", nullable = false, length = 2)
    private String estado; // Estado (UF)

    @Column(name = "cep", nullable = false, length = 9) // CEP com máscara
    private String cep; // Código de Endereçamento Postal

    @Column(name = "pais", nullable = false, length = 50)
    private String pais = "Brasil"; // País (valor padrão "Brasil")

    @Enumerated(EnumType.STRING)
    @Column(name = "tipo_endereco", nullable = false, length = 50)
    private TipoEndereco tipoEndereco; // Tipo de endereço (ex: RESIDENCIAL, COMERCIAL, ESCRITORIO)

    /**
     * @brief Relacionamento muitos-para-um com a entidade Pessoa (opcional).
     *        Um endereço pode pertencer a uma pessoa.
     *        Somente um dos campos (pessoa ou empresa) deve ser preenchido.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "pessoa_id")
    private Pessoa pessoa;

    /**
     * @brief Relacionamento muitos-para-um com a entidade Empresa (opcional).
     *        Um endereço pode pertencer a uma empresa.
     *        Somente um dos campos (pessoa ou empresa) deve ser preenchido.
     */
    // @ManyToOne(fetch = FetchType.LAZY)
    // @JoinColumn(name = "empresa_id")
    // private Empresa empresa;

    /**
     * @enum TipoEndereco
     * @brief Enumeração para representar o tipo de endereço.
     */
    public enum TipoEndereco {
        RESIDENCIAL,
        COMERCIAL,
        ESCRITORIO,
        COBRANCA,
        ENTREGA,
        OUTRO
    }
}
```
```java
package br.com.legalconnect.commom.model;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.CascadeType;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.Inheritance;
import jakarta.persistence.InheritanceType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Pessoa
 * @brief Entidade base abstrata para todas as pessoas no sistema (Profissional,
 *        Cliente, Administrador).
 *        Contém dados comuns a todos os tipos de pessoas e um relacionamento
 *        OneToOne com a entidade User.
 *        Utiliza estratégia de herança JOINED para mapear subclasses em tabelas
 *        separadas.
 */
@Entity
@Table(name = "tb_pessoa")
@Inheritance(strategy = InheritanceType.JOINED)
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Pessoa extends BaseEntity {

    /**
     * @brief Relacionamento um-para-um com a entidade User.
     *        Este lado é o dono do relacionamento, e a coluna 'user_id' será criada
     *        em 'tb_pessoa'.
     *        O CascadeType.ALL garante que operações no User (como deleção) se
     *        propaguem para Pessoa.
     */
    @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinColumn(name = "user_id", referencedColumnName = "id", nullable = false, unique = true)
    private User usuario; // O usuário associado a esta pessoa

    @Column(name = "nome_completo", nullable = false, length = 255)
    private String nomeCompleto; // Nome completo da pessoa

    @Column(name = "cpf", nullable = false, unique = true, length = 14)
    private String cpf; // Número do Cadastro de Pessoa Física (CPF), único por pessoa

    @Column(name = "data_nascimento")
    private LocalDate dataNascimento; // Data de nascimento da pessoa

    /**
     * @brief Relacionamento um-para-muitos com a entidade Endereco.
     *        Uma pessoa pode ter múltiplos endereços (residencial, comercial,
     *        etc.).
     *        CascadeType.ALL garante que operações nos Enderecos se propaguem para
     *        Pessoa.
     *        mappedBy indica que o relacionamento é gerenciado pelo campo 'pessoa'
     *        na entidade Endereco.
     */
    @OneToMany(mappedBy = "pessoa", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Endereco> enderecos = new HashSet<>(); // Conjunto de endereços da pessoa

    /**
     * @brief Coleção de strings para armazenar múltiplos números de telefone.
     *        Será mapeada para uma tabela separada 'tb_pessoa_telefones'.
     */
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_pessoa_telefones", joinColumns = @JoinColumn(name = "pessoa_id"))
    @Column(name = "numero_telefone", length = 20)
    private Set<String> telefones = new HashSet<>();
}
```
```java
package br.com.legalconnect.commom.model;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class User
 * @brief Entidade base para todos os usuários (clientes, advogados,
 *        administradores de tenant, etc.).
 *
 *        Esta entidade representa um usuário na plataforma e está associada a
 *        um tenant
 *        específico. A tabela de usuário reside nos schemas de tenant.
 */
@Entity
@Table(name = "tb_user") // A tabela tb_user agora reside no schema do tenant
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class User extends BaseEntity { // Implementa UserDetails

    @Column(name = "nome_completo", nullable = false, length = 255)
    private String nomeCompleto; // Nome completo do usuário

    @Column(name = "email", nullable = false, unique = true, length = 255)
    private String email; // Endereço de e-mail principal do usuário (único por schema de tenant)

    @Column(name = "cpf", nullable = false, unique = true, length = 14)
    private String cpf; // Número do Cadastro de Pessoa Física do usuário (único por schema de tenant)

    @Column(name = "telefone", length = 20)
    private String telefone; // Número de telefone de contato do usuário

    @Column(name = "senha_hash", nullable = false, columnDefinition = "TEXT")
    private String senhaHash; // Representação criptografada (hashed) da senha do usuário

    @Column(name = "foto_url", columnDefinition = "TEXT")
    private String fotoUrl; // URL da foto de perfil do usuário no S3

    /**
     * @enum UserType
     * @brief Enumeração para categorizar o tipo principal de um usuário.
     *        Define se o usuário é um cliente, advogado ou administrador da
     *        plataforma.
     */
    public enum UserType {
        CLIENTE, // Usuário final que busca serviços jurídicos
        ADVOGADO, // Profissional do direito que oferece serviços
        PLATAFORMA_ADMIN, // Administrador da plataforma com privilégios totais
        SOCIO
    }

    /**
     * @enum UserStatus
     * @brief Enumeração para representar o status atual da conta de um usuário.
     *        Define o estado operacional da conta do usuário na plataforma.
     */
    public enum UserStatus {
        ACTIVE, INACTIVE, PENDING_APPROVAL, REJECTED, PENDING
    }

    // --- Implementação de UserDetails ---

}
```
```java
package br.com.legalconnect.commom.repository;

import br.com.legalconnect.commom.model.Pessoa;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;

/**
 * Repositório para a entidade {@link Pessoa}.
 * Gerencia operações de persistência para informações de pessoas no sistema.
 */
@Repository
public interface PessoaRepository extends JpaRepository<Pessoa, UUID> {

    /**
     * Verifica se existe uma Pessoa com o CPF fornecido.
     * Regra de Negócio: Garante a unicidade do CPF no sistema.
     *
     * @param cpf O CPF a ser verificado.
     * @return true se uma Pessoa com o CPF já existe, false caso contrário.
     */
    boolean existsByCpf(String cpf);

    /**
     * Busca uma Pessoa pelo ID do usuário associado.
     *
     * @param userId O ID do usuário.
     * @return Um Optional contendo a Pessoa, se encontrada.
     */
    Optional<Pessoa> findByUsuarioId(UUID userId);

    /**
     * Busca uma Pessoa pelo CPF.
     *
     * @param cpf O CPF da Pessoa.
     * @return Um Optional contendo a Pessoa, se encontrada.
     */
    Optional<Pessoa> findByCpf(String cpf);
}
```
```java
package br.com.legalconnect.commom.repository;

import br.com.legalconnect.commom.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;

/**
 * Repositório para a entidade {@link User}.
 * Gerencia operações de persistência para informações de usuários no sistema.
 */
@Repository
public interface UserRepository extends JpaRepository<User, UUID> {

    /**
     * Busca um usuário pelo seu endereço de e-mail.
     * Regra de Negócio: O e-mail é único para cada usuário dentro de um tenant.
     *
     * @param email O endereço de e-mail do usuário.
     * @return Um Optional contendo o User, se encontrado.
     */
    Optional<User> findByEmail(String email);

    /**
     * Verifica se um usuário com o endereço de e-mail fornecido já existe.
     * Regra de Negócio: Garante a unicidade do e-mail no sistema.
     *
     * @param email O endereço de e-mail a ser verificado.
     * @return true se um usuário com o e-mail já existe, false caso contrário.
     */
    boolean existsByEmail(String email);
}
```
```java
package br.com.legalconnect.commom.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

/**
 * Serviço simulado para envio de e-mails.
 * Em um ambiente real, esta classe conteria a lógica de comunicação com um provedor de e-mails
 * como SendGrid, Amazon SES, ou o serviço de e-mail do Spring Boot.
 */
@Service
public class EmailService {

    private static final Logger log = LoggerFactory.getLogger(EmailService.class);

    /**
     * Simula o envio de um e-mail de ativação de conta.
     *
     * @param toEmail O endereço de e-mail do destinatário.
     * @param activationLink O link de ativação da conta.
     */
    public void sendActivationEmail(String toEmail, String activationLink) {
        log.info("Simulando envio de e-mail de ativação para: {}", toEmail);
        log.info("Link de Ativação: {}", activationLink);
        // Lógica real de envio de e-mail seria aqui, por exemplo:
        // MimeMessage message = mailSender.createMimeMessage();
        // MimeMessageHelper helper = new MimeMessageHelper(message, true);
        // helper.setTo(toEmail);
        // helper.setSubject("Ative sua conta na LegalConnect!");
        // helper.setText("Olá! Clique no link para ativar sua conta: " + activationLink, true);
        // mailSender.send(message);
        log.info("E-mail de ativação simulado enviado com sucesso.");
    }

    /**
     * Simula o envio de um e-mail de confirmação de agendamento.
     *
     * @param toEmail O endereço de e-mail do destinatário.
     * @param details Detalhes do agendamento.
     */
    public void sendAppointmentConfirmationEmail(String toEmail, String details) {
        log.info("Simulando envio de e-mail de confirmação de agendamento para: {}", toEmail);
        log.info("Detalhes do Agendamento: {}", details);
        log.info("E-mail de confirmação de agendamento simulado enviado com sucesso.");
    }

    // Outros métodos de envio de e-mail podem ser adicionados conforme a necessidade
}
```
```java
package br.com.legalconnect.commom.service;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.advogado.domain.modal.entity.LocalAtuacao;
import br.com.legalconnect.commom.dto.request.PessoaRequestDTO;
import br.com.legalconnect.commom.dto.request.UserRequestDTO;
import br.com.legalconnect.commom.dto.response.PessoaResponseDTO;
import br.com.legalconnect.commom.mapper.PessoaMapper;
import br.com.legalconnect.commom.mapper.UserMapper;
import br.com.legalconnect.commom.model.Endereco;
import br.com.legalconnect.commom.model.Pessoa;
import br.com.legalconnect.commom.model.User;
import br.com.legalconnect.commom.repository.PessoaRepository; // Assumindo a existência de PessoaRepository
import br.com.legalconnect.commom.repository.UserRepository; // Assumindo a existência de UserRepository
import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import jakarta.transaction.Transactional;

/**
 * Serviço responsável pela gestão das entidades Pessoa e User.
 * Centraliza a lógica de negócio para criação, atualização e busca de Pessoas
 * e seus usuários associados, incluindo validações de unicidade e criptografia
 * de senha.
 */
@Service
public class PessoaService {

    private final PessoaRepository pessoaRepository;
    private final UserRepository userRepository;
    private final PessoaMapper pessoaMapper;
    private final UserMapper userMapper;
    // Assumindo um EnderecoMapper se EnderecoRequestDTO for mapeado para Endereco
    // aqui
    // private final EnderecoMapper enderecoMapper;

    @Autowired
    public PessoaService(PessoaRepository pessoaRepository, UserRepository userRepository,
            PessoaMapper pessoaMapper, UserMapper userMapper) {
        this.pessoaRepository = pessoaRepository;
        this.userRepository = userRepository;
        this.pessoaMapper = pessoaMapper;
        this.userMapper = userMapper;
    }

    /**
     * Cria uma nova Pessoa e seu User associado.
     * Regras de Negócio:
     * - Garante que o CPF e o e-mail do usuário sejam únicos no sistema.
     * - Criptografa a senha antes de salvar.
     * - Define o status inicial do usuário como PENDING para aguardar ativação.
     *
     * @param pessoaRequestDTO DTO com os dados da Pessoa e do User.
     * @return DTO da Pessoa criada.
     * @throws BusinessException se o CPF ou e-mail já estiverem cadastrados.
     */
    @Transactional
    public Pessoa createPessoa(PessoaRequestDTO pessoaRequestDTO) {
        // Regra de Negócio: Validar unicidade de CPF
        if (pessoaRepository.existsByCpf(pessoaRequestDTO.getCpf())) {
            throw new BusinessException(ErrorCode.CPF_DUPLICADO, HttpStatus.CONFLICT, pessoaRequestDTO.getCpf());
        }

        // Regra de Negócio: Validar unicidade de e-mail para o usuário
        if (userRepository.existsByEmail(pessoaRequestDTO.getUsuario().getEmail())) {
            throw new BusinessException(ErrorCode.EMAIL_DUPLICADO, HttpStatus.CONFLICT,
                    pessoaRequestDTO.getUsuario().getEmail());
        }

        // Cria e criptografa o usuário

        // Persiste o usuário
        var newUser = new User();
        newUser.setId(UUID.fromString(pessoaRequestDTO.getUsuario().getId()));

        // Cria a Pessoa e associa o usuário
        Pessoa newPessoa = Pessoa.builder()
                .usuario(newUser)
                .nomeCompleto(pessoaRequestDTO.getNomeCompleto())
                .cpf(pessoaRequestDTO.getCpf())
                .dataNascimento(pessoaRequestDTO.getDataNascimento())
                .telefones(new HashSet<>(pessoaRequestDTO.getTelefones()))
                .build();

        // Adiciona endereços
        if (pessoaRequestDTO.getEnderecos() != null && !pessoaRequestDTO.getEnderecos().isEmpty()) {
            Set<Endereco> enderecos = pessoaRequestDTO.getEnderecos().stream()
                    .map(dto -> {
                        Endereco endereco = new Endereco(); // Ou use enderecoMapper.toEntity(dto) se existir
                        endereco.setLogradouro(dto.getLogradouro());
                        endereco.setNumero(dto.getNumero());
                        endereco.setComplemento(dto.getComplemento());
                        endereco.setBairro(dto.getBairro());
                        endereco.setCidade(dto.getCidade());
                        endereco.setEstado(dto.getEstado());
                        endereco.setCep(dto.getCep());
                        endereco.setPais(dto.getPais() != null ? dto.getPais() : "Brasil"); // Define país padrão
                        endereco.setTipoEndereco(dto.getTipoEndereco());
                        endereco.setPessoa(newPessoa); // Associa o endereço à Pessoa
                        return endereco;
                    }).collect(Collectors.toSet());
            newPessoa.setEnderecos(enderecos);
        }
        // Reassigning to make it effectively final
        return (pessoaRepository.save(newPessoa));
    }

    /**
     * Busca uma Pessoa pelo ID.
     *
     * @param id ID da Pessoa.
     * @return DTO da Pessoa encontrada.
     * @throws BusinessException se a Pessoa não for encontrada.
     */
    public PessoaResponseDTO findPessoaById(UUID id) {
        Pessoa pessoa = pessoaRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Pessoa não encontrada."));
        return pessoaMapper.toResponseDTO(pessoa);
    }

    /**
     * Atualiza os dados de uma Pessoa existente.
     * Regras de Negócio:
     * - Permite a atualização de informações da Pessoa e do User associado.
     * - Valida a unicidade do e-mail se for alterado.
     * - Não permite a alteração do CPF.
     *
     * @param id               ID da Pessoa a ser atualizada.
     * @param pessoaRequestDTO DTO com os dados para atualização.
     * @return DTO da Pessoa atualizada.
     * @throws BusinessException se a Pessoa não for encontrada, ou se o e-mail já
     *                           estiver cadastrado.
     */
    @Transactional
    public PessoaResponseDTO updatePessoa(UUID id, PessoaRequestDTO pessoaRequestDTO) {
        Pessoa existingPessoa = pessoaRepository.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                        "Pessoa não encontrada para atualização."));

        // Não permitir alteração de CPF (Regra de Negócio)
        if (!existingPessoa.getCpf().equals(pessoaRequestDTO.getCpf())) {
            throw new BusinessException(ErrorCode.DADOS_INVALIDOS, HttpStatus.BAD_REQUEST,
                    "Não é permitido alterar o CPF de uma pessoa existente.");
        }

        // Atualiza o User associado
        User existingUser = existingPessoa.getUsuario();
        UserRequestDTO userRequestDTO = pessoaRequestDTO.getUsuario();

        // Valida unicidade de e-mail se o e-mail for alterado
        if (!existingUser.getEmail().equals(userRequestDTO.getEmail())
                && userRepository.existsByEmail(userRequestDTO.getEmail())) {
            throw new BusinessException(ErrorCode.EMAIL_DUPLICADO, HttpStatus.CONFLICT, userRequestDTO.getEmail());
        }

        userMapper.updateEntityFromDto(userRequestDTO, existingUser);
        userRepository.save(existingUser); // Salva as alterações no User

        // Atualiza os dados da Pessoa (exceto usuário e endereços que são gerenciados
        // separadamente)
        pessoaMapper.updateEntityFromDto(pessoaRequestDTO, existingPessoa);

        // Lógica para gerenciar Endereços: Adicionar, Atualizar, Remover
        // Isso pode ser complexo e requer lógica manual, pois EndereçoRequestDTO tem ID
        // opcional
        // Para simplificar, vou redefinir os endereços ou adicionar lógica de
        // diferenciação.
        // Uma abordagem mais robusta seria comparar listas e fazer operações de CRUD
        // individualmente.
        if (pessoaRequestDTO.getEnderecos() != null) {
            // Removendo endereços que não estão no DTO
            existingPessoa.getEnderecos().removeIf(existingEndereco -> pessoaRequestDTO.getEnderecos().stream()
                    .noneMatch(dto -> dto.getId() != null && dto.getId().equals(existingEndereco.getId().toString())));

            // Adicionando ou atualizando endereços
            for (br.com.legalconnect.commom.dto.request.EnderecoRequestDTO dto : pessoaRequestDTO.getEnderecos()) {
                if (dto.getId() == null) {
                    // Novo endereço
                    Endereco newEndereco = new Endereco();
                    newEndereco.setLogradouro(dto.getLogradouro());
                    newEndereco.setNumero(dto.getNumero());
                    newEndereco.setComplemento(dto.getComplemento());
                    newEndereco.setBairro(dto.getBairro());
                    newEndereco.setCidade(dto.getCidade());
                    newEndereco.setEstado(dto.getEstado());
                    newEndereco.setCep(dto.getCep());
                    newEndereco.setPais(dto.getPais() != null ? dto.getPais() : "Brasil");
                    newEndereco.setTipoEndereco(dto.getTipoEndereco());
                    newEndereco.setPessoa(existingPessoa);
                    existingPessoa.getEnderecos().add(newEndereco);
                } else {
                    // Atualizar endereço existente
                    existingPessoa.getEnderecos().stream()
                            .filter(e -> e.getId().toString().equals(dto.getId()))
                            .findFirst()
                            .ifPresent(e -> {
                                e.setLogradouro(dto.getLogradouro());
                                e.setNumero(dto.getNumero());
                                e.setComplemento(dto.getComplemento());
                                e.setBairro(dto.getBairro());
                                e.setCidade(dto.getCidade());
                                e.setEstado(dto.getEstado());
                                e.setCep(dto.getCep());
                                e.setPais(dto.getPais() != null ? dto.getPais() : "Brasil");
                                e.setTipoEndereco(dto.getTipoEndereco());
                            });
                }
            }
        }

        existingPessoa = pessoaRepository.save(existingPessoa);
        return pessoaMapper.toResponseDTO(existingPessoa);
    }

    /**
     * Deleta uma Pessoa pelo ID.
     * Regras de Negócio:
     * - Também deleta o User associado devido ao CascadeType.ALL na Pessoa.
     *
     * @param id ID da Pessoa a ser deletada.
     * @throws BusinessException se a Pessoa não for encontrada.
     */
    @Transactional
    public void deletePessoa(UUID id) {
        if (!pessoaRepository.existsById(id)) {
            throw new BusinessException(ErrorCode.ENTIDADE_NAO_ENCONTRADA, HttpStatus.NOT_FOUND,
                    "Pessoa não encontrada para deleção.");
        }
        pessoaRepository.deleteById(id);
    }

    public Optional<LocalAtuacao> findPessoaByCpf(String cpf) {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'findPessoaByCpf'");
    }

    public Optional<LocalAtuacao> findPessoaByEmail(String email) {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'findPessoaByEmail'");
    }
}
```
```java
package br.com.legalconnect.commom.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;

/**
 * Serviço de integração simulada com AWS S3 para upload e deleção de arquivos.
 * Em um ambiente real, esta classe conteria a lógica de comunicação com a AWS
 * SDK.
 */
@Service
public class S3Service {

    private static final Logger log = LoggerFactory.getLogger(S3Service.class);
    private static final String MOCK_S3_BASE_URL = "https://mock-s3-bucket.s3.amazonaws.com/";

    /**
     * Simula o upload de um arquivo para o S3.
     *
     * @param fileBytes Os bytes do arquivo.
     * @param key       A chave/caminho do arquivo no bucket S3.
     * @param mimeType  O tipo MIME do arquivo.
     * @return A URL pública do arquivo no S3.
     * @throws BusinessException se ocorrer um erro durante o "upload" simulado.
     */
    public String uploadFile(byte[] fileBytes, String key, String mimeType) {
        if (fileBytes == null || fileBytes.length == 0) {
            throw new BusinessException(ErrorCode.DOCUMENT_UPLOAD_FAILED, HttpStatus.BAD_REQUEST,
                    "O conteúdo do arquivo não pode ser vazio.");
        }
        if (key == null || key.isEmpty()) {
            throw new BusinessException(ErrorCode.DOCUMENT_UPLOAD_FAILED, HttpStatus.BAD_REQUEST,
                    "A chave do S3 não pode ser vazia.");
        }

        // Simulação de upload: Loga a operação e retorna uma URL mock
        log.info("Simulando upload para S3. Chave: {}, Tamanho: {} bytes, Tipo: {}", key, fileBytes.length, mimeType);
        String fileUrl = MOCK_S3_BASE_URL + key;
        log.info("Upload simulado concluído. URL: {}", fileUrl);
        return fileUrl;
    }

    /**
     * Simula a deleção de um arquivo do S3.
     *
     * @param fileUrl A URL pública do arquivo a ser deletado.
     * @throws BusinessException se ocorrer um erro durante a "deleção" simulada.
     */
    public void deleteFile(String fileUrl) {
        if (fileUrl == null || fileUrl.isEmpty()) {
            throw new BusinessException(ErrorCode.DADOS_INVALIDOS, HttpStatus.BAD_REQUEST,
                    "URL do arquivo não pode ser vazia para deleção.");
        }

        // Simulação de deleção: Loga a operação
        log.info("Simulando deleção de S3. URL: {}", fileUrl);
        // Em um ambiente real, aqui estaria a chamada para o AWS S3 SDK para deletar o
        // objeto.
        // Por exemplo: s3Client.deleteObject(bucketName, key);
        log.info("Deleção simulada concluída para URL: {}", fileUrl);
    }
}
```
```java
package br.com.legalconnect.commom.service;

import java.util.UUID;

/**
 * Utilitário para gerenciar o ID do Tenant no contexto da thread atual.
 * Usado em arquiteturas multitenant para garantir que as operações de banco de dados
 * sejam filtradas pelo tenant correto.
 */
public class TenantContext {

    private static final ThreadLocal<UUID> currentTenant = new ThreadLocal<>();

    /**
     * Define o ID do Tenant para a thread atual.
     *
     * @param tenantId O ID do Tenant.
     */
    public static void setCurrentTenantId(UUID tenantId) {
        currentTenant.set(tenantId);
    }

    /**
     * Retorna o ID do Tenant da thread atual.
     *
     * @return O ID do Tenant.
     * @throws IllegalStateException se o Tenant ID não estiver definido no contexto.
     */
    public static UUID getCurrentTenantId() {
        UUID tenantId = currentTenant.get();
        if (tenantId == null) {
            // Em um ambiente real, você pode lançar uma exceção ou retornar um tenant padrão
            // dependendo da lógica de segurança e acesso.
            // Por simplicidade para este exercício, lançaremos uma exceção.
            throw new IllegalStateException("Tenant ID não está definido no contexto da requisição. Verifique o filtro de segurança.");
        }
        return tenantId;
    }

    /**
     * Limpa o ID do Tenant da thread atual.
     * Deve ser chamado ao final da requisição para evitar vazamentos de contexto.
     */
    public static void clear() {
        currentTenant.remove();
    }
}
```
```java
# src/main/resources/application.properties
# ===================================================================
# Configurações Gerais da Aplicação Spring Boot
# ===================================================================

# Nome da aplicação (usado em logs e monitoramento)
spring.application.name=legalconnect-advogados
# Porta em que a aplicação será executada

# Desabilita o management server caso esteja ativo e conflitando (opcional)
# management.endpoints.web.exposure.include=*

 
server.port=${PORT:0}
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.instance.preferIpAddress=true
eureka.instance.lease-renewal-interval-in-seconds=30
# Configurações do SpringDoc OpenAPI
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packagesToScan=br.com.legalconnect
springdoc.pathsToMatch=/api/v1/**
springdoc.swagger-ui.url=/v3/api-docs
# Additional Swagger configuration
springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.swagger-ui.display-request-duration=true
# Swagger config
 

# ===================================================================
# Configurações do Banco de Dados PostgreSQL
# ===================================================================

# URL de conexão com o banco de dados PostgreSQL
# O microsserviço de autenticação se conecta ao banco de dados global (public)
spring.datasource.url=jdbc:postgresql://localhost:5432/jusplatform_db
spring.datasource.username=jususer
spring.datasource.password=juspassword
spring.datasource.driver-class-name=org.postgresql.Driver

spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# ===================================================================
# Configurações do JPA e Hibernate
# ===================================================================

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
# Removido: spring.jpa.properties.hibernate.default_schema=public
# Esta configuração forçava o Hibernate a usar o schema 'public' para DDL, o que não é desejado para entidades multi-tenant.


# ===================================================================
# Configurações de Segurança (JWT)
# ===================================================================

# Chave secreta para assinar e verificar os JWTs.
# **IMPORTANTE**: Esta chave deve ser longa, complexa e armazenada de forma segura (ex: HashiCorp Vault, variáveis de ambiente).
# Nunca exponha esta chave em um repositório público!
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Tempo de expiração do JWT em milissegundos (ex: 3600000ms = 1 hora)
application.security.jwt.expiration=3600000

# Tempo de expiração do Refresh Token em milissegundos (ex: 7 dias = 604800000ms)
application.security.jwt.refresh-expiration=604800000

# Força do encoder de senha (cost factor para BCrypt, padrão é 10)
# Um valor maior aumenta a segurança, mas também o tempo de hash.
application.security.password-encoder.strength=12

# ===================================================================
# Configurações de Logging (Logback)
# ===================================================================

# Nível de log padrão para a aplicação
logging.level.br.com.legalconnect=INFO
# Nível de log para o Spring Framework
logging.level.org.springframework=WARN

# Nível de log para Hibernate (queries SQL) - Desabilite em produção
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicExtractor=WARN

# Nível de log para o processo de DDL do Hibernate (agora menos relevante com Flyway)
logging.level.org.hibernate.hbm2ddl=WARN

# Nível de log para as conexões JDBC do Hibernate
logging.level.org.hibernate.engine.jdbc.connections=WARN

# Nível de log para o Flyway (muito importante para depurar migrações)
logging.level.org.flywaydb=INFO

# Adicione logs específicos para a configuração do JPA e Multi-Tenancy
logging.level.org.hibernate.jpa=INFO
logging.level.org.springframework.orm.jpa=INFO
logging.level.org.springframework.data.jpa=INFO
logging.level.org.hibernate.engine.jdbc.connections.spi=INFO

# ===================================================================
# Configurações de Multitenancy Específicas do Aplicativo
# ===================================================================

# ID do tenant padrão para usuários que não estão associados a um tenant específico (ex: clientes gerais)
# Este UUID deve corresponder a um registro na tabela tb_tenant no schema global (public).
application.tenant.default-id=00000000-0000-0000-0000-000000000001

# ===================================================================
# Configurações do Spring Boot Actuator
# ===================================================================

# Habilita todos os endpoints do Actuator (para monitoramento)
management.endpoints.web.exposure.include=*
# Define o caminho base para os endpoints do Actuator
management.endpoints.web.base-path=/actuator

# ===================================================================
# Configurações de CORS (Cross-Origin Resource Sharing)
# ===================================================================

# Configuração de CORS global (pode ser mais específica nos controladores)
# Esta configuração é um exemplo e pode ser ajustada conforme a necessidade.
# Em produção, 'allowed-origins' deve ser restrito aos domínios do seu frontend.
# spring.web.cors.allowed-origins=*
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
# spring.web.cors.allowed-headers=*
# spring.web.cors.allow-credentials=false
# spring.web.cors.max-age=3600
# ===================================================================
# Configurações do Flyway
# ===================================================================
spring.flyway.enabled=false
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=1
# ===================================================================
# Configurações de Cache (Exemplo com Caffeine, adicione a dependência se usar)
# ===================================================================

# spring.cache.type=caffeine
# spring.cache.cache-names=users,refreshTokens
# spring.cache.caffeine.spec=expireAfterWrite=60m,maximumSize=500

# ===================================================================
# Propriedades de Aplicação Customizadas
# ===================================================================

# Exemplo de uma propriedade customizada
# app.feature.new-registration-enabled=true

# ===================================================================
# Configurações para Proxy Reverso (Nginx)
# ===================================================================

# Habilita o processamento dos cabeçalhos X-Forwarded-* enviados por proxies.
# Isso garante que a aplicação veja o IP real do cliente, o protocolo original (HTTP/HTTPS)
# e o host original, em vez dos detalhes do proxy (Nginx).
server.forward-headers-strategy=FRAMEWORK
spring.main.allow-bean-definition-overriding=true
# Configuração do Outlook SMTP
spring.mail.username=marcelo.llm@outlook.com
spring.mail.password=qlbzudmmytioxztj
spring.mail.from=marcelo.llm@outlook.com
spring.mail.protocol=smtp

# Propriedades avançadas

spring.mail.host=smtp.office365.com
spring.mail.port=587 
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=15000
spring.mail.properties.mail.smtp.timeout=15000
spring.mail.properties.mail.smtp.writetimeout=15000

# Propriedade para o Thymeleaf (se estiver usando)
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false
# (Opcional, mas útil para debug)
spring.mail.properties.mail.debug=true
app.frontend.url=http://localhost:4200

```
```java
package br.com.legalconnect.legal_usuario;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class LegalUsuarioApplicationTests {

	@Test
	void contextLoads() {
	}

}

```
```java
# src/main/resources/application.properties
# ===================================================================
# Configurações Gerais da Aplicação Spring Boot
# ===================================================================

# Nome da aplicação (usado em logs e monitoramento)
spring.application.name=legalconnect-advogados
# Porta em que a aplicação será executada

# Desabilita o management server caso esteja ativo e conflitando (opcional)
# management.endpoints.web.exposure.include=*

 
server.port=${PORT:0}
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.instance.preferIpAddress=true
eureka.instance.lease-renewal-interval-in-seconds=30
# Configurações do SpringDoc OpenAPI
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packagesToScan=br.com.legalconnect
springdoc.pathsToMatch=/api/v1/**
springdoc.swagger-ui.url=/v3/api-docs
# Additional Swagger configuration
springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.swagger-ui.display-request-duration=true
# Swagger config
 

# ===================================================================
# Configurações do Banco de Dados PostgreSQL
# ===================================================================

# URL de conexão com o banco de dados PostgreSQL
# O microsserviço de autenticação se conecta ao banco de dados global (public)
spring.datasource.url=jdbc:postgresql://localhost:5432/jusplatform_db
spring.datasource.username=jususer
spring.datasource.password=juspassword
spring.datasource.driver-class-name=org.postgresql.Driver

spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# ===================================================================
# Configurações do JPA e Hibernate
# ===================================================================

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
# Removido: spring.jpa.properties.hibernate.default_schema=public
# Esta configuração forçava o Hibernate a usar o schema 'public' para DDL, o que não é desejado para entidades multi-tenant.


# ===================================================================
# Configurações de Segurança (JWT)
# ===================================================================

# Chave secreta para assinar e verificar os JWTs.
# **IMPORTANTE**: Esta chave deve ser longa, complexa e armazenada de forma segura (ex: HashiCorp Vault, variáveis de ambiente).
# Nunca exponha esta chave em um repositório público!
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Tempo de expiração do JWT em milissegundos (ex: 3600000ms = 1 hora)
application.security.jwt.expiration=3600000

# Tempo de expiração do Refresh Token em milissegundos (ex: 7 dias = 604800000ms)
application.security.jwt.refresh-expiration=604800000

# Força do encoder de senha (cost factor para BCrypt, padrão é 10)
# Um valor maior aumenta a segurança, mas também o tempo de hash.
application.security.password-encoder.strength=12

# ===================================================================
# Configurações de Logging (Logback)
# ===================================================================

# Nível de log padrão para a aplicação
logging.level.br.com.legalconnect=INFO
# Nível de log para o Spring Framework
logging.level.org.springframework=WARN

# Nível de log para Hibernate (queries SQL) - Desabilite em produção
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicExtractor=WARN

# Nível de log para o processo de DDL do Hibernate (agora menos relevante com Flyway)
logging.level.org.hibernate.hbm2ddl=WARN

# Nível de log para as conexões JDBC do Hibernate
logging.level.org.hibernate.engine.jdbc.connections=WARN

# Nível de log para o Flyway (muito importante para depurar migrações)
logging.level.org.flywaydb=INFO

# Adicione logs específicos para a configuração do JPA e Multi-Tenancy
logging.level.org.hibernate.jpa=INFO
logging.level.org.springframework.orm.jpa=INFO
logging.level.org.springframework.data.jpa=INFO
logging.level.org.hibernate.engine.jdbc.connections.spi=INFO

# ===================================================================
# Configurações de Multitenancy Específicas do Aplicativo
# ===================================================================

# ID do tenant padrão para usuários que não estão associados a um tenant específico (ex: clientes gerais)
# Este UUID deve corresponder a um registro na tabela tb_tenant no schema global (public).
application.tenant.default-id=00000000-0000-0000-0000-000000000001

# ===================================================================
# Configurações do Spring Boot Actuator
# ===================================================================

# Habilita todos os endpoints do Actuator (para monitoramento)
management.endpoints.web.exposure.include=*
# Define o caminho base para os endpoints do Actuator
management.endpoints.web.base-path=/actuator

# ===================================================================
# Configurações de CORS (Cross-Origin Resource Sharing)
# ===================================================================

# Configuração de CORS global (pode ser mais específica nos controladores)
# Esta configuração é um exemplo e pode ser ajustada conforme a necessidade.
# Em produção, 'allowed-origins' deve ser restrito aos domínios do seu frontend.
# spring.web.cors.allowed-origins=*
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
# spring.web.cors.allowed-headers=*
# spring.web.cors.allow-credentials=false
# spring.web.cors.max-age=3600
# ===================================================================
# Configurações do Flyway
# ===================================================================
spring.flyway.enabled=false
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=1
# ===================================================================
# Configurações de Cache (Exemplo com Caffeine, adicione a dependência se usar)
# ===================================================================

# spring.cache.type=caffeine
# spring.cache.cache-names=users,refreshTokens
# spring.cache.caffeine.spec=expireAfterWrite=60m,maximumSize=500

# ===================================================================
# Propriedades de Aplicação Customizadas
# ===================================================================

# Exemplo de uma propriedade customizada
# app.feature.new-registration-enabled=true

# ===================================================================
# Configurações para Proxy Reverso (Nginx)
# ===================================================================

# Habilita o processamento dos cabeçalhos X-Forwarded-* enviados por proxies.
# Isso garante que a aplicação veja o IP real do cliente, o protocolo original (HTTP/HTTPS)
# e o host original, em vez dos detalhes do proxy (Nginx).
server.forward-headers-strategy=FRAMEWORK
spring.main.allow-bean-definition-overriding=true
# Configuração do Outlook SMTP
spring.mail.username=marcelo.llm@outlook.com
spring.mail.password=qlbzudmmytioxztj
spring.mail.from=marcelo.llm@outlook.com
spring.mail.protocol=smtp

# Propriedades avançadas

spring.mail.host=smtp.office365.com
spring.mail.port=587 
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=15000
spring.mail.properties.mail.smtp.timeout=15000
spring.mail.properties.mail.smtp.writetimeout=15000

# Propriedade para o Thymeleaf (se estiver usando)
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false
# (Opcional, mas útil para debug)
spring.mail.properties.mail.debug=true
app.frontend.url=http://localhost:4200

```
```java
Êþº¾   = %  +br/com/legalconnect/LegalUsuarioApplication  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this -Lbr/com/legalconnect/LegalUsuarioApplication; main ([Ljava/lang/String;)V
    *org/springframework/boot/SpringApplication   run b(Ljava/lang/Class;[Ljava/lang/String;)Lorg/springframework/context/ConfigurableApplicationContext; args [Ljava/lang/String; MethodParameters 
SourceFile LegalUsuarioApplication.java RuntimeVisibleAnnotations FLorg/springframework/data/jpa/repository/config/EnableJpaRepositories; basePackages .br.com.legalconnect.advogado.domain.repository %br.com.legalconnect.commom.repository :Lorg/springframework/boot/autoconfigure/domain/EntityScan;  br.com.legalconnect.commom.model 0br.com.legalconnect.advogado.domain.modal.entity BLorg/springframework/cloud/client/discovery/EnableDiscoveryClient; >Lorg/springframework/boot/autoconfigure/SpringBootApplication; !               /     *· ±    
                 
   	       6     *¸ W±    
   
                                   (    [ s s     [ s !s " #   $  
```
```java
Êþº¾   = >  @br/com/legalconnect/advogado/application/dto/enums/DocumentoTipo  java/lang/Enum OAB BLbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo; RG CPF COMPROVANTE_ENDERECO OUTRO ENUM$VALUES C[Lbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo; <clinit> ()V Code 
     <init> (Ljava/lang/String;I)V	     	     	     		   	  
	  " 
 	  $   LineNumberTable LocalVariableTable
   this 
$enum$name 
$enum$ordinal MethodParameters values E()[Lbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo;
 / 1 0 java/lang/System 2 3 	arraycopy *(Ljava/lang/Object;ILjava/lang/Object;II)V valueOf V(Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo;
  7 4 8 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; name 
SourceFile DocumentoTipo.java 	Signature TLjava/lang/Enum<Lbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo;>;@1     @    @    @    @ 	   @ 
          
            g» Y· ³ » Y· ³ » Y· ³ » Y· ³ » Y · ³ !½ Y² SY² SY² SY² SY² !S³ #±    %        
 	  
 '  4  A  &             1     *+· '±    %        &        (    +   	 )  *  	 , -     6     ² #YK*¾Y<½ YM¸ .,°    %        &      	 4 5     *     
*¸ 6À °    %        &      +    9   :    ; <    =
```
```java
Êþº¾   = ?  Kbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO  java/lang/Object id Ljava/util/UUID; nome Ljava/lang/String; RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message )O nome da certificaÃ§Ã£o Ã© obrigatÃ³rio. %Ljakarta/validation/constraints/Size; max   ÿ <O nome da certificaÃ§Ã£o deve ter no mÃ¡ximo 255 caracteres. RuntimeVisibleTypeAnnotations instituicao EA instituiÃ§Ã£o da certificaÃ§Ã£o deve ter no mÃ¡ximo 255 caracteres. 
dataConclusao Ljava/time/LocalDate; (Ljakarta/validation/constraints/NotNull; 7A data de conclusÃ£o da certificaÃ§Ã£o Ã© obrigatÃ³ria. .Ljakarta/validation/constraints/PastOrPresent; EA data de conclusÃ£o da certificaÃ§Ã£o nÃ£o pode ser uma data futura. getId ()Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; Code	      LineNumberTable LocalVariableTable this MLbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO; getNome ()Ljava/lang/String;	  (   getInstituicao	  +   getDataConclusao ()Ljava/time/LocalDate;	  /   setId (Ljava/util/UUID;)V MethodParameters setNome (Ljava/lang/String;)V setInstituicao setDataConclusao (Ljava/time/LocalDate;)V <init> ()V
  ; 8 9 L(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;)V 
SourceFile CertificacaoRequestDTO.java !               	     
  s  
  I  s        
  s   
  I  s      	     
  I  s        
  I  s      	       s    s          s     s  
                /     *´ °    !        "        # $    % &             /     *´ '°    !        "        # $    ) &             /     *´ *°    !        "        # $    , -             /     *´ .°    !        "        # $    0 1             :     *+µ ±    !        "        # $         2       3 4             :     *+µ '±    !        "        # $         2       5 4             :     *+µ *±    !        "        # $         2       6 7             :     *+µ .±    !        "        # $         2       8 9             /     *· :±    !        "        # $    8 <             l     *· :*+µ *,µ '*-µ **µ .±    !        "   4     # $                           2             =    >
```
```java
Êþº¾   = G  ibr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest$DocumentoUploadRequestBuilder  java/lang/Object nomeArquivo Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; 
tipoDocumento BLbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo; 
arquivoBase64 mimeType <init> ()V Code
   
  LineNumberTable LocalVariableTable this kLbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest$DocumentoUploadRequestBuilder; (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest$DocumentoUploadRequestBuilder;	     MethodParameters ¯(Lbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo;)Lbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest$DocumentoUploadRequestBuilder;	   	 
	    	      build O()Lbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest; $ Kbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest
 # & 
 ' {(Ljava/lang/String;Lbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo;Ljava/lang/String;Ljava/lang/String;)V toString ()Ljava/lang/String;
 + - , java/lang/String . / valueOf &(Ljava/lang/Object;)Ljava/lang/String;   1 2 3 makeConcatWithConstants \(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile DocumentoUploadRequest.java BootstrapMethods
 8 : 9 $java/lang/invoke/StringConcatFactory 2 ; (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 7 > qDocumentoUploadRequest.DocumentoUploadRequestBuilder(nomeArquivo=, tipoDocumento=, arquivoBase64=, mimeType=) InnerClasses DocumentoUploadRequestBuilder B %java/lang/invoke/MethodHandles$Lookup D java/lang/invoke/MethodHandles Lookup NestHost !                   	 
                                     
              /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	 
      	                 ;     *+µ *°                                                   ;     *+µ *°                                     ! "             B     » #Y*´ *´ *´ *´ · %°                         ( )             C     *´ *´ ¸ **´ *´ º 0  °                         4    5         6     <  = ?      # @ 	 A C E  F    #
```
```java
Êþº¾   = E  Kbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest  java/lang/Object nomeArquivo Ljava/lang/String; RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message "O nome do arquivo Ã© obrigatÃ³rio. %Ljakarta/validation/constraints/Size; max   ÿ 5O nome do arquivo deve ter no mÃ¡ximo 255 caracteres. RuntimeVisibleTypeAnnotations 
tipoDocumento BLbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo; (Ljakarta/validation/constraints/NotNull; $O tipo do documento Ã© obrigatÃ³rio. 
arquivoBase64 1O conteÃºdo do arquivo em Base64 Ã© obrigatÃ³rio. mimeType 'O tipo MIME do arquivo Ã© obrigatÃ³rio.   d :O tipo MIME do arquivo deve ter no mÃ¡ximo 100 caracteres. builder m()Lbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest$DocumentoUploadRequestBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code   ibr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest$DocumentoUploadRequestBuilder
  " # $ <init> ()V LineNumberTable LocalVariableTable getNomeArquivo ()Ljava/lang/String;	  *   this MLbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest; getTipoDocumento D()Lbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo;	  0   getArquivoBase64	  3   getMimeType	  6   setNomeArquivo (Ljava/lang/String;)V MethodParameters setTipoDocumento E(Lbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo;)V setArquivoBase64 setMimeType
  " {(Ljava/lang/String;Lbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo;Ljava/lang/String;Ljava/lang/String;)V 
SourceFile DocumentoUploadRequest.java InnerClasses DocumentoUploadRequestBuilder NestMembers !                 	s 
   I 
 	s          	s 
    I 
 	s             	s     
     	s             	s     
     	s             	s    I  	s          	s     I  	s   	               (      » Y· !°    %        &       ' (             /     *´ )°    %        &        + ,    - .             /     *´ /°    %        &        + ,    1 (             /     *´ 2°    %        &        + ,    4 (             /     *´ 5°    %        &        + ,    7 8             :     *+µ )±    %        &        + ,         9       : ;             :     *+µ /±    %        &        + ,         9       < 8             :     *+µ 2±    %        &        + ,         9       = 8             :     *+µ 5±    %        &        + ,         9       # $             /     *· >±    %        &        + ,    # ?             l     *· >*+µ )*,µ /*-µ 2*µ 5±    %        &   4     + ,                           9             @    A B   
    C 	 D     
```
```java
Êþº¾   = O  br/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO$ExperienciaProfissionalRequestDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; cargo Ljava/lang/String; empresa 
dataInicio Ljava/time/LocalDate; dataFim 	descricao <init> ()V Code
     LineNumberTable LocalVariableTable this Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO$ExperienciaProfissionalRequestDTOBuilder; (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO$ExperienciaProfissionalRequestDTOBuilder;	     MethodParameters (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO$ExperienciaProfissionalRequestDTOBuilder;	   	 
	  !  
 (Ljava/time/LocalDate;)Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO$ExperienciaProfissionalRequestDTOBuilder;	  $  
	  &  
	  (  
 build Z()Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO; , Vbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO
 + .  / s(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/time/LocalDate;Ljava/lang/String;)V toString ()Ljava/lang/String;
 3 5 4 java/lang/String 6 7 valueOf &(Ljava/lang/Object;)Ljava/lang/String;   9 : ; makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile &ExperienciaProfissionalRequestDTO.java BootstrapMethods
 @ B A $java/lang/invoke/StringConcatFactory : C (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; ? F ExperienciaProfissionalRequestDTO.ExperienciaProfissionalRequestDTOBuilder(id=, cargo=, empresa=, dataInicio=, dataFim=, descricao=) InnerClasses (ExperienciaProfissionalRequestDTOBuilder J %java/lang/invoke/MethodHandles$Lookup L java/lang/invoke/MethodHandles Lookup NestHost !                   	 
            
            
            
            
          	                 /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	 
      	                 ;     *+µ  *°                            
          "             ;     *+µ #*°                            
          "             ;     *+µ %*°                            
                       ;     *+µ '*°                            
         ) *             J      » +Y*´ *´ *´  *´ #*´ %*´ '· -°                          0 1             Q     '*´ ¸ 2*´ *´  *´ #¸ 2*´ %¸ 2*´ 'º 8  °                   '      <    =         >     D  E G      + H 	 I K M  N    +
```
```java
Êþº¾   = S  Vbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO  java/lang/Object id Ljava/util/UUID; cargo Ljava/lang/String; RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message (O cargo da experiÃªncia Ã© obrigatÃ³rio. %Ljakarta/validation/constraints/Size; max   ÿ ;O cargo da experiÃªncia deve ter no mÃ¡ximo 255 caracteres. RuntimeVisibleTypeAnnotations empresa 2O nome da empresa da experiÃªncia Ã© obrigatÃ³rio. EO nome da empresa da experiÃªncia deve ter no mÃ¡ximo 255 caracteres. 
dataInicio Ljava/time/LocalDate; (Ljakarta/validation/constraints/NotNull; 2A data de inÃ­cio da experiÃªncia Ã© obrigatÃ³ria. .Ljakarta/validation/constraints/PastOrPresent; @A data de inÃ­cio da experiÃªncia nÃ£o pode ser uma data futura. dataFim <A data de fim da experiÃªncia nÃ£o pode ser uma data futura. 	descricao builder ()Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO$ExperienciaProfissionalRequestDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code $ br/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO$ExperienciaProfissionalRequestDTOBuilder
 # & ' ( <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	  .   this XLbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO; getCargo ()Ljava/lang/String;	  4   
getEmpresa	  7   
getDataInicio ()Ljava/time/LocalDate;	  ;   
getDataFim	  >   getDescricao	  A   setId (Ljava/util/UUID;)V MethodParameters setCargo (Ljava/lang/String;)V 
setEmpresa 
setDataInicio (Ljava/time/LocalDate;)V 
setDataFim setDescricao
  & s(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/time/LocalDate;Ljava/lang/String;)V 
SourceFile &ExperienciaProfissionalRequestDTO.java InnerClasses (ExperienciaProfissionalRequestDTOBuilder NestMembers !               	     
  s  
  I  s        
  s   
  I  s      	     
  s  
  I  s        
  s   
  I  s      	       s    s          s     s      	       s     
     s        	          !   "   (      » #Y· %°    )        *       + ,        !   "   /     *´ -°    )        *        / 0    1 2        !   "   /     *´ 3°    )        *        / 0    5 2        !   "   /     *´ 6°    )        *        / 0    8 9        !   "   /     *´ :°    )        *        / 0    < 9        !   "   /     *´ =°    )        *        / 0    ? 2        !   "   /     *´ @°    )        *        / 0    B C        !   "   :     *+µ -±    )        *        / 0         D       E F        !   "   :     *+µ 3±    )        *        / 0         D       G F        !   "   :     *+µ 6±    )        *        / 0         D       H I        !   "   :     *+µ :±    )        *        / 0         D       J I        !   "   :     *+µ =±    )        *        / 0         D       K F        !   "   :     *+µ @±    )        *        / 0         D       ' (        !   "   /     *· L±    )        *        / 0    ' M        !   "        &*· L*+µ -*,µ 3*-µ 6*µ :*µ =*µ @±    )        *   H    & / 0     &      &      &      &      &      &    D                 N    O P   
  #  Q 	 R     #
```
```java
Êþº¾   = I  sbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO$FormacaoAcademicaRequestDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; curso Ljava/lang/String; instituicao 
dataConclusao Ljava/time/LocalDate; <init> ()V Code
     LineNumberTable LocalVariableTable this uLbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO$FormacaoAcademicaRequestDTOBuilder; (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO$FormacaoAcademicaRequestDTOBuilder;	     MethodParameters (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO$FormacaoAcademicaRequestDTOBuilder;	   	 
	    
 (Ljava/time/LocalDate;)Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO$FormacaoAcademicaRequestDTOBuilder;	  "  
 build T()Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO; & Pbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO
 % (  ) L(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;)V toString ()Ljava/lang/String;
 - / . java/lang/String 0 1 valueOf &(Ljava/lang/Object;)Ljava/lang/String;   3 4 5 makeConcatWithConstants \(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile  FormacaoAcademicaRequestDTO.java BootstrapMethods
 : < ; $java/lang/invoke/StringConcatFactory 4 = (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 9 @ mFormacaoAcademicaRequestDTO.FormacaoAcademicaRequestDTOBuilder(id=, curso=, instituicao=, dataConclusao=) InnerClasses "FormacaoAcademicaRequestDTOBuilder D %java/lang/invoke/MethodHandles$Lookup F java/lang/invoke/MethodHandles Lookup NestHost !                   	 
            
            
                           /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	 
      	                 ;     *+µ *°                            
                        ;     *+µ !*°                            
         # $             B     » %Y*´ *´ *´ *´ !· '°                         * +             F     *´ ¸ ,*´ *´ *´ !¸ ,º 2  °                         6    7         8     >  ? A      % B 	 C E G  H    %
```
```java
Êþº¾   = H  Pbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO  java/lang/Object id Ljava/util/UUID; curso Ljava/lang/String; RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message  O nome do curso Ã© obrigatÃ³rio. %Ljakarta/validation/constraints/Size; max   ÿ 3O nome do curso deve ter no mÃ¡ximo 255 caracteres. RuntimeVisibleTypeAnnotations instituicao (O nome da instituiÃ§Ã£o Ã© obrigatÃ³rio. ;O nome da instituiÃ§Ã£o deve ter no mÃ¡ximo 255 caracteres. 
dataConclusao Ljava/time/LocalDate; (Ljakarta/validation/constraints/NotNull; 3A data de conclusÃ£o da formaÃ§Ã£o Ã© obrigatÃ³ria. .Ljakarta/validation/constraints/PastOrPresent; AA data de conclusÃ£o da formaÃ§Ã£o nÃ£o pode ser uma data futura. builder w()Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO$FormacaoAcademicaRequestDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code ! sbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO$FormacaoAcademicaRequestDTOBuilder
   # $ % <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	  +   this RLbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO; getCurso ()Ljava/lang/String;	  1   getInstituicao	  4   getDataConclusao ()Ljava/time/LocalDate;	  8   setId (Ljava/util/UUID;)V MethodParameters setCurso (Ljava/lang/String;)V setInstituicao setDataConclusao (Ljava/time/LocalDate;)V
  # L(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;)V 
SourceFile  FormacaoAcademicaRequestDTO.java InnerClasses "FormacaoAcademicaRequestDTOBuilder NestMembers !               	     
  s  
  I  s        
  s   
  I  s      	     
  s  
  I  s        
  s   
  I  s      	       s    s          s     s   	               (      »  Y· "°    &        '       ( )             /     *´ *°    &        '        , -    . /             /     *´ 0°    &        '        , -    2 /             /     *´ 3°    &        '        , -    5 6             /     *´ 7°    &        '        , -    9 :             :     *+µ *±    &        '        , -         ;       < =             :     *+µ 0±    &        '        , -         ;       > =             :     *+µ 3±    &        '        , -         ;       ? @             :     *+µ 7±    &        '        , -         ;       $ %             /     *· A±    &        '        , -    $ B             l     *· A*+µ **,µ 0*-µ 3*µ 7±    &        '   4     , -                           ;             C    D E   
     F 	 G      
```
```java
Êþº¾   = v  Nbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest  7br/com/legalconnect/commom/dto/request/PessoaRequestDTO 	numeroOab Ljava/lang/String; RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message !O nÃºmero da OAB Ã© obrigatÃ³rio. %Ljakarta/validation/constraints/Size; min    max   2 2O nÃºmero da OAB deve ter entre 5 e 50 caracteres. RuntimeVisibleTypeAnnotations usaMarketplace Ljava/lang/Boolean; (Ljakarta/validation/constraints/NotNull; 4A indicaÃ§Ã£o de uso do marketplace Ã© obrigatÃ³ria. planoId Ljava/util/UUID; O ID do plano Ã© obrigatÃ³rio. tenantId O ID do tenant Ã© obrigatÃ³rio. locaisAtuacaoIds Ljava/util/List; 	Signature "Ljava/util/List<Ljava/util/UUID;>; areaAtuacaoIds 	idiomaIds tipoAtendimentoIds 
certificacoes _Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;>; Ljakarta/validation/Valid; experiencias jLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;>; 	formacoes dLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;>; getNumeroOab ()Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; Code	  /   LineNumberTable LocalVariableTable this PLbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest; getUsaMarketplace ()Ljava/lang/Boolean;	  7   
getPlanoId ()Ljava/util/UUID;	  ;   getTenantId	  >   getLocaisAtuacaoIds ()Ljava/util/List; $()Ljava/util/List<Ljava/util/UUID;>;	  C   getAreaAtuacaoIds	  F   getIdiomaIds	  I    getTipoAtendimentoIds	  L !  getCertificacoes a()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;>;	  P "  getExperiencias l()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;>;	  T %  getFormacoes f()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;>;	  X '  setNumeroOab (Ljava/lang/String;)V MethodParameters setUsaMarketplace (Ljava/lang/Boolean;)V 
setPlanoId (Ljava/util/UUID;)V setTenantId setLocaisAtuacaoIds (Ljava/util/List;)V %(Ljava/util/List<Ljava/util/UUID;>;)V LocalVariableTypeTable setAreaAtuacaoIds setIdiomaIds setTipoAtendimentoIds setCertificacoes b(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;>;)V setExperiencias m(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;>;)V setFormacoes g(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;>;)V <init> ()V
  q n o ¸(Ljava/lang/String;Ljava/lang/Boolean;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)Vý(Ljava/lang/String;Ljava/lang/Boolean;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/List<Ljava/util/UUID;>;Ljava/util/List<Ljava/util/UUID;>;Ljava/util/List<Ljava/util/UUID;>;Ljava/util/List<Ljava/util/UUID;>;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;>;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;>;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;>;)V 
SourceFile ProfissionalCreateRequest.java !                 	s 
   I 
 I  	s     "     	s 
    I 
 I  	s             	s     
     	s             	s     
     	s             	s     
     	s                               !         "       #      $         $    %       &      $         $    '       (      $         $     ) *  +     ,   -   /     *´ .°    0        1        2 3    4 5  +     ,   -   /     *´ 6°    0        1        2 3    8 9  +     ,   -   /     *´ :°    0        1        2 3    < 9  +     ,   -   /     *´ =°    0        1        2 3    ? @      A +     ,   -   /     *´ B°    0        1        2 3    D @      A +     ,   -   /     *´ E°    0        1        2 3    G @      A +     ,   -   /     *´ H°    0        1        2 3    J @      A +     ,   -   /     *´ K°    0        1        2 3    M @      N +     ,   -   /     *´ O°    0        1        2 3    Q @      R +     ,   -   /     *´ S°    0        1        2 3    U @      V +     ,   -   /     *´ W°    0        1        2 3    Y Z  +     ,   -   :     *+µ .±    0        1        2 3         [       \ ]  +     ,   -   :     *+µ 6±    0        1        2 3         [       ^ _  +     ,   -   :     *+µ :±    0        1        2 3         [       ` _  +     ,   -   :     *+µ =±    0        1        2 3         [       a b      c +     ,   -   L     *+µ B±    0        1        2 3         d           [       e b      c +     ,   -   L     *+µ E±    0        1        2 3         d           [       f b      c +     ,   -   L     *+µ H±    0        1        2 3          d            [        g b      c +     ,   -   L     *+µ K±    0        1        2 3      !   d        !   [    !   h b      i +     ,   -   L     *+µ O±    0        1        2 3      "   d        " #  [    "   j b      k +     ,   -   L     *+µ S±    0        1        2 3      %   d        % &  [    %   l b      m +     ,   -   L     *+µ W±    0        1        2 3      '   d        ' (  [    '   n o  +     ,   -   /     *· p±    0        1        2 3    n r      s +     ,   -  *     D*· p*+µ .*,µ 6*-µ :*µ =*µ B*µ E*µ H*µ K*	µ O*
µ S*µ W±    0        1   z    D 2 3     D      D      D      D      D      D      D       D !     D "  	   D %  
   D '   d   H    D      D      D       D !     D " # 	   D % & 
   D ' (  [   -                !  "  %  '   t    u
```
```java
Êþº¾   = r  obr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest$ProfissionalUpdateRequestBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; pessoa 9Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO; 	numeroOab Ljava/lang/String; usaMarketplace Ljava/lang/Boolean; 	empresaId planoId locaisAtuacaoIds Ljava/util/List; 	Signature "Ljava/util/List<Ljava/util/UUID;>; areaAtuacaoIds 	idiomaIds tipoAtendimentoIds 
certificacoes _Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;>; experiencias jLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;>; 	formacoes dLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;>; <init> ()V Code
  "   LineNumberTable LocalVariableTable this qLbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest$ProfissionalUpdateRequestBuilder; (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest$ProfissionalUpdateRequestBuilder;	  )   MethodParameters ¬(Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;)Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest$ProfissionalUpdateRequestBuilder;	  - 	 
 (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest$ProfissionalUpdateRequestBuilder;	  0   (Ljava/lang/Boolean;)Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest$ProfissionalUpdateRequestBuilder;	  3 
 	  5  	  7   (Ljava/util/List;)Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest$ProfissionalUpdateRequestBuilder; (Ljava/util/List<Ljava/util/UUID;>;)Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest$ProfissionalUpdateRequestBuilder;	  ;   LocalVariableTypeTable	  >  	  @  	  B   Ò(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;>;)Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest$ProfissionalUpdateRequestBuilder;	  E   Ý(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;>;)Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest$ProfissionalUpdateRequestBuilder;	  H   ×(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;>;)Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest$ProfissionalUpdateRequestBuilder;	  K   build R()Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest; O Nbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest
 N Q  R(Ljava/util/UUID;Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;Ljava/lang/String;Ljava/lang/Boolean;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V toString ()Ljava/lang/String;
 V X W java/lang/String Y Z valueOf &(Ljava/lang/Object;)Ljava/lang/String;   \ ] ^ makeConcatWithConstants þ(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile ProfissionalUpdateRequest.java BootstrapMethods
 c e d $java/lang/invoke/StringConcatFactory ] f (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; b i øProfissionalUpdateRequest.ProfissionalUpdateRequestBuilder(id=, pessoa=, numeroOab=, usaMarketplace=, empresaId=, planoId=, locaisAtuacaoIds=, areaAtuacaoIds=, idiomaIds=, tipoAtendimentoIds=, certificacoes=, experiencias=, formacoes=) InnerClasses  ProfissionalUpdateRequestBuilder m %java/lang/invoke/MethodHandles$Lookup o java/lang/invoke/MethodHandles Lookup NestHost !     
              	 
                       
                                                                                                                                                                            /     *· !±    #        $        % &     '              ;     *+µ (*°    #        $        % &         *       	 +              ;     *+µ ,*°    #        $        % &      	 
  *    	    .              ;     *+µ /*°    #        $        % &         *       
 1              ;     *+µ 2*°    #        $        % &      
   *    
    '              ;     *+µ 4*°    #        $        % &         *        '              ;     *+µ 6*°    #        $        % &         *        8      9             M     *+µ :*°    #        $        % &         <           *        8      9             M     *+µ =*°    #        $        % &         <           *        8      9             M     *+µ ?*°    #        $        % &         <           *        8      9             M     *+µ A*°    #        $        % &         <           *        8      C             M     *+µ D*°    #        $        % &         <           *        8      F             M     *+µ G*°    #        $        % &         <           *        8      I             M     *+µ J*°    #        $        % &         <           *       L M              f     <» NY*´ (*´ ,*´ /*´ 2*´ 4*´ 6*´ :*´ =*´ ?*´ A*´ D*´ G*´ J· P°    #        $       < % &    S T               
    ^*´ (¸ U*´ ,¸ U*´ /*´ 2¸ U*´ 4¸ U*´ 6¸ U*´ :¸ U*´ =¸ U*´ ?¸ U*´ A¸ U*´ D¸ U*´ G¸ U*´ J¸ Uº [  °    #        $       ^ % &    _    `         a     g  h j      N k 	 l n p  q    N
```
```java
Êþº¾   =   Nbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest  java/lang/Object id Ljava/util/UUID; RuntimeVisibleAnnotations (Ljakarta/validation/constraints/NotNull; message 8O ID do profissional Ã© obrigatÃ³rio para atualizaÃ§Ã£o. RuntimeVisibleTypeAnnotations pessoa 9Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO; Ljakarta/validation/Valid; 	numeroOab Ljava/lang/String; )Ljakarta/validation/constraints/NotBlank; DO nÃºmero da OAB do profissional Ã© obrigatÃ³rio para atualizaÃ§Ã£o. usaMarketplace Ljava/lang/Boolean; 4A indicaÃ§Ã£o de uso do marketplace Ã© obrigatÃ³ria. 	empresaId planoId locaisAtuacaoIds Ljava/util/List; 	Signature "Ljava/util/List<Ljava/util/UUID;>; areaAtuacaoIds 	idiomaIds tipoAtendimentoIds 
certificacoes _Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;>; experiencias jLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;>; 	formacoes dLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;>; builder s()Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest$ProfissionalUpdateRequestBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code + obr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest$ProfissionalUpdateRequestBuilder
 * - . / <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	  5   this PLbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest; 	getPessoa ;()Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;	  ;  
 getNumeroOab ()Ljava/lang/String;	  ?   getUsaMarketplace ()Ljava/lang/Boolean;	  C   getEmpresaId	  F   
getPlanoId	  I   getLocaisAtuacaoIds ()Ljava/util/List; $()Ljava/util/List<Ljava/util/UUID;>;	  N   getAreaAtuacaoIds	  Q   getIdiomaIds	  T   getTipoAtendimentoIds	  W   getCertificacoes a()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;>;	  [   getExperiencias l()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;>;	  _ !  getFormacoes f()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;>;	  c #  setId (Ljava/util/UUID;)V MethodParameters 	setPessoa <(Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;)V setNumeroOab (Ljava/lang/String;)V setUsaMarketplace (Ljava/lang/Boolean;)V setEmpresaId 
setPlanoId setLocaisAtuacaoIds (Ljava/util/List;)V %(Ljava/util/List<Ljava/util/UUID;>;)V LocalVariableTypeTable setAreaAtuacaoIds setIdiomaIds setTipoAtendimentoIds setCertificacoes b(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;>;)V setExperiencias m(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;>;)V setFormacoes g(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;>;)V
  -(Ljava/util/UUID;Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;Ljava/lang/String;Ljava/lang/Boolean;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)VF(Ljava/util/UUID;Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;Ljava/lang/String;Ljava/lang/Boolean;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/List<Ljava/util/UUID;>;Ljava/util/List<Ljava/util/UUID;>;Ljava/util/List<Ljava/util/UUID;>;Ljava/util/List<Ljava/util/UUID;>;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;>;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;>;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;>;)V 
SourceFile ProfissionalUpdateRequest.java InnerClasses  ProfissionalUpdateRequestBuilder NestMembers !     
            	s 
    
     	s 
   
                              	s     
     	s             	s     
     	s                                                                            !       "                   #       $                   	 % &  '     (   )   (      » *Y· ,°    0        1       2 3  '     (   )   /     *´ 4°    0        1        6 7    8 9  '     (   )   /     *´ :°    0        1        6 7    < =  '     (   )   /     *´ >°    0        1        6 7    @ A  '     (   )   /     *´ B°    0        1        6 7    D 3  '     (   )   /     *´ E°    0        1        6 7    G 3  '     (   )   /     *´ H°    0        1        6 7    J K      L '     (   )   /     *´ M°    0        1        6 7    O K      L '     (   )   /     *´ P°    0        1        6 7    R K      L '     (   )   /     *´ S°    0        1        6 7    U K      L '     (   )   /     *´ V°    0        1        6 7    X K      Y '     (   )   /     *´ Z°    0        1        6 7    \ K      ] '     (   )   /     *´ ^°    0        1        6 7    ` K      a '     (   )   /     *´ b°    0        1        6 7    d e  '     (   )   :     *+µ 4±    0        1        6 7         f       g h  '     (   )   :     *+µ :±    0        1        6 7       
  f       i j  '     (   )   :     *+µ >±    0        1        6 7         f       k l  '     (   )   :     *+µ B±    0        1        6 7         f       m e  '     (   )   :     *+µ E±    0        1        6 7         f       n e  '     (   )   :     *+µ H±    0        1        6 7         f       o p      q '     (   )   L     *+µ M±    0        1        6 7         r           f       s p      q '     (   )   L     *+µ P±    0        1        6 7         r           f       t p      q '     (   )   L     *+µ S±    0        1        6 7         r           f       u p      q '     (   )   L     *+µ V±    0        1        6 7         r           f       v p      w '     (   )   L     *+µ Z±    0        1        6 7         r            f       x p      y '     (   )   L     *+µ ^±    0        1        6 7      !   r        ! "  f    !   z p      { '     (   )   L     *+µ b±    0        1        6 7      #   r        # $  f    #   . /  '     (   )   /     *· |±    0        1        6 7    . }      ~ '     (   )  J     P*· |*+µ 4*,µ :*-µ >*µ B*µ E*µ H*µ M*µ P*	µ S*
µ V*µ Z*µ ^*
µ b±    0        1       P 6 7     P      P  
    P      P      P      P      P      P      P   	   P   
   P      P !     P #  
 r   H    P      P      P   	   P   
   P       P ! "    P # $ 
 f   5
                       !  #           
  *   	      *
```
```java
Êþº¾   = D  jbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO$AreaAtuacaoResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; nome Ljava/lang/String; 	descricao <init> ()V Code
    
 LineNumberTable LocalVariableTable this lLbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO$AreaAtuacaoResponseDTOBuilder; ~(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO$AreaAtuacaoResponseDTOBuilder;	     MethodParameters (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO$AreaAtuacaoResponseDTOBuilder;	   	 
	    
 build P()Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO; ! Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO
   #  $ 7(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;)V toString ()Ljava/lang/String;
 ( * ) java/lang/String + , valueOf &(Ljava/lang/Object;)Ljava/lang/String;   . / 0 makeConcatWithConstants J(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile AreaAtuacaoResponseDTO.java BootstrapMethods
 5 7 6 $java/lang/invoke/StringConcatFactory / 8 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 4 ; OAreaAtuacaoResponseDTO.AreaAtuacaoResponseDTOBuilder(id=, nome=, descricao=) InnerClasses AreaAtuacaoResponseDTOBuilder ? %java/lang/invoke/MethodHandles$Lookup A java/lang/invoke/MethodHandles Lookup NestHost !                   	 
            
              
             /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	 
      	                 ;     *+µ *°                            
                       >     »  Y*´ *´ *´ · "°                         % &             ?     *´ ¸ '*´ *´ º -  °                         1    2         3     9  : <        = 	 > @ B  C     
```
```java
Êþº¾   = 1  Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO  java/lang/Object id Ljava/util/UUID; nome Ljava/lang/String; 	descricao builder n()Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO$AreaAtuacaoResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  jbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO$AreaAtuacaoResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	     this NLbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO; getNome ()Ljava/lang/String;	      getDescricao	  # 	  setId (Ljava/util/UUID;)V MethodParameters setNome (Ljava/lang/String;)V setDescricao
   7(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;)V 
SourceFile AreaAtuacaoResponseDTO.java InnerClasses AreaAtuacaoResponseDTOBuilder NestMembers !                 	    	 	 
        
      (      » Y· °                           
      /     *´ °                                 
      /     *´ °                         !        
      /     *´ "°                         $ %       
      :     *+µ ±                              &       ' (       
      :     *+µ ±                              &       ) (       
      :     *+µ "±                           	   &    	           
      /     *· *±                          +       
      \     *· **+µ *,µ *-µ "±               *                        	   &   
     	   ,    - .   
    / 	 0     
```
```java
Êþº¾   = I  lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO$CertificacaoResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; nome Ljava/lang/String; instituicao 
dataConclusao Ljava/time/LocalDate; <init> ()V Code
     LineNumberTable LocalVariableTable this nLbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO$CertificacaoResponseDTOBuilder; (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO$CertificacaoResponseDTOBuilder;	     MethodParameters (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO$CertificacaoResponseDTOBuilder;	   	 
	    
 (Ljava/time/LocalDate;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO$CertificacaoResponseDTOBuilder;	  "  
 build Q()Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO; & Mbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO
 % (  ) L(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;)V toString ()Ljava/lang/String;
 - / . java/lang/String 0 1 valueOf &(Ljava/lang/Object;)Ljava/lang/String;   3 4 5 makeConcatWithConstants \(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile CertificacaoResponseDTO.java BootstrapMethods
 : < ; $java/lang/invoke/StringConcatFactory 4 = (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 9 @ dCertificacaoResponseDTO.CertificacaoResponseDTOBuilder(id=, nome=, instituicao=, dataConclusao=) InnerClasses CertificacaoResponseDTOBuilder D %java/lang/invoke/MethodHandles$Lookup F java/lang/invoke/MethodHandles Lookup NestHost !                   	 
            
            
                           /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	 
      	                 ;     *+µ *°                            
                        ;     *+µ !*°                            
         # $             B     » %Y*´ *´ *´ *´ !· '°                         * +             F     *´ ¸ ,*´ *´ *´ !¸ ,º 2  °                         6    7         8     >  ? A      % B 	 C E G  H    %
```
```java
Êþº¾   = 9  Mbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO  java/lang/Object id Ljava/util/UUID; nome Ljava/lang/String; instituicao 
dataConclusao Ljava/time/LocalDate; builder p()Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO$CertificacaoResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO$CertificacaoResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	     this OLbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO; getNome ()Ljava/lang/String;	  "   getInstituicao	  % 	  getDataConclusao ()Ljava/time/LocalDate;	  ) 
  setId (Ljava/util/UUID;)V MethodParameters setNome (Ljava/lang/String;)V setInstituicao setDataConclusao (Ljava/time/LocalDate;)V
   L(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;)V 
SourceFile CertificacaoResponseDTO.java InnerClasses CertificacaoResponseDTOBuilder NestMembers !                 	     
     	  
             (      » Y· °                                 /     *´ °                                        /     *´ !°                         #               /     *´ $°                         & '             /     *´ (°                         * +             :     *+µ ±                              ,       - .             :     *+µ !±                              ,       / .             :     *+µ $±                           	   ,    	   0 1             :     *+µ (±                           
   ,    
                 /     *· 2±                          3             l     *· 2*+µ *,µ !*-µ $*µ (±               4                        	      
   ,        	  
   4    5 6   
    7 	 8     
```
```java
Êþº¾   = G  fbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO$DocumentoResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; nomeArquivo Ljava/lang/String; urlS3 
tipoDocumento <init> ()V Code
   
  LineNumberTable LocalVariableTable this hLbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO$DocumentoResponseDTOBuilder; z(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO$DocumentoResponseDTOBuilder;	     MethodParameters |(Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO$DocumentoResponseDTOBuilder;	   	 
	    
	     
 build N()Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO; $ Jbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO
 # & 
 ' I(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V toString ()Ljava/lang/String;
 + - , java/lang/String . / valueOf &(Ljava/lang/Object;)Ljava/lang/String;   1 2 3 makeConcatWithConstants \(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile DocumentoResponseDTO.java BootstrapMethods
 8 : 9 $java/lang/invoke/StringConcatFactory 2 ; (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 7 > _DocumentoResponseDTO.DocumentoResponseDTOBuilder(id=, nomeArquivo=, urlS3=, tipoDocumento=) InnerClasses DocumentoResponseDTOBuilder B %java/lang/invoke/MethodHandles$Lookup D java/lang/invoke/MethodHandles Lookup NestHost !                   	 
            
            
             
              /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	 
      	                 ;     *+µ *°                            
                       ;     *+µ *°                            
         ! "             B     » #Y*´ *´ *´ *´ · %°                         ( )             C     *´ ¸ **´ *´ *´ º 0  °                         4    5         6     <  = ?      # @ 	 A C E  F    #
```
```java
Êþº¾   = 6  Jbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO  java/lang/Object id Ljava/util/UUID; nomeArquivo Ljava/lang/String; urlS3 
tipoDocumento builder j()Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO$DocumentoResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  fbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO$DocumentoResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	     this LLbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO; getNomeArquivo ()Ljava/lang/String;	  !   getUrlS3	  $ 	  getTipoDocumento	  ' 
  setId (Ljava/util/UUID;)V MethodParameters setNomeArquivo (Ljava/lang/String;)V setUrlS3 setTipoDocumento
   I(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V 
SourceFile DocumentoResponseDTO.java InnerClasses DocumentoResponseDTOBuilder NestMembers !                 	     
     	    
           (      » Y· °                      
           /     *´ °                            
           /     *´  °                         "   
           /     *´ #°                         %   
           /     *´ &°                         ( )  
           :     *+µ ±                              *       + ,  
           :     *+µ  ±                              *       - ,  
           :     *+µ #±                           	   *    	   . ,  
           :     *+µ &±                           
   *    
      
           /     *· /±                          0  
           l     *· /*+µ *,µ  *-µ #*µ &±               4                        	      
   *        	  
   1    2 3   
    4 	 5     
```
```java
Êþº¾   = O  br/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO$ExperienciaProfissionalResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; cargo Ljava/lang/String; empresa 
dataInicio Ljava/time/LocalDate; dataFim 	descricao <init> ()V Code
     LineNumberTable LocalVariableTable this Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO$ExperienciaProfissionalResponseDTOBuilder; (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO$ExperienciaProfissionalResponseDTOBuilder;	     MethodParameters (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO$ExperienciaProfissionalResponseDTOBuilder;	   	 
	  !  
 (Ljava/time/LocalDate;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO$ExperienciaProfissionalResponseDTOBuilder;	  $  
	  &  
	  (  
 build \()Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO; , Xbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO
 + .  / s(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/time/LocalDate;Ljava/lang/String;)V toString ()Ljava/lang/String;
 3 5 4 java/lang/String 6 7 valueOf &(Ljava/lang/Object;)Ljava/lang/String;   9 : ; makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile 'ExperienciaProfissionalResponseDTO.java BootstrapMethods
 @ B A $java/lang/invoke/StringConcatFactory : C (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; ? F ExperienciaProfissionalResponseDTO.ExperienciaProfissionalResponseDTOBuilder(id=, cargo=, empresa=, dataInicio=, dataFim=, descricao=) InnerClasses )ExperienciaProfissionalResponseDTOBuilder J %java/lang/invoke/MethodHandles$Lookup L java/lang/invoke/MethodHandles Lookup NestHost !                   	 
            
            
            
            
          	                 /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	 
      	                 ;     *+µ  *°                            
          "             ;     *+µ #*°                            
          "             ;     *+µ %*°                            
                       ;     *+µ '*°                            
         ) *             J      » +Y*´ *´ *´  *´ #*´ %*´ '· -°                          0 1             Q     '*´ ¸ 2*´ *´  *´ #¸ 2*´ %¸ 2*´ 'º 8  °                   '      <    =         >     D  E G      + H 	 I K M  N    +
```
```java
Êþº¾   = C  Xbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO  java/lang/Object id Ljava/util/UUID; cargo Ljava/lang/String; empresa 
dataInicio Ljava/time/LocalDate; dataFim 	descricao builder ()Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO$ExperienciaProfissionalResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  br/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO$ExperienciaProfissionalResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	     this ZLbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO; getCargo ()Ljava/lang/String;	  $   
getEmpresa	  ' 	  
getDataInicio ()Ljava/time/LocalDate;	  + 
  
getDataFim	  .   getDescricao	  1 
  setId (Ljava/util/UUID;)V MethodParameters setCargo (Ljava/lang/String;)V 
setEmpresa 
setDataInicio (Ljava/time/LocalDate;)V 
setDataFim setDescricao
   s(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/time/LocalDate;Ljava/lang/String;)V 
SourceFile 'ExperienciaProfissionalResponseDTO.java InnerClasses )ExperienciaProfissionalResponseDTOBuilder NestMembers !                 	     
          
     	               (      » Y· °                                 /     *´ °                          ! "             /     *´ #°                          % "             /     *´ &°                          ( )             /     *´ *°                          , )             /     *´ -°                          / "             /     *´ 0°                          2 3             :     *+µ ±                               4       5 6             :     *+µ #±                               4       7 6             :     *+µ &±                            	   4    	   8 9             :     *+µ *±                            
   4    
   : 9             :     *+µ -±                               4       ; 6             :     *+µ 0±                            
   4    
                 /     *· <±                           =                  &*· <*+µ *,µ #*-µ &*µ **µ -*µ 0±               H    &        &      &      & 	     & 
     &      & 
   4        	  
    
   >    ? @   
    A 	 B     
```
```java
Êþº¾   = I  vbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO$FormacaoAcademicaResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; curso Ljava/lang/String; instituicao 
dataConclusao Ljava/time/LocalDate; <init> ()V Code
     LineNumberTable LocalVariableTable this xLbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO$FormacaoAcademicaResponseDTOBuilder; (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO$FormacaoAcademicaResponseDTOBuilder;	     MethodParameters (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO$FormacaoAcademicaResponseDTOBuilder;	   	 
	    
 (Ljava/time/LocalDate;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO$FormacaoAcademicaResponseDTOBuilder;	  "  
 build V()Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO; & Rbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO
 % (  ) L(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;)V toString ()Ljava/lang/String;
 - / . java/lang/String 0 1 valueOf &(Ljava/lang/Object;)Ljava/lang/String;   3 4 5 makeConcatWithConstants \(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile !FormacaoAcademicaResponseDTO.java BootstrapMethods
 : < ; $java/lang/invoke/StringConcatFactory 4 = (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 9 @ oFormacaoAcademicaResponseDTO.FormacaoAcademicaResponseDTOBuilder(id=, curso=, instituicao=, dataConclusao=) InnerClasses #FormacaoAcademicaResponseDTOBuilder D %java/lang/invoke/MethodHandles$Lookup F java/lang/invoke/MethodHandles Lookup NestHost !                   	 
            
            
                           /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	 
      	                 ;     *+µ *°                            
                        ;     *+µ !*°                            
         # $             B     » %Y*´ *´ *´ *´ !· '°                         * +             F     *´ ¸ ,*´ *´ *´ !¸ ,º 2  °                         6    7         8     >  ? A      % B 	 C E G  H    %
```
```java
Êþº¾   = 9  Rbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO  java/lang/Object id Ljava/util/UUID; curso Ljava/lang/String; instituicao 
dataConclusao Ljava/time/LocalDate; builder z()Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO$FormacaoAcademicaResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  vbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO$FormacaoAcademicaResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	     this TLbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO; getCurso ()Ljava/lang/String;	  "   getInstituicao	  % 	  getDataConclusao ()Ljava/time/LocalDate;	  ) 
  setId (Ljava/util/UUID;)V MethodParameters setCurso (Ljava/lang/String;)V setInstituicao setDataConclusao (Ljava/time/LocalDate;)V
   L(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;)V 
SourceFile !FormacaoAcademicaResponseDTO.java InnerClasses #FormacaoAcademicaResponseDTOBuilder NestMembers !                 	     
     	  
             (      » Y· °                                 /     *´ °                                        /     *´ !°                         #               /     *´ $°                         & '             /     *´ (°                         * +             :     *+µ ±                              ,       - .             :     *+µ !±                              ,       / .             :     *+µ $±                           	   ,    	   0 1             :     *+µ (±                           
   ,    
                 /     *· 2±                          3             l     *· 2*+µ *,µ !*-µ $*µ (±               4                        	      
   ,        	  
   4    5 6   
    7 	 8     
```
```java
Êþº¾   = G  `br/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO$IdiomaResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; nome Ljava/lang/String; codigo nivel <init> ()V Code
   
  LineNumberTable LocalVariableTable this bLbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO$IdiomaResponseDTOBuilder; t(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO$IdiomaResponseDTOBuilder;	     MethodParameters v(Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO$IdiomaResponseDTOBuilder;	   	 
	    
	     
 build K()Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO; $ Gbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO
 # & 
 ' I(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V toString ()Ljava/lang/String;
 + - , java/lang/String . / valueOf &(Ljava/lang/Object;)Ljava/lang/String;   1 2 3 makeConcatWithConstants \(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile IdiomaResponseDTO.java BootstrapMethods
 8 : 9 $java/lang/invoke/StringConcatFactory 2 ; (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 7 > KIdiomaResponseDTO.IdiomaResponseDTOBuilder(id=, nome=, codigo=, nivel=) InnerClasses IdiomaResponseDTOBuilder B %java/lang/invoke/MethodHandles$Lookup D java/lang/invoke/MethodHandles Lookup NestHost !                   	 
            
            
             
              /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	 
      	                 ;     *+µ *°                            
                       ;     *+µ *°                            
         ! "             B     » #Y*´ *´ *´ *´ · %°                         ( )             C     *´ ¸ **´ *´ *´ º 0  °                         4    5         6     <  = ?      # @ 	 A C E  F    #
```
```java
Êþº¾   = 6  Gbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO  java/lang/Object id Ljava/util/UUID; nome Ljava/lang/String; codigo nivel builder d()Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO$IdiomaResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  `br/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO$IdiomaResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	     this ILbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO; getNome ()Ljava/lang/String;	  !   	getCodigo	  $ 	  getNivel	  ' 
  setId (Ljava/util/UUID;)V MethodParameters setNome (Ljava/lang/String;)V 	setCodigo setNivel
   I(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V 
SourceFile IdiomaResponseDTO.java InnerClasses IdiomaResponseDTOBuilder NestMembers !                 	     
     	    
           (      » Y· °                      
           /     *´ °                            
           /     *´  °                         "   
           /     *´ #°                         %   
           /     *´ &°                         ( )  
           :     *+µ ±                              *       + ,  
           :     *+µ  ±                              *       - ,  
           :     *+µ #±                           	   *    	   . ,  
           :     *+µ &±                           
   *    
      
           /     *· /±                          0  
           l     *· /*+µ *,µ  *-µ #*µ &±               4                        	      
   *        	  
   1    2 3   
    4 	 5     
```
```java
Êþº¾   = A  lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO$LocalAtuacaoResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; nome Ljava/lang/String; <init> ()V Code
     LineNumberTable LocalVariableTable this nLbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO$LocalAtuacaoResponseDTOBuilder; (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO$LocalAtuacaoResponseDTOBuilder;	     MethodParameters (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO$LocalAtuacaoResponseDTOBuilder;	   	 
 build Q()Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;  Mbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO
     ! %(Ljava/util/UUID;Ljava/lang/String;)V toString ()Ljava/lang/String;
 % ' & java/lang/String ( ) valueOf &(Ljava/lang/Object;)Ljava/lang/String;   + , - makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile LocalAtuacaoResponseDTO.java BootstrapMethods
 2 4 3 $java/lang/invoke/StringConcatFactory , 5 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 1 8 DLocalAtuacaoResponseDTO.LocalAtuacaoResponseDTOBuilder(id=, nome=) InnerClasses LocalAtuacaoResponseDTOBuilder < %java/lang/invoke/MethodHandles$Lookup > java/lang/invoke/MethodHandles Lookup NestHost !                   	 
                        
   /     *· ±                                    
   ;     *+µ *°                                     	           
   ;     *+µ *°                           	 
      	              
   :     » Y*´ *´ · °                         " #          
   ;     *´ ¸ $*´ º *  °                         .    /         0     6  7 9       : 	 ; = ?  @    
```
```java
Êþº¾   = ,  Mbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO  java/lang/Object id Ljava/util/UUID; nome Ljava/lang/String; builder p()Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO$LocalAtuacaoResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO$LocalAtuacaoResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	     this OLbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO; getNome ()Ljava/lang/String;	     setId (Ljava/util/UUID;)V MethodParameters setNome (Ljava/lang/String;)V
   %(Ljava/util/UUID;Ljava/lang/String;)V 
SourceFile LocalAtuacaoResponseDTO.java InnerClasses LocalAtuacaoResponseDTOBuilder NestMembers !                 	 	 
          
   (      » Y· °                              
   /     *´ °                                    
   /     *´ °                           !          
   :     *+µ ±                              "       # $          
   :     *+µ ±                              "                  
   /     *· %±                          &          
   M     *· %*+µ *,µ ±                                     "   	      '    ( )   
    * 	 +     
```
```java
Êþº¾   =   lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; pessoa ;Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO; 	numeroOab Ljava/lang/String; statusProfissional usaMarketplace Ljava/lang/Boolean; fazParteDePlano 	empresaId planoId tenantId 
certificacoes Ljava/util/List; 	Signature aLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;>; 
documentos ^Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;>; experiencias lLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;>; 	formacoes fLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;>; 
locaisAtuacao aLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;>; areasAtuacao `Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;>; idiomas [Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;>; tiposAtendimento dLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;>; rolesProfissional eLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO;>; <init> ()V Code
  , ( ) LineNumberTable LocalVariableTable this nLbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder; (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;	  3   MethodParameters «(Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;	  7 	 
 (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;	  :  	  < 
  (Ljava/lang/Boolean;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;	  ?  	  A  	  C  	  E  	  G   (Ljava/util/List;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder; Ñ(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;>;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;	  K   LocalVariableTypeTable Î(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;>;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;	  O   Ü(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;>;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;	  R   Ö(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;>;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;	  U   Ñ(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;>;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;	  X   Ð(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;>;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;	  [    Ë(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;>;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;	  ^ "  Ô(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;>;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;	  a $  Õ(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO;>;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;	  d &  build Q()Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO; h Mbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO
 g j ( kX(Ljava/util/UUID;Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V toString ()Ljava/lang/String;
 o q p java/lang/String r s valueOf &(Ljava/lang/Object;)Ljava/lang/String;   u v w makeConcatWithConstantsX(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile ProfissionalResponseDTO.java BootstrapMethods
 | ~ } $java/lang/invoke/StringConcatFactory v  (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; { CProfissionalResponseDTO.ProfissionalResponseDTOBuilder(id=, pessoa=, numeroOab=, statusProfissional=, usaMarketplace=, fazParteDePlano=, empresaId=, planoId=, tenantId=, certificacoes=, documentos=, experiencias=, formacoes=, locaisAtuacao=, areasAtuacao=, idiomas=, tiposAtendimento=, rolesProfissional=) InnerClasses ProfissionalResponseDTOBuilder  %java/lang/invoke/MethodHandles$Lookup  java/lang/invoke/MethodHandles Lookup NestHost !                   	 
                       
                                                                                                                                                                     !          "       #          $       %          &       '            ( )          *   /     *· +±    -        .        / 0     1          *   ;     *+µ 2*°    -        .        / 0         4       	 5          *   ;     *+µ 6*°    -        .        / 0      	 
  4    	    8          *   ;     *+µ 9*°    -        .        / 0         4       
 8          *   ;     *+µ ;*°    -        .        / 0      
   4    
    =          *   ;     *+µ >*°    -        .        / 0         4        =          *   ;     *+µ @*°    -        .        / 0         4        1          *   ;     *+µ B*°    -        .        / 0         4        1          *   ;     *+µ D*°    -        .        / 0         4        1          *   ;     *+µ F*°    -        .        / 0         4        H      I         *   M     *+µ J*°    -        .        / 0         L           4        H      M         *   M     *+µ N*°    -        .        / 0         L           4        H      P         *   M     *+µ Q*°    -        .        / 0         L           4        H      S         *   M     *+µ T*°    -        .        / 0         L           4        H      V         *   M     *+µ W*°    -        .        / 0         L           4         H      Y         *   M     *+µ Z*°    -        .        / 0          L          !  4        " H      \         *   M     *+µ ]*°    -        .        / 0      "   L        " #  4    "   $ H      _         *   M     *+µ `*°    -        .        / 0      $   L        $ %  4    $   & H      b         *   M     *+µ c*°    -        .        / 0      &   L        & '  4    &   e f          *   z     P» gY*´ 2*´ 6*´ 9*´ ;*´ >*´ @*´ B*´ D*´ F*´ J*´ N*´ Q*´ T*´ W*´ Z*´ ]*´ `*´ c· i°    -        .       P / 0    l m          *   ¨     ~*´ 2¸ n*´ 6¸ n*´ 9*´ ;*´ >¸ n*´ @¸ n*´ B¸ n*´ D¸ n*´ F¸ n*´ J¸ n*´ N¸ n*´ Q¸ n*´ T¸ n*´ W¸ n*´ Z¸ n*´ ]¸ n*´ `¸ n*´ c¸ nº t  °    -        .       ~ / 0    x    y         z              g  	         g
```
```java
Êþº¾   = £  Mbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO  java/lang/Object id Ljava/util/UUID; pessoa ;Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO; 	numeroOab Ljava/lang/String; statusProfissional usaMarketplace Ljava/lang/Boolean; fazParteDePlano 	empresaId planoId tenantId 
certificacoes Ljava/util/List; 	Signature aLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;>; 
documentos ^Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;>; experiencias lLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;>; 	formacoes fLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;>; 
locaisAtuacao aLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;>; areasAtuacao `Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;>; idiomas [Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;>; tiposAtendimento dLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;>; rolesProfissional eLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO;>; builder p()Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code , lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder
 + . / 0 <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	  6   this OLbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO; 	getPessoa =()Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO;	  <   getNumeroOab ()Ljava/lang/String;	  @ 	 
 getStatusProfissional	  C  
 getUsaMarketplace ()Ljava/lang/Boolean;	  G  
 getFazParteDePlano	  J  
 getEmpresaId	  M   
getPlanoId	  P   getTenantId	  S   getCertificacoes ()Ljava/util/List; c()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;>;	  X   
getDocumentos `()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;>;	  \   getExperiencias n()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;>;	  `   getFormacoes h()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;>;	  d   getLocaisAtuacao c()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;>;	  h   getAreasAtuacao b()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;>;	  l   
getIdiomas ]()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;>;	  p    getTiposAtendimento f()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;>;	  t "  getRolesProfissional g()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO;>;	  x $  setId (Ljava/util/UUID;)V MethodParameters 	setPessoa >(Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO;)V setNumeroOab (Ljava/lang/String;)V setStatusProfissional setUsaMarketplace (Ljava/lang/Boolean;)V setFazParteDePlano setEmpresaId 
setPlanoId setTenantId setCertificacoes (Ljava/util/List;)V d(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;>;)V LocalVariableTypeTable 
setDocumentos a(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;>;)V setExperiencias o(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;>;)V setFormacoes i(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;>;)V setLocaisAtuacao d(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;>;)V setAreasAtuacao c(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;>;)V 
setIdiomas ^(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;>;)V setTiposAtendimento g(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;>;)V setRolesProfissional h(Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO;>;)V
  .X(Ljava/util/UUID;Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V>(Ljava/util/UUID;Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;>;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;>;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;>;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;>;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;>;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;>;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;>;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;>;Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO;>;)V 
SourceFile ProfissionalResponseDTO.java InnerClasses ProfissionalResponseDTOBuilder NestMembers !                 	 
     
     
     
                                                                                 !  "       #  $       % ' 	 & '  (     )   *   (      » +Y· -°    1        2       3 4  (     )   *   /     *´ 5°    1        2        7 8    9 :  (     )   *   /     *´ ;°    1        2        7 8    = >  (     )   *   /     *´ ?°    1        2        7 8    A >  (     )   *   /     *´ B°    1        2        7 8    D E  (     )   *   /     *´ F°    1        2        7 8    H E  (     )   *   /     *´ I°    1        2        7 8    K 4  (     )   *   /     *´ L°    1        2        7 8    N 4  (     )   *   /     *´ O°    1        2        7 8    Q 4  (     )   *   /     *´ R°    1        2        7 8    T U      V (     )   *   /     *´ W°    1        2        7 8    Y U      Z (     )   *   /     *´ [°    1        2        7 8    ] U      ^ (     )   *   /     *´ _°    1        2        7 8    a U      b (     )   *   /     *´ c°    1        2        7 8    e U      f (     )   *   /     *´ g°    1        2        7 8    i U      j (     )   *   /     *´ k°    1        2        7 8    m U      n (     )   *   /     *´ o°    1        2        7 8    q U      r (     )   *   /     *´ s°    1        2        7 8    u U      v (     )   *   /     *´ w°    1        2        7 8    y z  (     )   *   :     *+µ 5±    1        2        7 8         {       | }  (     )   *   :     *+µ ;±    1        2        7 8         {       ~   (     )   *   :     *+µ ?±    1        2        7 8      	 
  {    	      (     )   *   :     *+µ B±    1        2        7 8       
  {          (     )   *   :     *+µ F±    1        2        7 8       
  {          (     )   *   :     *+µ I±    1        2        7 8       
  {        z  (     )   *   :     *+µ L±    1        2        7 8         {        z  (     )   *   :     *+µ O±    1        2        7 8         {        z  (     )   *   :     *+µ R±    1        2        7 8         {               (     )   *   L     *+µ W±    1        2        7 8                    {               (     )   *   L     *+µ [±    1        2        7 8                    {               (     )   *   L     *+µ _±    1        2        7 8                    {               (     )   *   L     *+µ c±    1        2        7 8                    {               (     )   *   L     *+µ g±    1        2        7 8                    {               (     )   *   L     *+µ k±    1        2        7 8                    {               (     )   *   L     *+µ o±    1        2        7 8                    !  {                (     )   *   L     *+µ s±    1        2        7 8      "           " #  {    "           (     )   *   L     *+µ w±    1        2        7 8      $           $ %  {    $   / 0  (     )   *   /     *· ±    1        2        7 8    /        (     )   *  ®     n*· *+µ 5*,µ ;*-µ ?*µ B*µ F*µ I*µ L*µ O*	µ R*
µ W*µ [*µ _*
µ c*µ g*µ k*µ o*µ s*µ w±    1        2   À    n 7 8     n      n      n 	 
    n  
    n  
    n  
    n      n      n   	   n   
   n      n      n   
   n      n      n       n "     n $      \ 	   n   
   n      n      n   
   n      n      n   !    n " #    n $ %  {   I     	                             "  $            
  +  ¡ 	 ¢     +
```
```java
Êþº¾   = A  tbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO$RoleProfissionalResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; name Ljava/lang/String; <init> ()V Code
     LineNumberTable LocalVariableTable this vLbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO$RoleProfissionalResponseDTOBuilder; (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO$RoleProfissionalResponseDTOBuilder;	     MethodParameters (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO$RoleProfissionalResponseDTOBuilder;	   	 
 build U()Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO;  Qbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO
     ! %(Ljava/util/UUID;Ljava/lang/String;)V toString ()Ljava/lang/String;
 % ' & java/lang/String ( ) valueOf &(Ljava/lang/Object;)Ljava/lang/String;   + , - makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile  RoleProfissionalResponseDTO.java BootstrapMethods
 2 4 3 $java/lang/invoke/StringConcatFactory , 5 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 1 8 LRoleProfissionalResponseDTO.RoleProfissionalResponseDTOBuilder(id=, name=) InnerClasses "RoleProfissionalResponseDTOBuilder < %java/lang/invoke/MethodHandles$Lookup > java/lang/invoke/MethodHandles Lookup NestHost !                   	 
                        
   /     *· ±                                    
   ;     *+µ *°                                     	           
   ;     *+µ *°                           	 
      	              
   :     » Y*´ *´ · °                         " #          
   ;     *´ ¸ $*´ º *  °                         .    /         0     6  7 9       : 	 ; = ?  @    
```
```java
Êþº¾   = ,  Qbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO  java/lang/Object id Ljava/util/UUID; name Ljava/lang/String; builder x()Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO$RoleProfissionalResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  tbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO$RoleProfissionalResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	     this SLbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO; getName ()Ljava/lang/String;	     setId (Ljava/util/UUID;)V MethodParameters setName (Ljava/lang/String;)V
   %(Ljava/util/UUID;Ljava/lang/String;)V 
SourceFile  RoleProfissionalResponseDTO.java InnerClasses "RoleProfissionalResponseDTOBuilder NestMembers !                 	 	 
          
   (      » Y· °                              
   /     *´ °                                    
   /     *´ °                           !          
   :     *+µ ±                              "       # $          
   :     *+µ ±                              "                  
   /     *· %±                          &          
   M     *· %*+µ *,µ ±                                     "   	      '    ( )   
    * 	 +     
```
```java
Êþº¾   = A  rbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO$TipoAtendimentoResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; nome Ljava/lang/String; <init> ()V Code
     LineNumberTable LocalVariableTable this tLbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO$TipoAtendimentoResponseDTOBuilder; (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO$TipoAtendimentoResponseDTOBuilder;	     MethodParameters (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO$TipoAtendimentoResponseDTOBuilder;	   	 
 build T()Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;  Pbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO
     ! %(Ljava/util/UUID;Ljava/lang/String;)V toString ()Ljava/lang/String;
 % ' & java/lang/String ( ) valueOf &(Ljava/lang/Object;)Ljava/lang/String;   + , - makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile TipoAtendimentoResponseDTO.java BootstrapMethods
 2 4 3 $java/lang/invoke/StringConcatFactory , 5 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 1 8 JTipoAtendimentoResponseDTO.TipoAtendimentoResponseDTOBuilder(id=, nome=) InnerClasses !TipoAtendimentoResponseDTOBuilder < %java/lang/invoke/MethodHandles$Lookup > java/lang/invoke/MethodHandles Lookup NestHost !                   	 
                        
   /     *· ±                                    
   ;     *+µ *°                                     	           
   ;     *+µ *°                           	 
      	              
   :     » Y*´ *´ · °                         " #          
   ;     *´ ¸ $*´ º *  °                         .    /         0     6  7 9       : 	 ; = ?  @    
```
```java
Êþº¾   = ,  Pbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO  java/lang/Object id Ljava/util/UUID; nome Ljava/lang/String; builder v()Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO$TipoAtendimentoResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  rbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO$TipoAtendimentoResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	     this RLbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO; getNome ()Ljava/lang/String;	     setId (Ljava/util/UUID;)V MethodParameters setNome (Ljava/lang/String;)V
   %(Ljava/util/UUID;Ljava/lang/String;)V 
SourceFile TipoAtendimentoResponseDTO.java InnerClasses !TipoAtendimentoResponseDTOBuilder NestMembers !                 	 	 
          
   (      » Y· °                              
   /     *´ °                                    
   /     *´ °                           !          
   :     *+µ ±                              "       # $          
   :     *+µ ±                              "                  
   /     *· %±                          &          
   M     *· %*+µ *,µ ±                                     "   	      '    ( )   
    * 	 +     
```
```java
Êþº¾   = !  Abr/com/legalconnect/advogado/application/mapper/AreaAtuacaoMapper  java/lang/Object INSTANCE CLbr/com/legalconnect/advogado/application/mapper/AreaAtuacaoMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao;)Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO; entity MethodParameters toEntity (Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao; dto 
SourceFile AreaAtuacaoMapper.java RuntimeInvisibleAnnotations Lorg/mapstruct/Mapper; componentModel spring                	   ,      ¸ 
À ³ ±                                                   s  
```
```java
Êþº¾   = c  Ebr/com/legalconnect/advogado/application/mapper/AreaAtuacaoMapperImpl  java/lang/Object  Abr/com/legalconnect/advogado/application/mapper/AreaAtuacaoMapper <init> ()V Code
     LineNumberTable LocalVariableTable this GLbr/com/legalconnect/advogado/application/mapper/AreaAtuacaoMapperImpl; 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao;)Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;
    Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO   builder n()Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO$AreaAtuacaoResponseDTOBuilder;
    <br/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao   getDescricao ()Ljava/lang/String;
  !   jbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO$AreaAtuacaoResponseDTOBuilder " # 	descricao (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO$AreaAtuacaoResponseDTOBuilder;
  % & ' getId ()Ljava/util/UUID;
  ) * + id ~(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO$AreaAtuacaoResponseDTOBuilder;
  - .  getNome
  0 1 # nome
  3 4 5 build P()Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO; entity >Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao; areaAtuacaoResponseDTO lLbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO$AreaAtuacaoResponseDTOBuilder; 
StackMapTable MethodParameters toEntity (Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao;
  ?  @ S()Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder;
  %
 C E D Obr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder * F O(Ljava/util/UUID;)Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;
  
 C I " J e(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder;
  -
 C M 1 J
 C O 4 P @()Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao; dto NLbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO; areaAtuacao QLbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder; LocalVariableTypeTable ULbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder<**>; 
SourceFile AreaAtuacaoMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; InnerClasses AreaAtuacaoResponseDTOBuilder AreaAtuacaoBuilder _ ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder a )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder !            	   /     *· 
±            
                	        *+Ç °¸ M,+¶ ¶ W,+¶ $¶ (W,+¶ ,¶ /W,¶ 2°                
      %  
        *       * 6 7  
   8 9  :     ;    6    < =  	        *+Ç °¸ >M,+¶ A¶ BW,+¶ G¶ HW,+¶ K¶ LW,¶ N°           !  "  % 
 '  (  ) % + 
        *       * Q R  
   S T  U     
   S V  :     ;    Q    W    X Y     Z   [       \ 	 C  ]	 ^ ` b	
```
```java
Êþº¾   = .  Bbr/com/legalconnect/advogado/application/mapper/CertificacaoMapper  java/lang/Object INSTANCE DLbr/com/legalconnect/advogado/application/mapper/CertificacaoMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable toEntity (Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao; RuntimeInvisibleAnnotations Lorg/mapstruct/Mappings; value Lorg/mapstruct/Mapping; target profissional ignore    tenantId dto MethodParameters 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO; entity updateEntityFromDto (Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)V id $RuntimeInvisibleParameterAnnotations Lorg/mapstruct/MappingTarget; 
SourceFile CertificacaoMapper.java Lorg/mapstruct/Mapper; componentModel spring                	   ,      ¸ 
À ³ ±                        )    [ @   s  Z @   s  Z          ! "       #   $ %     8    [ @   s & Z @   s  Z @   s  Z  '   	    (       	    #    )    *      +  ,s -
```
```java
Êþº¾   = ~  Fbr/com/legalconnect/advogado/application/mapper/CertificacaoMapperImpl  java/lang/Object  Bbr/com/legalconnect/advogado/application/mapper/CertificacaoMapper <init> ()V Code
     LineNumberTable LocalVariableTable this HLbr/com/legalconnect/advogado/application/mapper/CertificacaoMapperImpl; toEntity (Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;
    =br/com/legalconnect/advogado/domain/modal/entity/Certificacao   builder U()Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder;
    Kbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO   getId ()Ljava/util/UUID;
  !   Qbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder " # id O(Ljava/util/UUID;)Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;
  % & ' getDataConclusao ()Ljava/time/LocalDate;
  ) * + 
dataConclusao j(Ljava/time/LocalDate;)Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder;
  - . / getInstituicao ()Ljava/lang/String;
  1 2 3 instituicao g(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder;
  5 6 / getNome
  8 9 3 nome
  ; < = build A()Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao; dto MLbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO; certificacao SLbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder; LocalVariableTypeTable WLbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder<**>; 
StackMapTable MethodParameters 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;
 I K J Mbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO  L p()Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO$CertificacaoResponseDTOBuilder;
  %
 O Q P lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO$CertificacaoResponseDTOBuilder * R (Ljava/time/LocalDate;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO$CertificacaoResponseDTOBuilder;
  
 O U " V (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO$CertificacaoResponseDTOBuilder;
  -
 O Y 2 Z (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO$CertificacaoResponseDTOBuilder;
  5
 O ] 9 Z
 O _ < ` Q()Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO; entity ?Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao; certificacaoResponseDTO nLbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO$CertificacaoResponseDTOBuilder; updateEntityFromDto (Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)V
  h i j setDataConclusao (Ljava/time/LocalDate;)V
  l m n setInstituicao (Ljava/lang/String;)V
  p q n setNome 
SourceFile CertificacaoMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; InnerClasses CertificacaoResponseDTOBuilder CertificacaoBuilder z ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder | )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder !            	   /     *· 
±            
                	   ¨     3+Ç °¸ M,+¶ ¶ W,+¶ $¶ (W,+¶ ,¶ 0W,+¶ 4¶ 7W,¶ :°       "         
      %  .  
        3       3 > ?  
 ) @ A  B     
 ) @ C  D     E    >    F G  	        3+Ç °¸ HM,+¶ M¶ NW,+¶ S¶ TW,+¶ W¶ XW,+¶ [¶ \W,¶ ^°       "    #  $  ' 
 )  *  + % , . . 
        3       3 a b  
 ) c d  D     E    a    e f  	   y     +Ç ±,+¶ $¶ g,+¶ ,¶ k,+¶ 4¶ o±           3  4  7 
 8  9  : 
                > ?     a b  D     E   	 >   a    r    s t     u   v     O I w 	   x	 y { }	
```
```java
Êþº¾   = A  ?br/com/legalconnect/advogado/application/mapper/DocumentoMapper  java/lang/Object INSTANCE ALbr/com/legalconnect/advogado/application/mapper/DocumentoMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable toEntity (Lbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest;)Lbr/com/legalconnect/advogado/domain/modal/entity/Documento; RuntimeInvisibleAnnotations Lorg/mapstruct/Mappings; value Lorg/mapstruct/Mapping; target urlS3 ignore    profissional tenantId source 
tipoDocumento qualifiedByName mapDocumentoTipoToString dto MethodParameters 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;)Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO; entity updateEntityFromDto (Lbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest;Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;)V id $RuntimeInvisibleParameterAnnotations Lorg/mapstruct/MappingTarget; V(Lbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo;)Ljava/lang/String; Lorg/mapstruct/Named;
 1 3 2 @br/com/legalconnect/advogado/application/dto/enums/DocumentoTipo 4 5 name ()Ljava/lang/String; this tipo BLbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo; 
StackMapTable ; java/lang/String 
SourceFile DocumentoMapper.java Lorg/mapstruct/Mapper; componentModel spring                	   ,      ¸ 
À ³ ±                        O    [ @   s  Z @   s  Z @   s  Z @    s ! s ! "[ s # %    $   & '          s ! s ! %    (   ) *     ^    [ @   s + Z @   s  Z @   s  Z @   s  Z @    s ! s ! "[ s # ,   	    -   %   	 $   (    # .       /  s # 	   N     
+Æ 
+¶ 0§ °           G        
 6      
 7 8  9    @ : %    7    <    =      >  ?s @
```
```java
Êþº¾   = q  Cbr/com/legalconnect/advogado/application/mapper/DocumentoMapperImpl  java/lang/Object  ?br/com/legalconnect/advogado/application/mapper/DocumentoMapper <init> ()V Code
     LineNumberTable LocalVariableTable this ELbr/com/legalconnect/advogado/application/mapper/DocumentoMapperImpl; toEntity (Lbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest;)Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;
    :br/com/legalconnect/advogado/domain/modal/entity/Documento   builder O()Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder;
    Kbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest   getTipoDocumento D()Lbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo;
     ! mapDocumentoTipoToString V(Lbr/com/legalconnect/advogado/application/dto/enums/DocumentoTipo;)Ljava/lang/String;
 # % $ Kbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder & ' 
tipoDocumento a(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder;
  ) * + getNomeArquivo ()Ljava/lang/String;
 # - . ' nomeArquivo
 # 0 1 2 build >()Lbr/com/legalconnect/advogado/domain/modal/entity/Documento; dto MLbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest; 	documento MLbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder; LocalVariableTypeTable QLbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder<**>; 
StackMapTable MethodParameters 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;)Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;
 > @ ? Jbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO  A j()Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO$DocumentoResponseDTOBuilder;
  C  +
 E G F fbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO$DocumentoResponseDTOBuilder & H |(Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO$DocumentoResponseDTOBuilder;
  J K L getId ()Ljava/util/UUID;
 E N O P id z(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO$DocumentoResponseDTOBuilder;
  )
 E S . H
  U V + getUrlS3
 E X Y H urlS3
 E [ 1 \ N()Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO; entity <Lbr/com/legalconnect/advogado/domain/modal/entity/Documento; documentoResponseDTO hLbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO$DocumentoResponseDTOBuilder; updateEntityFromDto (Lbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest;Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;)V
  d e f setTipoDocumento (Ljava/lang/String;)V
  h i f setNomeArquivo 
SourceFile DocumentoMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; InnerClasses DocumentoResponseDTOBuilder DocumentoBuilder !            	   /     *· 
±            
                	        %+Ç °¸ M,*+¶ ¶ ¶ "W,+¶ (¶ ,W,¶ /°                
       
        %       % 3 4  
  5 6  7     
  5 8  9     :    3    ; <  	        3+Ç °¸ =M,+¶ B¶ DW,+¶ I¶ MW,+¶ Q¶ RW,+¶ T¶ WW,¶ Z°       "    !  "  % 
 '  (  ) % * . , 
        3       3 ] ^  
 ) _ `  9     :    ]    a b  	   q     +Ç ±,*+¶ ¶ ¶ c,+¶ (¶ g±           1  2  5  6  7 
                3 4     ] ^  9     :   	 3   ]    j    k l     m   n     E > o 	 #  p	
```
```java
Êþº¾   = .  Mbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapper  java/lang/Object INSTANCE OLbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable toEntity ¤(Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional; RuntimeInvisibleAnnotations Lorg/mapstruct/Mappings; value Lorg/mapstruct/Mapping; target profissional ignore    tenantId dto MethodParameters 
toResponseDTO ¦(Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO; entity updateEntityFromDto ¥(Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)V id $RuntimeInvisibleParameterAnnotations Lorg/mapstruct/MappingTarget; 
SourceFile "ExperienciaProfissionalMapper.java Lorg/mapstruct/Mapper; componentModel spring                	   ,      ¸ 
À ³ ±                        )    [ @   s  Z @   s  Z          ! "       #   $ %     8    [ @   s & Z @   s  Z @   s  Z  '   	    (       	    #    )    *      +  ,s -
```
```java
Êþº¾   =   Qbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapperImpl  java/lang/Object  Mbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapper <init> ()V Code
     LineNumberTable LocalVariableTable this SLbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapperImpl; toEntity ¤(Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;
    Hbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional   builder k()Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder;
    Vbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO   getId ()Ljava/util/UUID;
  !   gbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder " # id O(Ljava/util/UUID;)Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;
  % & ' getCargo ()Ljava/lang/String;
  ) * + cargo }(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder;
  - . / 
getDataFim ()Ljava/time/LocalDate;
  1 2 3 dataFim (Ljava/time/LocalDate;)Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder;
  5 6 / 
getDataInicio
  8 9 3 
dataInicio
  ; < ' getDescricao
  > ? + 	descricao
  A B ' 
getEmpresa
  D E + empresa
  G H I build L()Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional; dto XLbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO; experienciaProfissional iLbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder; LocalVariableTypeTable mLbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder<**>; 
StackMapTable MethodParameters 
toResponseDTO ¦(Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;
 U W V Xbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO  X ()Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO$ExperienciaProfissionalResponseDTOBuilder;
  %
 [ ] \ br/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO$ExperienciaProfissionalResponseDTOBuilder * ^ (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO$ExperienciaProfissionalResponseDTOBuilder;
  -
 [ a 2 b (Ljava/time/LocalDate;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO$ExperienciaProfissionalResponseDTOBuilder;
  5
 [ e 9 b
  ;
 [ h ? ^
  A
 [ k E ^
  
 [ n " o (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO$ExperienciaProfissionalResponseDTOBuilder;
 [ q H r \()Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO; entity JLbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional; "experienciaProfissionalResponseDTO Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO$ExperienciaProfissionalResponseDTOBuilder; updateEntityFromDto ¥(Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)V
  z { | setCargo (Ljava/lang/String;)V
  ~   
setDataFim (Ljava/time/LocalDate;)V
     
setDataInicio
    | setDescricao
    | 
setEmpresa 
SourceFile &ExperienciaProfissionalMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; InnerClasses )ExperienciaProfissionalResponseDTOBuilder ExperienciaProfissionalBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder  )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder !            	   /     *· 
±            
                	   Â     E+Ç °¸ M,+¶ ¶ W,+¶ $¶ (W,+¶ ,¶ 0W,+¶ 4¶ 7W,+¶ :¶ =W,+¶ @¶ CW,¶ F°       * 
        
      %  .  7  @   
        E       E J K  
 ; L M  N     
 ; L O  P     Q    J    R S  	   °     E+Ç °¸ TM,+¶ Y¶ ZW,+¶ _¶ `W,+¶ c¶ dW,+¶ f¶ gW,+¶ i¶ jW,+¶ l¶ mW,¶ p°       * 
   %  &  ) 
 +  ,  - % . . / 7 0 @ 2 
        E       E s t  
 ; u v  P     Q    s    w x  	        .+Ç ±,+¶ $¶ y,+¶ ,¶ },+¶ 4¶ ,+¶ :¶ ,+¶ @¶ ±       "    7  8  ; 
 <  =  > % ? - @ 
        .       . J K    . s t  P     Q   	 J   s                      [ U  	   	   	
```
```java
Êþº¾   = .  Gbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapper  java/lang/Object INSTANCE ILbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable toEntity (Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica; RuntimeInvisibleAnnotations Lorg/mapstruct/Mappings; value Lorg/mapstruct/Mapping; target profissional ignore    tenantId dto MethodParameters 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO; entity updateEntityFromDto (Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)V id $RuntimeInvisibleParameterAnnotations Lorg/mapstruct/MappingTarget; 
SourceFile FormacaoAcademicaMapper.java Lorg/mapstruct/Mapper; componentModel spring                	   ,      ¸ 
À ³ ±                        )    [ @   s  Z @   s  Z          ! "       #   $ %     8    [ @   s & Z @   s  Z @   s  Z  '   	    (       	    #    )    *      +  ,s -
```
```java
Êþº¾   = ~  Kbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapperImpl  java/lang/Object  Gbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapper <init> ()V Code
     LineNumberTable LocalVariableTable this MLbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapperImpl; toEntity (Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;
    Bbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica   builder _()Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder;
    Pbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO   getId ()Ljava/util/UUID;
  !   [br/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder " # id O(Ljava/util/UUID;)Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;
  % & ' getCurso ()Ljava/lang/String;
  ) * + curso q(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder;
  - . / getDataConclusao ()Ljava/time/LocalDate;
  1 2 3 
dataConclusao t(Ljava/time/LocalDate;)Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder;
  5 6 ' getInstituicao
  8 9 + instituicao
  ; < = build F()Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica; dto RLbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO; formacaoAcademica ]Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder; LocalVariableTypeTable aLbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder<**>; 
StackMapTable MethodParameters 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;
 I K J Rbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO  L z()Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO$FormacaoAcademicaResponseDTOBuilder;
  %
 O Q P vbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO$FormacaoAcademicaResponseDTOBuilder * R (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO$FormacaoAcademicaResponseDTOBuilder;
  -
 O U 2 V (Ljava/time/LocalDate;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO$FormacaoAcademicaResponseDTOBuilder;
  
 O Y " Z (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO$FormacaoAcademicaResponseDTOBuilder;
  5
 O ] 9 R
 O _ < ` V()Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO; entity DLbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica; formacaoAcademicaResponseDTO xLbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO$FormacaoAcademicaResponseDTOBuilder; updateEntityFromDto (Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)V
  h i j setCurso (Ljava/lang/String;)V
  l m n setDataConclusao (Ljava/time/LocalDate;)V
  p q j setInstituicao 
SourceFile  FormacaoAcademicaMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; InnerClasses #FormacaoAcademicaResponseDTOBuilder FormacaoAcademicaBuilder z ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder | )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder !            	   /     *· 
±            
                	   ¨     3+Ç °¸ M,+¶ ¶ W,+¶ $¶ (W,+¶ ,¶ 0W,+¶ 4¶ 7W,¶ :°       "         
      %  .  
        3       3 > ?  
 ) @ A  B     
 ) @ C  D     E    >    F G  	        3+Ç °¸ HM,+¶ M¶ NW,+¶ S¶ TW,+¶ W¶ XW,+¶ [¶ \W,¶ ^°       "    #  $  ' 
 )  *  + % , . . 
        3       3 a b  
 ) c d  D     E    a    e f  	   y     +Ç ±,+¶ $¶ g,+¶ ,¶ k,+¶ 4¶ o±           3  4  7 
 8  9  : 
                > ?     a b  D     E   	 >   a    r    s t     u   v     O I w 	   x	 y { }	
```
```java
Êþº¾   = !  <br/com/legalconnect/advogado/application/mapper/IdiomaMapper  java/lang/Object INSTANCE >Lbr/com/legalconnect/advogado/application/mapper/IdiomaMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma;)Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO; entity MethodParameters toEntity (Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma; dto 
SourceFile IdiomaMapper.java RuntimeInvisibleAnnotations Lorg/mapstruct/Mapper; componentModel spring                	   ,      ¸ 
À ³ ±                                                   s  
```
```java
Êþº¾   = l  @br/com/legalconnect/advogado/application/mapper/IdiomaMapperImpl  java/lang/Object  <br/com/legalconnect/advogado/application/mapper/IdiomaMapper <init> ()V Code
     LineNumberTable LocalVariableTable this BLbr/com/legalconnect/advogado/application/mapper/IdiomaMapperImpl; 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma;)Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;
    Gbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO   builder d()Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO$IdiomaResponseDTOBuilder;
    7br/com/legalconnect/advogado/domain/modal/entity/Idioma   	getCodigo ()Ljava/lang/String;
  !   `br/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO$IdiomaResponseDTOBuilder " # codigo v(Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO$IdiomaResponseDTOBuilder;
  % & ' getId ()Ljava/util/UUID;
  ) * + id t(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO$IdiomaResponseDTOBuilder;
  - .  getNivel
  0 1 # nivel
  3 4  getNome
  6 7 # nome
  9 : ; build K()Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO; entity 9Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma; idiomaResponseDTO bLbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO$IdiomaResponseDTOBuilder; 
StackMapTable MethodParameters toEntity (Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma;
  E  F I()Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder;
  %
 I K J Ebr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder * L O(Ljava/util/UUID;)Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;
  
 I O " P [(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder;
  -
 I S 1 P
  3
 I V 7 P
 I X : Y ;()Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma; dto ILbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO; idioma GLbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder; LocalVariableTypeTable KLbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder<**>; 
SourceFile IdiomaMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; InnerClasses IdiomaResponseDTOBuilder 
IdiomaBuilder h ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder j )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder !            	   /     *· 
±            
                	        3+Ç °¸ M,+¶ ¶ W,+¶ $¶ (W,+¶ ,¶ /W,+¶ 2¶ 5W,¶ 8°       "         
      %  .  
        3       3 < =  
 ) > ?  @     A    <    B C  	   ¨     3+Ç °¸ DM,+¶ G¶ HW,+¶ M¶ NW,+¶ Q¶ RW,+¶ T¶ UW,¶ W°       "    "  #  & 
 (  )  * % + . - 
        3       3 Z [  
 ) \ ]  ^     
 ) \ _  @     A    Z    `    a b     c   d       e 	 I  f	 g i k	
```
```java
Êþº¾   = !  Bbr/com/legalconnect/advogado/application/mapper/LocalAtuacaoMapper  java/lang/Object INSTANCE DLbr/com/legalconnect/advogado/application/mapper/LocalAtuacaoMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao;)Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO; entity MethodParameters toEntity (Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao; dto 
SourceFile LocalAtuacaoMapper.java RuntimeInvisibleAnnotations Lorg/mapstruct/Mapper; componentModel spring                	   ,      ¸ 
À ³ ±                                                   s  
```
```java
Êþº¾   = Z  Fbr/com/legalconnect/advogado/application/mapper/LocalAtuacaoMapperImpl  java/lang/Object  Bbr/com/legalconnect/advogado/application/mapper/LocalAtuacaoMapper <init> ()V Code
     LineNumberTable LocalVariableTable this HLbr/com/legalconnect/advogado/application/mapper/LocalAtuacaoMapperImpl; 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao;)Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;
    Mbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO   builder p()Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO$LocalAtuacaoResponseDTOBuilder;
    =br/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao   getId ()Ljava/util/UUID;
  !   lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO$LocalAtuacaoResponseDTOBuilder " # id (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO$LocalAtuacaoResponseDTOBuilder;
  % & ' getNome ()Ljava/lang/String;
  ) * + nome (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO$LocalAtuacaoResponseDTOBuilder;
  - . / build Q()Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO; entity ?Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao; localAtuacaoResponseDTO nLbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO$LocalAtuacaoResponseDTOBuilder; 
StackMapTable MethodParameters toEntity (Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao;
  9  : U()Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder;
  
 = ? > Qbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder " @ O(Ljava/util/UUID;)Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;
  %
 = C * D g(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder;
 = F . G A()Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao; dto OLbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO; localAtuacao SLbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder; LocalVariableTypeTable WLbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder<**>; 
SourceFile LocalAtuacaoMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; InnerClasses LocalAtuacaoResponseDTOBuilder LocalAtuacaoBuilder V ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder X )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder !            	   /     *· 
±            
                	   |     !+Ç °¸ M,+¶ ¶ W,+¶ $¶ (W,¶ ,°                
      
        !       ! 0 1  
  2 3  4     5    0    6 7  	        !+Ç °¸ 8M,+¶ ;¶ <W,+¶ A¶ BW,¶ E°              !  $ 
 &  '  ) 
        !       ! H I  
  J K  L     
  J M  4     5    H    N    O P     Q   R       S 	 =  T	 U W Y	
```
```java
Êþº¾   = H  Bbr/com/legalconnect/advogado/application/mapper/ProfissionalMapper  java/lang/Object INSTANCE DLbr/com/legalconnect/advogado/application/mapper/ProfissionalMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable toEntity (Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest;)Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; RuntimeInvisibleAnnotations Lorg/mapstruct/Mappings; value Lorg/mapstruct/Mapping; target id ignore    pessoaId statusProfissional fazParteDePlano 
certificacoes 
documentos experiencias 	formacoes roleProfissionals source locaisAtuacaoIds areaAtuacaoIds 	idiomaIds tipoAtendimentoIds dto MethodParameters updateEntityFromDto (Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest;Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)V pessoa.usuario usuario $RuntimeInvisibleParameterAnnotations Lorg/mapstruct/MappingTarget; entity 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO; pessoa 
locaisAtuacao areasAtuacao idiomas tiposAtendimento rolesProfissional 
SourceFile ProfissionalMapper.java Lorg/mapstruct/Mapper; componentModel spring uses 0Lbr/com/legalconnect/commom/mapper/PessoaMapper; DLbr/com/legalconnect/advogado/application/mapper/CertificacaoMapper; ALbr/com/legalconnect/advogado/application/mapper/DocumentoMapper; OLbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapper; ILbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapper; HLbr/com/legalconnect/advogado/application/mapper/RoleProfissionalMapper;                	   ,      ¸ 
À ³ ±           !             Î    [ 
@   s  Z @   s  Z @   s  Z @   s   Z @   s ! Z @   s " Z @   s # Z @   s $ Z @   s % Z @   &s ' s '@   &s ( s (@   &s ) s )@   &s * s * ,    +   - .     Ý    [ @   s  Z @   &s / s 0@   s  Z @   s  Z @   s   Z @   s ! Z @   s " Z @   s # Z @   s $ Z @   s % Z @   &s ' s '@   &s ( s (@   &s ) s )@   &s * s * 1   	    2   ,   	 +   3   4 5     e    [ @   &s 0 s 6@   s 7 Z @   s 8 Z @   s 9 Z @   s : Z @   &s % s ; ,    3    <    =    "  >  ?s @ A[ c Bc Cc Dc Ec Fc G
```
```java
Êþº¾   =¥  Fbr/com/legalconnect/advogado/application/mapper/ProfissionalMapperImpl  java/lang/Object  Bbr/com/legalconnect/advogado/application/mapper/ProfissionalMapper certificacaoMapper DLbr/com/legalconnect/advogado/application/mapper/CertificacaoMapper; RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; documentoMapper ALbr/com/legalconnect/advogado/application/mapper/DocumentoMapper; experienciaProfissionalMapper OLbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapper; formacaoAcademicaMapper ILbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapper; roleProfissionalMapper HLbr/com/legalconnect/advogado/application/mapper/RoleProfissionalMapper; <init> ()V Code
     LineNumberTable LocalVariableTable this HLbr/com/legalconnect/advogado/application/mapper/ProfissionalMapperImpl; toEntity (Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest;)Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;
  !   =br/com/legalconnect/advogado/domain/modal/entity/Profissional " # builder U()Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder;
 % ' & Nbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest ( ) getLocaisAtuacaoIds ()Ljava/util/List; + java/util/LinkedHashSet
 * -  . (Ljava/util/Collection;)V
 0 2 1 Qbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder 3 4 locaisAtuacaoIds d(Ljava/util/Set;)Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder;
 % 6 7 ) getAreaAtuacaoIds
 0 9 : 4 areaAtuacaoIds
 % < = ) getIdiomaIds
 0 ? @ 4 	idiomaIds
 % B C ) getTipoAtendimentoIds
 0 E F 4 tipoAtendimentoIds
 % H I J getCpf ()Ljava/lang/String;
 0 L M N cpf K(Ljava/lang/String;)Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder;
 % P Q R getDataNascimento ()Ljava/time/LocalDate;
 0 T U V dataNascimento N(Ljava/time/LocalDate;)Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder;
 % X Y ) getEnderecos
  [ \ ] #enderecoRequestDTOListToEnderecoSet !(Ljava/util/List;)Ljava/util/Set;
 0 _ ` a 	enderecos H(Ljava/util/Set;)Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder;
 % c d J getNomeCompleto
 0 f g N nomeCompleto
 % i j ) getTelefones
 0 l m a 	telefones
 % o p q 
getUsuario 9()Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;
  s t u userRequestDTOToUser `(Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;)Lbr/com/legalconnect/commom/model/User;
 0 w x y usuario `(Lbr/com/legalconnect/commom/model/User;)Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder;
 % { | J getNumeroOab
 0 ~   	numeroOab g(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder;
 %    
getPlanoId ()Ljava/util/UUID;
 0    planoId e(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder;
 %    getTenantId
 0    tenantId
 %    getUsaMarketplace ()Ljava/lang/Boolean;
 0    usaMarketplace h(Ljava/lang/Boolean;)Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder;
 0    build A()Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; dto PLbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest; profissional SLbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder; list Ljava/util/List; list1 list2 list3 list4 LocalVariableTypeTable WLbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder<**>; "Ljava/util/List<Ljava/util/UUID;>; $Ljava/util/List<Ljava/lang/String;>; 
StackMapTable « java/util/List MethodParameters updateEntityFromDto (Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest;Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)V
  ° ± ² dtoPessoaUsuario (Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest;)Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;
  ´ p µ )()Lbr/com/legalconnect/commom/model/User;
 · ¹ ¸ %br/com/legalconnect/commom/model/User " º 5()Lbr/com/legalconnect/commom/model/User$UserBuilder;
 ¼ ¾ ½ 1br/com/legalconnect/commom/model/User$UserBuilder  µ
  À Á Â 
setUsuario *(Lbr/com/legalconnect/commom/model/User;)V
  Ä Å Æ userRequestDTOToUser1 a(Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;Lbr/com/legalconnect/commom/model/User;)V
  È ( É ()Ljava/util/Set;
 Ë ' Ì Nbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest Î Ð Ï 
java/util/Set Ñ  clear Î Ó Ô Õ addAll (Ljava/util/Collection;)Z
  × Ø Ù setLocaisAtuacaoIds (Ljava/util/Set;)V
  Û 7 É
 Ë 6
  Þ ß Ù setAreaAtuacaoIds
  á = É
 Ë <
  ä å Ù setIdiomaIds
  ç C É
 Ë B
  ê ë Ù setTipoAtendimentoIds
 Ë í î  getEmpresaId
  ð ñ ò setEmpresaId (Ljava/util/UUID;)V
 Ë {
  õ ö ÷ setNumeroOab (Ljava/lang/String;)V
 Ë 
  ú û ò 
setPlanoId
 Ë 
  þ ÿ  setUsaMarketplace (Ljava/lang/Boolean;)V PLbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest; entity ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; 7Lbr/com/legalconnect/commom/dto/request/UserRequestDTO; 5br/com/legalconnect/commom/dto/request/UserRequestDTO 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO;

 Mbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO "
 p()Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;
  userToPessoaResponseDTO d(Lbr/com/legalconnect/commom/model/User;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO;
 lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder pessoa «(Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;
  É getRoleProfissionals
  4roleProfissionalSetToRoleProfissionalResponseDTOList !(Ljava/util/Set;)Ljava/util/List;
 !" rolesProfissional (Ljava/util/List;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;
 $% É getCertificacoes
 '( ,certificacaoSetToCertificacaoResponseDTOList
*+" 
certificacoes
 -. É 
getDocumentos
 01 &documentoSetToDocumentoResponseDTOList
34" 
documentos
  í
789 	empresaId (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;
 ;< É getExperiencias
 >? BexperienciaProfissionalSetToExperienciaProfissionalResponseDTOList
AB" experiencias
 DE  getFazParteDePlano
GHI fazParteDePlano (Ljava/lang/Boolean;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;
 KL É getFormacoes
 NO 6formacaoAcademicaSetToFormacaoAcademicaResponseDTOList
QR" 	formacoes
 TU  getId
WX9 id
  {
[ \ (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;
  
_ 9
 ab J getStatusProfissional
de\ statusProfissional
  
h 9
  
k I
m n Q()Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO; profissionalResponseDTO nLbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder; enderecoRequestDTOToEndereco h(Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;)Lbr/com/legalconnect/commom/model/Endereco;
tvu )br/com/legalconnect/commom/model/Endereco "w =()Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder;
y{z 9br/com/legalconnect/commom/dto/request/EnderecoRequestDTOU J
}~ java/util/UUID 
fromString $(Ljava/lang/String;)Ljava/util/UUID;
 9br/com/legalconnect/commom/model/Endereco$EnderecoBuilderX O(Ljava/util/UUID;)Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;
y J 	getBairro
 bairro O(Ljava/lang/String;)Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder;
y J getCep
 cep
y J 	getCidade
 cidade
y J getComplemento
 complemento
y¡¢ J 	getEstado
¤¥ estado
y§¨ J 
getLogradouro
ª« 
logradouro
y­® J 	getNumero
°± numero
y³´ J getPais
¶· pais
y¹º» getTipoEndereco :()Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;
½¾¿ tipoEndereco u(Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder;
Á Â -()Lbr/com/legalconnect/commom/model/Endereco; enderecoRequestDTO ;Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO; endereco ;Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder; ?Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder<**>; 	Signature (Ljava/util/List<Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;>;)Ljava/util/Set<Lbr/com/legalconnect/commom/model/Endereco;>; ªËÌÍ size ()I?@  
ÐÒÑ java/lang/MathÓÔ max (II)I
 *Ö × (I)V ªÙÚÛ iterator ()Ljava/util/Iterator;ÝßÞ java/util/Iteratoràá next ()Ljava/lang/Object;
 ãqr Îåæç add (Ljava/lang/Object;)ZÝéêë hasNext ()Z set Ljava/util/Set; MLjava/util/List<Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;>; <Ljava/util/Set<Lbr/com/legalconnect/commom/model/Endereco;>;
{
 ¼
 H
 ¼ô Mõ G(Ljava/lang/String;)Lbr/com/legalconnect/commom/model/User$UserBuilder;
÷ø J getEmail
 ¼úûõ email
ýþ J 
getFotoUrl
 ¼ õ fotoUrl
 c
 ¼ gõ
 J getTelefone
 ¼	
õ telefone userRequestDTO user 3Lbr/com/legalconnect/commom/model/User$UserBuilder; 7Lbr/com/legalconnect/commom/model/User$UserBuilder<**>;
 Ë 	getPessoa ;()Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;
 o 7br/com/legalconnect/commom/dto/request/PessoaRequestDTO profissionalUpdateRequest 9Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;
 · ò setId
 · ÷ setCpf
 ·  ÷ setEmail
 ·"# ÷ 
setFotoUrl
 ·%& ÷ setNomeCompleto
 ·() ÷ setTelefone 
mappingTarget 'Lbr/com/legalconnect/commom/model/User;
-/. 9br/com/legalconnect/commom/dto/response/PessoaResponseDTO "0 V()Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;
 · H
354 Rbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder M6 h(Ljava/lang/String;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ·T
39X: f(Ljava/util/UUID;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;
 · c
3= g6
3? @ =()Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO; pessoaResponseDTO TLbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder; »(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;>;)Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO;>;E java/util/ArrayList ÎË
DÖ ÎÙJ Abr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional	 L  NPO Fbr/com/legalconnect/advogado/application/mapper/RoleProfissionalMapperQ (Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;)Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO; ªå roleProfissional CLbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional; TLjava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;>; eLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO;>; ³(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;>;)Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;>;Y =br/com/legalconnect/advogado/domain/modal/entity/Certificacao	 [  ]_^ Bbr/com/legalconnect/advogado/application/mapper/CertificacaoMapper` (Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO; certificacao ?Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao; PLjava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;>; aLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;>; ­(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;>;)Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;>;g :br/com/legalconnect/advogado/domain/modal/entity/Documento	 i  kml ?br/com/legalconnect/advogado/application/mapper/DocumentoMappern (Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;)Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO; 	documento <Lbr/com/legalconnect/advogado/domain/modal/entity/Documento; MLjava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;>; ^Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;>; É(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;>;)Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;>;u Hbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional	 w 
 y{z Mbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapper| ¦(Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO; experienciaProfissional JLbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional; [Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;>; lLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;>; ½(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;>;)Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;>; Bbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica	    Gbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapper (Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO; formacaoAcademica DLbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica; ULjava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;>; fLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;>; 
SourceFile ProfissionalMapperImpl.java *Lorg/springframework/stereotype/Component; InnerClasses ProfissionalResponseDTOBuilder ProfissionalBuilder PessoaResponseDTOBuilder EnderecoBuilder 6br/com/legalconnect/commom/model/Endereco$TipoEndereco TipoEndereco 5br/com/legalconnect/commom/model/Pessoa$PessoaBuilder 'br/com/legalconnect/commom/model/Pessoa 
PessoaBuilder UserBuilder¡ ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder£ )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder !          	     
       	     
    
   	     
       	     
       	     
           /     *· ±           &                   ,     â+Ç °¸ M+¶ $N-Æ ,» *Y-· ,¶ /W+¶ 5:Æ ,» *Y· ,¶ 8W+¶ ;:Æ ,» *Y· ,¶ >W+¶ A:Æ ,» *Y· ,¶ DW,+¶ G¶ KW,+¶ O¶ SW,*+¶ W¶ Z¶ ^W,+¶ b¶ eW+¶ h:Æ ,» *Y· ,¶ kW,*+¶ n¶ r¶ vW,+¶ z¶ }W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,¶ °       r    5  6  9 
 ;  <  =   ? & @ + A 9 C ? D D E R G X H ] I k K t L } M  N  O  P  Q ¬ S ¹ T Â U Ë V Ô W Ý Y    R    â       â    
 Ø     Ó     & ¼ ¡    ? £ ¢    X  £     I ¤    ¥   >  
 Ø  ¦   Ó  §  & ¼ ¡ §  ? £ ¢ §  X  £ §   I ¤ ¨  ©   $ ý  0 ªü  ªü  ªü  ªü @ ª ¬        ­ ®        z+Ç ±*+¶ ¯N-Æ  ,¶ ³Ç 
,¸ ¶¶ »¶ ¿*-,¶ ³¶ Ã§ ,¶ ¿,¶ ÇÆ .+¶ Ê:Æ ,¶ Ç¹ Í ,¶ Ç¹ Ò W§ #,¶ Ö§ +¶ Ê:Æ ,» *Y· ,¶ Ö,¶ ÚÆ .+¶ Ü:Æ ,¶ Ú¹ Í ,¶ Ú¹ Ò W§ #,¶ Ý§ +¶ Ü:Æ ,» *Y· ,¶ Ý,¶ àÆ .+¶ â:Æ ,¶ à¹ Í ,¶ à¹ Ò W§ #,¶ ã§ +¶ â:Æ ,» *Y· ,¶ ã,¶ æÆ .+¶ è:Æ ,¶ æ¹ Í ,¶ æ¹ Ò W§ #,¶ é§ +¶ è:Æ ,» *Y· ,¶ é,+¶ ì¶ ï,+¶ ó¶ ô,+¶ ø¶ ù,+¶ ü¶ ý±       ê :   ^  _  b  c  d  e   g ) h , j 1 l 8 m > n C o L p X q [ s ` u c w i x n y { |  }  ~     ¢  ¥  ª  ­  ³  ¸  Å  Ì  Ò  ×  à  ì  ï  ô  ÷  ý     ! *  6 ¡9 £> ¥A §G ¨L ©Y ¬a ­i ®q ¯y °    z   z      z    z  o x  > "     i       " ¡    ³  ¡    Ò " ¢    ý  ¢    " £   G  £    ¥   R  > "  §  i   §   " ¡ §  ³  ¡ §  Ò " ¢ §  ý  ¢ §  " £ § G  £ §  ©   3 ü ü ) ªú ü ) ªú ü ) ªú ü ) ªú  ¬   	          0     ¥+Ç °¸	M,*+¶ ³¶¶W,*+¶¶¶W,*+¶#¶&¶)W,*+¶,¶/¶2W,+¶5¶6W,*+¶:¶=¶@W,+¶C¶FW,*+¶J¶M¶PW,+¶S¶VW,+¶Y¶ZW,+¶]¶^W,+¶`¶cW,+¶f¶gW,+¶i¶jW,¶l°       J    ´  µ  ¸ 
 º  » $ ¼ 1 ½ > ¾ G ¿ T À ] Á j Â s Ã | Ä  Å  Æ  Ç   É         ¥       ¥  
 op  ©     ¬      qr    
     s+Ç °¸sM+¶xÆ ,+¶x¸|¶W,+¶¶W,+¶¶W,+¶¶W,+¶¶W,+¶ ¶£W,+¶¦¶©W,+¶¬¶¯W,+¶²¶µW,+¶¸¶¼W,¶À°       >    Í  Î  Ñ 
 Ó  Ô  Ö & × / Ø 8 Ù A Ú J Û S Ü \ Ý e Þ n à         s       sÃÄ  
 iÅÆ  ¥     
 iÅÇ  ©   	 ü  ¬   Ã    \ ] È   É    é     O+Ç °» *Y+¹Ê În`¸Ï·ÕM+¹Ø :§ ¹Ü ÀyN,*-¶â¹ä W¹è ÿâ,°           ä  å  è ! é 7 ê C é M í    *    O       O     ! .ìí  7 ÃÄ  ¥       O î  ! .ìï  ©    ÿ %   ª Î Ý   ¬        t u     Ö     O+Ç °¸ ¶M+¶ðÆ ,+¶ð¸|¶ñW,+¶ò¶óW,+¶ö¶ùW,+¶ü¶ÿW,+¶¶W,+¶¶W,¶ »°       .    ñ  ò  õ 
 ÷  ø  ú & û / ü 8 ý A þ J          O       O  
 E
  ¥     
 E  ©   	 ü  ¼ ¬       ± ²          +Ç °+¶M,Ç °,¶N-Ç °-°       & 	      	   
     *                  x  ©    ü 
ü 
 ¬       Å Æ     ½     H+Ç ±+¶ðÆ ,+¶ð¸|¶§ ,¶,+¶ò¶,+¶ö¶,+¶ü¶!,+¶¶$,+¶¶'±       2          ' / 7  ?! G"         H       H    H*+  ©     ¬   	  *             *+Ç °¸,M,+¶1¶2W,+¶7¶8W,+¶;¶<W,¶>°          % & ) 
+ , - %/         *       *+  
  AB  ©     ¬       È   C    á     G+Ç °»DY+¹F ·GM+¹H :§ ¹Ü ÀIN,*´K-¹M ¹R W¹è ÿÝ,°          3 4 7 8 *9 ;8 E<    *    G       Gìí   3     * ST  ¥       GìU   3 V  ©    ÿ    Î ª Ý   ¬   ì   ( È   W    á     G+Ç °»DY+¹F ·GM+¹H :§ ¹Ü ÀXN,*´Z-¹\ ¹R W¹è ÿÝ,°          @ A D E *F ;E EI    *    G       Gìí   3     * ab  ¥       Gìc   3 d  ©    ÿ    Î ª Ý   ¬   ì   1 È   e    á     G+Ç °»DY+¹F ·GM+¹H :§ ¹Ü ÀfN,*´h-¹j ¹R W¹è ÿÝ,°          M N Q R *S ;R EV    *    G       Gìí   3     * op  ¥       Gìq   3 r  ©    ÿ    Î ª Ý   ¬   ì   ? È   s    á     G+Ç °»DY+¹F ·GM+¹H :§ ¹Ü ÀtN,*´v-¹x ¹R W¹è ÿÝ,°          Z [ ^ _ *` ;_ Ec    *    G       Gìí   3     * }~  ¥       Gì   3   ©    ÿ    Î ª Ý   ¬   ì   O È       á     G+Ç °»DY+¹F ·GM+¹H :§ ¹Ü ÀN,*´-¹ ¹R W¹è ÿÝ,°          g h k l *m ;l Ep    *    G       Gìí   3     *   ¥       Gì   3   ©    ÿ    Î ª Ý   ¬   ì       	         B 
 	 0 	3- 	t	t@	 ¼ ·	 ¢¤	
```
```java
Êþº¾   = +  Fbr/com/legalconnect/advogado/application/mapper/RoleProfissionalMapper  java/lang/Object INSTANCE HLbr/com/legalconnect/advogado/application/mapper/RoleProfissionalMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;)Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO; RuntimeInvisibleAnnotations Lorg/mapstruct/Mappings; value Lorg/mapstruct/Mapping; target id source name entity MethodParameters toEntity (Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional; tenantId ignore    dto 
SourceFile RoleProfissionalMapper.java Lorg/mapstruct/Mapper; componentModel spring                	   ,      ¸ 
À ³ ±                        )    [ @   s  s @   s  s           !         s " #Z $     %    &    '      (  )s *
```
```java
Êþº¾   = Z  Jbr/com/legalconnect/advogado/application/mapper/RoleProfissionalMapperImpl  java/lang/Object  Fbr/com/legalconnect/advogado/application/mapper/RoleProfissionalMapper <init> ()V Code
     LineNumberTable LocalVariableTable this LLbr/com/legalconnect/advogado/application/mapper/RoleProfissionalMapperImpl; 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;)Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO;
    Qbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO   builder x()Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO$RoleProfissionalResponseDTOBuilder;
    Abr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional   getId ()Ljava/util/UUID;
  !   tbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO$RoleProfissionalResponseDTOBuilder " # id (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO$RoleProfissionalResponseDTOBuilder;
  % & ' getName ()Ljava/lang/String;
  ) * + name (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO$RoleProfissionalResponseDTOBuilder;
  - . / build U()Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO; entity CLbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional; roleProfissionalResponseDTO vLbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO$RoleProfissionalResponseDTOBuilder; 
StackMapTable MethodParameters toEntity (Lbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;
  9  : ]()Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder;
  
 = ? > Ybr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder " @ O(Ljava/util/UUID;)Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;
  %
 = C * D o(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder;
 = F . G E()Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional; dto SLbr/com/legalconnect/advogado/application/dto/response/RoleProfissionalResponseDTO; roleProfissional [Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder; LocalVariableTypeTable _Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder<**>; 
SourceFile RoleProfissionalMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; InnerClasses "RoleProfissionalResponseDTOBuilder RoleProfissionalBuilder V ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder X )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder !            	   /     *· 
±            
                	   |     !+Ç °¸ M,+¶ ¶ W,+¶ $¶ (W,¶ ,°                
      
        !       ! 0 1  
  2 3  4     5    0    6 7  	        !+Ç °¸ 8M,+¶ ;¶ <W,+¶ A¶ BW,¶ E°              !  $ 
 &  '  ) 
        !       ! H I  
  J K  L     
  J M  4     5    H    N    O P     Q   R       S 	 =  T	 U W Y	
```
```java
Êþº¾   = !  Ebr/com/legalconnect/advogado/application/mapper/TipoAtendimentoMapper  java/lang/Object INSTANCE GLbr/com/legalconnect/advogado/application/mapper/TipoAtendimentoMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento;)Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO; entity MethodParameters toEntity (Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento; dto 
SourceFile TipoAtendimentoMapper.java RuntimeInvisibleAnnotations Lorg/mapstruct/Mapper; componentModel spring                	   ,      ¸ 
À ³ ±                                                   s  
```
```java
Êþº¾   = Z  Ibr/com/legalconnect/advogado/application/mapper/TipoAtendimentoMapperImpl  java/lang/Object  Ebr/com/legalconnect/advogado/application/mapper/TipoAtendimentoMapper <init> ()V Code
     LineNumberTable LocalVariableTable this KLbr/com/legalconnect/advogado/application/mapper/TipoAtendimentoMapperImpl; 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento;)Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;
    Pbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO   builder v()Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO$TipoAtendimentoResponseDTOBuilder;
    @br/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento   getId ()Ljava/util/UUID;
  !   rbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO$TipoAtendimentoResponseDTOBuilder " # id (Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO$TipoAtendimentoResponseDTOBuilder;
  % & ' getNome ()Ljava/lang/String;
  ) * + nome (Ljava/lang/String;)Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO$TipoAtendimentoResponseDTOBuilder;
  - . / build T()Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO; entity BLbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento; tipoAtendimentoResponseDTO tLbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO$TipoAtendimentoResponseDTOBuilder; 
StackMapTable MethodParameters toEntity (Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento;
  9  : [()Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder;
  
 = ? > Wbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder " @ O(Ljava/util/UUID;)Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;
  %
 = C * D m(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder;
 = F . G D()Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento; dto RLbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO; tipoAtendimento YLbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder; LocalVariableTypeTable ]Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder<**>; 
SourceFile TipoAtendimentoMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; InnerClasses !TipoAtendimentoResponseDTOBuilder TipoAtendimentoBuilder V ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder X )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder !            	   /     *· 
±            
                	   |     !+Ç °¸ M,+¶ ¶ W,+¶ $¶ (W,¶ ,°                
      
        !       ! 0 1  
  2 3  4     5    0    6 7  	        !+Ç °¸ 8M,+¶ ;¶ <W,+¶ A¶ BW,¶ E°              !  $ 
 &  '  ) 
        !       ! H I  
  J K  L     
  J M  4     5    H    N    O P     Q   R       S 	 =  T	 U W Y	
```
```java
Êþº¾   = ì  Cbr/com/legalconnect/advogado/application/service/AgendamentoService  java/lang/Object log Lorg/slf4j/Logger; RuntimeInvisibleAnnotations Llombok/Generated; profissionalRepository GLbr/com/legalconnect/advogado/domain/repository/ProfissionalRepository; googleCalendarService HLbr/com/legalconnect/advogado/application/service/GoogleCalendarService; emailService 1Lbr/com/legalconnect/commom/service/EmailService; <clinit> ()V Code
    org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init> Ã(Lbr/com/legalconnect/advogado/domain/repository/ProfissionalRepository;Lbr/com/legalconnect/advogado/application/service/GoogleCalendarService;Lbr/com/legalconnect/commom/service/EmailService;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired;
  !  	  # 	 
	  %  	  ' 
  this ELbr/com/legalconnect/advogado/application/service/AgendamentoService; MethodParameters agendarConsulta N(Ljava/util/UUID;Ljava/util/UUID;Ljava/time/LocalDateTime;Ljava/lang/String;)Z #Ljakarta/transaction/Transactional;
 / 1 0 0br/com/legalconnect/commom/service/TenantContext 2 3 getCurrentTenantId ()Ljava/util/UUID; 5 7 6 Ebr/com/legalconnect/advogado/domain/repository/ProfissionalRepository 8 9 findById ((Ljava/lang/Object;)Ljava/util/Optional;   ; < = get ()Ljava/util/function/Supplier;
 ? A @ java/util/Optional B C orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; E =br/com/legalconnect/advogado/domain/modal/entity/Profissional
 D G H I getUsaMarketplace ()Ljava/lang/Boolean;
 K M L java/lang/Boolean N O booleanValue ()Z
 D Q R S getStatusProfissional ()Ljava/lang/String; U ACTIVE
 W Y X java/lang/String Z [ equals (Ljava/lang/Object;)Z ] 6br/com/legalconnect/common/exception/BusinessException	 _ a ` .br/com/legalconnect/common/exception/ErrorCode b c ADVOCATE_NOT_AVAILABLE 0Lbr/com/legalconnect/common/exception/ErrorCode;	 e g f #org/springframework/http/HttpStatus h i BAD_REQUEST %Lorg/springframework/http/HttpStatus; k /Profissional nÃ£o disponÃ­vel para agendamento.
 \ m  n j(Lbr/com/legalconnect/common/exception/ErrorCode;Lorg/springframework/http/HttpStatus;Ljava/lang/String;)V
 D p q r 
getUsuario )()Lbr/com/legalconnect/commom/model/User;
 t v u %br/com/legalconnect/commom/model/User w S getEmail
 y { z Fbr/com/legalconnect/advogado/application/service/GoogleCalendarService | } checkAvailability .(Ljava/lang/String;Ljava/time/LocalDateTime;)Z	 _   c APPOINTMENT_CONFLICT	 e   i CONFLICT  +HorÃ¡rio indisponÃ­vel para o profissional.
 W    valueOf &(Ljava/lang/Object;)Ljava/lang/String;     makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    java/time/LocalDateTime   	plusHours (J)Ljava/time/LocalDateTime;
 y    addEvent Y(Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)Z  
    /br/com/legalconnect/commom/service/EmailService    sendAppointmentConfirmationEmail '(Ljava/lang/String;Ljava/lang/String;)V profissionalId Ljava/util/UUID; 	clienteId horarioAgendamento Ljava/time/LocalDateTime; tipoServico Ljava/lang/String; tenantId profissional ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; isAvailable Z 
StackMapTable ­ java/util/UUID avaliarConsulta 6(Ljava/util/UUID;Ljava/util/UUID;ILjava/lang/String;)Z ± ?Cliente {} avaliou agendamento {} com nota {} e comentÃ¡rio: {}
 ³ µ ´ java/lang/Integer  ¶ (I)Ljava/lang/Integer; ¸ º ¹ org/slf4j/Logger » ¼ info ((Ljava/lang/String;[Ljava/lang/Object;)V 
agendamentoId rating I 
comentario lambda$0 :()Lbr/com/legalconnect/common/exception/BusinessException;	 _ Ä Å c PROFISSIONAL_NAO_ENCONTRADO	 e Ç È i 	NOT_FOUND Ê Profissional nÃ£o encontrado. 
SourceFile AgendamentoService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
 Ð Ò Ñ "java/lang/invoke/LambdaMetafactory Ó Ô metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; Ï ()Ljava/lang/Object; Ö
  Ù Á Â Ø Â
 Ý ß Þ $java/lang/invoke/StringConcatFactory  à (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; Ü ã Consulta:  com Cliente  å ;VocÃª tem uma nova consulta agendada com o cliente  para  InnerClasses è %java/lang/invoke/MethodHandles$Lookup ê java/lang/invoke/MethodHandles Lookup !                   	 
         
            )      	¸ ³ ±                                 l     *·  *+µ "*,µ $*-µ &±           !  $ 	 %  &  (    *     ( )      	 
           
   *   
 	      
    + ,       -          ª¸ .:*´ "+¹ 4 º :  ¶ >À D:¶ F¶ J ¶ PT¶ V » \Y² ^² dj· l¿*´ $¶ o¶ s-¶ x6 » \Y² ~² · l¿*´ $¶ o¶ s,¸ º   --
¶ ¶ W*´ &¶ o¶ s,¸ -¸ º   ¶ ¬       r    >  A  B  A  G 4 J > K @ J D P P Q Q P V R [ S e T g S k c o d w e  h  i  c  m  n  o  p  o ¥ m ¨ w    R    ª ( )     ª       ª ¡      ª ¢ £    ª ¤ ¥   ¥ ¦      § ¨  V T © ª  «    ý 4 ¬ Dü & *       ¡   ¢   ¤    ® ¯       -           $² °½ Y,SY+SY¸ ²SYS¹ · ¬                  "     4    $ ( )     $ ½      $ ¡      $ ¾ ¿    $ À ¥  *    ½   ¡   ¾   À  
 Á Â     @      » \Y² Ã² ÆÉ· l°           B  C 
 D  B  D        Ë    Ì      Í   Î     Õ  × Ú Û á  â á  ä æ   
  ç é ë 
```
```java
Êþº¾   =   Cbr/com/legalconnect/advogado/application/service/AreaAtuacaoService  java/lang/Object areaAtuacaoRepository FLbr/com/legalconnect/advogado/domain/repository/AreaAtuacaoRepository; areaAtuacaoMapper CLbr/com/legalconnect/advogado/application/mapper/AreaAtuacaoMapper; <init> (Lbr/com/legalconnect/advogado/domain/repository/AreaAtuacaoRepository;Lbr/com/legalconnect/advogado/application/mapper/AreaAtuacaoMapper;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
   	  ()V	    	     LineNumberTable LocalVariableTable this ELbr/com/legalconnect/advogado/application/service/AreaAtuacaoService; MethodParameters findAreaAtuacaoById `(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;    Dbr/com/legalconnect/advogado/domain/repository/AreaAtuacaoRepository   ! findById ((Ljava/lang/Object;)Ljava/util/Optional;   # $ % get ()Ljava/util/function/Supplier;
 ' ) ( java/util/Optional * + orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; - <br/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao / 1 0 Abr/com/legalconnect/advogado/application/mapper/AreaAtuacaoMapper 2 3 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao;)Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO; id Ljava/util/UUID; areaAtuacao >Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao; findAllAreasAtuacao ()Ljava/util/List; 	Signature b()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;>;  = > 9 findAll @ B A java/util/List C D stream ()Ljava/util/stream/Stream;
  F G H getClass ()Ljava/lang/Class;  J K L apply b(Lbr/com/legalconnect/advogado/application/mapper/AreaAtuacaoMapper;)Ljava/util/function/Function; N P O java/util/stream/Stream Q R map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 T V U java/util/stream/Collectors W X toList ()Ljava/util/stream/Collector; N Z [ \ collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; lambda$0 :()Lbr/com/legalconnect/common/exception/BusinessException; ` 6br/com/legalconnect/common/exception/BusinessException	 b d c .br/com/legalconnect/common/exception/ErrorCode e f ENTIDADE_NAO_ENCONTRADA 0Lbr/com/legalconnect/common/exception/ErrorCode;	 h j i #org/springframework/http/HttpStatus k l 	NOT_FOUND %Lorg/springframework/http/HttpStatus; n #Ãrea de AtuaÃ§Ã£o nÃ£o encontrada.
 _ p 	 q j(Lbr/com/legalconnect/common/exception/ErrorCode;Lorg/springframework/http/HttpStatus;Ljava/lang/String;)V 
SourceFile AreaAtuacaoService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
 w y x "java/lang/invoke/LambdaMetafactory z { metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; v ()Ljava/lang/Object; }
   ] ^  ^ &(Ljava/lang/Object;)Ljava/lang/Object; 	 . 3 InnerClasses  %java/lang/invoke/MethodHandles$Lookup  java/lang/invoke/MethodHandles Lookup !                  	 
          
   Y     *· *+µ *,µ ±               	 !  "                             	           
   k     !*´ +¹  º "  ¶ &À ,M*´ ,¹ . °           , 
 -  ,  /         !       ! 4 5    6 7      4    8 9  :    ; 
   c     -*´ ¹ < ¹ ? *´ Y¶ EWº I  ¹ M ¸ S¹ Y À @°           8  9 ! : , 8        -    
 ] ^  
   <      » _Y² a² gm· o°           - 
 .  -  .        r    s      t   u     |  ~   |        
     
```
```java
Êþº¾   = ý  Dbr/com/legalconnect/advogado/application/service/CertificacaoService  java/lang/Object certificacaoRepository GLbr/com/legalconnect/advogado/domain/repository/CertificacaoRepository; certificacaoMapper DLbr/com/legalconnect/advogado/application/mapper/CertificacaoMapper; profissionalRepository GLbr/com/legalconnect/advogado/domain/repository/ProfissionalRepository; <init> Õ(Lbr/com/legalconnect/advogado/domain/repository/CertificacaoRepository;Lbr/com/legalconnect/advogado/application/mapper/CertificacaoMapper;Lbr/com/legalconnect/advogado/domain/repository/ProfissionalRepository;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
     ()V	    	    	   	 
 LineNumberTable LocalVariableTable this FLbr/com/legalconnect/advogado/application/service/CertificacaoService; MethodParameters createCertificacao ®(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO; #Ljakarta/transaction/Transactional;
 " $ # 0br/com/legalconnect/commom/service/TenantContext % & getCurrentTenantId ()Ljava/util/UUID; ( * ) Ebr/com/legalconnect/advogado/domain/repository/ProfissionalRepository + , findById ((Ljava/lang/Object;)Ljava/util/Optional;   . / 0 get ()Ljava/util/function/Supplier;
 2 4 3 java/util/Optional 5 6 orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; 8 =br/com/legalconnect/advogado/domain/modal/entity/Profissional
 7 : ; & getTenantId
 = ? > java/util/UUID @ A equals (Ljava/lang/Object;)Z C 6br/com/legalconnect/common/exception/BusinessException	 E G F .br/com/legalconnect/common/exception/ErrorCode H I FORBIDDEN_ACCESS 0Lbr/com/legalconnect/common/exception/ErrorCode;	 K M L #org/springframework/http/HttpStatus N O 	FORBIDDEN %Lorg/springframework/http/HttpStatus; Q 4Acesso negado. Profissional pertence a outro tenant.
 B S  T j(Lbr/com/legalconnect/common/exception/ErrorCode;Lorg/springframework/http/HttpStatus;Ljava/lang/String;)V V X W Bbr/com/legalconnect/advogado/application/mapper/CertificacaoMapper Y Z toEntity (Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;
 \ ^ ] =br/com/legalconnect/advogado/domain/modal/entity/Certificacao _ ` setProfissional B(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)V
 \ b c d setTenantId (Ljava/util/UUID;)V f h g Ebr/com/legalconnect/advogado/domain/repository/CertificacaoRepository i j save &(Ljava/lang/Object;)Ljava/lang/Object; V l m n 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO; profissionalId Ljava/util/UUID; 
requestDTO MLbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO; tenantId profissional ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; certificacao ?Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao; 
StackMapTable updateCertificacao ¾(Ljava/util/UUID;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO; f | } ~ findByIdAndProfissionalId 6(Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional;  .
 \ :  FAcesso negado. CertificaÃ§Ã£o pertence a outro tenant ou profissional. V    updateEntityFromDto (Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)V certificacaoId existingCertificacao findCertificacaoById q(Ljava/util/UUID;Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;  .  6Acesso negado. CertificaÃ§Ã£o pertence a outro tenant. $findAllCertificacoesByProfissionalId "(Ljava/util/UUID;)Ljava/util/List; 	Signature s(Ljava/util/UUID;)Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;>;  . f    findAllByProfissionalId    java/util/List   stream ()Ljava/util/stream/Stream;
     getClass ()Ljava/lang/Class;  ¡ ¢ £ apply c(Lbr/com/legalconnect/advogado/application/mapper/CertificacaoMapper;)Ljava/util/function/Function; ¥ § ¦ java/util/stream/Stream ¨ © map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 « ­ ¬ java/util/stream/Collectors ® ¯ toList ()Ljava/util/stream/Collector; ¥ ± ² ³ collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; deleteCertificacao #(Ljava/util/UUID;Ljava/util/UUID;)V  . f ¸ ¹ µ deleteByIdAndProfissionalId lambda$0 :()Lbr/com/legalconnect/common/exception/BusinessException;	 E ½ ¾ I PROFISSIONAL_NAO_ENCONTRADO	 K À Á O 	NOT_FOUND Ã Profissional nÃ£o encontrado. lambda$1	 E Æ Ç I ENTIDADE_NAO_ENCONTRADA É 6CertificaÃ§Ã£o nÃ£o encontrada para este profissional. lambda$2 lambda$3 lambda$5 Î .CertificaÃ§Ã£o nÃ£o encontrada para deleÃ§Ã£o. 
SourceFile CertificacaoService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
 Ô Ö Õ "java/lang/invoke/LambdaMetafactory × Ø metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; Ó ()Ljava/lang/Object; Ú
  Ý º » Ü » Ú
  â Ä » á » Ú
  ç Ê » æ » Ú
  ì Ë » ë » j	 k n Ú
  ô Ì » ó » InnerClasses ù %java/lang/invoke/MethodHandles$Lookup û java/lang/invoke/MethodHandles Lookup !                 	 
        
           l     *· *+µ *,µ *-µ ±           %  ( 	 )  *  +    *                        	 
     
       	       
           	     l¸ !N*´ +¹ ' º -  ¶ 1À 7:¶ 9-¶ < » BY² D² JP· R¿*´ ,¹ U :¶ [-¶ a*´ ¹ e À \:*´ ¹ k °       6 
   9  ;  <  ;  ? ' @ 1 A 3 @ 7 D C E J F P H ` J    >    l       l o p    l q r   h s p   Q t u  C ) v w  x    ý 7 = 7    	 o   q    y z  
            û     b¸ !:*´ ,+¹ { º   ¶ 1À \:¶ ¶ < » BY² D² J· R¿*´ -¹  *´ ¹ e À \:*´ ¹ k °       2    Z  \ 	 ]  ^  \  a * b 4 c 6 b : f F g V h    >    b       b o p    b  p    b q r   ] s p   E  w  x    ý : = \    
 o      q          Ç     D¸ !N*´ ,+¹ { º   ¶ 1À \:¶ -¶ < » BY² D² J· R¿*´ ¹ k °       & 	   s  u  v  u  y ( z 2 { 4 z 8 ~    4    D       D o p    D  p   @ s p   ( v w  x    ý 8 = \    	 o                  è     c¸ !M*´ +¹ ' º   ¶ 1À 7N-¶ 9,¶ < » BY² D² JP· R¿*´ +¹  ¹  *´ Y¶ Wº    ¹ ¤ ¸ ª¹ ° À °       2             %  /  1  5  D  W  b     *    c       c o p   _ s p   I t u  x    ý 5 = 7     o    ´ µ  
            Ï     D¸ !N*´ ,+¹ { º ¶  ¶ 1À \:¶ -¶ < » BY² D² J· R¿*´ ,+¹ · ±       .       £  ¤  ¥  £  ¨ ( © 2 ª 4 © 8 ­ C ®    4    D       D o p    D  p   @ s p   (  w  x    ý 8 = \    	 o     
 º »     <      » BY² ¼² ¿Â· R°           < 
 =  <  =      
 Ä »     <      » BY² Å² ¿È· R°           ^ 
 _  ^  _      
 Ê »     <      » BY² Å² ¿È· R°           v 
 w  v  w      
 Ë »     <      » BY² ¼² ¿Â· R°            
           
 Ì »     <      » BY² Å² ¿Í· R°           ¥ 
 ¦  ¥  ¦        Ï    Ð 
     Ñ   Ò   >  Ù  Û Þ ß Ù  à ã ä Ù  å è é Ù  ê í î Ù  ï ð ñ Ù  ò õ ö ÷   
  ø ú ü 
```
```java
Êþº¾   =\  Abr/com/legalconnect/advogado/application/service/DocumentoService  java/lang/Object documentoRepository DLbr/com/legalconnect/advogado/domain/repository/DocumentoRepository; documentoMapper ALbr/com/legalconnect/advogado/application/mapper/DocumentoMapper; profissionalRepository GLbr/com/legalconnect/advogado/domain/repository/ProfissionalRepository; 	s3Service .Lbr/com/legalconnect/commom/service/S3Service; <init> ý(Lbr/com/legalconnect/advogado/domain/repository/DocumentoRepository;Lbr/com/legalconnect/advogado/application/mapper/DocumentoMapper;Lbr/com/legalconnect/advogado/domain/repository/ProfissionalRepository;Lbr/com/legalconnect/commom/service/S3Service;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
   
  ()V	    	    	   	 
	     LineNumberTable LocalVariableTable this CLbr/com/legalconnect/advogado/application/service/DocumentoService; MethodParameters uploadDocumento «(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest;)Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO; #Ljakarta/transaction/Transactional;
 & ( ' 0br/com/legalconnect/commom/service/TenantContext ) * getCurrentTenantId ()Ljava/util/UUID; , . - Ebr/com/legalconnect/advogado/domain/repository/ProfissionalRepository / 0 findById ((Ljava/lang/Object;)Ljava/util/Optional;   2 3 4 get ()Ljava/util/function/Supplier;
 6 8 7 java/util/Optional 9 : orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; < =br/com/legalconnect/advogado/domain/modal/entity/Profissional
 ; > ? * getTenantId
 A C B java/util/UUID D E equals (Ljava/lang/Object;)Z G 6br/com/legalconnect/common/exception/BusinessException	 I K J .br/com/legalconnect/common/exception/ErrorCode L M FORBIDDEN_ACCESS 0Lbr/com/legalconnect/common/exception/ErrorCode;	 O Q P #org/springframework/http/HttpStatus R S 	FORBIDDEN %Lorg/springframework/http/HttpStatus; U 4Acesso negado. Profissional pertence a outro tenant.
 F W 
 X j(Lbr/com/legalconnect/common/exception/ErrorCode;Lorg/springframework/http/HttpStatus;Ljava/lang/String;)V
 Z \ [ java/util/Base64 ] ^ 
getDecoder ()Ljava/util/Base64$Decoder;
 ` b a Kbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest c d getArquivoBase64 ()Ljava/lang/String;
 f h g java/util/Base64$Decoder i j decode (Ljava/lang/String;)[B	 I l m M INVALID_DOCUMENT_FORMAT	 O o p S BAD_REQUEST r )ConteÃºdo do arquivo em Base64 invÃ¡lido.
 t v u java/lang/String w x valueOf &(Ljava/lang/Object;)Ljava/lang/String;
 A z { * 
randomUUID
 ` } ~ d getNomeArquivo     makeConcatWithConstants J(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 `   d getMimeType
    ,br/com/legalconnect/commom/service/S3Service   
uploadFile :([BLjava/lang/String;Ljava/lang/String;)Ljava/lang/String;	 I   M DOCUMENT_UPLOAD_FAILED	 O   S INTERNAL_SERVER_ERROR  -Falha ao fazer upload do documento para o S3.    ?br/com/legalconnect/advogado/application/mapper/DocumentoMapper   toEntity (Lbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest;)Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;
    :br/com/legalconnect/advogado/domain/modal/entity/Documento   setUrlS3 (Ljava/lang/String;)V
  ¡ ¢ £ setProfissional B(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)V
  ¥ ¦ § setTenantId (Ljava/util/UUID;)V © « ª Bbr/com/legalconnect/advogado/domain/repository/DocumentoRepository ¬ ­ save &(Ljava/lang/Object;)Ljava/lang/Object;  ¯ ° ± 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;)Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO; ³ "java/lang/IllegalArgumentException profissionalId Ljava/util/UUID; request MLbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest; tenantId profissional ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; 	fileBytes [B e $Ljava/lang/IllegalArgumentException; s3Key Ljava/lang/String; fileUrl 	documento <Lbr/com/legalconnect/advogado/domain/modal/entity/Documento; 
StackMapTable ¼ findDocumentoById n(Ljava/util/UUID;Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO; © É Ê Ë findByIdAndProfissionalId 6(Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional;  2
  > Ï AAcesso negado. Documento pertence a outro tenant ou profissional. documentoId !findAllDocumentosByProfissionalId "(Ljava/util/UUID;)Ljava/util/List; 	Signature p(Ljava/util/UUID;)Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;>;  2 © × Ø Ò findAllByProfissionalId Ú Ü Û java/util/List Ý Þ stream ()Ljava/util/stream/Stream;
  à á â getClass ()Ljava/lang/Class;  ä å æ apply `(Lbr/com/legalconnect/advogado/application/mapper/DocumentoMapper;)Ljava/util/function/Function; è ê é java/util/stream/Stream ë ì map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 î ð ï java/util/stream/Collectors ñ ò toList ()Ljava/util/stream/Collector; è ô õ ö collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; deleteDocumento #(Ljava/util/UUID;Ljava/util/UUID;)V  2 û 1Acesso negado. Documento pertence a outro tenant.
  ý þ d getUrlS3
    
deleteFile	 I M ERRO_INTERNO_SERVIDOR
 java/lang/Exception	 d 
getMessage   &(Ljava/lang/String;)Ljava/lang/String; © ø deleteByIdAndProfissionalId existingDocumento Ljava/lang/Exception; lambda$0 :()Lbr/com/legalconnect/common/exception/BusinessException;	 I M PROFISSIONAL_NAO_ENCONTRADO	 O S 	NOT_FOUND 6Profissional nÃ£o encontrado para upload de documento. lambda$1	 I M ENTIDADE_NAO_ENCONTRADA! 1Documento nÃ£o encontrado para este profissional. lambda$2$ Profissional nÃ£o encontrado. lambda$4' )Documento nÃ£o encontrado para deleÃ§Ã£o. 
SourceFile DocumentoService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
-/. "java/lang/invoke/LambdaMetafactory01 metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;, ()Ljava/lang/Object;3
 65
:<; $java/lang/invoke/StringConcatFactory = (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;9@ profissionais//documentos//3
 CB3
 H"G ­	 ® ±3
 P%OT %Falha ao deletar o documento do S3:  InnerClassesW %java/lang/invoke/MethodHandles$LookupY java/lang/invoke/MethodHandles Lookup Decoder !                 	 
        	  
                   *· *+µ *,µ *-µ *µ ±           '  + 	 ,  -  .  /    4                         	 
        !          	       " #       $     ñ  	   Ï¸ %N*´ +¹ + º 1  ¶ 5À ;:¶ =-¶ @ » FY² H² NT· V¿¸ Y,¶ _¶ e:§ :» FY² k² nq· V¿+¸ s¸ y¸ s,¶ |º   :*´ ,¶ ¶ :Ç » FY² ² · V¿*´ ,¹  :¶ ¶  -¶ ¤*´ ¹ ¨ À :*´ ¹ ® °  7 C F ²     n    @  B  C  B  F ' G 1 H 3 G 7 N C O H P R Q T P X T b U f T m V ~ X  Y  Z  Y  ]  ^ ¦ _ ­ ` ³ b Ã c    p    Ï        Ï ´ µ    Ï ¶ ·   Ë ¸ µ   ´ ¹ º  C  » ¼  X w » ¼  H  ½ ¾  m b ¿ À  ~ Q Á À   0 Â Ã  Ä    ý 7 A ;N ²ü  Åý : t t !   	 ´   ¶    Æ Ç     Ç     D¸ %N*´ ,+¹ È º Ì  ¶ 5À :¶ Í-¶ @ » FY² H² NÎ· V¿*´ ¹ ® °       & 	   q  s  t  s  w ( x 2 y 4 x 8 |    4    D        D ´ µ    D Ð µ   @ ¸ µ   ( Â Ã  Ä    ý 8 A  !   	 ´   Ð    Ñ Ò  Ó    Ô    è     c¸ %M*´ +¹ + º Õ  ¶ 5À ;N-¶ =,¶ @ » FY² H² NT· V¿*´ +¹ Ö ¹ Ù *´ Y¶ ßWº ã  ¹ ç ¸ í¹ ó À Ú°       2             %  /  1  5  D  W  b     *    c        c ´ µ   _ ¸ µ   I ¹ º  Ä    ý 5 A ; !    ´    ÷ ø       $          m¸ %N*´ ,+¹ È º ù  ¶ 5À :¶ Í-¶ @ » FY² H² Nú· V¿*´ ¶ ü¶ ÿ§ :» FY²² ¶º
  · V¿*´ ,+¹
 ±  8 D G     >    £  ¥  ¦  ¥  © ( ª 2 « 4 ª 8 ° D ± I ² S ³ ] ² a ¶ l ·    >    m        m ´ µ    m Ð µ   i ¸ µ   Q Ã  I  ½  Ä    ý 8 A N !   	 ´   Ð  
     =      » FY²²· V°           C 
 D 
 C  D      
     =      » FY²² · V°           t 
 u 
 t  u      
"     =      » FY²²#· V°            
  
         
%     =      » FY²²&· V°           ¦ 
 § 
 ¦  §       (   )     *  +   @ 2 478> ?2 ADE2 FIJ2 KLM2 NQR> SU    VXZ  f Z[ 	
```
```java
Êþº¾   = ý  Obr/com/legalconnect/advogado/application/service/ExperienciaProfissionalService  java/lang/Object experienciaRepository FLbr/com/legalconnect/advogado/domain/repository/ExperienciaRepository; experienciaProfissionalMapper OLbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapper; profissionalRepository GLbr/com/legalconnect/advogado/domain/repository/ProfissionalRepository; <init> ß(Lbr/com/legalconnect/advogado/domain/repository/ExperienciaRepository;Lbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapper;Lbr/com/legalconnect/advogado/domain/repository/ProfissionalRepository;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
     ()V	    	    	   	 
 LineNumberTable LocalVariableTable this QLbr/com/legalconnect/advogado/application/service/ExperienciaProfissionalService; MethodParameters createExperienciaProfissional Ä(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO; #Ljakarta/transaction/Transactional;
 " $ # 0br/com/legalconnect/commom/service/TenantContext % & getCurrentTenantId ()Ljava/util/UUID; ( * ) Ebr/com/legalconnect/advogado/domain/repository/ProfissionalRepository + , findById ((Ljava/lang/Object;)Ljava/util/Optional;   . / 0 get ()Ljava/util/function/Supplier;
 2 4 3 java/util/Optional 5 6 orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; 8 =br/com/legalconnect/advogado/domain/modal/entity/Profissional
 7 : ; & getTenantId
 = ? > java/util/UUID @ A equals (Ljava/lang/Object;)Z C 6br/com/legalconnect/common/exception/BusinessException	 E G F .br/com/legalconnect/common/exception/ErrorCode H I FORBIDDEN_ACCESS 0Lbr/com/legalconnect/common/exception/ErrorCode;	 K M L #org/springframework/http/HttpStatus N O 	FORBIDDEN %Lorg/springframework/http/HttpStatus; Q 4Acesso negado. Profissional pertence a outro tenant.
 B S  T j(Lbr/com/legalconnect/common/exception/ErrorCode;Lorg/springframework/http/HttpStatus;Ljava/lang/String;)V V X W Mbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapper Y Z toEntity ¤(Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;
 \ ^ ] Hbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional _ ` setProfissional B(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)V
 \ b c d setTenantId (Ljava/util/UUID;)V f h g Dbr/com/legalconnect/advogado/domain/repository/ExperienciaRepository i j save &(Ljava/lang/Object;)Ljava/lang/Object; V l m n 
toResponseDTO ¦(Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO; profissionalId Ljava/util/UUID; 
requestDTO XLbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO; tenantId profissional ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; experiencia JLbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional; 
StackMapTable updateExperienciaProfissional Ô(Ljava/util/UUID;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO; f | } ~ findByIdAndProfissionalId 6(Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional;  .
 \ :  DAcesso negado. ExperiÃªncia pertence a outro tenant ou profissional. V    updateEntityFromDto ¥(Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)V 
experienciaId existingExperiencia findExperienciaProfissionalById |(Ljava/util/UUID;Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;  .  4Acesso negado. ExperiÃªncia pertence a outro tenant. 0findAllExperienciasProfissionaisByProfissionalId "(Ljava/util/UUID;)Ljava/util/List; 	Signature ~(Ljava/util/UUID;)Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;>;  . f    findAllByProfissionalId    java/util/List   stream ()Ljava/util/stream/Stream;
     getClass ()Ljava/lang/Class;  ¡ ¢ £ apply n(Lbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapper;)Ljava/util/function/Function; ¥ § ¦ java/util/stream/Stream ¨ © map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 « ­ ¬ java/util/stream/Collectors ® ¯ toList ()Ljava/util/stream/Collector; ¥ ± ² ³ collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; deleteExperienciaProfissional #(Ljava/util/UUID;Ljava/util/UUID;)V  . f ¸ ¹ µ deleteByIdAndProfissionalId lambda$0 :()Lbr/com/legalconnect/common/exception/BusinessException;	 E ½ ¾ I PROFISSIONAL_NAO_ENCONTRADO	 K À Á O 	NOT_FOUND Ã Profissional nÃ£o encontrado. lambda$1	 E Æ Ç I ENTIDADE_NAO_ENCONTRADA É AExperiÃªncia profissional nÃ£o encontrada para este profissional. lambda$2 lambda$3 lambda$5 Î 9ExperiÃªncia profissional nÃ£o encontrada para deleÃ§Ã£o. 
SourceFile #ExperienciaProfissionalService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
 Ô Ö Õ "java/lang/invoke/LambdaMetafactory × Ø metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; Ó ()Ljava/lang/Object; Ú
  Ý º » Ü » Ú
  â Ä » á » Ú
  ç Ê » æ » Ú
  ì Ë » ë » j	 k n Ú
  ô Ì » ó » InnerClasses ù %java/lang/invoke/MethodHandles$Lookup û java/lang/invoke/MethodHandles Lookup !                 	 
        
           l     *· *+µ *,µ *-µ ±           #  & 	 '  (  )    *                        	 
     
       	       
           	     l¸ !N*´ +¹ ' º -  ¶ 1À 7:¶ 9-¶ < » BY² D² JP· R¿*´ ,¹ U :¶ [-¶ a*´ ¹ e À \:*´ ¹ k °       6 
   8  :  ;  :  ? ' @ 1 A 3 @ 7 D C E J F P H ` I    >    l       l o p    l q r   h s p   Q t u  C ) v w  x    ý 7 = 7    	 o   q    y z  
            û     b¸ !:*´ ,+¹ { º   ¶ 1À \:¶ ¶ < » BY² D² J· R¿*´ -¹  *´ ¹ e À \:*´ ¹ k °       2    Y  [ 	 \  ]  [  a * b 4 c 6 b : f F g V h    >    b       b o p    b  p    b q r   ] s p   E  w  x    ý : = \    
 o      q          Ë     D¸ !N*´ ,+¹ { º   ¶ 1À \:¶ -¶ < » BY² D² J· R¿*´ ¹ k °       * 
   t  v  w  x  v  | ( } 2 ~ 4 } 8     4    D       D o p    D  p   @ s p   ( v w  x    ý 8 = \    	 o                  è     c¸ !M*´ +¹ ' º   ¶ 1À 7N-¶ 9,¶ < » BY² D² JP· R¿*´ +¹  ¹  *´ Y¶ Wº    ¹ ¤ ¸ ª¹ ° À °       2             %  /  1  5  D  W  b     *    c       c o p   _ s p   I t u  x    ý 5 = 7     o    ´ µ  
            Ï     D¸ !N*´ ,+¹ { º ¶  ¶ 1À \:¶ -¶ < » BY² D² J· R¿*´ ,+¹ · ±       .    ¤  ¦  §  ¨  ¦  ¬ ( ­ 2 ® 4 ­ 8 ± C ²    4    D       D o p    D  p   @ s p   (  w  x    ý 8 = \    	 o     
 º »     @      » BY² ¼² ¿Â· R°           ;  < 
 =  ;  =      
 Ä »     @      » BY² Å² ¿È· R°           ]  ^ 
 _  ]  _      
 Ê »     @      » BY² Å² ¿È· R°           x  y 
 z  x  z      
 Ë »     @      » BY² ¼² ¿Â· R°              
           
 Ì »     @      » BY² Å² ¿Í· R°           ¨  © 
 ª  ¨  ª        Ï    Ð 
     Ñ   Ò   >  Ù  Û Þ ß Ù  à ã ä Ù  å è é Ù  ê í î Ù  ï ð ñ Ù  ò õ ö ÷   
  ø ú ü 
```
```java
Êþº¾   = ý  Ibr/com/legalconnect/advogado/application/service/FormacaoAcademicaService  java/lang/Object formacaoRepository CLbr/com/legalconnect/advogado/domain/repository/FormacaoRepository; formacaoAcademicaMapper ILbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapper; profissionalRepository GLbr/com/legalconnect/advogado/domain/repository/ProfissionalRepository; <init> Ö(Lbr/com/legalconnect/advogado/domain/repository/FormacaoRepository;Lbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapper;Lbr/com/legalconnect/advogado/domain/repository/ProfissionalRepository;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
     ()V	    	    	   	 
 LineNumberTable LocalVariableTable this KLbr/com/legalconnect/advogado/application/service/FormacaoAcademicaService; MethodParameters createFormacaoAcademica ¸(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO; #Ljakarta/transaction/Transactional;
 " $ # 0br/com/legalconnect/commom/service/TenantContext % & getCurrentTenantId ()Ljava/util/UUID; ( * ) Ebr/com/legalconnect/advogado/domain/repository/ProfissionalRepository + , findById ((Ljava/lang/Object;)Ljava/util/Optional;   . / 0 get ()Ljava/util/function/Supplier;
 2 4 3 java/util/Optional 5 6 orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; 8 =br/com/legalconnect/advogado/domain/modal/entity/Profissional
 7 : ; & getTenantId
 = ? > java/util/UUID @ A equals (Ljava/lang/Object;)Z C 6br/com/legalconnect/common/exception/BusinessException	 E G F .br/com/legalconnect/common/exception/ErrorCode H I FORBIDDEN_ACCESS 0Lbr/com/legalconnect/common/exception/ErrorCode;	 K M L #org/springframework/http/HttpStatus N O 	FORBIDDEN %Lorg/springframework/http/HttpStatus; Q 4Acesso negado. Profissional pertence a outro tenant.
 B S  T j(Lbr/com/legalconnect/common/exception/ErrorCode;Lorg/springframework/http/HttpStatus;Ljava/lang/String;)V V X W Gbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapper Y Z toEntity (Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;
 \ ^ ] Bbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica _ ` setProfissional B(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)V
 \ b c d setTenantId (Ljava/util/UUID;)V f h g Abr/com/legalconnect/advogado/domain/repository/FormacaoRepository i j save &(Ljava/lang/Object;)Ljava/lang/Object; V l m n 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO; profissionalId Ljava/util/UUID; 
requestDTO RLbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO; tenantId profissional ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; formacao DLbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica; 
StackMapTable updateFormacaoAcademica È(Ljava/util/UUID;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO; f | } ~ findByIdAndProfissionalId 6(Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional;  .
 \ :  BAcesso negado. FormaÃ§Ã£o pertence a outro tenant ou profissional. V    updateEntityFromDto (Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)V 
formacaoId existingFormacao findFormacaoAcademicaById v(Ljava/util/UUID;Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;  .  2Acesso negado. FormaÃ§Ã£o pertence a outro tenant. *findAllFormacoesAcademicasByProfissionalId "(Ljava/util/UUID;)Ljava/util/List; 	Signature x(Ljava/util/UUID;)Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;>;  . f    findAllByProfissionalId    java/util/List   stream ()Ljava/util/stream/Stream;
     getClass ()Ljava/lang/Class;  ¡ ¢ £ apply h(Lbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapper;)Ljava/util/function/Function; ¥ § ¦ java/util/stream/Stream ¨ © map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 « ­ ¬ java/util/stream/Collectors ® ¯ toList ()Ljava/util/stream/Collector; ¥ ± ² ³ collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; deleteFormacaoAcademica #(Ljava/util/UUID;Ljava/util/UUID;)V  . f ¸ ¹ µ deleteByIdAndProfissionalId lambda$0 :()Lbr/com/legalconnect/common/exception/BusinessException;	 E ½ ¾ I PROFISSIONAL_NAO_ENCONTRADO	 K À Á O 	NOT_FOUND Ã Profissional nÃ£o encontrado. lambda$1	 E Æ Ç I ENTIDADE_NAO_ENCONTRADA É =FormaÃ§Ã£o acadÃªmica nÃ£o encontrada para este profissional. lambda$2 lambda$3 lambda$5 Î 5FormaÃ§Ã£o acadÃªmica nÃ£o encontrada para deleÃ§Ã£o. 
SourceFile FormacaoAcademicaService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
 Ô Ö Õ "java/lang/invoke/LambdaMetafactory × Ø metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; Ó ()Ljava/lang/Object; Ú
  Ý º » Ü » Ú
  â Ä » á » Ú
  ç Ê » æ » Ú
  ì Ë » ë » j	 k n Ú
  ô Ì » ó » InnerClasses ù %java/lang/invoke/MethodHandles$Lookup û java/lang/invoke/MethodHandles Lookup !                 	 
        
           l     *· *+µ *,µ *-µ ±           "  % 	 &  '  (    *                        	 
     
       	       
           	     l¸ !N*´ +¹ ' º -  ¶ 1À 7:¶ 9-¶ < » BY² D² JP· R¿*´ ,¹ U :¶ [-¶ a*´ ¹ e À \:*´ ¹ k °       6 
   7  9  :  9  > ' ? 1 @ 3 ? 7 C C D J E P G ` H    >    l       l o p    l q r   h s p   Q t u  C ) v w  x    ý 7 = 7    	 o   q    y z  
            û     b¸ !:*´ ,+¹ { º   ¶ 1À \:¶ ¶ < » BY² D² J· R¿*´ -¹  *´ ¹ e À \:*´ ¹ k °       2    X  Z 	 [  \  Z  ` * a 4 b 6 a : e F f V g    >    b       b o p    b  p    b q r   ] s p   E  w  x    ý : = \    
 o      q          Ç     D¸ !N*´ ,+¹ { º   ¶ 1À \:¶ -¶ < » BY² D² J· R¿*´ ¹ k °       & 	   r  t  u  t  y ( z 2 { 4 z 8 ~    4    D       D o p    D  p   @ s p   ( v w  x    ý 8 = \    	 o                  è     c¸ !M*´ +¹ ' º   ¶ 1À 7N-¶ 9,¶ < » BY² D² JP· R¿*´ +¹  ¹  *´ Y¶ Wº    ¹ ¤ ¸ ª¹ ° À °       2             %  /  1  5  D  W  b     *    c       c o p   _ s p   I t u  x    ý 5 = 7     o    ´ µ  
            Ï     D¸ !N*´ ,+¹ { º ¶  ¶ 1À \:¶ -¶ < » BY² D² J· R¿*´ ,+¹ · ±       .       ¢  £  ¤  ¢  ¨ ( © 2 ª 4 © 8 ­ C ®    4    D       D o p    D  p   @ s p   (  w  x    ý 8 = \    	 o     
 º »     @      » BY² ¼² ¿Â· R°           :  ; 
 <  :  <      
 Ä »     @      » BY² Å² ¿È· R°           \  ] 
 ^  \  ^      
 Ê »     @      » BY² Å² ¿È· R°           u  v 
 w  u  w      
 Ë »     @      » BY² ¼² ¿Â· R°              
           
 Ì »     @      » BY² Å² ¿Í· R°           ¤  ¥ 
 ¦  ¤  ¦        Ï    Ð 
     Ñ   Ò   >  Ù  Û Þ ß Ù  à ã ä Ù  å è é Ù  ê í î Ù  ï ð ñ Ù  ò õ ö ÷   
  ø ú ü 
```
```java
Êþº¾   = L  Fbr/com/legalconnect/advogado/application/service/GoogleCalendarService  java/lang/Object log Lorg/slf4j/Logger; <clinit> ()V Code
  
  org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>
     this HLbr/com/legalconnect/advogado/application/service/GoogleCalendarService; addEvent Y(Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)Z  8Simulando adiÃ§Ã£o de evento ao Google Calendar para {}:     org/slf4j/Logger ! " info '(Ljava/lang/String;Ljava/lang/Object;)V $   SumÃ¡rio: {} & 
  InÃ­cio: {} ( 	  Fim: {} * :Evento simulado adicionado com sucesso ao Google Calendar.  , ! - (Ljava/lang/String;)V 	userEmail Ljava/lang/String; eventSummary 	startTime Ljava/time/LocalDateTime; endTime MethodParameters checkAvailability .(Ljava/lang/String;Ljava/time/LocalDateTime;)Z 8 ASimulando verificaÃ§Ã£o de disponibilidade para {} no horÃ¡rio {}  : ! ; 9(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
 = ? > java/time/LocalDateTime @ A getHour ()I C "HorÃ¡rio indisponÃ­vel (simulado). E  HorÃ¡rio disponÃ­vel (simulado). proposedTime 
StackMapTable 
SourceFile GoogleCalendarService.java RuntimeVisibleAnnotations (Lorg/springframework/stereotype/Service; !                	   )      	¸ 
³ ±                      	   /     *· ±                            	        9² +¹  ² #,¹  ² %-¹  ² '¹  ² )¹ + ¬                 ! ! - - 7 .    4    9       9 . /    9 0 /    9 1 2    9 3 2  4    .   0   1   3    5 6  	        -² 7+,¹ 9 ,¶ <
  ² B¹ + ¬² D¹ + ¬           :  >  ?  @ ! B + C         -       - . /    - F 2  G    ! 4   	 .   F    H    I J     K  
```
```java
Êþº¾   =   >br/com/legalconnect/advogado/application/service/IdiomaService  java/lang/Object idiomaRepository ALbr/com/legalconnect/advogado/domain/repository/IdiomaRepository; idiomaMapper >Lbr/com/legalconnect/advogado/application/mapper/IdiomaMapper; <init> (Lbr/com/legalconnect/advogado/domain/repository/IdiomaRepository;Lbr/com/legalconnect/advogado/application/mapper/IdiomaMapper;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
   	  ()V	    	     LineNumberTable LocalVariableTable this @Lbr/com/legalconnect/advogado/application/service/IdiomaService; MethodParameters findIdiomaById [(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;    ?br/com/legalconnect/advogado/domain/repository/IdiomaRepository   ! findById ((Ljava/lang/Object;)Ljava/util/Optional;   # $ % get ()Ljava/util/function/Supplier;
 ' ) ( java/util/Optional * + orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; - 7br/com/legalconnect/advogado/domain/modal/entity/Idioma / 1 0 <br/com/legalconnect/advogado/application/mapper/IdiomaMapper 2 3 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma;)Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO; id Ljava/util/UUID; idioma 9Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma; findAllIdiomas ()Ljava/util/List; 	Signature ]()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;>;  = > 9 findAll @ B A java/util/List C D stream ()Ljava/util/stream/Stream;
  F G H getClass ()Ljava/lang/Class;  J K L apply ](Lbr/com/legalconnect/advogado/application/mapper/IdiomaMapper;)Ljava/util/function/Function; N P O java/util/stream/Stream Q R map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 T V U java/util/stream/Collectors W X toList ()Ljava/util/stream/Collector; N Z [ \ collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; lambda$0 :()Lbr/com/legalconnect/common/exception/BusinessException; ` 6br/com/legalconnect/common/exception/BusinessException	 b d c .br/com/legalconnect/common/exception/ErrorCode e f ENTIDADE_NAO_ENCONTRADA 0Lbr/com/legalconnect/common/exception/ErrorCode;	 h j i #org/springframework/http/HttpStatus k l 	NOT_FOUND %Lorg/springframework/http/HttpStatus; n Idioma nÃ£o encontrado.
 _ p 	 q j(Lbr/com/legalconnect/common/exception/ErrorCode;Lorg/springframework/http/HttpStatus;Ljava/lang/String;)V 
SourceFile IdiomaService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
 w y x "java/lang/invoke/LambdaMetafactory z { metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; v ()Ljava/lang/Object; }
   ] ^  ^ &(Ljava/lang/Object;)Ljava/lang/Object; 	 . 3 InnerClasses  %java/lang/invoke/MethodHandles$Lookup  java/lang/invoke/MethodHandles Lookup !                  	 
          
   Y     *· *+µ *,µ ±              	                                	           
   k     !*´ +¹  º "  ¶ &À ,M*´ ,¹ . °           ) 
 *  )  ,         !       ! 4 5    6 7      4    8 9  :    ; 
   c     -*´ ¹ < ¹ ? *´ Y¶ EWº I  ¹ M ¸ S¹ Y À @°           5  6 ! 7 , 5        -    
 ] ^  
   <      » _Y² a² gm· o°           * 
 +  *  +        r    s      t   u     |  ~   |        
     
```
```java
Êþº¾   =   Dbr/com/legalconnect/advogado/application/service/LocalAtuacaoService  java/lang/Object localAtuacaoRepository GLbr/com/legalconnect/advogado/domain/repository/LocalAtuacaoRepository; localAtuacaoMapper DLbr/com/legalconnect/advogado/application/mapper/LocalAtuacaoMapper; <init> (Lbr/com/legalconnect/advogado/domain/repository/LocalAtuacaoRepository;Lbr/com/legalconnect/advogado/application/mapper/LocalAtuacaoMapper;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
   	  ()V	    	     LineNumberTable LocalVariableTable this FLbr/com/legalconnect/advogado/application/service/LocalAtuacaoService; MethodParameters findLocalAtuacaoById a(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;    Ebr/com/legalconnect/advogado/domain/repository/LocalAtuacaoRepository   ! findById ((Ljava/lang/Object;)Ljava/util/Optional;   # $ % get ()Ljava/util/function/Supplier;
 ' ) ( java/util/Optional * + orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; - =br/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao / 1 0 Bbr/com/legalconnect/advogado/application/mapper/LocalAtuacaoMapper 2 3 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao;)Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO; id Ljava/util/UUID; localAtuacao ?Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao; findAllLocaisAtuacao ()Ljava/util/List; 	Signature c()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;>;  = > 9 findAll @ B A java/util/List C D stream ()Ljava/util/stream/Stream;
  F G H getClass ()Ljava/lang/Class;  J K L apply c(Lbr/com/legalconnect/advogado/application/mapper/LocalAtuacaoMapper;)Ljava/util/function/Function; N P O java/util/stream/Stream Q R map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 T V U java/util/stream/Collectors W X toList ()Ljava/util/stream/Collector; N Z [ \ collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; lambda$0 :()Lbr/com/legalconnect/common/exception/BusinessException; ` 6br/com/legalconnect/common/exception/BusinessException	 b d c .br/com/legalconnect/common/exception/ErrorCode e f ENTIDADE_NAO_ENCONTRADA 0Lbr/com/legalconnect/common/exception/ErrorCode;	 h j i #org/springframework/http/HttpStatus k l 	NOT_FOUND %Lorg/springframework/http/HttpStatus; n #Local de AtuaÃ§Ã£o nÃ£o encontrado.
 _ p 	 q j(Lbr/com/legalconnect/common/exception/ErrorCode;Lorg/springframework/http/HttpStatus;Ljava/lang/String;)V 
SourceFile LocalAtuacaoService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
 w y x "java/lang/invoke/LambdaMetafactory z { metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; v ()Ljava/lang/Object; }
   ] ^  ^ &(Ljava/lang/Object;)Ljava/lang/Object; 	 . 3 InnerClasses  %java/lang/invoke/MethodHandles$Lookup  java/lang/invoke/MethodHandles Lookup !                  	 
          
   Y     *· *+µ *,µ ±              	                                	           
   k     !*´ +¹  º "  ¶ &À ,M*´ ,¹ . °           ) 
 *  )  ,         !       ! 4 5    6 7      4    8 9  :    ; 
   c     -*´ ¹ < ¹ ? *´ Y¶ EWº I  ¹ M ¸ S¹ Y À @°           5  6 ! 7 , 5        -    
 ] ^  
   <      » _Y² a² gm· o°           * 
 +  *  +        r    s      t   u     |  ~   |        
     
```
```java
Êþº¾   =   @br/com/legalconnect/advogado/application/service/ProcessoService  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this BLbr/com/legalconnect/advogado/application/service/ProcessoService; 
SourceFile ProcessoService.java RuntimeVisibleAnnotations (Lorg/springframework/stereotype/Service; !               /     *· ±    
                 
                
```
```java
Êþº¾   =  Dbr/com/legalconnect/advogado/application/service/ProfissionalService  java/lang/Object profissionalRepository GLbr/com/legalconnect/advogado/domain/repository/ProfissionalRepository; profissionalMapper DLbr/com/legalconnect/advogado/application/mapper/ProfissionalMapper; 
pessoaService 2Lbr/com/legalconnect/commom/service/PessoaService; certificacaoMapper DLbr/com/legalconnect/advogado/application/mapper/CertificacaoMapper; experienciaProfissionalMapper OLbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapper; formacaoAcademicaMapper ILbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapper; documentoMapper ALbr/com/legalconnect/advogado/application/mapper/DocumentoMapper; certificacaoRepository GLbr/com/legalconnect/advogado/domain/repository/CertificacaoRepository; experienciaRepository FLbr/com/legalconnect/advogado/domain/repository/ExperienciaRepository; formacaoRepository CLbr/com/legalconnect/advogado/domain/repository/FormacaoRepository; documentoRepository DLbr/com/legalconnect/advogado/domain/repository/DocumentoRepository; 	s3Service .Lbr/com/legalconnect/commom/service/S3Service; areaAtuacaoRepository FLbr/com/legalconnect/advogado/domain/repository/AreaAtuacaoRepository; idiomaRepository ALbr/com/legalconnect/advogado/domain/repository/IdiomaRepository; localAtuacaoRepository GLbr/com/legalconnect/advogado/domain/repository/LocalAtuacaoRepository; tipoAtendimentoRepository JLbr/com/legalconnect/advogado/domain/repository/TipoAtendimentoRepository; areaAtuacaoMapper CLbr/com/legalconnect/advogado/application/mapper/AreaAtuacaoMapper; idiomaMapper >Lbr/com/legalconnect/advogado/application/mapper/IdiomaMapper; localAtuacaoMapper DLbr/com/legalconnect/advogado/application/mapper/LocalAtuacaoMapper; tipoAtendimentoMapper GLbr/com/legalconnect/advogado/application/mapper/TipoAtendimentoMapper; <init>C(Lbr/com/legalconnect/advogado/domain/repository/ProfissionalRepository;Lbr/com/legalconnect/advogado/application/mapper/ProfissionalMapper;Lbr/com/legalconnect/commom/service/PessoaService;Lbr/com/legalconnect/advogado/application/mapper/CertificacaoMapper;Lbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapper;Lbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapper;Lbr/com/legalconnect/advogado/application/mapper/DocumentoMapper;Lbr/com/legalconnect/advogado/domain/repository/CertificacaoRepository;Lbr/com/legalconnect/advogado/domain/repository/ExperienciaRepository;Lbr/com/legalconnect/advogado/domain/repository/FormacaoRepository;Lbr/com/legalconnect/advogado/domain/repository/DocumentoRepository;Lbr/com/legalconnect/commom/service/S3Service;Lbr/com/legalconnect/advogado/domain/repository/AreaAtuacaoRepository;Lbr/com/legalconnect/advogado/domain/repository/IdiomaRepository;Lbr/com/legalconnect/advogado/domain/repository/LocalAtuacaoRepository;Lbr/com/legalconnect/advogado/domain/repository/TipoAtendimentoRepository;Lbr/com/legalconnect/advogado/application/mapper/AreaAtuacaoMapper;Lbr/com/legalconnect/advogado/application/mapper/IdiomaMapper;Lbr/com/legalconnect/advogado/application/mapper/LocalAtuacaoMapper;Lbr/com/legalconnect/advogado/application/mapper/TipoAtendimentoMapper;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
  3 - 4 ()V	  6  	  8  	  : 	 
	  <  	  > 
 	  @  	  B  	  D  	  F  	  H  	  J  	  L  	  N  	  P   	  R ! "	  T # $	  V % &	  X ' (	  Z ) *	  \ + , LineNumberTable LocalVariableTable this FLbr/com/legalconnect/advogado/application/service/ProfissionalService; MethodParameters createProfissional ¡(Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO; #Ljakarta/transaction/Transactional;
 f h g 0br/com/legalconnect/commom/service/TenantContext i j getCurrentTenantId ()Ljava/util/UUID;
 l n m Nbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest o p getNumeroOab ()Ljava/lang/String; r t s Ebr/com/legalconnect/advogado/domain/repository/ProfissionalRepository u v existsByNumeroOab (Ljava/lang/String;)Z x 6br/com/legalconnect/common/exception/BusinessException	 z | { .br/com/legalconnect/common/exception/ErrorCode } ~ 
OAB_DUPLICADA 0Lbr/com/legalconnect/common/exception/ErrorCode;	    #org/springframework/http/HttpStatus   CONFLICT %Lorg/springframework/http/HttpStatus;
 w  -  j(Lbr/com/legalconnect/common/exception/ErrorCode;Lorg/springframework/http/HttpStatus;Ljava/lang/String;)V
 l   p getCpf
    0br/com/legalconnect/commom/service/PessoaService   findPessoaByCpf ((Ljava/lang/String;)Ljava/util/Optional;
    java/util/Optional   	isPresent ()Z	 z   ~ 
CPF_DUPLICADO
 l    
getUsuario 9()Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;
  ¡   5br/com/legalconnect/commom/dto/request/UserRequestDTO ¢ p getEmail
  ¤ ¥  findPessoaByEmail	 z § ¨ ~ EMAIL_DUPLICADO ª 7br/com/legalconnect/commom/dto/request/PessoaRequestDTO
 © 3
 © ­ ® ¯ 
setUsuario :(Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;)V
 l ± ² p getNomeCompleto
 © ´ µ ¶ setNomeCompleto (Ljava/lang/String;)V
 © ¸ ¹ ¶ setCpf
 l » ¼ ½ getDataNascimento ()Ljava/time/LocalDate;
 © ¿ À Á setDataNascimento (Ljava/time/LocalDate;)V
 l Ã Ä Å getTelefones ()Ljava/util/List;
 © Ç È É setTelefones (Ljava/util/List;)V
 l Ë Ì Å getEnderecos
 © Î Ï É setEnderecos
  Ñ Ò Ó createPessoa d(Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;)Lbr/com/legalconnect/commom/model/Pessoa; Õ × Ö Bbr/com/legalconnect/advogado/application/mapper/ProfissionalMapper Ø Ù toEntity (Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest;)Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;
 Û Ý Ü 'br/com/legalconnect/commom/model/Pessoa Þ j getId
 à â á =br/com/legalconnect/advogado/domain/modal/entity/Profissional ã ä setPessoaId (Ljava/util/UUID;)V
 Û æ  ç )()Lbr/com/legalconnect/commom/model/User;
 à é ® ê *(Lbr/com/legalconnect/commom/model/User;)V
 à ì í ä setTenantId ï PENDING_APPROVAL
 à ñ ò ¶ setStatusProfissional
 l ô õ Å getLocaisAtuacaoIds
  ÷ ø ù getClass ()Ljava/lang/Class;   û ü ý apply f(Lbr/com/legalconnect/advogado/domain/repository/LocalAtuacaoRepository;)Ljava/util/function/Function; ÿ Local de AtuaÃ§Ã£o
  validateMasterDataExistence B(Ljava/util/List;Ljava/util/function/Function;Ljava/lang/String;)V java/util/List	 stream ()Ljava/util/stream/Stream;

 java/util/stream/Collectors toSet ()Ljava/util/stream/Collector; java/util/stream/Stream collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; 
java/util/Set
 à setLocaisAtuacaoIds (Ljava/util/Set;)V
 l Å getAreaAtuacaoIds   ü! e(Lbr/com/legalconnect/advogado/domain/repository/AreaAtuacaoRepository;)Ljava/util/function/Function;# Ãrea de AtuaÃ§Ã£o
 à%& setAreaAtuacaoIds
 l() Å getIdiomaIds + ü, `(Lbr/com/legalconnect/advogado/domain/repository/IdiomaRepository;)Ljava/util/function/Function;. Idioma
 à01 setIdiomaIds
 l34 Å getTipoAtendimentoIds 6 ü7 i(Lbr/com/legalconnect/advogado/domain/repository/TipoAtendimentoRepository;)Ljava/util/function/Function;9 Tipo de Atendimento
 à;< setTipoAtendimentoIds r>?@ save &(Ljava/lang/Object;)Ljava/lang/Object;
 BCD manageNestedEntities (Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest;)V
 FGH mapToResponseDTOWithDetails (Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO; 
createRequest PLbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest; tenantId Ljava/util/UUID; pessoaRequestDTO 9Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO; 	newPessoa )Lbr/com/legalconnect/commom/model/Pessoa; profissional ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; 
StackMapTableU java/util/UUID updateProfissional ±(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO; rYZ[ findById ((Ljava/lang/Object;)Ljava/util/Optional; ]^_ get ()Ljava/util/function/Supplier;
 abc orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object;
 àef j getTenantId
Thij equals (Ljava/lang/Object;)Z	 zlm ~ FORBIDDEN_ACCESS	 op  	FORBIDDENr 4Acesso negado. Profissional pertence a outro tenant.
tvu Nbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequestwx 	getPessoa ;()Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;
 àz{ j getPessoaId
 }~ updatePessoa (Ljava/util/UUID;Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO; Õ updateEntityFromDto (Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest;Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)V
t j 
getPlanoId
 à
 à ä 
setPlanoId
t ô
t
t(
t3
 C (Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest;)V id 
updateRequest PLbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest; existingProfissional findProfissionalById a(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO; ] findAllProfissionais R(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page; 	Signature £(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page<Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO;>; r  findAllByTenantId b(Ljava/util/UUID;Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page; ¢ ü£ e(Lbr/com/legalconnect/advogado/application/service/ProfissionalService;)Ljava/util/function/Function;¥§¦ $org/springframework/data/domain/Page¨© map E(Ljava/util/function/Function;)Lorg/springframework/data/domain/Page; pageable *Lorg/springframework/data/domain/Pageable; profissionaisPage &Lorg/springframework/data/domain/Page; LocalVariableTypeTable gLorg/springframework/data/domain/Page<Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;>; deleteProfissional ]³µ´ Ebr/com/legalconnect/advogado/domain/repository/CertificacaoRepository¶· findAllByProfissionalId "(Ljava/util/UUID;)Ljava/util/List; ¹º» accept u(Lbr/com/legalconnect/advogado/application/service/ProfissionalService;Ljava/util/UUID;)Ljava/util/function/Consumer;½¾¿ forEach  (Ljava/util/function/Consumer;)VÁµÂ Dbr/com/legalconnect/advogado/domain/repository/ExperienciaRepository 	¹ÅµÆ Abr/com/legalconnect/advogado/domain/repository/FormacaoRepository 
¹ÉµÊ Bbr/com/legalconnect/advogado/domain/repository/DocumentoRepository ¹ rÍÎÏ 
deleteById (Ljava/lang/Object;)V
 ÑÒ ä deletePessoa
 lÔÕ Å getCertificacoes
 à×ÕØ ()Ljava/util/Set; ÚÛÜ test p(Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest;)Ljava/util/function/Predicate;Þßà removeIf !(Ljava/util/function/Predicate;)Z 
âºã ´(Lbr/com/legalconnect/advogado/application/service/ProfissionalService;Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;Ljava/util/UUID;)Ljava/util/function/Consumer;
 låæ Å getExperiencias
 àèæØ Ú â
 lìí Å getFormacoes
 àïíØ Ú â request
tÔ õ üö ()Ljava/util/function/Function;ø¨ù 8(Ljava/util/function/Function;)Ljava/util/stream/Stream; ûÛü /(Ljava/util/Set;)Ljava/util/function/Predicate; âÿ  4 clear
tå õ û â
tì õ û â 
dtoCertIds Ljava/util/Set; 	dtoExpIds 
dtoFormIds !Ljava/util/Set<Ljava/util/UUID;>; ÕH 
toResponseDTO
 à õØ Ebr/com/legalconnect/advogado/domain/repository/LocalAtuacaoRepository findAllById &(Ljava/lang/Iterable;)Ljava/util/List;  ü c(Lbr/com/legalconnect/advogado/application/mapper/LocalAtuacaoMapper;)Ljava/util/function/Function;
 toList
 "! Mbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO# É setLocaisAtuacao
 à%Ø'( Dbr/com/legalconnect/advogado/domain/repository/AreaAtuacaoRepository * ü+ b(Lbr/com/legalconnect/advogado/application/mapper/AreaAtuacaoMapper;)Ljava/util/function/Function;
 -. É setAreasAtuacao
 à0)Ø23 ?br/com/legalconnect/advogado/domain/repository/IdiomaRepository 5 ü6 ](Lbr/com/legalconnect/advogado/application/mapper/IdiomaMapper;)Ljava/util/function/Function;
 89 É 
setIdiomas
 à;4Ø=> Hbr/com/legalconnect/advogado/domain/repository/TipoAtendimentoRepository @ üA f(Lbr/com/legalconnect/advogado/application/mapper/TipoAtendimentoMapper;)Ljava/util/function/Function;
 CD É setTiposAtendimento G üH c(Lbr/com/legalconnect/advogado/application/mapper/CertificacaoMapper;)Ljava/util/function/Function;
 JK É setCertificacoes
 àMNØ 
getDocumentos  P üQ `(Lbr/com/legalconnect/advogado/application/mapper/DocumentoMapper;)Ljava/util/function/Function;
 ST É 
setDocumentos !V üW n(Lbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapper;)Ljava/util/function/Function;
 YZ É setExperiencias "\ ü] h(Lbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapper;)Ljava/util/function/Function;
 _` É setFormacoes
bdc java/lang/Booleanef valueOf (Z)Ljava/lang/Boolean;
 hij setFazParteDePlano (Ljava/lang/Boolean;)V responseDTO OLbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO; <T:Ljava/lang/Object;>(Ljava/util/List<Ljava/util/UUID;>;Ljava/util/function/Function<Ljava/util/UUID;Ljava/util/Optional<TT;>;>;Ljava/lang/String;)Vopq iterator ()Ljava/util/Iterator;sut java/util/Iteratorvw next ()Ljava/lang/Object;y{z java/util/function/Function ü@
 }~  isEmpty	 z ~ ENTIDADE_NAO_ENCONTRADA	   	NOT_FOUND
 java/lang/Stringe &(Ljava/lang/Object;)Ljava/lang/String; # makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;s  hasNext ids Ljava/util/List; finder Ljava/util/function/Function; 
entityName Ljava/lang/String; "Ljava/util/List<Ljava/util/UUID;>; HLjava/util/function/Function<Ljava/util/UUID;Ljava/util/Optional<TT;>;>; lambda$4 :()Lbr/com/legalconnect/common/exception/BusinessException;	 z ~ PROFISSIONAL_NAO_ENCONTRADO 0Profissional nÃ£o encontrado para atualizaÃ§Ã£o. lambda$9¢ Profissional nÃ£o encontrado. 	lambda$11¥ ,Profissional nÃ£o encontrado para deleÃ§Ã£o. 	lambda$12 R(Ljava/util/UUID;Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)V
© Ýª =br/com/legalconnect/advogado/domain/modal/entity/Certificacao³¬­® deleteByIdAndProfissionalId #(Ljava/util/UUID;Ljava/util/UUID;)V c ?Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao; 	lambda$13 ](Ljava/util/UUID;Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)V
´ Ýµ Hbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissionalÁ¬ e JLbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional; 	lambda$14 W(Ljava/util/UUID;Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)V
¼ Ý½ Bbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademicaÅ¬ f DLbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica; 	lambda$15 O(Ljava/util/UUID;Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;)V
ÄÆÅ :br/com/legalconnect/advogado/domain/modal/entity/DocumentoÇ p getUrlS3
ÉËÊ ,br/com/legalconnect/commom/service/S3ServiceÌ ¶ 
deleteFile
Ä ÝÉ¬ d <Lbr/com/legalconnect/advogado/domain/modal/entity/Documento; 	lambda$16 (Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest;Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)Z $ÔÛÕ _(Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)Ljava/util/function/Predicate;×Øà 	noneMatch existingCert 	lambda$18 (Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)V
Ý ÝÞ Kbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTOàâá Bbr/com/legalconnect/advogado/application/mapper/CertificacaoMapper Øã (Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;
©åæç setProfissional B(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)V
© ìêëj add %íÛî m(Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Ljava/util/function/Predicate;ðñò filter 9(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;ôõö 	findFirst ()Ljava/util/Optional; &øºù ²(Lbr/com/legalconnect/advogado/application/service/ProfissionalService;Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Ljava/util/function/Consumer;
 ûü¿ 	ifPresent dto MLbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO; newCert 	lambda$21 (Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest;Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)Z 'Û j(Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)Ljava/util/function/Predicate; existingExp 	lambda$23 ª(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)V
	 Ý
 Vbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO
 Mbr/com/legalconnect/advogado/application/mapper/ExperienciaProfissionalMapper Ø ¤(Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;
´å
´ ì (Û x(Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Ljava/util/function/Predicate; )º ½(Lbr/com/legalconnect/advogado/application/service/ProfissionalService;Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Ljava/util/function/Consumer; XLbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO; newExp 	lambda$26 (Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest;Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)Z *Û d(Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)Ljava/util/function/Predicate; existingForm 	lambda$28 ¤(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)V
# Ý$ Pbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO&(' Gbr/com/legalconnect/advogado/application/mapper/FormacaoAcademicaMapper Ø) (Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;
¼å
¼ ì +-Û. r(Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Ljava/util/function/Predicate; ,0º1 ·(Lbr/com/legalconnect/advogado/application/service/ProfissionalService;Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Ljava/util/function/Consumer; RLbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO; newForm 	lambda$31 _(Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Ljava/util/UUID; 	lambda$32 Q(Ljava/util/Set;Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)Z9:j contains 	lambda$33 -í .ø 	lambda$36 j(Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Ljava/util/UUID; 	lambda$37 \(Ljava/util/Set;Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)Z 	lambda$38 / 0 	lambda$41 d(Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Ljava/util/UUID; 	lambda$42 V(Ljava/util/Set;Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)Z 	lambda$43 1- 20 	lambda$17 (Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Z 	lambda$19 (Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)Z 	lambda$20 (Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)VàSQ 	lambda$22 ¥(Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Z 	lambda$24 ¥(Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)Z 	lambda$25 ¥(Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)V[Y 	lambda$27 (Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Z 	lambda$29 (Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)Z 	lambda$30 (Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)V&ca 	lambda$34 	lambda$35 	lambda$39 	lambda$40 	lambda$44 	lambda$45 
SourceFile ProfissionalService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
oqp "java/lang/invoke/LambdaMetafactoryrs metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;n@wYx 2org/springframework/data/repository/CrudRepository	v &(Ljava/util/UUID;)Ljava/util/Optional;z@	vz@	vz@	vzw
 w
  @EHw
 £Ï
 ¦§ B(Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)VÏ
 ±² M(Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)V¡Ï
 ¥¹º¤ G(Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)V§Ï
 «ÁÂª ?(Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;)V­j
 ±ÑÒ° B(Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)Z³Ï
 ·ÚÛ¶ P(Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)V¹j
 ½ ¼ M(Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)Z¿Ï
 ÃÂ [(Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)VÅj
 ÉÈ G(Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)ZËÏ
 Ï !Î U(Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)VÑ@
 Õ45Ô5j
 Ú67Ù³Ï
 ß;ÛÞ¹@
 ä>?ã?j
 é@Aè¿Ï
 îBíÅ@
 óEFòFj
 øGH÷ËÏ
 ýI!üÑ@ Bbr/com/legalconnect/advogado/application/mapper/LocalAtuacaoMapper (Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao;)Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;	@
 Abr/com/legalconnect/advogado/application/mapper/AreaAtuacaoMapper
 (Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao;)Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;		
@ <br/com/legalconnect/advogado/application/mapper/IdiomaMapper (Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma;)Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;	@ Ebr/com/legalconnect/advogado/application/mapper/TipoAtendimentoMapper (Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento;)Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;	@à"# (Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;	!#@(*) ?br/com/legalconnect/advogado/application/mapper/DocumentoMapper+ (Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;)Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;	'+@01 ¦(Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;	/1@&67 (Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;	57
;=< $java/lang/invoke/StringConcatFactory> (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;:A  com ID  nÃ£o encontrado(a).j
 DLMC P(Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)ZFj
 JNOI³Ï
 OPQNj
 TTUS [(Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)ZVj
 ZVWY¿Ï
 _XY^¡j
 d\]c U(Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Zfj
 j^_iËÏ
 o`an§j
 tdOs³Ï
 yeQxj
 ~fW}¿Ï
 gY¡j
 h_ËÏ
 ia§ InnerClasses %java/lang/invoke/MethodHandles$Lookup java/lang/invoke/MethodHandles Lookup !                 	 
         
                                                   ! "    # $    % &    ' (    ) *    + ,   /  - .  /     0   1  À     z*· 2*+µ 5*,µ 7*-µ 9*µ ;*µ =*µ ?*µ A*µ C*	µ E*
µ G*µ I*µ K*
µ M*µ O*µ Q*µ S*µ U*µ W*µ Y*µ [±    ]   Z    P  d 	 e  f  g  h  i % j + k 1 l 7 m = n C o I p O q U r [ s a t g u m v s w y x ^   Ô    z _ `     z      z      z 	 
    z      z 
     z      z      z      z   	   z   
   z      z      z   
   z       z ! "    z # $    z % &    z ' (    z ) *    z + ,  a   Q       	      
                              !   #   %   '   )   +    b c  /     d   1  	    â¸ eM*´ 5+¶ k¹ q  » wY² y² +¶ k· ¿*´ 9+¶ ¶ ¶  » wY² ² +¶ · ¿*´ 9+¶ ¶ ¶ £¶  » wY² ¦² +¶ ¶ · ¿» ©Y· «N-+¶ ¶ ¬-+¶ °¶ ³-+¶ ¶ ·-+¶ º¶ ¾-+¶ Â¶ Æ-+¶ Ê¶ Í*´ 9-¶ Ð:*´ 7+¹ Ô :¶ Ú¶ ß¶ å¶ è,¶ ëî¶ ð+¶ óÆ 4*+¶ ó*´ QY¶ öWº ú  þ¶ +¶ ó¹ ¸
¹ À¶+¶Æ 5*+¶*´ MY¶ öWº  "¶ +¶¹ ¸
¹ À¶$+¶'Æ 5*+¶'*´ OY¶ öWº*  -¶ +¶'¹ ¸
¹ À¶/+¶2Æ 5*+¶2*´ SY¶ öWº5  8¶ +¶2¹ ¸
¹ À¶:*´ 5¹= À à:*+¶A*¶E°    ]   ² ,        &  7  I  ]  g  n  r  z        ¡  ¢ ¢ £ ª ¥ ´ ® À ¯ Ê ° Ô ± Ú ² á µ è ¶ û · ý ¶  ¸ º  »3 ¼6 »9 ½R ¿Y Àr Á Ã Ä¥ Å¨ Ä« Æ­ ÇÄ ÊÔ ÍÛ Ï ^   >   â _ `    âIJ  ÞKL  zhMN  ´.OP  À"QR S    ü &T"(þ ¦ © Û à888 a   I   VW  /     d   1  y    |¸ eN*´ 5+¹X º\  ¶`À à:¶d-¶g » wY²k²nq· ¿,¶sÆ *´ 9¶y,¶s¶|W*´ 7,¹ ,¶Æ ¶,¶¶g ,¶¶,¶Æ 4*,¶*´ QY¶ öWº ú  þ¶ ,¶¹ ¸
¹ À¶,¶Æ 5*,¶*´ MY¶ öWº  "¶ ,¶¹ ¸
¹ À¶$,¶Æ 5*,¶*´ OY¶ öWº*  -¶ ,¶¹ ¸
¹ À¶/,¶Æ 5*,¶*´ SY¶ öWº5  8¶ ,¶¹ ¸
¹ À¶:*,¶*´ 5¹= À à:*¶E°    ]    &   ã  å  æ  å  ë ' ì 1 í 4 ì 8 ñ ? ò P ö \ ù c ú r ÿ {      ³	 º
 Í Ð
 Ó Õ
 ì ó%,?BEG^eu ^   4   | _ `    |L   |  xKL  aR S    ý 8T à*7888 a   	       1   µ     <¸ eM*´ 5+¹X º  ¶`À àN-¶d,¶g » wY²k²nq· ¿*-¶E°    ]   & 	  - / 0 / 4 %5 /6 25 69 ^   *    < _ `     <L   8KL   "QR S    ý 6T à a           1        ¸ eM*´ 5,+¹ N-*º¡  ¹¤ °    ]      D F M ^   *     _ `     ª«   KL   
¬­ ®      
¬¯  a   ª   ° ä  /     d   1  A     ¤¸ eM*´ 5+¹X º±  ¶`À àN-¶d,¶g » wY²k²nq· ¿*´ C+¹² *+º¸  ¹¼ *´ E+¹À *+ºÃ  ¹¼ *´ G+¹Ä *+ºÇ  ¹¼ *´ I+¹È *+ºË  ¹¼ *´ 5+¹Ì *´ 9-¶y¶Ð±    ]   J   ^ ` a ` e %f /g 2f 6l @m Ln Vo bp lq xr x { £| ^   *    ¤ _ `     ¤L    KL   QR S    ý 6T à a      CD  1   þ     ~+¶dN,¶ÓÆ $+¶Ö,ºÙ  ¹Ý W,¶Ó*+-ºá  ¹¼ ,¶äÆ $+¶ç,ºé  ¹Ý W,¶ä*+-ºê  ¹¼ ,¶ëÆ $+¶î,ºð  ¹Ý W,¶ë*+-ºñ  ¹¼ ±    ]   .       - 4  D¢ U² \³ lµ }Ã ^   *    ~ _ `     ~QR    ~òJ   yKL S   
 ü -T'' a   	Q  ò   C  1  ,    +¶dN,¶óÆ H,¶ó¹ ºô  ¹÷ ¸
¹ À:+¶Öºú  ¹Ý W,¶ó*+-ºý  ¹¼ § +¶Ö¹þ ,¶Æ H,¶¹ º  ¹÷ ¸
¹ À:+¶çº  ¹Ý W,¶*+-º  ¹¼ § +¶ç¹þ ,¶Æ H,¶¹ º  ¹÷ ¸
¹ À:+¶îº  ¹Ý W,¶*+-º  ¹¼ § +¶î¹þ ±    ]    "  Ê Í Ï Ð Ñ *Ï ,Ô 0Õ 7Ô =× Nä Qç Zë aì jí tî ì ï ð ñ £þ ¦ÿ ¯ ¶ ¿ É Ô Ö Ú á ç	 ø û ^   H    _ `    QR   ò   KL  , "	
   "
  Ö "
 ®      , "	
   "
  Ö "
 S    ü QTû Kû K a   	Q  ò   GH  1  Á    *´ 7+¹ M,*´ Q+¶¹ ¹ *´ YY¶ öWº  ¹÷ ¸¹ À¶,*´ M+¶$¹& ¹ *´ UY¶ öWº)  ¹÷ ¸¹ À¶,,*´ O+¶/¹1 ¹ *´ WY¶ öWº4  ¹÷ ¸¹ À¶7,*´ S+¶:¹< ¹ *´ [Y¶ öWº?  ¹÷ ¸¹ À¶B,+¶Ö¹E *´ ;Y¶ öWºF  ¹÷ ¸¹ À¶I,+¶L¹E *´ AY¶ öWºO  ¹÷ ¸¹ À¶R,+¶ç¹E *´ =Y¶ öWºU  ¹÷ ¸¹ À¶X,+¶î¹E *´ ?Y¶ öWº[  ¹÷ ¸¹ À¶^,+¶Æ § ¸a¶g,°    ]   ¾ /  $ ' ( ) * 1+ <' ?, @- M. R/ e0 p, s1 t2 3 4 5 ¤1 §6 ¨7 µ8 º9 Í: Ø6 Û= Ü> å? ø@=ABC#D.A1E2F;GNHYE\I]JfKyLIOQ ^        _ `    QR  kl S   ) ÿ   à   ÿ     à    a   Q       m 1   ò     L+¹n :§ 9¹r ÀT:,¹x À ¶| » wY²²-¸º  · ¿¹ ÿÃ±    ]      ^ _ (` 2a =` A^ Kd ^   4    L _ `     L    L    L   *L ®       L    L S    ÿ   y s  5 a   
      
  1   =      » wY²²· °    ]       æ 
 ç 
 æ  ç ^     
   1   =      » wY²²¡· °    ]      0 
1 
0 1 ^     
£  1   =      » wY²²¤· °    ]      a 
b 
a b ^     ¦§  1   C     *´ C,¶¨+¹« ±    ]      m ^        _ `     ¯° ±²  1   C     *´ E,¶³+¹¶ ±    ]      o ^        _ `     ·¸ ¹º  1   C     *´ G,¶»+¹¾ ±    ]      q ^        _ `     ¿À ÁÂ  1   V     *´ K,¶Ã¶È*´ I,¶Í+¹Î ±    ]      s t u ^        _ `     ÏÐ 
ÑÒ  1   C     *¶Ó¹ +ºÓ  ¹Ö ¬    ]   
    	 ^       Ù° ÚÛ  1   Â     R-¶ÜÇ **´ ;-¹ß :+¶ä,¶è+¶Ö¹é W§ &+¶Ö¹E -ºì  ¹ï ¹ó *-º÷  ¶ú±    ]   .        + . 7 B G Q ^        R _ `     Rýþ   ÿ° S    ."
   1   C     *¶ä¹ +º  ¹Ö ¬    ]   
     	¡ ^       ¸   1   Â     R-¶Ç **´ =-¹ :+¶,¶+¶ç¹é W§ &+¶ç¹E -º  ¹ï ¹ó *-º  ¶ú±    ]   .   £ ¤ ¥ ¦ § +¨ .© 7ª B« G¬ Q® ^        R _ `     Rý   ¸ S    ."
  1   C     *¶ë¹ +º  ¹Ö ¬    ]   
   ³ 	´ ^       À  !  1   Â     R-¶"Ç **´ ?-¹% :+¶*,¶++¶î¹é W§ &+¶î¹E -º,  ¹ï ¹ó *-º/  ¶ú±    ]   .   ¶ · ¸ ¹ º +» .¼ 7½ B¾ G¿ QÁ ^        R _ `     Rý2   3À S    ."
45  1   /     *¶Ü°    ]      Ð ^       ¯þ  
67  1   O     +¶¨Æ *+¶¨¹8  § ¬    ]      Õ ^       Ù° S    @;Û  1   Â     R-¶ÜÇ **´ ;-¹ß :+¶ä,¶è+¶Ö¹é W§ &+¶Ö¹E -º<  ¹ï ¹ó *-º=  ¶ú±    ]   .   Ø Ù Ú Û Ü +Ý .Þ 7ß Bà Gá Qã ^        R _ `     Rýþ   ÿ° S    ."
>?  1   /     *¶°    ]      í ^       ·  
@A  1   O     +¶³Æ *+¶³¹8  § ¬    ]      ð ^       ¸ S    @B  1   Â     R-¶Ç **´ =-¹ :+¶,¶+¶ç¹é W§ &+¶ç¹E -ºC  ¹ï ¹ó *-ºD  ¶ú±    ]   .   ò ó ô õ ö +÷ .ø 7ù Bú Gû Qý ^        R _ `     Rý   ¸ S    ."
EF  1   /     *¶"°    ]       ^       ¿2  
GH  1   O     +¶»Æ *+¶»¹8  § ¬    ]       ^       À S    @I!  1   Â     R-¶"Ç **´ ?-¹% :+¶*,¶++¶î¹é W§ &+¶î¹E -ºJ  ¹ï ¹ó *-ºK  ¶ú±    ]   .   
   
  + . 7 B G Q ^        R _ `     Rý2   3À S    ."
LM  1   6     *¶¨+¶Ü¶g¬    ]       ^       ýþ 
NO  1   6     +¶¨*¶Ü¶g¬    ]       ^       ¯° PQ  1   @     *´ ;+,¹R ±    ]       ^        _ `     ¯° 
TU  1   6     *¶³+¶¶g¬    ]      ¡ ^       ý 
VW  1   6     +¶³*¶¶g¬    ]      ª ^       ·¸ XY  1   @     *´ =+,¹Z ±    ]      ¬ ^        _ `     ·¸ 
\]  1   6     *¶»+¶"¶g¬    ]      ´ ^       ý2 
^_  1   6     +¶»*¶"¶g¬    ]      ½ ^       ¿À `a  1   @     *´ ?+,¹b ±    ]      ¿ ^        _ `     ¿À 
dO  1   P     +¶¨Æ +¶¨*¶Ü¶g § ¬    ]      ß ^       ¯° S    @eQ  1   @     *´ ;+,¹R ±    ]      á ^        _ `     ¯° 
fW  1   P     +¶³Æ +¶³*¶¶g § ¬    ]      ù ^       ·¸ S    @gY  1   @     *´ =+,¹Z ±    ]      û ^        _ `     ·¸ 
h_  1   P     +¶»Æ +¶»*¶"¶g § ¬    ]       ^       ¿À S    @ia  1   @     *´ ?+,¹b ±    ]       ^        _ `     ¿À  j   k /    l  m  ü 3t uy{t |}~t t t t t t t t  ¢t £¦¨t ©¬®t ¯²´t µ¸ºt »¾Àt ÁÄÆt ÇÊÌt ÍÐÒt ÓÖ×t ØÛÜt Ýàát âåæt çêët ìïðt ñôõt öùút ûþÿt  t t t t  $%t &,-t .23t 489? @t BEGt HKLt MPQt RUWt X[\t ]`at begt hklt mpqt ruvt wz{t |t t t    
  
```
```java
Êþº¾   =   Gbr/com/legalconnect/advogado/application/service/TipoAtendimentoService  java/lang/Object tipoAtendimentoRepository JLbr/com/legalconnect/advogado/domain/repository/TipoAtendimentoRepository; tipoAtendimentoMapper GLbr/com/legalconnect/advogado/application/mapper/TipoAtendimentoMapper; <init> (Lbr/com/legalconnect/advogado/domain/repository/TipoAtendimentoRepository;Lbr/com/legalconnect/advogado/application/mapper/TipoAtendimentoMapper;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
   	  ()V	    	     LineNumberTable LocalVariableTable this ILbr/com/legalconnect/advogado/application/service/TipoAtendimentoService; MethodParameters findTipoAtendimentoById d(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;    Hbr/com/legalconnect/advogado/domain/repository/TipoAtendimentoRepository   ! findById ((Ljava/lang/Object;)Ljava/util/Optional;   # $ % get ()Ljava/util/function/Supplier;
 ' ) ( java/util/Optional * + orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; - @br/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento / 1 0 Ebr/com/legalconnect/advogado/application/mapper/TipoAtendimentoMapper 2 3 
toResponseDTO (Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento;)Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO; id Ljava/util/UUID; tipoAtendimento BLbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento; findAllTiposAtendimento ()Ljava/util/List; 	Signature f()Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;>;  = > 9 findAll @ B A java/util/List C D stream ()Ljava/util/stream/Stream;
  F G H getClass ()Ljava/lang/Class;  J K L apply f(Lbr/com/legalconnect/advogado/application/mapper/TipoAtendimentoMapper;)Ljava/util/function/Function; N P O java/util/stream/Stream Q R map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 T V U java/util/stream/Collectors W X toList ()Ljava/util/stream/Collector; N Z [ \ collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; lambda$0 :()Lbr/com/legalconnect/common/exception/BusinessException; ` 6br/com/legalconnect/common/exception/BusinessException	 b d c .br/com/legalconnect/common/exception/ErrorCode e f ENTIDADE_NAO_ENCONTRADA 0Lbr/com/legalconnect/common/exception/ErrorCode;	 h j i #org/springframework/http/HttpStatus k l 	NOT_FOUND %Lorg/springframework/http/HttpStatus; n $Tipo de Atendimento nÃ£o encontrado.
 _ p 	 q j(Lbr/com/legalconnect/common/exception/ErrorCode;Lorg/springframework/http/HttpStatus;Ljava/lang/String;)V 
SourceFile TipoAtendimentoService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
 w y x "java/lang/invoke/LambdaMetafactory z { metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; v ()Ljava/lang/Object; }
   ] ^  ^ &(Ljava/lang/Object;)Ljava/lang/Object; 	 . 3 InnerClasses  %java/lang/invoke/MethodHandles$Lookup  java/lang/invoke/MethodHandles Lookup !                  	 
          
   Y     *· *+µ *,µ ±              	                                 	           
   k     !*´ +¹  º "  ¶ &À ,M*´ ,¹ . °           * 
 +  *  -         !       ! 4 5    6 7      4    8 9  :    ; 
   c     -*´ ¹ < ¹ ? *´ Y¶ EWº I  ¹ M ¸ S¹ Y À @°           6  7 ! 8 , 6        -    
 ] ^  
   <      » _Y² a² gm· o°           + 
 ,  +  ,        r    s      t   u     |  ~   |        
     
```
```java
Êþº¾   = Â  =br/com/legalconnect/advogado/controller/AgendamentoController  java/lang/Object agendamentoService ELbr/com/legalconnect/advogado/application/service/AgendamentoService; <init> H(Lbr/com/legalconnect/advogado/application/service/AgendamentoService;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
  
   ()V	     LineNumberTable LocalVariableTable this ?Lbr/com/legalconnect/advogado/controller/AgendamentoController; MethodParameters agendarConsulta v(Ljava/util/UUID;Ljava/util/UUID;Ljava/time/LocalDateTime;Ljava/lang/String;)Lorg/springframework/http/ResponseEntity; 	Signature º(Ljava/util/UUID;Ljava/util/UUID;Ljava/time/LocalDateTime;Ljava/lang/String;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/lang/Boolean;>;>; )Lio/swagger/v3/oas/annotations/Operation; summary Agenda uma nova consulta description uPermite a um cliente agendar uma consulta com um profissional, verificando disponibilidade e enviando notificaÃ§Ãµes. 	responses 5Lio/swagger/v3/oas/annotations/responses/ApiResponse; responseCode 201 Consulta agendada com sucesso 400 =Dados de requisiÃ§Ã£o invÃ¡lidos (ex: horÃ¡rio indisponÃ­vel) 404 Profissional nÃ£o encontrado 409 .Conflito de agendamento (horÃ¡rio jÃ¡ ocupado) 500 Erro interno do servidor 5Lorg/springframework/web/bind/annotation/PostMapping; value /agendar "RuntimeVisibleParameterAnnotations )Lio/swagger/v3/oas/annotations/Parameter; %ID do profissional para o agendamento 6Lorg/springframework/web/bind/annotation/RequestParam; (Ljakarta/validation/constraints/NotNull; !ID do cliente que estÃ¡ agendando MHorÃ¡rio desejado para a consulta (formato ISO 8601, ex: 2024-07-25T10:00:00) 6Lorg/springframework/format/annotation/DateTimeFormat; iso :Lorg/springframework/format/annotation/DateTimeFormat$ISO; 	DATE_TIME NTipo de serviÃ§o a ser agendado (ex: 'Consulta Online', 'ReuniÃ£o Presencial')
 < > = Cbr/com/legalconnect/advogado/application/service/AgendamentoService  ? N(Ljava/util/UUID;Ljava/util/UUID;Ljava/time/LocalDateTime;Ljava/lang/String;)Z	 A C B #org/springframework/http/HttpStatus D E CREATED %Lorg/springframework/http/HttpStatus;
 G I H 'org/springframework/http/ResponseEntity J K status `(Lorg/springframework/http/HttpStatusCode;)Lorg/springframework/http/ResponseEntity$BodyBuilder;
 M O N +br/com/legalconnect/common/dto/BaseResponse P Q builder C()Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;	 S U T (br/com/legalconnect/enums/StatusResponse V W SUCESSO *Lbr/com/legalconnect/enums/StatusResponse;
 Y [ Z ?br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder J \ m(Lbr/com/legalconnect/enums/StatusResponse;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; ^ Consulta agendada com sucesso.
 Y ` a b message U(Ljava/lang/String;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 d f e java/lang/Boolean g h valueOf (Z)Ljava/lang/Boolean;
 Y j k l data U(Ljava/lang/Object;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 n p o java/time/LocalDateTime q r now ()Ljava/time/LocalDateTime;
 Y t u v 	timestamp \(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 Y x y z build /()Lbr/com/legalconnect/common/dto/BaseResponse; | ~ } 3org/springframework/http/ResponseEntity$BodyBuilder   body =(Ljava/lang/Object;)Lorg/springframework/http/ResponseEntity; profissionalId Ljava/util/UUID; 	clienteId horarioAgendamento Ljava/time/LocalDateTime; tipoServico Ljava/lang/String; sucesso Z RuntimeVisibleTypeAnnotations avaliarConsulta ^(Ljava/util/UUID;Ljava/util/UUID;ILjava/lang/String;)Lorg/springframework/http/ResponseEntity; ¢(Ljava/util/UUID;Ljava/util/UUID;ILjava/lang/String;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/lang/Boolean;>;>; Avalia uma consulta XPermite a um cliente fornecer uma nota e um comentÃ¡rio para uma consulta jÃ¡ realizada. 200 Consulta avaliada com sucesso =Dados de requisiÃ§Ã£o invÃ¡lidos (ex: nota fora do intervalo) Agendamento nÃ£o encontrado /avaliar  ID do agendamento a ser avaliado !ID do cliente que estÃ¡ avaliando Nota da avaliaÃ§Ã£o (1 a 5) (ComentÃ¡rio opcional sobre a avaliaÃ§Ã£o required    
 G    
badRequest 7()Lorg/springframework/http/ResponseEntity$BodyBuilder;	 S   ¡ W ERRO £ +A nota da avaliaÃ§Ã£o deve ser entre 1 e 5.
 < ¥  ¦ 6(Ljava/util/UUID;Ljava/util/UUID;ILjava/lang/String;)Z ¨ Consulta avaliada com sucesso.
 G ª «  ok 
agendamentoId rating I 
comentario 
StackMapTable 
SourceFile AgendamentoController.java 8Lorg/springframework/web/bind/annotation/RestController; 8Lorg/springframework/web/bind/annotation/RequestMapping; /api/v1/advogados/agendamentos (Lio/swagger/v3/oas/annotations/tags/Tag; name Agendamentos 9Gerenciamento de agendamentos de consultas e avaliaÃ§Ãµes InnerClasses BaseResponseBuilder ½ 8org/springframework/format/annotation/DateTimeFormat$ISO ¿ 4org/springframework/format/annotation/DateTimeFormat ISO BodyBuilder !                	     
      F     
*· *+µ ±           '  ( 	 )        
       
                    	   l    s  s  [ @    !s " s #@    !s $ s %@    !s & s '@    !s ( s )@    !s * s + ,  -[ s . /   X  0  s 1 2   3    0  s 4 2   3    0  s 5 2   3   6  7e 8 9  0  s : 2   3      Á     9*´ +,-¶ ;6² @¸ F¸ L² R¶ X]¶ _¸ c¶ i¸ m¶ s¶ w¹ { °       2    G  H 	 G  I  J  K  L " M * N 0 O 3 J 8 I    >    9       9      9      9      9     +           3    3    3    3                            	   ]    s  s  [ @    !s  s @    !s $ s @    !s & s @    !s * s + ,  -[ s  /   N  0  s  2   3    0  s  2   3    0  s  2   3    0  s  2  Z         b¡ ¤ *¸ ¸ L² ¶ X¢¶ _¸ c¶ i¸ m¶ s¶ w¹ { °*´ +,¶ ¤6¸ L² R¶ X§¶ _¸ c¶ i¸ m¶ s¶ w¸ ©°       B    l 
 m  n  o  p " q ( r + m 1 u ? v B w H x M y U z [ { ^ v    >    b       b ¬     b      b ­ ®    b ¯   ? #    °    
&        3    3    3       ¬      ­   ¯    ±    ² 	      ³   ´  -[ s µ ¶  ·s ¸ s ¹ º     Y M » 	 ¼ ¾ À@ | G Á	
```
```java
Êþº¾   =   =br/com/legalconnect/advogado/controller/AreaAtuacaoController  java/lang/Object areaAtuacaoService ELbr/com/legalconnect/advogado/application/service/AreaAtuacaoService; <init> H(Lbr/com/legalconnect/advogado/application/service/AreaAtuacaoService;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
  
   ()V	     LineNumberTable LocalVariableTable this ?Lbr/com/legalconnect/advogado/controller/AreaAtuacaoController; MethodParameters getAreaAtuacaoById ;(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity; 	Signature º(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;>;>; )Lio/swagger/v3/oas/annotations/Operation; summary $Busca uma Ã¡rea de atuaÃ§Ã£o pelo ID description :Retorna os detalhes de uma Ã¡rea de atuaÃ§Ã£o especÃ­fica. 	responses 5Lio/swagger/v3/oas/annotations/responses/ApiResponse; responseCode 200 )Ãrea de AtuaÃ§Ã£o encontrada com sucesso 404 "Ãrea de AtuaÃ§Ã£o nÃ£o encontrada 500 Erro interno do servidor 4Lorg/springframework/web/bind/annotation/GetMapping; value /{id} "RuntimeVisibleParameterAnnotations )Lio/swagger/v3/oas/annotations/Parameter; ID da Ãrea de AtuaÃ§Ã£o 6Lorg/springframework/web/bind/annotation/PathVariable;
 0 2 1 Cbr/com/legalconnect/advogado/application/service/AreaAtuacaoService 3 4 findAreaAtuacaoById `(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;
 6 8 7 +br/com/legalconnect/common/dto/BaseResponse 9 : builder C()Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;	 < > = (br/com/legalconnect/enums/StatusResponse ? @ SUCESSO *Lbr/com/legalconnect/enums/StatusResponse;
 B D C ?br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder E F status m(Lbr/com/legalconnect/enums/StatusResponse;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; H *Ãrea de AtuaÃ§Ã£o encontrada com sucesso.
 B J K L message U(Ljava/lang/String;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 B N O P data U(Ljava/lang/Object;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 R T S java/time/LocalDateTime U V now ()Ljava/time/LocalDateTime;
 B X Y Z 	timestamp \(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 B \ ] ^ build /()Lbr/com/legalconnect/common/dto/BaseResponse;
 ` b a 'org/springframework/http/ResponseEntity c d ok =(Ljava/lang/Object;)Lorg/springframework/http/ResponseEntity; id Ljava/util/UUID; response NLbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO; getAllAreasAtuacao +()Lorg/springframework/http/ResponseEntity; ¼()Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;>;>;>; "Lista todas as Ã¡reas de atuaÃ§Ã£o >Retorna uma lista de todas as Ã¡reas de atuaÃ§Ã£o cadastradas. (Ãreas de AtuaÃ§Ã£o listadas com sucesso
 0 p q r findAllAreasAtuacao ()Ljava/util/List; t )Ãreas de AtuaÃ§Ã£o listadas com sucesso. Ljava/util/List; LocalVariableTypeTable `Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/AreaAtuacaoResponseDTO;>; 
SourceFile AreaAtuacaoController.java 8Lorg/springframework/web/bind/annotation/RestController; 8Lorg/springframework/web/bind/annotation/RequestMapping; /api/v1/advogados/areas-atuacao (Lio/swagger/v3/oas/annotations/tags/Tag; name Ãreas de AtuaÃ§Ã£o 4Gerenciamento de dados mestre de Ãreas de AtuaÃ§Ã£o InnerClasses BaseResponseBuilder !                	     
      F     
*· *+µ ±           #  $ 	 %        
       
                    	   N    s  s  [ @    !s " s #@    !s $ s %@    !s & s ' (  )[ s * +     ,  s - .           (*´ +¶ /M¸ 5² ;¶ AG¶ I,¶ M¸ Q¶ W¶ [¸ _°       "    7 	 8  9  :  ;  < ! = $ 8         (       ( e f  	  g h      e    i j      k 	   7    s l s m [ @    !s " s n@    !s & s ' (           '*´ ¶ oL¸ 5² ;¶ As¶ I+¶ M¸ Q¶ W¶ [¸ _°       "    N  O  P  Q  R  S   T # O        '       g u  v       g w   x    y 	      z   {  )[ s | }  ~s  s     
  B 6  	
```
```java
Êþº¾   =   8br/com/legalconnect/advogado/controller/IdiomaController  java/lang/Object 
idiomaService @Lbr/com/legalconnect/advogado/application/service/IdiomaService; <init> C(Lbr/com/legalconnect/advogado/application/service/IdiomaService;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
  
   ()V	     LineNumberTable LocalVariableTable this :Lbr/com/legalconnect/advogado/controller/IdiomaController; MethodParameters 
getIdiomaById ;(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity; 	Signature µ(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;>;>; )Lio/swagger/v3/oas/annotations/Operation; summary Busca um idioma pelo ID description -Retorna os detalhes de um idioma especÃ­fico. 	responses 5Lio/swagger/v3/oas/annotations/responses/ApiResponse; responseCode 200 Idioma encontrado com sucesso 404 Idioma nÃ£o encontrado 500 Erro interno do servidor 4Lorg/springframework/web/bind/annotation/GetMapping; value /{id} "RuntimeVisibleParameterAnnotations )Lio/swagger/v3/oas/annotations/Parameter; ID do idioma 6Lorg/springframework/web/bind/annotation/PathVariable;
 0 2 1 >br/com/legalconnect/advogado/application/service/IdiomaService 3 4 findIdiomaById [(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;
 6 8 7 +br/com/legalconnect/common/dto/BaseResponse 9 : builder C()Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;	 < > = (br/com/legalconnect/enums/StatusResponse ? @ SUCESSO *Lbr/com/legalconnect/enums/StatusResponse;
 B D C ?br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder E F status m(Lbr/com/legalconnect/enums/StatusResponse;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; H Idioma encontrado com sucesso.
 B J K L message U(Ljava/lang/String;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 B N O P data U(Ljava/lang/Object;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 R T S java/time/LocalDateTime U V now ()Ljava/time/LocalDateTime;
 B X Y Z 	timestamp \(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 B \ ] ^ build /()Lbr/com/legalconnect/common/dto/BaseResponse;
 ` b a 'org/springframework/http/ResponseEntity c d ok =(Ljava/lang/Object;)Lorg/springframework/http/ResponseEntity; id Ljava/util/UUID; response ILbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO; 
getAllIdiomas +()Lorg/springframework/http/ResponseEntity; ·()Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;>;>;>; Lista todos os idiomas 2Retorna uma lista de todos os idiomas cadastrados. Idiomas listados com sucesso
 0 p q r findAllIdiomas ()Ljava/util/List; t Idiomas listados com sucesso. Ljava/util/List; LocalVariableTypeTable [Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/IdiomaResponseDTO;>; 
SourceFile IdiomaController.java 8Lorg/springframework/web/bind/annotation/RestController; 8Lorg/springframework/web/bind/annotation/RequestMapping; /api/v1/advogados/idiomas (Lio/swagger/v3/oas/annotations/tags/Tag; name Idiomas (Gerenciamento de dados mestre de Idiomas InnerClasses BaseResponseBuilder !                	     
      F     
*· *+µ ±           #  $ 	 %        
       
                    	   N    s  s  [ @    !s " s #@    !s $ s %@    !s & s ' (  )[ s * +     ,  s - .           (*´ +¶ /M¸ 5² ;¶ AG¶ I,¶ M¸ Q¶ W¶ [¸ _°       "    7 	 8  9  :  ;  < ! = $ 8         (       ( e f  	  g h      e    i j      k 	   7    s l s m [ @    !s " s n@    !s & s ' (           '*´ ¶ oL¸ 5² ;¶ As¶ I+¶ M¸ Q¶ W¶ [¸ _°       "    N  O  P  Q  R  S   T # O        '       g u  v       g w   x    y 	      z   {  )[ s | }  ~s  s     
  B 6  	
```
```java
Êþº¾   =   >br/com/legalconnect/advogado/controller/LocalAtuacaoController  java/lang/Object localAtuacaoService FLbr/com/legalconnect/advogado/application/service/LocalAtuacaoService; <init> I(Lbr/com/legalconnect/advogado/application/service/LocalAtuacaoService;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
  
   ()V	     LineNumberTable LocalVariableTable this @Lbr/com/legalconnect/advogado/controller/LocalAtuacaoController; MethodParameters getLocalAtuacaoById ;(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity; 	Signature »(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;>;>; )Lio/swagger/v3/oas/annotations/Operation; summary #Busca um local de atuaÃ§Ã£o pelo ID description 9Retorna os detalhes de um local de atuaÃ§Ã£o especÃ­fico. 	responses 5Lio/swagger/v3/oas/annotations/responses/ApiResponse; responseCode 200 )Local de AtuaÃ§Ã£o encontrado com sucesso 404 "Local de AtuaÃ§Ã£o nÃ£o encontrado 500 Erro interno do servidor 4Lorg/springframework/web/bind/annotation/GetMapping; value /{id} "RuntimeVisibleParameterAnnotations )Lio/swagger/v3/oas/annotations/Parameter; ID do Local de AtuaÃ§Ã£o 6Lorg/springframework/web/bind/annotation/PathVariable;
 0 2 1 Dbr/com/legalconnect/advogado/application/service/LocalAtuacaoService 3 4 findLocalAtuacaoById a(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;
 6 8 7 +br/com/legalconnect/common/dto/BaseResponse 9 : builder C()Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;	 < > = (br/com/legalconnect/enums/StatusResponse ? @ SUCESSO *Lbr/com/legalconnect/enums/StatusResponse;
 B D C ?br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder E F status m(Lbr/com/legalconnect/enums/StatusResponse;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; H *Local de AtuaÃ§Ã£o encontrado com sucesso.
 B J K L message U(Ljava/lang/String;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 B N O P data U(Ljava/lang/Object;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 R T S java/time/LocalDateTime U V now ()Ljava/time/LocalDateTime;
 B X Y Z 	timestamp \(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 B \ ] ^ build /()Lbr/com/legalconnect/common/dto/BaseResponse;
 ` b a 'org/springframework/http/ResponseEntity c d ok =(Ljava/lang/Object;)Lorg/springframework/http/ResponseEntity; id Ljava/util/UUID; response OLbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO; getAllLocaisAtuacao +()Lorg/springframework/http/ResponseEntity; ½()Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;>;>;>; "Lista todos os locais de atuaÃ§Ã£o >Retorna uma lista de todos os locais de atuaÃ§Ã£o cadastrados. (Locais de AtuaÃ§Ã£o listados com sucesso
 0 p q r findAllLocaisAtuacao ()Ljava/util/List; t )Locais de AtuaÃ§Ã£o listados com sucesso. Ljava/util/List; LocalVariableTypeTable aLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/LocalAtuacaoResponseDTO;>; 
SourceFile LocalAtuacaoController.java 8Lorg/springframework/web/bind/annotation/RestController; 8Lorg/springframework/web/bind/annotation/RequestMapping;  /api/v1/advogados/locais-atuacao (Lio/swagger/v3/oas/annotations/tags/Tag; name Locais de AtuaÃ§Ã£o 4Gerenciamento de dados mestre de Locais de AtuaÃ§Ã£o InnerClasses BaseResponseBuilder !                	     
      F     
*· *+µ ±           #  $ 	 %        
       
                    	   N    s  s  [ @    !s " s #@    !s $ s %@    !s & s ' (  )[ s * +     ,  s - .           (*´ +¶ /M¸ 5² ;¶ AG¶ I,¶ M¸ Q¶ W¶ [¸ _°       "    7 	 8  9  :  ;  < ! = $ 8         (       ( e f  	  g h      e    i j      k 	   7    s l s m [ @    !s " s n@    !s & s ' (           '*´ ¶ oL¸ 5² ;¶ As¶ I+¶ M¸ Q¶ W¶ [¸ _°       "    N  O  P  Q  R  S   T # O        '       g u  v       g w   x    y 	      z   {  )[ s | }  ~s  s     
  B 6  	
```
```java
Êþº¾   =]  >br/com/legalconnect/advogado/controller/ProfissionalController  java/lang/Object profissionalService FLbr/com/legalconnect/advogado/application/service/ProfissionalService; certificacaoService FLbr/com/legalconnect/advogado/application/service/CertificacaoService; experienciaProfissionalService QLbr/com/legalconnect/advogado/application/service/ExperienciaProfissionalService; formacaoAcademicaService KLbr/com/legalconnect/advogado/application/service/FormacaoAcademicaService; documentoService CLbr/com/legalconnect/advogado/application/service/DocumentoService; <init>n(Lbr/com/legalconnect/advogado/application/service/ProfissionalService;Lbr/com/legalconnect/advogado/application/service/CertificacaoService;Lbr/com/legalconnect/advogado/application/service/ExperienciaProfissionalService;Lbr/com/legalconnect/advogado/application/service/FormacaoAcademicaService;Lbr/com/legalconnect/advogado/application/service/DocumentoService;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
     ()V	    	    	   	 
	    	    
  LineNumberTable LocalVariableTable this @Lbr/com/legalconnect/advogado/controller/ProfissionalController; MethodParameters createProfissional (Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest;Ljava/lang/String;)Lorg/springframework/http/ResponseEntity; 	Signature
(Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest;Ljava/lang/String;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO;>;>; )Lio/swagger/v3/oas/annotations/Operation; summary Cria um novo profissional description PRegistra um novo advogado com seus dados pessoais e informaÃ§Ãµes profissionais. 	responses 5Lio/swagger/v3/oas/annotations/responses/ApiResponse; responseCode 201 Profissional criado com sucesso 400  Dados de requisiÃ§Ã£o invÃ¡lidos 409  OAB, CPF ou Email jÃ¡ cadastrado 500 Erro interno do servidor 5Lorg/springframework/web/bind/annotation/PostMapping; "RuntimeVisibleParameterAnnotations Ljakarta/validation/Valid; 5Lorg/springframework/web/bind/annotation/RequestBody; 7Lorg/springframework/web/bind/annotation/RequestHeader; value X-Correlation-Id required    
 D F E java/lang/String G H trim ()Ljava/lang/String;
 D J K L isEmpty ()Z
 N P O java/util/UUID Q R 
fromString $(Ljava/lang/String;)Ljava/util/UUID;
 T V U Nbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest W X 
getUsuario 9()Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;
 Z \ [ 5br/com/legalconnect/commom/dto/request/UserRequestDTO ] ^ builder O()Lbr/com/legalconnect/commom/dto/request/UserRequestDTO$UserRequestDTOBuilder;
 N ` a H toString
 c e d Kbr/com/legalconnect/commom/dto/request/UserRequestDTO$UserRequestDTOBuilder f g id a(Ljava/lang/String;)Lbr/com/legalconnect/commom/dto/request/UserRequestDTO$UserRequestDTOBuilder;
 c i j X build
 T l m n 
setUsuario :(Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;)V
 Z p q H getId
 Z s t u setId (Ljava/lang/String;)V	 w y x java/lang/System z { err Ljava/io/PrintStream;   } ~  makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String;
    java/io/PrintStream  u println
    Dbr/com/legalconnect/advogado/application/service/ProfissionalService &  ¡(Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO;	    #org/springframework/http/HttpStatus   CREATED %Lorg/springframework/http/HttpStatus;
    'org/springframework/http/ResponseEntity   status `(Lorg/springframework/http/HttpStatusCode;)Lorg/springframework/http/ResponseEntity$BodyBuilder;
    +br/com/legalconnect/common/dto/BaseResponse ]  C()Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;	    (br/com/legalconnect/enums/StatusResponse    SUCESSO *Lbr/com/legalconnect/enums/StatusResponse;
 ¢ ¤ £ ?br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder  ¥ m(Lbr/com/legalconnect/enums/StatusResponse;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; §  Profissional criado com sucesso.
 ¢ © ª « message U(Ljava/lang/String;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 ¢ ­ ® ¯ data U(Ljava/lang/Object;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 ± ³ ² java/time/LocalDateTime ´ µ now ()Ljava/time/LocalDateTime;
 ¢ · ¸ ¹ 	timestamp \(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 ¢ » j ¼ /()Lbr/com/legalconnect/common/dto/BaseResponse; ¾ À ¿ 3org/springframework/http/ResponseEntity$BodyBuilder Á Â body =(Ljava/lang/Object;)Lorg/springframework/http/ResponseEntity; Ä "java/lang/IllegalArgumentException request PLbr/com/legalconnect/advogado/application/dto/request/ProfissionalCreateRequest; userIdHeader Ljava/lang/String; userUuid Ljava/util/UUID; e $Ljava/lang/IllegalArgumentException; response OLbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO; 
StackMapTable RuntimeVisibleTypeAnnotations updateProfissional (Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest;)Lorg/springframework/http/ResponseEntity;(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO;>;>; "Atualiza um profissional existente ]Atualiza os dados de um advogado, incluindo informaÃ§Ãµes pessoais e coleÃ§Ãµes relacionadas. 200 #Profissional atualizado com sucesso 403 4Acesso negado (profissional pertence a outro tenant) 404 Profissional nÃ£o encontrado 'Conflito de dados (ex: email duplicado) 4Lorg/springframework/web/bind/annotation/PutMapping; /{id} )Lio/swagger/v3/oas/annotations/Parameter; #ID do profissional a ser atualizado 6Lorg/springframework/web/bind/annotation/PathVariable;
  ã Ñ ä ±(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO; æ $Profissional atualizado com sucesso.
  è é Â ok PLbr/com/legalconnect/advogado/application/dto/request/ProfissionalUpdateRequest; getProfissionalById ;(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity; »(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO;>;>; Busca um profissional pelo ID 9Retorna os detalhes completos de um advogado especÃ­fico. #Profissional encontrado com sucesso 4Lorg/springframework/web/bind/annotation/GetMapping; ID do profissional
  ô õ ö findProfissionalById a(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO; ø $Profissional encontrado com sucesso. getAllProfissionais @(II[Ljava/lang/String;)Lorg/springframework/http/ResponseEntity; è(II[Ljava/lang/String;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lorg/springframework/data/domain/Page<Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO;>;>;>; ,Lista todos os profissionais com paginaÃ§Ã£o LRetorna uma lista paginada de todos os advogados associados ao tenant atual. "Profissionais listados com sucesso NÃºmero da pÃ¡gina (0-indexed) example 0 6Lorg/springframework/web/bind/annotation/RequestParam; defaultValue Tamanho da pÃ¡gina 10 ACritÃ©rio de ordenaÃ§Ã£o (ex: nomeCompleto,asc ou numeroOab,desc) nomeCompleto,asc
	
 .org/springframework/data/domain/Sort$Direction Q D(Ljava/lang/String;)Lorg/springframework/data/domain/Sort$Direction;
 $org/springframework/data/domain/Sort by k(Lorg/springframework/data/domain/Sort$Direction;[Ljava/lang/String;)Lorg/springframework/data/domain/Sort;
 +org/springframework/data/domain/PageRequest of W(IILorg/springframework/data/domain/Sort;)Lorg/springframework/data/domain/PageRequest;
  findAllProfissionais R(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page; #Profissionais listados com sucesso. page I size sort [Ljava/lang/String; sortCriteria &Lorg/springframework/data/domain/Sort; pageable -Lorg/springframework/data/domain/PageRequest; &Lorg/springframework/data/domain/Page; LocalVariableTypeTable wLorg/springframework/data/domain/Page<Lbr/com/legalconnect/advogado/application/dto/response/ProfissionalResponseDTO;>; deleteProfissional |(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/lang/Void;>;>; Deleta um profissional pelo ID ?Remove um advogado e todos os seus dados associados do sistema. !Profissional deletado com sucesso 7Lorg/springframework/web/bind/annotation/DeleteMapping; !ID do profissional a ser deletado
 3+4 (Ljava/util/UUID;)V6 "Profissional deletado com sucesso. addCertificacao (Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Lorg/springframework/http/ResponseEntity;(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;>;>; -Adiciona uma certificaÃ§Ã£o a um profissional :Adiciona uma nova certificaÃ§Ã£o ao perfil de um advogado. %CertificaÃ§Ã£o adicionada com sucesso /{profissionalId}/certificacoes
?A@ Dbr/com/legalconnect/advogado/application/service/CertificacaoServiceBC createCertificacao ®(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;E &CertificaÃ§Ã£o adicionada com sucesso. profissionalId 
requestDTO MLbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO; OLbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO; updateCertificacao (Ljava/util/UUID;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Lorg/springframework/http/ResponseEntity;(Ljava/util/UUID;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;>;>; .Atualiza uma certificaÃ§Ã£o de um profissional MAtualiza os detalhes de uma certificaÃ§Ã£o existente associada a um advogado. %CertificaÃ§Ã£o atualizada com sucesso FAcesso negado (certificaÃ§Ã£o pertence a outro tenant ou profissional) 5CertificaÃ§Ã£o nÃ£o encontrada para este profissional 0/{profissionalId}/certificacoes/{certificacaoId} %ID da certificaÃ§Ã£o a ser atualizada
?UJV ¾(Ljava/util/UUID;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/CertificacaoRequestDTO;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;X &CertificaÃ§Ã£o atualizada com sucesso. certificacaoId getCertificacaoById K(Ljava/util/UUID;Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity; Ë(Ljava/util/UUID;Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;>;>; 7Busca uma certificaÃ§Ã£o especÃ­fica de um profissional ERetorna os detalhes de uma certificaÃ§Ã£o especÃ­fica de um advogado. %CertificaÃ§Ã£o encontrada com sucesso 6Acesso negado (certificaÃ§Ã£o pertence a outro tenant) ID da certificaÃ§Ã£o
?cde findCertificacaoById q(Ljava/util/UUID;Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;g &CertificaÃ§Ã£o encontrada com sucesso. getAllCertificacoes Í(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;>;>;>; 1Lista todas as certificaÃ§Ãµes de um profissional SRetorna uma lista de todas as certificaÃ§Ãµes associadas a um advogado especÃ­fico. $CertificaÃ§Ãµes listadas com sucesso
?nop $findAllCertificacoesByProfissionalId "(Ljava/util/UUID;)Ljava/util/List;r %CertificaÃ§Ãµes listadas com sucesso. Ljava/util/List; aLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/CertificacaoResponseDTO;>; deleteCertificacao (Ljava/util/UUID;Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/lang/Void;>;>; ,Deleta uma certificaÃ§Ã£o de um profissional ?Remove uma certificaÃ§Ã£o especÃ­fica do perfil de um advogado. #CertificaÃ§Ã£o deletada com sucesso -CertificaÃ§Ã£o nÃ£o encontrada para deleÃ§Ã£o #ID da certificaÃ§Ã£o a ser deletada
?}u~ #(Ljava/util/UUID;Ljava/util/UUID;)V $CertificaÃ§Ã£o deletada com sucesso. addExperienciaProfissional (Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Lorg/springframework/http/ResponseEntity;(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;>;>; 8Adiciona uma experiÃªncia profissional a um profissional EAdiciona uma nova experiÃªncia profissional ao perfil de um advogado. 0ExperiÃªncia profissional adicionada com sucesso /{profissionalId}/experiencias
 Obr/com/legalconnect/advogado/application/service/ExperienciaProfissionalService createExperienciaProfissional Ä(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO; 1ExperiÃªncia profissional adicionada com sucesso. XLbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO; ZLbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO; updateExperienciaProfissional £(Ljava/util/UUID;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Lorg/springframework/http/ResponseEntity;.(Ljava/util/UUID;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;>;>; 9Atualiza uma experiÃªncia profissional de um profissional XAtualiza os detalhes de uma experiÃªncia profissional existente associada a um advogado. 0ExperiÃªncia profissional atualizada com sucesso DAcesso negado (experiÃªncia pertence a outro tenant ou profissional) @ExperiÃªncia profissional nÃ£o encontrada para este profissional ./{profissionalId}/experiencias/{experienciaId} #ID da experiÃªncia a ser atualizada
 Ô(Ljava/util/UUID;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/ExperienciaProfissionalRequestDTO;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;  1ExperiÃªncia profissional atualizada com sucesso. 
experienciaId getExperienciaProfissionalById Ö(Ljava/util/UUID;Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;>;>; BBusca uma experiÃªncia profissional especÃ­fica de um profissional PRetorna os detalhes de uma experiÃªncia profissional especÃ­fica de um advogado. 0ExperiÃªncia profissional encontrada com sucesso 4Acesso negado (experiÃªncia pertence a outro tenant) ID da experiÃªncia
ª«¬ findExperienciaProfissionalById |(Ljava/util/UUID;Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;® 1ExperiÃªncia profissional encontrada com sucesso. getAllExperienciasProfissionais Ø(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;>;>;>; =Lista todas as experiÃªncias profissionais de um profissional _Retorna uma lista de todas as experiÃªncias profissionais associadas a um advogado especÃ­fico. 0ExperiÃªncias profissionais listadas com sucesso
µ¶p 0findAllExperienciasProfissionaisByProfissionalId¸ 1ExperiÃªncias profissionais listadas com sucesso. lLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/ExperienciaProfissionalResponseDTO;>; deleteExperienciaProfissional 7Deleta uma experiÃªncia profissional de um profissional JRemove uma experiÃªncia profissional especÃ­fica do perfil de um advogado. .ExperiÃªncia profissional deletada com sucesso 8ExperiÃªncia profissional nÃ£o encontrada para deleÃ§Ã£o !ID da experiÃªncia a ser deletada
Áº~Ã /ExperiÃªncia profissional deletada com sucesso. addFormacaoAcademica (Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Lorg/springframework/http/ResponseEntity;(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;>;>; 4Adiciona uma formaÃ§Ã£o acadÃªmica a um profissional AAdiciona uma nova formaÃ§Ã£o acadÃªmica ao perfil de um advogado. ,FormaÃ§Ã£o acadÃªmica adicionada com sucesso /{profissionalId}/formacoes
ÌÎÍ Ibr/com/legalconnect/advogado/application/service/FormacaoAcademicaServiceÏÐ createFormacaoAcademica ¸(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;Ò -FormaÃ§Ã£o acadÃªmica adicionada com sucesso. RLbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO; TLbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO; updateFormacaoAcademica (Ljava/util/UUID;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Lorg/springframework/http/ResponseEntity;"(Ljava/util/UUID;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;>;>; 5Atualiza uma formaÃ§Ã£o acadÃªmica de um profissional TAtualiza os detalhes de uma formaÃ§Ã£o acadÃªmica existente associada a um advogado. ,FormaÃ§Ã£o acadÃªmica atualizada com sucesso BAcesso negado (formaÃ§Ã£o pertence a outro tenant ou profissional) <FormaÃ§Ã£o acadÃªmica nÃ£o encontrada para este profissional (/{profissionalId}/formacoes/{formacaoId} !ID da formaÃ§Ã£o a ser atualizada
ÌàÕá È(Ljava/util/UUID;Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/FormacaoAcademicaRequestDTO;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;ã -FormaÃ§Ã£o acadÃªmica atualizada com sucesso. 
formacaoId getFormacaoAcademicaById Ð(Ljava/util/UUID;Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;>;>; >Busca uma formaÃ§Ã£o acadÃªmica especÃ­fica de um profissional LRetorna os detalhes de uma formaÃ§Ã£o acadÃªmica especÃ­fica de um advogado. ,FormaÃ§Ã£o acadÃªmica encontrada com sucesso 2Acesso negado (formaÃ§Ã£o pertence a outro tenant) ID da formaÃ§Ã£o
Ìíîï findFormacaoAcademicaById v(Ljava/util/UUID;Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;ñ -FormaÃ§Ã£o acadÃªmica encontrada com sucesso. getAllFormacoesAcademicas Ò(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;>;>;>; 9Lista todas as formaÃ§Ãµes acadÃªmicas de um profissional [Retorna uma lista de todas as formaÃ§Ãµes acadÃªmicas associadas a um advogado especÃ­fico. ,FormaÃ§Ãµes acadÃªmicas listadas com sucesso
Ìøùp *findAllFormacoesAcademicasByProfissionalIdû -FormaÃ§Ãµes acadÃªmicas listadas com sucesso. fLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/FormacaoAcademicaResponseDTO;>; deleteFormacaoAcademica 3Deleta uma formaÃ§Ã£o acadÃªmica de um profissional FRemove uma formaÃ§Ã£o acadÃªmica especÃ­fica do perfil de um advogado. *FormaÃ§Ã£o acadÃªmica deletada com sucesso 4FormaÃ§Ã£o acadÃªmica nÃ£o encontrada para deleÃ§Ã£o ID da formaÃ§Ã£o a ser deletada
Ìý~ +FormaÃ§Ã£o acadÃªmica deletada com sucesso. uploadDocumento (Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest;)Lorg/springframework/http/ResponseEntity;(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;>;>; 5Realiza o upload de um documento para um profissional RFaz o upload de um documento para o S3 e persiste seus metadados para um advogado. Documento enviado com sucesso 7Dados de requisiÃ§Ã£o invÃ¡lidos (ex: Base64 invÃ¡lido) >Falha ao fazer upload do documento ou erro interno do servidor #/{profissionalId}/documentos/upload
 Abr/com/legalconnect/advogado/application/service/DocumentoService «(Ljava/util/UUID;Lbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest;)Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO; Documento enviado com sucesso. MLbr/com/legalconnect/advogado/application/dto/request/DocumentoUploadRequest; LLbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO; getDocumentoById È(Ljava/util/UUID;Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;>;>; 1Busca um documento especÃ­fico de um profissional ?Retorna os detalhes de um documento especÃ­fico de um advogado.  Documento encontrado com sucesso AAcesso negado (documento pertence a outro tenant ou profissional) 0Documento nÃ£o encontrado para este profissional */{profissionalId}/documentos/{documentoId} ID do documento
#$% findDocumentoById n(Ljava/util/UUID;Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;' !Documento encontrado com sucesso. documentoId getAllDocumentos Ê(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;>;>;>; ,Lista todos os documentos de um profissional NRetorna uma lista de todos os documentos associados a um advogado especÃ­fico. Documentos listados com sucesso /{profissionalId}/documentos
01p !findAllDocumentosByProfissionalId3  Documentos listados com sucesso. ^Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/DocumentoResponseDTO;>; deleteDocumento &Deleta um documento de um profissional VRemove um documento especÃ­fico do perfil de um advogado, incluindo a remoÃ§Ã£o do S3. Documento deletado com sucesso 1Acesso negado (documento pertence a outro tenant) (Documento nÃ£o encontrado para deleÃ§Ã£o >Falha ao deletar o documento do S3 ou erro interno do servidor ID do documento a ser deletado
>5~@ Documento deletado com sucesso. 
SourceFile ProfissionalController.java 8Lorg/springframework/web/bind/annotation/RestController; 8Lorg/springframework/web/bind/annotation/RequestMapping; /api/v1/advogados/profissionais (Lio/swagger/v3/oas/annotations/tags/Tag; name 
Profissionais $Gerenciamento de perfis de Advogados BootstrapMethods
LNM $java/lang/invoke/StringConcatFactory ~O (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;KR :X-Correlation-Id invÃ¡lido: . Ignorando ID do cabeÃ§alho. InnerClasses UserRequestDTOBuilder BaseResponseBuilderW %java/lang/invoke/MethodHandles$LookupY java/lang/invoke/MethodHandles Lookup 	Direction BodyBuilder !                 	 
         
                          *· *+µ *,µ *-µ *µ *µ ±    !       B  G 	 H  I  J  K  L "   >      # $                     	 
             
   %          	      
    & '  (    )    U  *  +s , -s . /[ @ 0  1s 2 -s 3@ 0  1s 4 -s 5@ 0  1s 6 -s 7@ 0  1s 8 -s 9 :   ;     <   =    >  ?s @ AZ B   b     ,Æ b,¶ C¶ I X,¸ MN+¶ SÇ +¸ Y-¶ _¶ b¶ h¶ k§ 8+¶ S¶ oÆ +¶ S¶ o¶ C¶ I +¶ S-¶ _¶ r§ N² v,º |  ¶ *´ +¶ N² ¸ ¸ ² ¶ ¡¦¶ ¨-¶ ¬¸ °¶ ¶¶ º¹ ½ °   S V Ã  !   N    j  l  n  p + q 8 r H t S v W y c ~ l  r  u  {            "   >     # $      Å Æ     Ç È   @ É Ê  W  Ë Ì  l ' Í Î  Ï    ü . Nÿ 
   T D  Ã Ð   	    <   %   	 Å   Ç    Ñ Ò  (    Ó    {  *  +s Ô -s Õ /[ @ 0  1s Ö -s ×@ 0  1s 4 -s 5@ 0  1s Ø -s Ù@ 0  1s Ú -s Û@ 0  1s 6 -s Ü@ 0  1s 8 -s 9 Ý  ?[ s Þ ;     ß  -s à á    <   =           )*´ +,¶ âN¸ ² ¶ ¡å¶ ¨-¶ ¬¸ °¶ ¶¶ º¸ ç°    !   "     
   
 ¡  ¢  £  ¤ " ¥ %   "   *    ) # $     ) f Ê    ) Å ê  
  Í Î  Ð   	   <   %   	 f   Å    ë ì  (    í    ]  *  +s î -s ï /[ @ 0  1s Ö -s ð@ 0  1s Ø -s Ù@ 0  1s Ú -s Û@ 0  1s 8 -s 9 ñ  ?[ s Þ ;     ß  -s ò á           (*´ +¶ óM¸ ² ¶ ¡÷¶ ¨,¶ ¬¸ °¶ ¶¶ º¸ ç°    !   "    ¹ 	 º  »  ¼  ½  ¾ ! ¿ $ º "        ( # $     ( f Ê  	  Í Î  %    f    ù ú  (    û    7  *  +s ü -s ý /[ @ 0  1s Ö -s þ@ 0  1s 8 -s 9 ñ   ;   L  ß  -s ÿ s s  ß  -s s s  ß  -s s s    æ     J-2¸½ DY-2S¸
:¸:*´ ¶:¸ ² ¶ ¡¶ ¨¶ ¬¸ °¶ ¶¶ º¸ ç°    !   * 
   ×  Ø  Ú ) Û , Ü 2 Ý 8 Þ = ß C à F Û "   H    J # $     J     J!     J"#   5$%   ,&'  ) ! Í( )     ) ! Í*  %   
  !  "   + ì  (   ,    ]  *  +s- -s. /[ @ 0  1s Ö -s/@ 0  1s Ø -s Ù@ 0  1s Ú -s Û@ 0  1s 8 -s 90  ?[ s Þ ;     ß  -s1 á      p     $*´ +¶2¸ ² ¶ ¡5¶ ¨¸ °¶ ¶¶ º¸ ç°    !       ö  ÷  ø  ù  ú  û   ÷ "       $ # $     $ f Ê  %    f   78  (   9    l  *  +s: -s; /[ @ 0  1s 2 -s<@ 0  1s 4 -s 5@ 0  1s Ø -s Ù@ 0  1s Ú -s Û@ 0  1s 8 -s 9 :  ?[ s= ;     ß  -s ò á    <   =           2*´ +,¶>N² ¸ ¸ ² ¶ ¡D¶ ¨-¶ ¬¸ °¶ ¶¶ º¹ ½ °    !   * 
   
     # ) , 1 "   *    2 # $     2F Ê    2GH  
 ( ÍI  Ð   	   <   %   	F  G   JK  (   L    l  *  +sM -sN /[ @ 0  1s Ö -sO@ 0  1s 4 -s 5@ 0  1s Ø -sP@ 0  1s Ú -sQ@ 0  1s 8 -s 9 Ý  ?[ sR ;   )  ß  -s ò á    ß  -sS á    <   =      §     -*´ +,-¶T:¸ ² ¶ ¡W¶ ¨¶ ¬¸ °¶ ¶¶ º¸ ç°    !   .   5 6 7 5 8 9 : ;  < &= )8 "   4    - # $     -F Ê    -Y Ê    -GH   ! ÍI  Ð   	   <   %   
F  Y  G   Z[  (   \    ]  *  +s] -s^ /[ @ 0  1s Ö -s_@ 0  1s Ø -s`@ 0  1s Ú -sQ@ 0  1s 8 -s 9 ñ  ?[ sR ;     ß  -s ò á    ß  -sa á           **´ +,¶bN¸ ² ¶ ¡f¶ ¨-¶ ¬¸ °¶ ¶¶ º¸ ç°    !   * 
  S T S 
U 
V W X Y #Z &U "   *    * # $     *F Ê    *Y Ê  
   ÍI  %   	F  Y   h ì  (   i    ]  *  +sj -sk /[ @ 0  1s Ö -sl@ 0  1s Ø -s Ù@ 0  1s Ú -s Û@ 0  1s 8 -s 9 ñ  ?[ s= ;     ß  -s ò á           )*´ +¶mM¸ ² ¶ ¡q¶ ¨,¶ ¬¸ °¶ ¶¶ º¸ ç°    !   * 
  o p o 	q r s t u "v %q "        ) # $     )F Ê  	   Ís )     	   Ít  %   F   u[  (   v    ]  *  +sw -sx /[ @ 0  1s Ö -sy@ 0  1s Ø -s`@ 0  1s Ú -sz@ 0  1s 8 -s 90  ?[ sR ;     ß  -s ò á    ß  -s{ á      {     %*´ +,¶|¸ ² ¶ ¡¶ ¨¸ °¶ ¶¶ º¸ ç°    !       	     ! "        % # $     %F Ê    %Y Ê  %   	F  Y     (       l  *  +s -s /[ @ 0  1s 2 -s@ 0  1s 4 -s 5@ 0  1s Ø -s Ù@ 0  1s Ú -s Û@ 0  1s 8 -s 9 :  ?[ s ;     ß  -s ò á    <   =      ¦     2*´ +,¶N² ¸ ¸ ² ¶ ¡¶ ¨-¶ ¬¸ °¶ ¶¶ º¹ ½ °    !   2   ª « 	ª 
¬ ­ ® ¯ ° #± )² ,­ 1¬ "   *    2 # $     2F Ê    2G  
 ( Í  Ð   	   <   %   	F  G     (       l  *  +s -s /[ @ 0  1s Ö -s@ 0  1s 4 -s 5@ 0  1s Ø -s@ 0  1s Ú -s@ 0  1s 8 -s 9 Ý  ?[ s ;   )  ß  -s ò á    ß  -s á    <   =      £     -*´ +,-¶:¸ ² ¶ ¡¶ ¨¶ ¬¸ °¶ ¶¶ º¸ ç°    !   * 
  Ì Í 
Ì Î Ï Ð Ñ  Ò &Ó )Î "   4    - # $     -F Ê    -¡ Ê    -G   ! Í  Ð   	   <   %   
F  ¡  G   ¢[  (   £    ]  *  +s¤ -s¥ /[ @ 0  1s Ö -s¦@ 0  1s Ø -s§@ 0  1s Ú -s@ 0  1s 8 -s 9 ñ  ?[ s ;     ß  -s ò á    ß  -s¨ á           **´ +,¶©N¸ ² ¶ ¡­¶ ¨-¶ ¬¸ °¶ ¶¶ º¸ ç°    !   * 
  é ê 	é 
ë 
ì í î ï #ð &ë "   *    * # $     *F Ê    *¡ Ê  
   Í  %   	F  ¡   ¯ ì  (   °    ]  *  +s± -s² /[ @ 0  1s Ö -s³@ 0  1s Ø -s Ù@ 0  1s Ú -s Û@ 0  1s 8 -s 9 ñ  ?[ s ;     ß  -s ò á           )*´ +¶´M¸ ² ¶ ¡·¶ ¨,¶ ¬¸ °¶ ¶¶ º¸ ç°    !   * 
     	  	 
  " % "        ) # $     )F Ê  	   Ís )     	   Í¹  %   F   º[  (   v    ]  *  +s» -s¼ /[ @ 0  1s Ö -s½@ 0  1s Ø -s§@ 0  1s Ú -s¾@ 0  1s 8 -s 90  ?[ s ;     ß  -s ò á    ß  -s¿ á      {     %*´ +,¶À¸ ² ¶ ¡Â¶ ¨¸ °¶ ¶¶ º¸ ç°    !      " 	# $ % & ' !# "        % # $     %F Ê    %¡ Ê  %   	F  ¡   ÄÅ  (   Æ    l  *  +sÇ -sÈ /[ @ 0  1s 2 -sÉ@ 0  1s 4 -s 5@ 0  1s Ø -s Ù@ 0  1s Ú -s Û@ 0  1s 8 -s 9 :  ?[ sÊ ;     ß  -s ò á    <   =      ¦     2*´ +,¶ËN² ¸ ¸ ² ¶ ¡Ñ¶ ¨-¶ ¬¸ °¶ ¶¶ º¹ ½ °    !   2   @ A @ 
B C D E F #G )H ,C 1B "   *    2 # $     2F Ê    2GÓ  
 ( ÍÔ  Ð   	   <   %   	F  G   ÕÖ  (   ×    l  *  +sØ -sÙ /[ @ 0  1s Ö -sÚ@ 0  1s 4 -s 5@ 0  1s Ø -sÛ@ 0  1s Ú -sÜ@ 0  1s 8 -s 9 Ý  ?[ sÝ ;   )  ß  -s ò á    ß  -sÞ á    <   =      £     -*´ +,-¶ß:¸ ² ¶ ¡â¶ ¨¶ ¬¸ °¶ ¶¶ º¸ ç°    !   * 
  a b a c d e f  g &h )c "   4    - # $     -F Ê    -ä Ê    -GÓ   ! ÍÔ  Ð   	   <   %   
F  ä  G   å[  (   æ    ]  *  +sç -sè /[ @ 0  1s Ö -sé@ 0  1s Ø -sê@ 0  1s Ú -sÜ@ 0  1s 8 -s 9 ñ  ?[ sÝ ;     ß  -s ò á    ß  -së á           **´ +,¶ìN¸ ² ¶ ¡ð¶ ¨-¶ ¬¸ °¶ ¶¶ º¸ ç°    !   .   ~   ~ 
 
    # & "   *    * # $     *F Ê    *ä Ê  
   ÍÔ  %   	F  ä   ò ì  (   ó    ]  *  +sô -sõ /[ @ 0  1s Ö -sö@ 0  1s Ø -s Ù@ 0  1s Ú -s Û@ 0  1s 8 -s 9 ñ  ?[ sÊ ;     ß  -s ò á           )*´ +¶÷M¸ ² ¶ ¡ú¶ ¨,¶ ¬¸ °¶ ¶¶ º¸ ç°    !   * 
     	      "¡ % "        ) # $     )F Ê  	   Ís )     	   Íü  %   F   ý[  (   v    ]  *  +sþ -sÿ /[ @ 0  1s Ö -s @ 0  1s Ø -sê@ 0  1s Ú -s@ 0  1s 8 -s 90  ?[ sÝ ;     ß  -s ò á    ß  -s á      {     %*´ +,¶¸ ² ¶ ¡¶ ¨¸ °¶ ¶¶ º¸ ç°    !      · 	¸ ¹ º » ¼ !¸ "        % # $     %F Ê    %ä Ê  %   	F  ä     (   	    l  *  +s
 -s /[ @ 0  1s 2 -s@ 0  1s 4 -s
@ 0  1s Ø -s Ù@ 0  1s Ú -s Û@ 0  1s 8 -s :  ?[ s ;     ß  -s ò á    <   =           2*´ +,¶N² ¸ ¸ ² ¶ ¡¶ ¨-¶ ¬¸ °¶ ¶¶ º¹ ½ °    !   * 
  Ö 
× Ø Ù Ú Û #Ü )Ý ,Ø 1× "   *    2 # $     2F Ê    2 Å  
 ( Í  Ð   	   <   %   	F   Å   [  (       ]  *  +s -s /[ @ 0  1s Ö -s@ 0  1s Ø -s@ 0  1s Ú -s@ 0  1s 8 -s 9 ñ  ?[ s  ;     ß  -s ò á    ß  -s! á           **´ +,¶"N¸ ² ¶ ¡&¶ ¨-¶ ¬¸ °¶ ¶¶ º¸ ç°    !   "   ó 
ô 
õ ö ÷ ø #ù &ô "   *    * # $     *F Ê    *( Ê  
   Í  %   	F  (   ) ì  (   *    ]  *  +s+ -s, /[ @ 0  1s Ö -s-@ 0  1s Ø -s Ù@ 0  1s Ú -s Û@ 0  1s 8 -s 9 ñ  ?[ s. ;     ß  -s ò á           )*´ +¶/M¸ ² ¶ ¡2¶ ¨,¶ ¬¸ °¶ ¶¶ º¸ ç°    !   * 
  
  
 	     " % "        ) # $     )F Ê  	   Ís )     	   Í4  %   F   5[  (   v    ]  *  +s6 -s7 /[ @ 0  1s Ö -s8@ 0  1s Ø -s9@ 0  1s Ú -s:@ 0  1s 8 -s;0  ?[ s  ;     ß  -s ò á    ß  -s< á      {     %*´ +,¶=¸ ² ¶ ¡?¶ ¨¸ °¶ ¶¶ º¸ ç°    !      * 	+ , - . / !+ "        % # $     %F Ê    %( Ê  %   	F  (   A   B      C  D  ?[ sEF GsH -sIJ    P QS   *  c ZT 	 ¢ U 	VXZ 	[@ ¾ \	
```
```java
Êþº¾   =   Abr/com/legalconnect/advogado/controller/TipoAtendimentoController  java/lang/Object tipoAtendimentoService ILbr/com/legalconnect/advogado/application/service/TipoAtendimentoService; <init> L(Lbr/com/legalconnect/advogado/application/service/TipoAtendimentoService;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
  
   ()V	     LineNumberTable LocalVariableTable this CLbr/com/legalconnect/advogado/controller/TipoAtendimentoController; MethodParameters getTipoAtendimentoById ;(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity; 	Signature ¾(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;>;>; )Lio/swagger/v3/oas/annotations/Operation; summary $Busca um tipo de atendimento pelo ID description :Retorna os detalhes de um tipo de atendimento especÃ­fico. 	responses 5Lio/swagger/v3/oas/annotations/responses/ApiResponse; responseCode 200 *Tipo de Atendimento encontrado com sucesso 404 #Tipo de Atendimento nÃ£o encontrado 500 Erro interno do servidor 4Lorg/springframework/web/bind/annotation/GetMapping; value /{id} "RuntimeVisibleParameterAnnotations )Lio/swagger/v3/oas/annotations/Parameter; ID do Tipo de Atendimento 6Lorg/springframework/web/bind/annotation/PathVariable;
 0 2 1 Gbr/com/legalconnect/advogado/application/service/TipoAtendimentoService 3 4 findTipoAtendimentoById d(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;
 6 8 7 +br/com/legalconnect/common/dto/BaseResponse 9 : builder C()Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;	 < > = (br/com/legalconnect/enums/StatusResponse ? @ SUCESSO *Lbr/com/legalconnect/enums/StatusResponse;
 B D C ?br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder E F status m(Lbr/com/legalconnect/enums/StatusResponse;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; H +Tipo de Atendimento encontrado com sucesso.
 B J K L message U(Ljava/lang/String;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 B N O P data U(Ljava/lang/Object;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 R T S java/time/LocalDateTime U V now ()Ljava/time/LocalDateTime;
 B X Y Z 	timestamp \(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 B \ ] ^ build /()Lbr/com/legalconnect/common/dto/BaseResponse;
 ` b a 'org/springframework/http/ResponseEntity c d ok =(Ljava/lang/Object;)Lorg/springframework/http/ResponseEntity; id Ljava/util/UUID; response RLbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO; getAllTiposAtendimento +()Lorg/springframework/http/ResponseEntity; À()Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;>;>;>; #Lista todos os tipos de atendimento ?Retorna uma lista de todos os tipos de atendimento cadastrados. )Tipos de Atendimento listados com sucesso
 0 p q r findAllTiposAtendimento ()Ljava/util/List; t *Tipos de Atendimento listados com sucesso. Ljava/util/List; LocalVariableTypeTable dLjava/util/List<Lbr/com/legalconnect/advogado/application/dto/response/TipoAtendimentoResponseDTO;>; 
SourceFile TipoAtendimentoController.java 8Lorg/springframework/web/bind/annotation/RestController; 8Lorg/springframework/web/bind/annotation/RequestMapping; #/api/v1/advogados/tipos-atendimento (Lio/swagger/v3/oas/annotations/tags/Tag; name Tipos de Atendimento 5Gerenciamento de dados mestre de Tipos de Atendimento InnerClasses BaseResponseBuilder !                	     
      F     
*· *+µ ±           #  $ 	 %        
       
                    	   N    s  s  [ @    !s " s #@    !s $ s %@    !s & s ' (  )[ s * +     ,  s - .           (*´ +¶ /M¸ 5² ;¶ AG¶ I,¶ M¸ Q¶ W¶ [¸ _°       "    7 	 8  9  :  ;  < ! = $ 8         (       ( e f  	  g h      e    i j      k 	   7    s l s m [ @    !s " s n@    !s & s ' (           '*´ ¶ oL¸ 5² ;¶ As¶ I+¶ M¸ Q¶ W¶ [¸ _°       "    N  O  P  Q  R  S   T # O        '       g u  v       g w   x    y 	      z   {  )[ s | }  ~s  s     
  B 6  	
```
```java
Êþº¾   = J  Obr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder nome Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; 	descricao <init> ()V Code
   
  LineNumberTable LocalVariableTable this QLbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder; LocalVariableTypeTable YLbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder<TC;TB;>; e(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder; 	Signature (Ljava/lang/String;)TB;	    
     self S()Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder; MethodParameters	    	  ()TB; build @()Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao; ()TC; toString ()Ljava/lang/String;
  ( % &   * + , makeConcatWithConstants J(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  0 " # 
SourceFile AreaAtuacao.java â<C:Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao;B:Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 6 8 7 $java/lang/invoke/StringConcatFactory + 9 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 5 < <AreaAtuacao.AreaAtuacaoBuilder(super=, nome=, descricao=) InnerClasses ? <br/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao AreaAtuacaoBuilder B )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder E %java/lang/invoke/MethodHandles$Lookup G java/lang/invoke/MethodHandles Lookup NestHost!                   	             
      A     *· 
±                                                        P     
*+µ *¶ °                   
       
           
            	                   P     
*+µ *¶ °                   
       
 	          
         	         !         " #      $          % &             N     *· '*´ *´ º )  °                                   D  -             %     *¶ °                 A " .             %     *¶ /°                   1    2     3         4     :  ; =      > @	  A C	 D F H  I    >
```
```java
Êþº¾   = $  Sbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilderImpl  Obr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this ULbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilderImpl; self W()Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build @()Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao;  <br/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao
     T(Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder;)V S()Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder;
     
SourceFile AreaAtuacao.java 	Signature æLbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder<Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao;Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilderImpl;>; InnerClasses AreaAtuacaoBuilder AreaAtuacaoBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = J  <br/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao  )br/com/legalconnect/common/dto/BaseEntity nome Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nullable     unique    length   ÿ 	descricao columnDefinition TEXT <init> T(Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder;)V 	Signature X(Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	     Obr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder  	   	  #  	  # LineNumberTable LocalVariableTable this >Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao; b QLbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder; LocalVariableTypeTable ULbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder<**>; MethodParameters builder S()Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder; W()Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilder<**>; 2 Sbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao$AreaAtuacaoBuilderImpl
 1 4  5 ()V getNome ()Ljava/lang/String; getDescricao setNome (Ljava/lang/String;)V setDescricao
  4 '(Ljava/lang/String;Ljava/lang/String;)V 
SourceFile AreaAtuacao.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_area_atuacao InnerClasses AreaAtuacaoBuilder AreaAtuacaoBuilderImpl G ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder NestMembers !                 	s  
Z  Z 
 I             	s  s                       \     *+· *+´ µ !*+´ "µ $±    %        &        ' (      ) *  +        ) ,  -    )  	 . /      0            (      » 1Y· 3°    %        &       6 7             /     *´ !°    %        &        ' (    8 7             /     *´ $°    %        &        ' (    9 :             :     *+µ !±    %        &        ' (         -       ; :             :     *+µ $±    %        &        ' (         -        5             /     *· <±    %        &        ' (     =             M     *· <*+µ !*,µ $±    %        &         ' (               -   	      >    ?      @   A  	s B C       D	 1  E  F  H	 I      1
```
```java
Êþº¾   = b  Qbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder nome Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; instituicao 
dataConclusao Ljava/time/LocalDate; profissional ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; tenantId Ljava/util/UUID; <init> ()V Code
     LineNumberTable LocalVariableTable this SLbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder; LocalVariableTypeTable [Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder<TC;TB;>; g(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder; 	Signature (Ljava/lang/String;)TB;	    
  ! " # self U()Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder; MethodParameters	  & 	  j(Ljava/time/LocalDate;)Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder; (Ljava/time/LocalDate;)TB;	  * 
  (Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder; D(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)TB;	  .  
 e(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder; (Ljava/util/UUID;)TB;	  2   ()TB; build A()Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao; ()TC; toString ()Ljava/lang/String;
  : 7 8
 < > = java/lang/String ? @ valueOf &(Ljava/lang/Object;)Ljava/lang/String;   B C D makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  H 4 5 
SourceFile Certificacao.java å<C:Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;B:Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 N P O $java/lang/invoke/StringConcatFactory C Q (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; M T mCertificacao.CertificacaoBuilder(super=, nome=, instituicao=, dataConclusao=, profissional=, tenantId=) InnerClasses W =br/com/legalconnect/advogado/domain/modal/entity/Certificacao CertificacaoBuilder Z )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder ] %java/lang/invoke/MethodHandles$Lookup _ java/lang/invoke/MethodHandles Lookup NestHost!                   	            
             
                              A     *· ±                                                        P     
*+µ *¶  °                   
       
           
     $       	                   P     
*+µ %*¶  °                   
       
 	          
     $    	   
 '      (            P     
*+µ )*¶  °                   
       
 
          
     $    
    +      ,            P     
*+µ -*¶  °                   
       
  
         
     $        /      0            P     
*+µ 1*¶  °                   
       
           
     $      " #      3         4 5      6          7 8             c     '*· 9*´ *´ %*´ )¸ ;*´ -¸ ;*´ 1¸ ;º A  °                   '            '    D " E             %     *¶  °                 A 4 F             %     *¶ G°                   I    J     K         L     R  S U      V X	  Y [	 \ ^ `  a    V
```
```java
Êþº¾   = $  Ubr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilderImpl  Qbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this WLbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilderImpl; self Y()Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build A()Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;  =br/com/legalconnect/advogado/domain/modal/entity/Certificacao
     V(Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder;)V U()Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder;
     
SourceFile Certificacao.java 	Signature ëLbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder<Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilderImpl;>; InnerClasses CertificacaoBuilder CertificacaoBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = i  =br/com/legalconnect/advogado/domain/modal/entity/Certificacao  )br/com/legalconnect/common/dto/BaseEntity nome Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nullable     length   ÿ instituicao 
dataConclusao Ljava/time/LocalDate; data_conclusao profissional ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; Ljakarta/persistence/ManyToOne; fetch Ljakarta/persistence/FetchType; LAZY  Ljakarta/persistence/JoinColumn; profissional_id tenantId Ljava/util/UUID; 	tenant_id <init> V(Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder;)V 	Signature Z(Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  %  & @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	 ( * ) Qbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder  	  *	 ( -  	  -	 ( 0  	  0	 ( 3  	  3	 ( 6  	  6 LineNumberTable LocalVariableTable this ?Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao; b SLbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder; LocalVariableTypeTable WLbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder<**>; MethodParameters builder U()Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder; Y()Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilder<**>; E Ubr/com/legalconnect/advogado/domain/modal/entity/Certificacao$CertificacaoBuilderImpl
 D G  H ()V getNome ()Ljava/lang/String; getInstituicao getDataConclusao ()Ljava/time/LocalDate; getProfissional A()Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; getTenantId ()Ljava/util/UUID; setNome (Ljava/lang/String;)V setInstituicao setDataConclusao (Ljava/time/LocalDate;)V setProfissional B(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)V setTenantId (Ljava/util/UUID;)V
  G (Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;Ljava/util/UUID;)V 
SourceFile Certificacao.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_certificacao_profissional InnerClasses CertificacaoBuilder CertificacaoBuilderImpl f ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder NestMembers !                 	s  
Z  I 
            	s  I 
            	s             e     	s  
Z             	s  
Z             !     "   #   t     .*+· $*+´ 'µ +*+´ ,µ .*+´ /µ 1*+´ 2µ 4*+´ 5µ 7±    8        9       . : ;     . < =  >       . < ?  @    <  	 A B      C !     "   #   (      » DY· F°    8        9       I J  !     "   #   /     *´ +°    8        9        : ;    K J  !     "   #   /     *´ .°    8        9        : ;    L M  !     "   #   /     *´ 1°    8        9        : ;    N O  !     "   #   /     *´ 4°    8        9        : ;    P Q  !     "   #   /     *´ 7°    8        9        : ;    R S  !     "   #   :     *+µ +±    8        9        : ;         @       T S  !     "   #   :     *+µ .±    8        9        : ;         @       U V  !     "   #   :     *+µ 1±    8        9        : ;         @       W X  !     "   #   :     *+µ 4±    8        9        : ;         @       Y Z  !     "   #   :     *+µ 7±    8        9        : ;         @        H  !     "   #   /     *· [±    8        9        : ;     \  !     "   #   |      *· [*+µ +*,µ .*-µ 1*µ 4*µ 7±    8        9   >      : ;                                      @               ]    ^      _   `  	s a b     (  c	 D  d  e  g	 h     ( D
```
```java
Êþº¾   = _  Kbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder nomeArquivo Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; urlS3 
tipoDocumento profissional ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; tenantId Ljava/util/UUID; <init> ()V Code
     LineNumberTable LocalVariableTable this MLbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder; LocalVariableTypeTable ULbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder<TC;TB;>; a(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder; 	Signature (Ljava/lang/String;)TB;	    
    ! " self O()Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder; MethodParameters	  % 	 	  ' 
  (Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder; D(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)TB;	  +   _(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder; (Ljava/util/UUID;)TB;	  / 
  ()TB; build >()Lbr/com/legalconnect/advogado/domain/modal/entity/Documento; ()TC; toString ()Ljava/lang/String;
  7 4 5
 9 ; : java/lang/String < = valueOf &(Ljava/lang/Object;)Ljava/lang/String;   ? @ A makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  E 1 2 
SourceFile Documento.java Ü<C:Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;B:Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 K M L $java/lang/invoke/StringConcatFactory @ N (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; J Q hDocumento.DocumentoBuilder(super=, nomeArquivo=, urlS3=, tipoDocumento=, profissional=, tenantId=) InnerClasses T :br/com/legalconnect/advogado/domain/modal/entity/Documento DocumentoBuilder W )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder Z %java/lang/invoke/MethodHandles$Lookup \ java/lang/invoke/MethodHandles Lookup NestHost!                   	            
                        
                   A     *· ±                                                        P     
*+µ *¶ °                   
       
           
     #       	                   P     
*+µ $*¶ °                   
       
 	          
     #    	   
                   P     
*+µ &*¶ °                   
       
 
          
     #    
    (      )            P     
*+µ **¶ °                   
       
           
     #       
 ,      -            P     
*+µ .*¶ °                   
       
 
          
     #    
  ! "      0         1 2      3          4 5             `     $*· 6*´ *´ $*´ &*´ *¸ 8*´ .¸ 8º >  °                   $            $    D ! B             %     *¶ °                 A 1 C             %     *¶ D°                   F    G     H         I     O  P R      S U	  V X	 Y [ ]  ^    S
```
```java
Êþº¾   = $  Obr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilderImpl  Kbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this QLbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilderImpl; self S()Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build >()Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;  :br/com/legalconnect/advogado/domain/modal/entity/Documento
     P(Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder;)V O()Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder;
     
SourceFile Documento.java 	Signature ÜLbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder<Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilderImpl;>; InnerClasses DocumentoBuilder DocumentoBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = j  :br/com/legalconnect/advogado/domain/modal/entity/Documento  )br/com/legalconnect/common/dto/BaseEntity nomeArquivo Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nome_arquivo nullable     length   ÿ urlS3 url_s3  ô 
tipoDocumento tipo_documento   d profissional ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; Ljakarta/persistence/ManyToOne; fetch Ljakarta/persistence/FetchType; LAZY  Ljakarta/persistence/JoinColumn; profissional_id tenantId Ljava/util/UUID; 	tenant_id <init> P(Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder;)V 	Signature T(Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  (   ) @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	 + - , Kbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder  	  -	 + 0  	  0	 + 3  	  3	 + 6  	  6	 + 9  	  9 LineNumberTable LocalVariableTable this <Lbr/com/legalconnect/advogado/domain/modal/entity/Documento; b MLbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder; LocalVariableTypeTable QLbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder<**>; MethodParameters builder O()Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder; S()Lbr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilder<**>; H Obr/com/legalconnect/advogado/domain/modal/entity/Documento$DocumentoBuilderImpl
 G J   K ()V getNomeArquivo ()Ljava/lang/String; getUrlS3 getTipoDocumento getProfissional A()Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; getTenantId ()Ljava/util/UUID; setNomeArquivo (Ljava/lang/String;)V setUrlS3 setTipoDocumento setProfissional B(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)V setTenantId (Ljava/util/UUID;)V
  J (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;Ljava/util/UUID;)V 
SourceFile Documento.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_documento_profissional InnerClasses DocumentoBuilder DocumentoBuilderImpl g ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder NestMembers !                 	s 
 Z  
I             	s  Z  
I             	s  Z  
I             e     	s  Z             	s  Z      !  "    # $     %   &   t     .*+· '*+´ *µ .*+´ /µ 1*+´ 2µ 4*+´ 5µ 7*+´ 8µ :±    ;        <       . = >     . ? @  A       . ? B  C    ?  	 D E  "    F $     %   &   (      » GY· I°    ;        <       L M  $     %   &   /     *´ .°    ;        <        = >    N M  $     %   &   /     *´ 1°    ;        <        = >    O M  $     %   &   /     *´ 4°    ;        <        = >    P Q  $     %   &   /     *´ 7°    ;        <        = >    R S  $     %   &   /     *´ :°    ;        <        = >    T U  $     %   &   :     *+µ .±    ;        <        = >         C       V U  $     %   &   :     *+µ 1±    ;        <        = >         C       W U  $     %   &   :     *+µ 4±    ;        <        = >         C       X Y  $     %   &   :     *+µ 7±    ;        <        = >         C       Z [  $     %   &   :     *+µ :±    ;        <        = >         C         K  $     %   &   /     *· \±    ;        <        = >      ]  $     %   &   |      *· \*+µ .*,µ 1*-µ 4*µ 7*µ :±    ;        <   >      = >                                      C               ^    _      `   a  	s b c     +  d	 G  e  f  h	 i     + G
```
```java
Êþº¾   = h  gbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder cargo Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; empresa 
dataInicio Ljava/time/LocalDate; dataFim 	descricao profissional ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; tenantId Ljava/util/UUID; <init> ()V Code
     LineNumberTable LocalVariableTable this iLbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder; LocalVariableTypeTable qLbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder<TC;TB;>; }(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder; 	Signature (Ljava/lang/String;)TB;	  !  
  # $ % self k()Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder; MethodParameters	  ( 	  (Ljava/time/LocalDate;)Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder; (Ljava/time/LocalDate;)TB;	  , 
 	  .  	  0 
  ª(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder; D(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)TB;	  4   {(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder; (Ljava/util/UUID;)TB;	  8   ()TB; build L()Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional; ()TC; toString ()Ljava/lang/String;
  @ = >
 B D C java/lang/String E F valueOf &(Ljava/lang/Object;)Ljava/lang/String;   H I J makeConcatWithConstants ¤(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  N : ; 
SourceFile ExperienciaProfissional.java<C:Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;B:Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 T V U $java/lang/invoke/StringConcatFactory I W (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; S Z ExperienciaProfissional.ExperienciaProfissionalBuilder(super=, cargo=, empresa=, dataInicio=, dataFim=, descricao=, profissional=, tenantId=) InnerClasses ] Hbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional ExperienciaProfissionalBuilder ` )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder c %java/lang/invoke/MethodHandles$Lookup e java/lang/invoke/MethodHandles Lookup NestHost!                   	            
                        
                                   
        A     *· ±                                                        P     
*+µ  *¶ "°                   
       
           
     &       	                   P     
*+µ '*¶ "°                   
       
 	          
     &    	   
 )      *            P     
*+µ +*¶ "°                   
       
 
          
     &    
    )      *            P     
*+µ -*¶ "°                   
       
           
     &       
                   P     
*+µ /*¶ "°                   
       
 
          
     &    
    1      2            P     
*+µ 3*¶ "°                   
       
           
     &        5      6            P     
*+µ 7*¶ "°                   
       
           
     &      $ %      9         : ;      <          = >             n     2*· ?*´  *´ '*´ +¸ A*´ -¸ A*´ /*´ 3¸ A*´ 7¸ Aº G  °                   2            2    D $ K             %     *¶ "°                 A : L             %     *¶ M°                   O    P     Q         R     X  Y [      \ ^	  _ a	 b d f  g    \
```
```java
Êþº¾   = $  kbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilderImpl  gbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this mLbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilderImpl; self o()Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build L()Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;  Hbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional
     l(Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder;)V k()Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder;
     
SourceFile ExperienciaProfissional.java 	Signature"Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilderImpl;>; InnerClasses ExperienciaProfissionalBuilder "ExperienciaProfissionalBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = x  Hbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional  )br/com/legalconnect/common/dto/BaseEntity cargo Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nullable     length   ÿ empresa 
dataInicio Ljava/time/LocalDate; data_inicio dataFim data_fim 	descricao columnDefinition TEXT profissional ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; Ljakarta/persistence/ManyToOne; fetch Ljakarta/persistence/FetchType; LAZY  Ljakarta/persistence/JoinColumn; profissional_id tenantId Ljava/util/UUID; 	tenant_id <init> l(Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder;)V 	Signature p(Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  * " + @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	 - / . gbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder  	  /	 - 2  	  2	 - 5  	  5	 - 8  	  8	 - ;  	  ;	 - >  	  >	 - A   	  A LineNumberTable LocalVariableTable this JLbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional; b iLbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder; LocalVariableTypeTable mLbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder<**>; MethodParameters builder k()Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder; o()Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilder<**>; P kbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional$ExperienciaProfissionalBuilderImpl
 O R " S ()V getCargo ()Ljava/lang/String; 
getEmpresa 
getDataInicio ()Ljava/time/LocalDate; 
getDataFim getDescricao getProfissional A()Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; getTenantId ()Ljava/util/UUID; setCargo (Ljava/lang/String;)V 
setEmpresa 
setDataInicio (Ljava/time/LocalDate;)V 
setDataFim setDescricao setProfissional B(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)V setTenantId (Ljava/util/UUID;)V
  R ²(Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/time/LocalDate;Ljava/lang/String;Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;Ljava/util/UUID;)V 
SourceFile ExperienciaProfissional.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_experiencia_profissional InnerClasses ExperienciaProfissionalBuilder "ExperienciaProfissionalBuilderImpl u ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder NestMembers !                 	s  
Z  I 
            	s  
Z  I 
            	s  
Z             	s             	s  s             e     	s  
Z              	s ! 
Z    " #  $    % &     '   (        >*+· )*+´ ,µ 0*+´ 1µ 3*+´ 4µ 6*+´ 7µ 9*+´ :µ <*+´ =µ ?*+´ @µ B±    C        D       > E F     > G H  I       > G J  K    G  	 L M  $    N &     '   (   (      » OY· Q°    C        D       T U  &     '   (   /     *´ 0°    C        D        E F    V U  &     '   (   /     *´ 3°    C        D        E F    W X  &     '   (   /     *´ 6°    C        D        E F    Y X  &     '   (   /     *´ 9°    C        D        E F    Z U  &     '   (   /     *´ <°    C        D        E F    [ \  &     '   (   /     *´ ?°    C        D        E F    ] ^  &     '   (   /     *´ B°    C        D        E F    _ `  &     '   (   :     *+µ 0±    C        D        E F         K       a `  &     '   (   :     *+µ 3±    C        D        E F         K       b c  &     '   (   :     *+µ 6±    C        D        E F         K       d c  &     '   (   :     *+µ 9±    C        D        E F         K       e `  &     '   (   :     *+µ <±    C        D        E F         K       f g  &     '   (   :     *+µ ?±    C        D        E F         K       h i  &     '   (   :     *+µ B±    C        D        E F          K       " S  &     '   (   /     *· j±    C        D        E F    " k  &     '   (        ,*· j*+µ 0*,µ 3*-µ 6*µ 9*µ <*µ ?*µ B±    C        D   R    , E F     ,      ,      ,      ,      ,      ,      ,     K                   l    m      n   o  	s p q     -  r	 O  s  t  v	 w     - O
```
```java
Êþº¾   = b  [br/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder curso Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; instituicao 
dataConclusao Ljava/time/LocalDate; profissional ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; tenantId Ljava/util/UUID; <init> ()V Code
     LineNumberTable LocalVariableTable this ]Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder; LocalVariableTypeTable eLbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder<TC;TB;>; q(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder; 	Signature (Ljava/lang/String;)TB;	    
  ! " # self _()Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder; MethodParameters	  & 	  t(Ljava/time/LocalDate;)Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder; (Ljava/time/LocalDate;)TB;	  * 
  (Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder; D(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)TB;	  .  
 o(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder; (Ljava/util/UUID;)TB;	  2   ()TB; build F()Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica; ()TC; toString ()Ljava/lang/String;
  : 7 8
 < > = java/lang/String ? @ valueOf &(Ljava/lang/Object;)Ljava/lang/String;   B C D makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  H 4 5 
SourceFile FormacaoAcademica.java ô<C:Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;B:Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 N P O $java/lang/invoke/StringConcatFactory C Q (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; M T xFormacaoAcademica.FormacaoAcademicaBuilder(super=, curso=, instituicao=, dataConclusao=, profissional=, tenantId=) InnerClasses W Bbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica FormacaoAcademicaBuilder Z )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder ] %java/lang/invoke/MethodHandles$Lookup _ java/lang/invoke/MethodHandles Lookup NestHost!                   	            
             
                              A     *· ±                                                        P     
*+µ *¶  °                   
       
           
     $       	                   P     
*+µ %*¶  °                   
       
 	          
     $    	   
 '      (            P     
*+µ )*¶  °                   
       
 
          
     $    
    +      ,            P     
*+µ -*¶  °                   
       
  
         
     $        /      0            P     
*+µ 1*¶  °                   
       
           
     $      " #      3         4 5      6          7 8             c     '*· 9*´ *´ %*´ )¸ ;*´ -¸ ;*´ 1¸ ;º A  °                   '            '    D " E             %     *¶  °                 A 4 F             %     *¶ G°                   I    J     K         L     R  S U      V X	  Y [	 \ ^ `  a    V
```
```java
Êþº¾   = $  _br/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilderImpl  [br/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this aLbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilderImpl; self c()Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build F()Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;  Bbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica
     `(Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder;)V _()Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder;
     
SourceFile FormacaoAcademica.java 	SignatureLbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilderImpl;>; InnerClasses FormacaoAcademicaBuilder FormacaoAcademicaBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = i  Bbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica  )br/com/legalconnect/common/dto/BaseEntity curso Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nullable     length   ÿ instituicao 
dataConclusao Ljava/time/LocalDate; data_conclusao profissional ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; Ljakarta/persistence/ManyToOne; fetch Ljakarta/persistence/FetchType; LAZY  Ljakarta/persistence/JoinColumn; profissional_id tenantId Ljava/util/UUID; 	tenant_id <init> `(Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder;)V 	Signature d(Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  %  & @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	 ( * ) [br/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder  	  *	 ( -  	  -	 ( 0  	  0	 ( 3  	  3	 ( 6  	  6 LineNumberTable LocalVariableTable this DLbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica; b ]Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder; LocalVariableTypeTable aLbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder<**>; MethodParameters builder _()Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder; c()Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilder<**>; E _br/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica$FormacaoAcademicaBuilderImpl
 D G  H ()V getCurso ()Ljava/lang/String; getInstituicao getDataConclusao ()Ljava/time/LocalDate; getProfissional A()Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; getTenantId ()Ljava/util/UUID; setCurso (Ljava/lang/String;)V setInstituicao setDataConclusao (Ljava/time/LocalDate;)V setProfissional B(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;)V setTenantId (Ljava/util/UUID;)V
  G (Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;Ljava/util/UUID;)V 
SourceFile FormacaoAcademica.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_formacao_academica InnerClasses FormacaoAcademicaBuilder FormacaoAcademicaBuilderImpl f ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder NestMembers !                 	s  
Z  I 
            	s  
Z  I 
            	s  
Z             e     	s  
Z             	s  
Z             !     "   #   t     .*+· $*+´ 'µ +*+´ ,µ .*+´ /µ 1*+´ 2µ 4*+´ 5µ 7±    8        9       . : ;     . < =  >       . < ?  @    <  	 A B      C !     "   #   (      » DY· F°    8        9       I J  !     "   #   /     *´ +°    8        9        : ;    K J  !     "   #   /     *´ .°    8        9        : ;    L M  !     "   #   /     *´ 1°    8        9        : ;    N O  !     "   #   /     *´ 4°    8        9        : ;    P Q  !     "   #   /     *´ 7°    8        9        : ;    R S  !     "   #   :     *+µ +±    8        9        : ;         @       T S  !     "   #   :     *+µ .±    8        9        : ;         @       U V  !     "   #   :     *+µ 1±    8        9        : ;         @       W X  !     "   #   :     *+µ 4±    8        9        : ;         @       Y Z  !     "   #   :     *+µ 7±    8        9        : ;         @        H  !     "   #   /     *· [±    8        9        : ;     \  !     "   #   |      *· [*+µ +*,µ .*-µ 1*µ 4*µ 7±    8        9   >      : ;                                      @               ]    ^      _   `  	s a b     (  c	 D  d  e  g	 h     ( D
```
```java
Êþº¾   = M  Ebr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder nome Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; codigo nivel <init> ()V Code
     LineNumberTable LocalVariableTable this GLbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder; LocalVariableTypeTable OLbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder<TC;TB;>; [(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder; 	Signature (Ljava/lang/String;)TB;	    
     self I()Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder; MethodParameters	  ! 	 	  # 
  ()TB; build ;()Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma; ()TC; toString ()Ljava/lang/String;
  + ( )   - . / makeConcatWithConstants \(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  3 % & 
SourceFile Idioma.java Ó<C:Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma;B:Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 9 ; : $java/lang/invoke/StringConcatFactory . < (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 8 ? 8Idioma.IdiomaBuilder(super=, nome=, codigo=, nivel=) InnerClasses B 7br/com/legalconnect/advogado/domain/modal/entity/Idioma 
IdiomaBuilder E )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder H %java/lang/invoke/MethodHandles$Lookup J java/lang/invoke/MethodHandles Lookup NestHost!                   	            
           	     
   A     *· ±                                                     
   P     
*+µ *¶ °                   
       
           
            	                
   P     
*+µ  *¶ °                   
       
 	          
         	   
                
   P     
*+µ "*¶ °                   
       
 
          
         
         $         % &      '          ( )          
   R     *· **´ *´  *´ "º ,  °                                   D  0          
   %     *¶ °                 A % 1          
   %     *¶ 2°                   4    5     6         7     =  > @      A C	  D F	 G I K  L    A
```
```java
Êþº¾   = $  Ibr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilderImpl  Ebr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this KLbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilderImpl; self M()Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build ;()Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma;  7br/com/legalconnect/advogado/domain/modal/entity/Idioma
     J(Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder;)V I()Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder;
     
SourceFile Idioma.java 	Signature ÍLbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder<Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma;Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilderImpl;>; InnerClasses 
IdiomaBuilder IdiomaBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = P  7br/com/legalconnect/advogado/domain/modal/entity/Idioma  )br/com/legalconnect/common/dto/BaseEntity nome Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nullable     unique    length   d codigo   
 nivel   2 <init> J(Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder;)V 	Signature N(Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	  !   Ebr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder  	  !	  $  	  $	  '  	  ' LineNumberTable LocalVariableTable this 9Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma; b GLbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder; LocalVariableTypeTable KLbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder<**>; MethodParameters builder I()Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder; M()Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilder<**>; 6 Ibr/com/legalconnect/advogado/domain/modal/entity/Idioma$IdiomaBuilderImpl
 5 8  9 ()V getNome ()Ljava/lang/String; 	getCodigo getNivel setNome (Ljava/lang/String;)V 	setCodigo setNivel
  8 9(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V 
SourceFile Idioma.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; 	tb_idioma InnerClasses 
IdiomaBuilder IdiomaBuilderImpl M ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder NestMembers !                 	s  
Z  Z 
 I             	s  
Z  Z 
 I             	s  I  
                     d     *+· *+´ µ "*+´ #µ %*+´ &µ (±    )        *        + ,      - .  /        - 0  1    -  	 2 3      4            (      » 5Y· 7°    )        *       : ;             /     *´ "°    )        *        + ,    < ;             /     *´ %°    )        *        + ,    = ;             /     *´ (°    )        *        + ,    > ?             :     *+µ "±    )        *        + ,         1       @ ?             :     *+µ %±    )        *        + ,         1       A ?             :     *+µ (±    )        *        + ,         1        9             /     *· B±    )        *        + ,     C             \     *· B*+µ "*,µ %*-µ (±    )        *   *     + ,                     1   
        D    E      F   G  	s H I       J	 5  K  L  N	 O      5
```
```java
Êþº¾   = G  Qbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder nome Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; <init> ()V Code
  
 	 
 LineNumberTable LocalVariableTable this SLbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder; LocalVariableTypeTable [Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder<TC;TB;>; g(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder; 	Signature (Ljava/lang/String;)TB;	    
     self U()Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder; MethodParameters ()TB; build A()Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao; ()TC; toString ()Ljava/lang/String;
  % " #   ' ( ) makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  -    
SourceFile LocalAtuacao.java å<C:Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao;B:Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 3 5 4 $java/lang/invoke/StringConcatFactory ( 6 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 2 9 1LocalAtuacao.LocalAtuacaoBuilder(super=, nome=) InnerClasses < =br/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao LocalAtuacaoBuilder ? )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder B %java/lang/invoke/MethodHandles$Lookup D java/lang/invoke/MethodHandles Lookup NestHost!                    	 
     A     *· ±                                                        P     
*+µ *¶ °                   
       
           
                                   !          " #             J     *· $*´ º &  °                                   D  *             %     *¶ °                 A  +             %     *¶ ,°                   .    /     0         1     7  8 :      ; =	  > @	 A C E  F    ;
```
```java
Êþº¾   = $  Ubr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilderImpl  Qbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this WLbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilderImpl; self Y()Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build A()Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao;  =br/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao
     V(Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder;)V U()Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder;
     
SourceFile LocalAtuacao.java 	Signature ëLbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder<Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao;Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilderImpl;>; InnerClasses LocalAtuacaoBuilder LocalAtuacaoBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = A  =br/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao  )br/com/legalconnect/common/dto/BaseEntity nome Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nullable     unique    length   ÿ <init> V(Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder;)V 	Signature Z(Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	    Qbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder  	   LineNumberTable LocalVariableTable this ?Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao; b SLbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder; LocalVariableTypeTable WLbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder<**>; MethodParameters builder U()Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder; Y()Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilder<**>; , Ubr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao$LocalAtuacaoBuilderImpl
 + .  / ()V getNome ()Ljava/lang/String; setNome (Ljava/lang/String;)V
  . 
SourceFile LocalAtuacao.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_local_atuacao InnerClasses LocalAtuacaoBuilder LocalAtuacaoBuilderImpl > ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder NestMembers !                 	s  
Z  Z 
 I                       T     *+· *+´ µ ±                     ! "      # $  %        # &  '    #  	 ( )      *            (      » +Y· -°                    0 1             /     *´ °                     ! "    2 3             :     *+µ ±                     ! "         '        /             /     *· 4±                     ! "     3             >     
*· 4*+µ ±                    
 ! "     
    '       5    6      7   8  	s 9 :       ;	 +  <  =  ?	 @      +
```
```java
Êþº¾   =   Qbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder  5br/com/legalconnect/commom/model/Pessoa$PessoaBuilder 	numeroOab Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; statusProfissional usaMarketplace Ljava/lang/Boolean; fazParteDePlano pessoaId Ljava/util/UUID; 	empresaId planoId tenantId 
certificacoes Ljava/util/Set; 	Signature PLjava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;>; 
documentos MLjava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;>; experiencias [Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;>; 	formacoes ULjava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;>; locaisAtuacaoIds !Ljava/util/Set<Ljava/util/UUID;>; areaAtuacaoIds 	idiomaIds tipoAtendimentoIds roleProfissionals TLjava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;>; <init> ()V Code
  ' # $ LineNumberTable LocalVariableTable this SLbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder; LocalVariableTypeTable [Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder<TC;TB;>; g(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder; (Ljava/lang/String;)TB;	  1  
  3 4 5 self U()Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder; MethodParameters	  8 	  h(Ljava/lang/Boolean;)Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder; (Ljava/lang/Boolean;)TB;	  < 
 	  >   e(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder; (Ljava/util/UUID;)TB;	  B 
 	  D  	  F  	  H   d(Ljava/util/Set;)Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder; U(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;>;)TB;	  L   R(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;>;)TB;	  O   `(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;>;)TB;	  R   Z(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;>;)TB;	  U   &(Ljava/util/Set<Ljava/util/UUID;>;)TB;	  X  	  Z  	  \  	  ^    Y(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;>;)TB;	  a !  ()TB; build A()Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; ()TC; toString ()Ljava/lang/String;
  i f g
 k m l java/lang/String n o valueOf &(Ljava/lang/Object;)Ljava/lang/String;   q r s makeConcatWithConstantsX(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 9()Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder; +()Lbr/com/legalconnect/commom/model/Pessoa;
  w c d 
SourceFile Profissional.java ß<C:Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;B:Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder<TC;TB;>;>Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder<TC;TB;>; BootstrapMethods
 }  ~ $java/lang/invoke/StringConcatFactory r  (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; | ;Profissional.ProfissionalBuilder(super=, numeroOab=, statusProfissional=, usaMarketplace=, fazParteDePlano=, pessoaId=, empresaId=, planoId=, tenantId=, certificacoes=, documentos=, experiencias=, formacoes=, locaisAtuacaoIds=, areaAtuacaoIds=, idiomaIds=, tipoAtendimentoIds=, roleProfissionals=) InnerClasses  =br/com/legalconnect/advogado/domain/modal/entity/Profissional ProfissionalBuilder  'br/com/legalconnect/commom/model/Pessoa 
PessoaBuilder  %java/lang/invoke/MethodHandles$Lookup  java/lang/invoke/MethodHandles Lookup NestHost!                   	            
                        
                                                                                                                                                                                         !       "           # $  %   A     *· &±    (        )        * +   ,        * -     .      /         %   P     
*+µ 0*¶ 2°    (        )       
 * +     
    ,       
 * -   6       	 .      /         %   P     
*+µ 7*¶ 2°    (        )       
 * +     
 	   ,       
 * -   6    	   
 9      :         %   P     
*+µ ;*¶ 2°    (        )       
 * +     
 
   ,       
 * -   6    
    9      :         %   P     
*+µ =*¶ 2°    (        )       
 * +     
    ,       
 * -   6       
 ?      @         %   P     
*+µ A*¶ 2°    (        )       
 * +     
 
   ,       
 * -   6    
    ?      @         %   P     
*+µ C*¶ 2°    (        )       
 * +     
    ,       
 * -   6        ?      @         %   P     
*+µ E*¶ 2°    (        )       
 * +     
    ,       
 * -   6        ?      @         %   P     
*+µ G*¶ 2°    (        )       
 * +     
    ,       
 * -   6        I      J         %   Z     
*+µ K*¶ 2°    (        )       
 * +     
    ,       
 * -     
    6        I      M         %   Z     
*+µ N*¶ 2°    (        )       
 * +     
    ,       
 * -     
    6        I      P         %   Z     
*+µ Q*¶ 2°    (        )       
 * +     
    ,       
 * -     
    6        I      S         %   Z     
*+µ T*¶ 2°    (        )       
 * +     
    ,       
 * -     
    6        I      V         %   Z     
*+µ W*¶ 2°    (        )       
 * +     
    ,       
 * -     
    6        I      V         %   Z     
*+µ Y*¶ 2°    (        )       
 * +     
    ,       
 * -     
    6        I      V         %   Z     
*+µ [*¶ 2°    (        )       
 * +     
    ,       
 * -     
    6         I      V         %   Z     
*+µ ]*¶ 2°    (        )       
 * +     
     ,       
 * -     
     6        ! I      _         %   Z     
*+µ `*¶ 2°    (        )       
 * +     
 !   ,       
 * -     
 ! "  6    !  4 5      b         c d      e          f g          %   ·     {*· h*´ 0*´ 7*´ ;¸ j*´ =¸ j*´ A¸ j*´ C¸ j*´ E¸ j*´ G¸ j*´ K¸ j*´ N¸ j*´ Q¸ j*´ T¸ j*´ W¸ j*´ Y¸ j*´ [¸ j*´ ]¸ j*´ `¸ jº p  °    (        )       { * +   ,       { * -  D 4 t          %   %     *¶ 2°    (        )     A c u          %   %     *¶ v°    (        )       x    y     z         {               	   	         
```
```java
Êþº¾   = $  Ubr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilderImpl  Qbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this WLbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilderImpl; self Y()Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build A()Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;  =br/com/legalconnect/advogado/domain/modal/entity/Profissional
     V(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder;)V U()Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder;
     
SourceFile Profissional.java 	Signature ëLbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder<Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilderImpl;>; InnerClasses ProfissionalBuilder ProfissionalBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = ì  =br/com/legalconnect/advogado/domain/modal/entity/Profissional  'br/com/legalconnect/commom/model/Pessoa 	numeroOab Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name 
numero_oab nullable     unique    length   2 statusProfissional status_profissional usaMarketplace Ljava/lang/Boolean; usa_marketplace fazParteDePlano faz_parte_de_plano pessoaId Ljava/util/UUID; 	pessoa_id 	empresaId 
empresa_id planoId plano_id tenantId 	tenant_id 
certificacoes Ljava/util/Set; 	Signature PLjava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;>; Ljakarta/persistence/OneToMany; mappedBy profissional cascade !Ljakarta/persistence/CascadeType; ALL 
orphanRemoval fetch Ljakarta/persistence/FetchType; LAZY 
documentos MLjava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;>; experiencias [Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;>; 	formacoes ULjava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;>; locaisAtuacaoIds !Ljava/util/Set<Ljava/util/UUID;>; 'Ljakarta/persistence/ElementCollection; %Ljakarta/persistence/CollectionTable; tb_profissional_local_atuacao joinColumns  Ljakarta/persistence/JoinColumn; profissional_id local_atuacao_id areaAtuacaoIds tb_profissional_area_atuacao area_atuacao_id 	idiomaIds tb_profissional_idioma 	idioma_id tipoAtendimentoIds  tb_profissional_tipo_atendimento tipo_atendimento_id roleProfissionals TLjava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;>;  Ljakarta/persistence/ManyToMany; EAGER Ljakarta/persistence/JoinTable; tb_profissional_roles inverseJoinColumns role_profissional_id <init> V(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder;)V Z(Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  V O W :(Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder;)V
 Y [ Z java/lang/Boolean \ ] valueOf (Z)Ljava/lang/Boolean;	  _  	  a   c java/util/HashSet
 b e O f ()V	  h ! "	  j / "	  l 1 "	  n 3 "	  p 5 "	  r > "	  t A "	  v D "	  x G "	 z | { Qbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder  	  |	 z   	  	 z _	 z a	 z   	  	 z   	  	 z   	  	 z   	  	 z h	 z j	 z l	 z n	 z p	 z r	 z t	 z v	 z x LineNumberTable LocalVariableTable this ?Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional; b SLbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder; LocalVariableTypeTable WLbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder<**>; MethodParameters builder U()Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder; Y()Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilder<**>; ¥ Ubr/com/legalconnect/advogado/domain/modal/entity/Profissional$ProfissionalBuilderImpl
 ¤ e getNumeroOab ()Ljava/lang/String; getStatusProfissional getUsaMarketplace ()Ljava/lang/Boolean; getFazParteDePlano getPessoaId ()Ljava/util/UUID; getEmpresaId 
getPlanoId getTenantId getCertificacoes ()Ljava/util/Set; R()Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;>; 
getDocumentos O()Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;>; getExperiencias ]()Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;>; getFormacoes W()Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;>; getLocaisAtuacaoIds #()Ljava/util/Set<Ljava/util/UUID;>; getAreaAtuacaoIds getIdiomaIds getTipoAtendimentoIds getRoleProfissionals V()Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;>; setNumeroOab (Ljava/lang/String;)V setStatusProfissional setUsaMarketplace (Ljava/lang/Boolean;)V setFazParteDePlano setPessoaId (Ljava/util/UUID;)V setEmpresaId 
setPlanoId setTenantId setCertificacoes (Ljava/util/Set;)V S(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;>;)V 
setDocumentos P(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;>;)V setExperiencias ^(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;>;)V setFormacoes X(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;>;)V setLocaisAtuacaoIds $(Ljava/util/Set<Ljava/util/UUID;>;)V setAreaAtuacaoIds setIdiomaIds setTipoAtendimentoIds setRoleProfissionals W(Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;>;)V
  e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;)V²(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;>;Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;>;Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;>;Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;>;Ljava/util/Set<Ljava/util/UUID;>;Ljava/util/Set<Ljava/util/UUID;>;Ljava/util/Set<Ljava/util/UUID;>;Ljava/util/Set<Ljava/util/UUID;>;Ljava/util/Set<Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;>;)V 
SourceFile Profissional.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_profissional InnerClasses ProfissionalBuilder ProfissionalBuilderImpl é 5br/com/legalconnect/commom/model/Pessoa$PessoaBuilder 
PessoaBuilder NestMembers !                 	s 
 Z  
Z  I             	s  Z  I             	s  Z             	s  Z             	s  Z  
Z             	s             	s  Z             	s   Z   ! "  #    $    !  %  &s ' ([ e ) * +Z  ,e - .  / "  #    0    !  %  &s ' ([ e ) * +Z  ,e - .  1 "  #    2    !  %  &s ' ([ e ) * +Z  ,e - .  3 "  #    4    !  %  &s ' ([ e ) * +Z  ,e - .  5 "  #    6    3  7  ,e - . 8  	s 9 :[ @ ;  	s <   	s = Z   > "  #    6    3  7  ,e - . 8  	s ? :[ @ ;  	s <   	s @ Z   A "  #    6    3  7  ,e - . 8  	s B :[ @ ;  	s <   	s C Z   D "  #    6    3  7  ,e - . 8  	s E :[ @ ;  	s <   	s F Z   G "  #    H    4  I  ,e - J K  	s L :[ @ ;  	s < M[ @ ;  	s N &  O P  #    Q R     S   T  w    *+· U*¸ Xµ ^*¸ Xµ `*» bY· dµ g*» bY· dµ i*» bY· dµ k*» bY· dµ m*» bY· dµ o*» bY· dµ q*» bY· dµ s*» bY· dµ u*» bY· dµ w*+´ yµ }*+´ ~µ *+´ µ ^*+´ µ `*+´ µ *+´ µ *+´ µ *+´ µ *+´ µ g*+´ µ i*+´ µ k*+´ µ m*+´ µ o*+´ µ q*+´ µ s*+´ µ u*+´ µ w±       6 
     ) 
 ,  =   @ + C 6 F A O L V W \ b c m g x                                   	 ¡ ¢  #    £ R     S   T   (      » ¤Y· ¦°                   § ¨  R     S   T   /     *´ }°                         © ¨  R     S   T   /     *´ °                         ª «  R     S   T   /     *´ ^°                         ¬ «  R     S   T   /     *´ `°                         ­ ®  R     S   T   /     *´ °                         ¯ ®  R     S   T   /     *´ °                         ° ®  R     S   T   /     *´ °                         ± ®  R     S   T   /     *´ °                         ² ³  #    ´ R     S   T   /     *´ g°                         µ ³  #    ¶ R     S   T   /     *´ i°                         · ³  #    ¸ R     S   T   /     *´ k°                         ¹ ³  #    º R     S   T   /     *´ m°                         » ³  #    ¼ R     S   T   /     *´ o°                         ½ ³  #    ¼ R     S   T   /     *´ q°                         ¾ ³  #    ¼ R     S   T   /     *´ s°                         ¿ ³  #    ¼ R     S   T   /     *´ u°                         À ³  #    Á R     S   T   /     *´ w°                         Â Ã  R     S   T   :     *+µ }±                                      Ä Ã  R     S   T   :     *+µ ±                                      Å Æ  R     S   T   :     *+µ ^±                                      Ç Æ  R     S   T   :     *+µ `±                                      È É  R     S   T   :     *+µ ±                                      Ê É  R     S   T   :     *+µ ±                                      Ë É  R     S   T   :     *+µ ±                                      Ì É  R     S   T   :     *+µ ±                                      Í Î  #    Ï R     S   T   L     *+µ g±                           ! "          ! $       !   Ð Î  #    Ñ R     S   T   L     *+µ i±                           / "          / 0       /   Ò Î  #    Ó R     S   T   L     *+µ k±                           1 "          1 2       1   Ô Î  #    Õ R     S   T   L     *+µ m±                           3 "          3 4       3   Ö Î  #    × R     S   T   L     *+µ o±                           5 "          5 6       5   Ø Î  #    × R     S   T   L     *+µ q±                           > "          > 6       >   Ù Î  #    × R     S   T   L     *+µ s±                           A "          A 6       A   Ú Î  #    × R     S   T   L     *+µ u±                           D "          D 6       D   Û Î  #    Ü R     S   T   L     *+µ w±                           G "          G H       G   O f  R     S   T   Ò     x*· Ý*¸ Xµ ^*¸ Xµ `*» bY· dµ g*» bY· dµ i*» bY· dµ k*» bY· dµ m*» bY· dµ o*» bY· dµ q*» bY· dµ s*» bY· dµ u*» bY· dµ w±       6 
     )  ,  =  @ * C 5 F @ O K V V \ a c l g w         x      O Þ  #    ß R     S   T  A     Û*· Ý*¸ Xµ ^*¸ Xµ `*» bY· dµ g*» bY· dµ i*» bY· dµ k*» bY· dµ m*» bY· dµ o*» bY· dµ q*» bY· dµ s*» bY· dµ u*» bY· dµ w*+µ }*,µ *-µ ^*µ `*µ *µ *µ *µ *	µ g*
µ i*µ k*µ m*
µ o*µ q*µ s*µ u*µ w±       6 
     )  ,  =  @ * C 5 F @ O K V V \ a c l g w     ¶    Û       Û      Û      Û      Û      Û      Û      Û      Û      Û ! " 	   Û / " 
   Û 1 "    Û 3 "    Û 5 " 
   Û > "    Û A "    Û D "    Û G "     \ 	   Û ! $ 	   Û / 0 
   Û 1 2    Û 3 4    Û 5 6 
   Û > 6    Û A 6    Û D 6    Û G H      E                 !  /  1  3  5  >  A  D  G   à    á      â   ã  	s ä å     z  æ	 ¤  ç  è  ê	 ë     z ¤
```
```java
Êþº¾   = S  Ybr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder name Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; tenantId Ljava/util/UUID; <init> ()V Code
     LineNumberTable LocalVariableTable this [Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder; LocalVariableTypeTable cLbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder<TC;TB;>; o(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder; 	Signature (Ljava/lang/String;)TB;	    
     self ]()Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder; MethodParameters m(Ljava/util/UUID;)Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder; (Ljava/util/UUID;)TB;	  # 	 
 ()TB; build E()Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional; ()TC; toString ()Ljava/lang/String;
  + ( )
 - / . java/lang/String 0 1 valueOf &(Ljava/lang/Object;)Ljava/lang/String;   3 4 5 makeConcatWithConstants J(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  9 % & 
SourceFile RoleProfissional.java ñ<C:Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;B:Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 ? A @ $java/lang/invoke/StringConcatFactory 4 B (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; > E ERoleProfissional.RoleProfissionalBuilder(super=, name=, tenantId=) InnerClasses H Abr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional RoleProfissionalBuilder K )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder N %java/lang/invoke/MethodHandles$Lookup P java/lang/invoke/MethodHandles Lookup NestHost!                   	 
               
   A     *· ±                                                     
   P     
*+µ *¶ °                   
       
           
            	        !         
   P     
*+µ "*¶ °                   
       
 	 
         
         	         $         % &      '          ( )          
   Q     *· **´ *´ "¸ ,º 2  °                                   D  6          
   %     *¶ °                 A % 7          
   %     *¶ 8°                   :    ;     <         =     C  D F      G I	  J L	 M O Q  R    G
```
```java
Êþº¾   = $  ]br/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilderImpl  Ybr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this _Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilderImpl; self a()Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build E()Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;  Abr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional
     ^(Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder;)V ]()Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder;
     
SourceFile RoleProfissional.java 	Signature ÿLbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder<Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilderImpl;>; InnerClasses RoleProfissionalBuilder RoleProfissionalBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = K  Abr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional  )br/com/legalconnect/common/dto/BaseEntity name Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; nullable     unique    length   2 tenantId Ljava/util/UUID; 	tenant_id <init> ^(Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder;)V 	Signature b(Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	    Ybr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder  	  	  "  	  " LineNumberTable LocalVariableTable this CLbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional; b [Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder; LocalVariableTypeTable _Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder<**>; MethodParameters builder ]()Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder; a()Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilder<**>; 1 ]br/com/legalconnect/advogado/domain/modal/entity/RoleProfissional$RoleProfissionalBuilderImpl
 0 3  4 ()V getName ()Ljava/lang/String; getTenantId ()Ljava/util/UUID; setName (Ljava/lang/String;)V setTenantId (Ljava/util/UUID;)V
  3 %(Ljava/lang/String;Ljava/util/UUID;)V 
SourceFile RoleProfissional.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_role_profissional InnerClasses RoleProfissionalBuilder RoleProfissionalBuilderImpl H ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder NestMembers !                 s  	Z 
 Z  
I             s  	Z 
                      \     *+· *+´ µ  *+´ !µ #±    $        %        & '      ( )  *        ( +  ,    (  	 - .      /            (      » 0Y· 2°    $        %       5 6             /     *´  °    $        %        & '    7 8             /     *´ #°    $        %        & '    9 :             :     *+µ  ±    $        %        & '         ,       ; <             :     *+µ #±    $        %        & '         ,        4             /     *· =±    $        %        & '     >             M     *· =*+µ  *,µ #±    $        %         & '               ,   	      ?    @      A   B  s C D       E	 0  F  G  I	 J      0
```
```java
Êþº¾   = G  Wbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder nome Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; <init> ()V Code
  
 	 
 LineNumberTable LocalVariableTable this YLbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder; LocalVariableTypeTable aLbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder<TC;TB;>; m(Ljava/lang/String;)Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder; 	Signature (Ljava/lang/String;)TB;	    
     self [()Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder; MethodParameters ()TB; build D()Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento; ()TC; toString ()Ljava/lang/String;
  % " #   ' ( ) makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  -    
SourceFile TipoAtendimento.java î<C:Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento;B:Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 3 5 4 $java/lang/invoke/StringConcatFactory ( 6 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 2 9 7TipoAtendimento.TipoAtendimentoBuilder(super=, nome=) InnerClasses < @br/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento TipoAtendimentoBuilder ? )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder B %java/lang/invoke/MethodHandles$Lookup D java/lang/invoke/MethodHandles Lookup NestHost!                    	 
     A     *· ±                                                        P     
*+µ *¶ °                   
       
           
                                   !          " #             J     *· $*´ º &  °                                   D  *             %     *¶ °                 A  +             %     *¶ ,°                   .    /     0         1     7  8 :      ; =	  > @	 A C E  F    ;
```
```java
Êþº¾   = $  [br/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilderImpl  Wbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this ]Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilderImpl; self _()Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build D()Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento;  @br/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento
     \(Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder;)V [()Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder;
     
SourceFile TipoAtendimento.java 	Signature úLbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder<Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento;Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilderImpl;>; InnerClasses TipoAtendimentoBuilder TipoAtendimentoBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = A  @br/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento  )br/com/legalconnect/common/dto/BaseEntity nome Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nullable     unique    length   ÿ <init> \(Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder;)V 	Signature `(Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	    Wbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder  	   LineNumberTable LocalVariableTable this BLbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento; b YLbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder; LocalVariableTypeTable ]Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder<**>; MethodParameters builder [()Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder; _()Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilder<**>; , [br/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento$TipoAtendimentoBuilderImpl
 + .  / ()V getNome ()Ljava/lang/String; setNome (Ljava/lang/String;)V
  . 
SourceFile TipoAtendimento.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_tipo_atendimento InnerClasses TipoAtendimentoBuilder TipoAtendimentoBuilderImpl > ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder NestMembers !                 	s  
Z  Z 
 I                       T     *+· *+´ µ ±                     ! "      # $  %        # &  '    #  	 ( )      *            (      » +Y· -°                    0 1             /     *´ °                     ! "    2 3             :     *+µ ±                     ! "         '        /             /     *· 4±                     ! "     3             >     
*· 4*+µ ±                    
 ! "     
    '       5    6      7   8  	s 9 :       ;	 +  <  =  ?	 @      +
```
```java
Êþº¾   =   Dbr/com/legalconnect/advogado/domain/repository/AreaAtuacaoRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository 
findByNome ((Ljava/lang/String;)Ljava/util/Optional; 	Signature h(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao;>; nome MethodParameters 
findAllByIdIn "(Ljava/util/List;)Ljava/util/List; t(Ljava/util/List<Ljava/util/UUID;>;)Ljava/util/List<Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao;>; ids 
SourceFile AreaAtuacaoRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/advogado/domain/modal/entity/AreaAtuacao;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
   	                  	            
```
```java
Êþº¾   =   Ebr/com/legalconnect/advogado/domain/repository/CertificacaoRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository findByIdAndProfissionalId 6(Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional; 	Signature w(Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional<Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;>; id profissionalId MethodParameters findAllByProfissionalId "(Ljava/util/UUID;)Ljava/util/List; c(Ljava/util/UUID;)Ljava/util/List<Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;>; deleteByIdAndProfissionalId #(Ljava/util/UUID;Ljava/util/UUID;)V 
SourceFile CertificacaoRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/advogado/domain/modal/entity/Certificacao;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
 
   	          	     
          
   	             	            
```
```java
Êþº¾   =   Bbr/com/legalconnect/advogado/domain/repository/DocumentoRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository findByIdAndProfissionalId 6(Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional; 	Signature t(Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional<Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;>; id profissionalId MethodParameters findAllByProfissionalId "(Ljava/util/UUID;)Ljava/util/List; `(Ljava/util/UUID;)Ljava/util/List<Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;>; deleteByIdAndProfissionalId #(Ljava/util/UUID;Ljava/util/UUID;)V 
SourceFile DocumentoRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/advogado/domain/modal/entity/Documento;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
 
   	          	     
          
   	             	            
```
```java
Êþº¾   =   Pbr/com/legalconnect/advogado/domain/repository/ExperienciaProfissionalRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository findByIdAndProfissionalId 6(Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional; 	Signature (Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;>; id profissionalId MethodParameters findAllByProfissionalId "(Ljava/util/UUID;)Ljava/util/List; n(Ljava/util/UUID;)Ljava/util/List<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;>; deleteByIdAndProfissionalId #(Ljava/util/UUID;Ljava/util/UUID;)V 
SourceFile &ExperienciaProfissionalRepository.java ¥Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
 
   	          	     
          
   	             	            
```
```java
Êþº¾   =   Dbr/com/legalconnect/advogado/domain/repository/ExperienciaRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository findByIdAndProfissionalId 6(Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional; 	Signature (Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;>; id profissionalId MethodParameters findAllByProfissionalId "(Ljava/util/UUID;)Ljava/util/List; n(Ljava/util/UUID;)Ljava/util/List<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;>; deleteByIdAndProfissionalId #(Ljava/util/UUID;Ljava/util/UUID;)V 
SourceFile ExperienciaRepository.java ¥Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/advogado/domain/modal/entity/ExperienciaProfissional;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
 
   	          	     
          
   	             	            
```
```java
Êþº¾   =   Jbr/com/legalconnect/advogado/domain/repository/FormacaoAcademicaRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository findByIdAndProfissionalId 6(Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional; 	Signature |(Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;>; id profissionalId MethodParameters findAllByProfissionalId "(Ljava/util/UUID;)Ljava/util/List; h(Ljava/util/UUID;)Ljava/util/List<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;>; deleteByIdAndProfissionalId #(Ljava/util/UUID;Ljava/util/UUID;)V 
SourceFile  FormacaoAcademicaRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
 
   	          	     
          
   	             	            
```
```java
Êþº¾   =   Abr/com/legalconnect/advogado/domain/repository/FormacaoRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository findByIdAndProfissionalId 6(Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional; 	Signature |(Ljava/util/UUID;Ljava/util/UUID;)Ljava/util/Optional<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;>; id profissionalId MethodParameters findAllByProfissionalId "(Ljava/util/UUID;)Ljava/util/List; h(Ljava/util/UUID;)Ljava/util/List<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;>; deleteByIdAndProfissionalId #(Ljava/util/UUID;Ljava/util/UUID;)V 
SourceFile FormacaoRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/advogado/domain/modal/entity/FormacaoAcademica;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
 
   	          	     
          
   	             	            
```
```java
Êþº¾   =   ?br/com/legalconnect/advogado/domain/repository/IdiomaRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository 
findByNome ((Ljava/lang/String;)Ljava/util/Optional; 	Signature c(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma;>; nome MethodParameters 
findAllByIdIn "(Ljava/util/List;)Ljava/util/List; o(Ljava/util/List<Ljava/util/UUID;>;)Ljava/util/List<Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma;>; ids 
SourceFile IdiomaRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/advogado/domain/modal/entity/Idioma;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
   	                  	            
```
```java
Êþº¾   =   Ebr/com/legalconnect/advogado/domain/repository/LocalAtuacaoRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository 
findByNome ((Ljava/lang/String;)Ljava/util/Optional; 	Signature i(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao;>; nome MethodParameters 
findAllByIdIn "(Ljava/util/List;)Ljava/util/List; u(Ljava/util/List<Ljava/util/UUID;>;)Ljava/util/List<Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao;>; ids 
SourceFile LocalAtuacaoRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
   	                  	            
```
```java
Êþº¾   =   Ebr/com/legalconnect/advogado/domain/repository/ProfissionalRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository findByNumeroOab ((Ljava/lang/String;)Ljava/util/Optional; 	Signature i(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;>; 	numeroOab MethodParameters findAllByTenantId b(Ljava/util/UUID;Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page; £(Ljava/util/UUID;Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page<Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;>; tenantId pageable existsByNumeroOab (Ljava/lang/String;)Z existsByPessoaId (Ljava/util/UUID;)Z pessoaId 
SourceFile ProfissionalRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/advogado/domain/modal/entity/Profissional;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
   	        	                                 	            
```
```java
Êþº¾   =   Ibr/com/legalconnect/advogado/domain/repository/RoleProfissionalRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository 
findByName ((Ljava/lang/String;)Ljava/util/Optional; 	Signature m(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;>; name MethodParameters findAllByTenantId "(Ljava/util/UUID;)Ljava/util/List; g(Ljava/util/UUID;)Ljava/util/List<Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;>; tenantId 
SourceFile RoleProfissionalRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/advogado/domain/modal/entity/RoleProfissional;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
   	                  	            
```
```java
Êþº¾   =   Hbr/com/legalconnect/advogado/domain/repository/TipoAtendimentoRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository 
findByNome ((Ljava/lang/String;)Ljava/util/Optional; 	Signature l(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento;>; nome MethodParameters 
findAllByIdIn "(Ljava/util/List;)Ljava/util/List; x(Ljava/util/List<Ljava/util/UUID;>;)Ljava/util/List<Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento;>; ids 
SourceFile TipoAtendimentoRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/advogado/domain/modal/entity/TipoAtendimento;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
   	                  	            
```
```java
Êþº¾   = ^  Sbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO$EnderecoRequestDTOBuilder  java/lang/Object id Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; 
logradouro numero complemento bairro cidade estado cep pais tipoEndereco 8Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco; <init> ()V Code
     LineNumberTable LocalVariableTable this ULbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO$EnderecoRequestDTOBuilder; i(Ljava/lang/String;)Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO$EnderecoRequestDTOBuilder;	     MethodParameters	  ! 	 	  # 
 	  %  	  '  	  ) 
 	  +  	  -  	  /   (Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO$EnderecoRequestDTOBuilder;	  2   build =()Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO; 6 9br/com/legalconnect/commom/dto/request/EnderecoRequestDTO
 5 8  9 Ý(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)V toString ()Ljava/lang/String;
 = ? > java/lang/String @ A valueOf &(Ljava/lang/Object;)Ljava/lang/String;   C D E makeConcatWithConstants È(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile EnderecoRequestDTO.java BootstrapMethods
 J L K $java/lang/invoke/StringConcatFactory D M (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; I P EnderecoRequestDTO.EnderecoRequestDTOBuilder(id=, logradouro=, numero=, complemento=, bairro=, cidade=, estado=, cep=, pais=, tipoEndereco=) InnerClasses EnderecoRequestDTOBuilder T 6br/com/legalconnect/commom/model/Endereco$TipoEndereco V )br/com/legalconnect/commom/model/Endereco TipoEndereco Y %java/lang/invoke/MethodHandles$Lookup [ java/lang/invoke/MethodHandles Lookup NestHost !     
              	            
                                    
                                                           
                 /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ  *°                           	       	   
              ;     *+µ "*°                           
       
                 ;     *+µ $*°                                                   ;     *+µ &*°                                     
              ;     *+µ (*°                           
       
                 ;     *+µ **°                                                   ;     *+µ ,*°                                                   ;     *+µ .*°                                      0             ;     *+µ 1*°                                     3 4             Z     0» 5Y*´ *´  *´ "*´ $*´ &*´ (*´ **´ ,*´ .*´ 1· 7°                   0      : ;             [ 
    1*´ *´  *´ "*´ $*´ &*´ (*´ **´ ,*´ .*´ 1¸ <º B  °                   1      F    G         H     N  O Q      5 R 	 S U W@ X Z \  ]    5
```
```java
Êþº¾   = u  9br/com/legalconnect/commom/dto/request/EnderecoRequestDTO  java/lang/Object id Ljava/lang/String; 
logradouro RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message O logradouro Ã© obrigatÃ³rio. %Ljakarta/validation/constraints/Size; max   ÿ 0O logradouro deve ter no mÃ¡ximo 255 caracteres. RuntimeVisibleTypeAnnotations numero O nÃºmero Ã© obrigatÃ³rio.    ,O nÃºmero deve ter no mÃ¡ximo 20 caracteres. complemento 1O complemento deve ter no mÃ¡ximo 255 caracteres. bairro O bairro Ã© obrigatÃ³rio.   d ,O bairro deve ter no mÃ¡ximo 100 caracteres. cidade A cidade Ã© obrigatÃ³ria. ,A cidade deve ter no mÃ¡ximo 100 caracteres. estado O estado Ã© obrigatÃ³rio.    $O estado deve ter 2 caracteres (UF). cep O CEP Ã© obrigatÃ³rio.   	 'O CEP deve ter no mÃ¡ximo 9 caracteres. pais   2 *O paÃ­s deve ter no mÃ¡ximo 50 caracteres. tipoEndereco 8Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco; (Ljakarta/validation/constraints/NotNull; $O tipo de endereÃ§o Ã© obrigatÃ³rio. builder W()Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO$EnderecoRequestDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code 3 Sbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO$EnderecoRequestDTOBuilder
 2 5 6 7 <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/lang/String;	  =   this ;Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO; 
getLogradouro	  B   	getNumero	  E   getComplemento	  H   	getBairro	  K   	getCidade	  N   	getEstado	  Q   getCep	  T "  getPais	  W &  getTipoEndereco :()Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;	  [ ) * setId (Ljava/lang/String;)V MethodParameters 
setLogradouro 	setNumero setComplemento 	setBairro 	setCidade 	setEstado setCep setPais setTipoEndereco ;(Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)V
  5 Ý(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)V 
SourceFile EnderecoRequestDTO.java InnerClasses EnderecoRequestDTOBuilder p 6br/com/legalconnect/commom/model/Endereco$TipoEndereco r )br/com/legalconnect/commom/model/Endereco TipoEndereco NestMembers !     
               	  
s    
I  
s        	  
s     
I  
s           	  
s    
I  
s        	  
s     
I  
s             
I  
s          
I  
s           	  
s    
I  
s        	  
s     
I  
s           	  
s    
I  
s        	  
s     
I  
s           	  
s    
I   
s !       	  
s     
I   
s !  "        	  
s #   
I $ 
s %       	  
s #    
I $ 
s %  &          
I ' 
s (         
I ' 
s (  ) *       +  
s ,    
   +  
s ,  	 - .  /     0   1   (      » 2Y· 4°    8        9       : ;  /     0   1   /     *´ <°    8        9        > ?    @ ;  /     0   1   /     *´ A°    8        9        > ?    C ;  /     0   1   /     *´ D°    8        9        > ?    F ;  /     0   1   /     *´ G°    8        9        > ?    I ;  /     0   1   /     *´ J°    8        9        > ?    L ;  /     0   1   /     *´ M°    8        9        > ?    O ;  /     0   1   /     *´ P°    8        9        > ?    R ;  /     0   1   /     *´ S°    8        9        > ?    U ;  /     0   1   /     *´ V°    8        9        > ?    X Y  /     0   1   /     *´ Z°    8        9        > ?    \ ]  /     0   1   :     *+µ <±    8        9        > ?         ^       _ ]  /     0   1   :     *+µ A±    8        9        > ?         ^       ` ]  /     0   1   :     *+µ D±    8        9        > ?         ^       a ]  /     0   1   :     *+µ G±    8        9        > ?         ^       b ]  /     0   1   :     *+µ J±    8        9        > ?         ^       c ]  /     0   1   :     *+µ M±    8        9        > ?         ^       d ]  /     0   1   :     *+µ P±    8        9        > ?         ^       e ]  /     0   1   :     *+µ S±    8        9        > ?      "   ^    "   f ]  /     0   1   :     *+µ V±    8        9        > ?      &   ^    &   g h  /     0   1   :     *+µ Z±    8        9        > ?      ) *  ^    )   6 7  /     0   1   /     *· i±    8        9        > ?    6 j  /     0   1   Ì     >*· i*+µ <*,µ A*-µ D*µ G*µ J*µ M*µ P*µ S*	µ V*
µ Z±    8        9   p    > > ?     >      >      >      >      >      >      >      > "     > &  	   > ) * 
 ^   )
               "  &  )   k    l m     2  n 	 o q s@ t     2
```
```java
Êþº¾   = e  Obr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; usuario 7Lbr/com/legalconnect/commom/dto/request/UserRequestDTO; nomeCompleto Ljava/lang/String; cpf dataNascimento Ljava/time/LocalDate; 	telefones Ljava/util/List; 	Signature $Ljava/util/List<Ljava/lang/String;>; 	enderecos MLjava/util/List<Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;>; <init> ()V Code
     LineNumberTable LocalVariableTable this QLbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder; LocalVariableTypeTable YLbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder<TC;TB;>; c(Ljava/util/UUID;)Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder; (Ljava/util/UUID;)TB;	  $  
  & ' ( self S()Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder; MethodParameters (Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;)Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder; <(Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;)TB;	  - 	 
 e(Ljava/lang/String;)Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder; (Ljava/lang/String;)TB;	  1  	  3 
  h(Ljava/time/LocalDate;)Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder; (Ljava/time/LocalDate;)TB;	  7   c(Ljava/util/List;)Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder; )(Ljava/util/List<Ljava/lang/String;>;)TB;	  ;   R(Ljava/util/List<Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;>;)TB;	  >   ()TB; build ;()Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO; ()TC; toString ()Ljava/lang/String;
 F H G java/lang/String I J valueOf &(Ljava/lang/Object;)Ljava/lang/String;   L M N makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile PessoaRequestDTO.java ª<C:Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;B:Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder<TC;TB;>;>Ljava/lang/Object; BootstrapMethods
 T V U $java/lang/invoke/StringConcatFactory M W (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; S Z |PessoaRequestDTO.PessoaRequestDTOBuilder(id=, usuario=, nomeCompleto=, cpf=, dataNascimento=, telefones=, enderecos=) InnerClasses ] 7br/com/legalconnect/commom/dto/request/PessoaRequestDTO PessoaRequestDTOBuilder ` %java/lang/invoke/MethodHandles$Lookup b java/lang/invoke/MethodHandles Lookup NestHost!                   	 
                       
                                                                 A     *· ±                                       !      "            P     
*+µ #*¶ %°                   
       
           
      )       	 *      +            P     
*+µ ,*¶ %°                   
       
 	 
         
      )    	    .      /            P     
*+µ 0*¶ %°                   
       
           
      )       
 .      /            P     
*+µ 2*¶ %°                   
       
 
          
      )    
    4      5            P     
*+µ 6*¶ %°                   
       
           
      )        8      9            Z     
*+µ :*¶ %°                   
       
           
        
    )        8      <            Z     
*+µ =*¶ %°                   
       
           
        
    )      ' (      ?         @ A      B          C D             m     1*´ #¸ E*´ ,¸ E*´ 0*´ 2*´ 6¸ E*´ :¸ E*´ =¸ Eº K  °                   1            1       O    P     Q         R     X  Y [      \ ^	 _ a c  d    \
```
```java
Êþº¾   = $  Sbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilderImpl  Obr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this ULbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilderImpl; self W()Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build ;()Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;  7br/com/legalconnect/commom/dto/request/PessoaRequestDTO
     T(Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder;)V S()Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder;
     
SourceFile PessoaRequestDTO.java 	Signature áLbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder<Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilderImpl;>; InnerClasses PessoaRequestDTOBuilder PessoaRequestDTOBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   =   7br/com/legalconnect/commom/dto/request/PessoaRequestDTO  java/lang/Object id Ljava/util/UUID; usuario 7Lbr/com/legalconnect/commom/dto/request/UserRequestDTO; RuntimeVisibleAnnotations Ljakarta/validation/Valid; (Ljakarta/validation/constraints/NotNull; message 0As informaÃ§Ãµes do usuÃ¡rio sÃ£o obrigatÃ³rias. RuntimeVisibleTypeAnnotations nomeCompleto Ljava/lang/String; )Ljakarta/validation/constraints/NotBlank; *O nome completo da pessoa Ã© obrigatÃ³rio. %Ljakarta/validation/constraints/Size; max   ÿ =O nome completo da pessoa deve ter no mÃ¡ximo 255 caracteres. cpf  O CPF da pessoa Ã© obrigatÃ³rio. min       BO CPF deve ter entre 11 e 14 caracteres (com ou sem formataÃ§Ã£o). (Ljakarta/validation/constraints/Pattern; regexp $^\d{3}\.\d{3}\.\d{3}-\d{2}$|^\d{11}$ BFormato de CPF invÃ¡lido. Use '000.000.000-00' ou apenas dÃ­gitos. dataNascimento Ljava/time/LocalDate; /A data de nascimento da pessoa Ã© obrigatÃ³ria. .Ljakarta/validation/constraints/PastOrPresent; 3A data de nascimento nÃ£o pode ser uma data futura. 	telefones Ljava/util/List; 	Signature $Ljava/util/List<Ljava/lang/String;>;   
 0A lista de telefones nÃ£o pode exceder 10 itens. 	enderecos MLjava/util/List<Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;>; <init> T(Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder;)V X(Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  5 . 6 ()V	 8 : 9 Obr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder  	  :	 8 =  	  =	 8 @  	  @	 8 C  	  C	 8 F ! "	  F	 8 I & '	  I	 8 L , '	  L LineNumberTable LocalVariableTable this 9Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO; b QLbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder; LocalVariableTypeTable ULbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder<**>; MethodParameters builder S()Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder; W()Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilder<**>; [ Sbr/com/legalconnect/commom/dto/request/PessoaRequestDTO$PessoaRequestDTOBuilderImpl
 Z 5 getId ()Ljava/util/UUID; 
getUsuario 9()Lbr/com/legalconnect/commom/dto/request/UserRequestDTO; getNomeCompleto ()Ljava/lang/String; getCpf getDataNascimento ()Ljava/time/LocalDate; getTelefones ()Ljava/util/List; &()Ljava/util/List<Ljava/lang/String;>; getEnderecos O()Ljava/util/List<Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;>; setId (Ljava/util/UUID;)V 
setUsuario :(Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;)V setNomeCompleto (Ljava/lang/String;)V setCpf setDataNascimento (Ljava/time/LocalDate;)V setTelefones (Ljava/util/List;)V '(Ljava/util/List<Ljava/lang/String;>;)V setEnderecos P(Ljava/util/List<Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;>;)V £(Ljava/util/UUID;Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/util/List;Ljava/util/List;)V ô(Ljava/util/UUID;Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;>;)V 
SourceFile PessoaRequestDTO.java InnerClasses PessoaRequestDTOBuilder PessoaRequestDTOBuilderImpl NestMembers !               	     
     s 
       
      s 
     	       s    I  s          s     I  s      	   ,    s    I  I  s    s  s      2     s     I  I  s     s  s    ! "  	       s # $  s %         s #  $  s %  & '  (    ) 	       I * s +         I * s +  , '  (    - 	     
         
     . /  (    0 1     2   3        =*· 4*+´ 7µ ;*+´ <µ >*+´ ?µ A*+´ Bµ D*+´ Eµ G*+´ Hµ J*+´ Kµ M±    N        O       = P Q     = R S  T       = R U  V    R  	 W X  (    Y 1     2   3   (      » ZY· \°    N        O       ] ^  1     2   3   /     *´ ;°    N        O        P Q    _ `  1     2   3   /     *´ >°    N        O        P Q    a b  1     2   3   /     *´ A°    N        O        P Q    c b  1     2   3   /     *´ D°    N        O        P Q    d e  1     2   3   /     *´ G°    N        O        P Q    f g  (    h 1     2   3   /     *´ J°    N        O        P Q    i g  (    j 1     2   3   /     *´ M°    N        O        P Q    k l  1     2   3   :     *+µ ;±    N        O        P Q         V       m n  1     2   3   :     *+µ >±    N        O        P Q         V       o p  1     2   3   :     *+µ A±    N        O        P Q         V       q p  1     2   3   :     *+µ D±    N        O        P Q         V       r s  1     2   3   :     *+µ G±    N        O        P Q      ! "  V    !   t u  (    v 1     2   3   L     *+µ J±    N        O        P Q      & '  T        & )  V    &   w u  (    x 1     2   3   L     *+µ M±    N        O        P Q      , '  T        , -  V    ,   . 6  1     2   3   /     *· 4±    N        O        P Q    . y  (    z 1     2   3   ¸     ,*· 4*+µ ;*,µ >*-µ A*µ D*µ G*µ J*µ M±    N        O   R    , P Q     ,      ,      ,      ,      , ! "    , & '    , , '  T       , & )    , , -  V            !  &  ,   {    | }     8  ~	 Z         8 Z
```
```java
Êþº¾   = H  Kbr/com/legalconnect/commom/dto/request/UserRequestDTO$UserRequestDTOBuilder  java/lang/Object id Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; email senha nomeCompleto cpf telefone fotoUrl <init> ()V Code
     LineNumberTable LocalVariableTable this MLbr/com/legalconnect/commom/dto/request/UserRequestDTO$UserRequestDTOBuilder; a(Ljava/lang/String;)Lbr/com/legalconnect/commom/dto/request/UserRequestDTO$UserRequestDTOBuilder;	     MethodParameters	   	 	   
 	  !  	  #  	  % 
 	  '   build 9()Lbr/com/legalconnect/commom/dto/request/UserRequestDTO; + 5br/com/legalconnect/commom/dto/request/UserRequestDTO
 * -  . (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V toString ()Ljava/lang/String;   2 3 4 makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile UserRequestDTO.java BootstrapMethods
 9 ; : $java/lang/invoke/StringConcatFactory 3 < (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 8 ? jUserRequestDTO.UserRequestDTOBuilder(id=, email=, senha=, nomeCompleto=, cpf=, telefone=, fotoUrl=) InnerClasses UserRequestDTOBuilder C %java/lang/invoke/MethodHandles$Lookup E java/lang/invoke/MethodHandles Lookup NestHost !                   	            
                                    
                       
                 /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	       	   
              ;     *+µ *°                           
       
                 ;     *+µ  *°                                                   ;     *+µ "*°                                     
              ;     *+µ $*°                           
       
                 ;     *+µ &*°                                     ( )             N 	    $» *Y*´ *´ *´ *´  *´ "*´ $*´ &· ,°                   $      / 0             L     "*´ *´ *´ *´  *´ "*´ $*´ &º 1  °                   "      5    6         7     =  > @      * A 	 B D F  G    *
```
```java
Êþº¾   = U  5br/com/legalconnect/commom/dto/request/UserRequestDTO  java/lang/Object id Ljava/lang/String; email RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message %O e-mail do usuÃ¡rio Ã© obrigatÃ³rio. &Ljakarta/validation/constraints/Email; Formato de e-mail invÃ¡lido. %Ljakarta/validation/constraints/Size; max   ÿ 8O e-mail do usuÃ¡rio deve ter no mÃ¡ximo 255 caracteres. RuntimeVisibleTypeAnnotations senha min    5A senha do usuÃ¡rio deve ter no mÃ­nimo 8 caracteres. nomeCompleto ?O nome completo do usuÃ¡rio deve ter no mÃ¡ximo 255 caracteres. cpf    (O CPF deve ter no mÃ¡ximo 14 caracteres. telefone    9O telefone do usuÃ¡rio deve ter no mÃ¡ximo 20 caracteres. fotoUrl builder O()Lbr/com/legalconnect/commom/dto/request/UserRequestDTO$UserRequestDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code & Kbr/com/legalconnect/commom/dto/request/UserRequestDTO$UserRequestDTOBuilder
 % ( ) * <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/lang/String;	  0   this 7Lbr/com/legalconnect/commom/dto/request/UserRequestDTO; getEmail	  5   getSenha	  8   getNomeCompleto	  ;   getCpf	  >   getTelefone	  A   
getFotoUrl	  D   setId (Ljava/lang/String;)V MethodParameters setEmail setSenha setNomeCompleto setCpf setTelefone 
setFotoUrl
  ( (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V 
SourceFile UserRequestDTO.java InnerClasses UserRequestDTOBuilder NestMembers !                  "  	  
s    
s 
   I  
s     (   	  
s     
s 
    I  
s             I  I  
s          I  I  
s             I  
s          I  
s             I  
s          I  
s             I  
s          I  
s        	   !  "     #   $   (      » %Y· '°    +        ,       - .  "     #   $   /     *´ /°    +        ,        1 2    3 .  "     #   $   /     *´ 4°    +        ,        1 2    6 .  "     #   $   /     *´ 7°    +        ,        1 2    9 .  "     #   $   /     *´ :°    +        ,        1 2    < .  "     #   $   /     *´ =°    +        ,        1 2    ? .  "     #   $   /     *´ @°    +        ,        1 2    B .  "     #   $   /     *´ C°    +        ,        1 2    E F  "     #   $   :     *+µ /±    +        ,        1 2         G       H F  "     #   $   :     *+µ 4±    +        ,        1 2         G       I F  "     #   $   :     *+µ 7±    +        ,        1 2         G       J F  "     #   $   :     *+µ :±    +        ,        1 2         G       K F  "     #   $   :     *+µ =±    +        ,        1 2         G       L F  "     #   $   :     *+µ @±    +        ,        1 2         G       M F  "     #   $   :     *+µ C±    +        ,        1 2         G       ) *  "     #   $   /     *· N±    +        ,        1 2    ) O  "     #   $        ,*· N*+µ /*,µ 4*-µ 7*µ :*µ =*µ @*µ C±    +        ,   R    , 1 2     ,      ,      ,      ,      ,      ,      ,    G                   P    Q R   
  %  S 	 T     %
```
```java
Êþº¾   = `  Vbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO$EnderecoResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; 
logradouro Ljava/lang/String; numero complemento bairro cidade estado cep pais tipoEndereco 8Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco; <init> ()V Code
     LineNumberTable LocalVariableTable this XLbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO$EnderecoResponseDTOBuilder; j(Ljava/util/UUID;)Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO$EnderecoResponseDTOBuilder;	     MethodParameters l(Ljava/lang/String;)Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO$EnderecoResponseDTOBuilder;	  # 	 
	  %  
	  '  
	  ) 
 
	  +  
	  -  
	  /  
	  1  
 (Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO$EnderecoResponseDTOBuilder;	  4   build ?()Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO; 8 ;br/com/legalconnect/commom/dto/response/EnderecoResponseDTO
 7 :  ; Û(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)V toString ()Ljava/lang/String;
 ? A @ java/lang/String B C valueOf &(Ljava/lang/Object;)Ljava/lang/String;   E F G makeConcatWithConstants È(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile EnderecoResponseDTO.java BootstrapMethods
 L N M $java/lang/invoke/StringConcatFactory F O (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; K R EnderecoResponseDTO.EnderecoResponseDTOBuilder(id=, logradouro=, numero=, complemento=, bairro=, cidade=, estado=, cep=, pais=, tipoEndereco=) InnerClasses EnderecoResponseDTOBuilder V 6br/com/legalconnect/commom/model/Endereco$TipoEndereco X )br/com/legalconnect/commom/model/Endereco TipoEndereco [ %java/lang/invoke/MethodHandles$Lookup ] java/lang/invoke/MethodHandles Lookup NestHost !     
              	 
            
            
           
 
            
            
            
            
                      
                 /     *· ±                                       ;     *+µ *°                                      	 !             ;     *+µ "*°                           	 
       	    !             ;     *+µ $*°                            
           !             ;     *+µ &*°                            
          
 !             ;     *+µ (*°                           
 
       
    !             ;     *+µ **°                            
           !             ;     *+µ ,*°                            
           !             ;     *+µ .*°                            
           !             ;     *+µ 0*°                            
           2             ;     *+µ 3*°                                      5 6             Z     0» 7Y*´ *´ "*´ $*´ &*´ (*´ **´ ,*´ .*´ 0*´ 3· 9°                   0      < =             ^ 
    4*´ ¸ >*´ "*´ $*´ &*´ (*´ **´ ,*´ .*´ 0*´ 3¸ >º D  °                   4      H    I         J     P  Q S      7 T 	 U W Y@ Z \ ^  _    7
```
```java
Êþº¾   = \  ;br/com/legalconnect/commom/dto/response/EnderecoResponseDTO  java/lang/Object id Ljava/util/UUID; 
logradouro Ljava/lang/String; numero complemento bairro cidade estado cep pais tipoEndereco 8Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco; builder Z()Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO$EnderecoResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  Vbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO$EnderecoResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	  "   this =Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO; 
getLogradouro ()Ljava/lang/String;	  (   	getNumero	  + 	  getComplemento	  . 
  	getBairro	  1   	getCidade	  4   	getEstado	  7 
  getCep	  :   getPais	  =   getTipoEndereco :()Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;	  A   setId (Ljava/util/UUID;)V MethodParameters 
setLogradouro (Ljava/lang/String;)V 	setNumero setComplemento 	setBairro 	setCidade 	setEstado setCep setPais setTipoEndereco ;(Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)V
   Û(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)V 
SourceFile EnderecoResponseDTO.java InnerClasses EnderecoResponseDTOBuilder W 6br/com/legalconnect/commom/model/Endereco$TipoEndereco Y )br/com/legalconnect/commom/model/Endereco TipoEndereco NestMembers !     
            	     
               
                    	               (      » Y· °                                  /     *´ !°                    # $    % &             /     *´ '°                    # $    ) &             /     *´ *°                    # $    , &             /     *´ -°                    # $    / &             /     *´ 0°                    # $    2 &             /     *´ 3°                    # $    5 &             /     *´ 6°                    # $    8 &             /     *´ 9°                    # $    ; &             /     *´ <°                    # $    > ?             /     *´ @°                    # $    B C             :     *+µ !±                    # $         D       E F             :     *+µ '±                    # $         D       G F             :     *+µ *±                    # $      	   D    	   H F             :     *+µ -±                    # $      
   D    
   I F             :     *+µ 0±                    # $         D       J F             :     *+µ 3±                    # $         D       K F             :     *+µ 6±                    # $      
   D    
   L F             :     *+µ 9±                    # $         D       M F             :     *+µ <±                    # $         D       N O             :     *+µ @±                    # $         D                     /     *· P±                    # $     Q             Ì     >*· P*+µ !*,µ '*-µ **µ -*µ 0*µ 3*µ 6*µ 9*	µ <*
µ @±               p    > # $     >      >      > 	     > 
     >      >      > 
     >      >   	   >   
 D   )
     	  
      
         R    S T       U 	 V X Z@ [     
```
```java
Êþº¾   = \  Rbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; usuario 9Lbr/com/legalconnect/commom/dto/response/UserResponseDTO; nomeCompleto Ljava/lang/String; cpf dataNascimento Ljava/time/LocalDate; 	telefones Ljava/util/List; 	Signature $Ljava/util/List<Ljava/lang/String;>; 	enderecos OLjava/util/List<Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO;>; <init> ()V Code
     LineNumberTable LocalVariableTable this TLbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder; f(Ljava/util/UUID;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;	  !   MethodParameters (Lbr/com/legalconnect/commom/dto/response/UserResponseDTO;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;	  % 	 
 h(Ljava/lang/String;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;	  (  	  * 
  k(Ljava/time/LocalDate;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;	  -   f(Ljava/util/List;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder; z(Ljava/util/List<Ljava/lang/String;>;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;	  1   LocalVariableTypeTable ¥(Ljava/util/List<Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO;>;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;	  5   build =()Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO; 9 9br/com/legalconnect/commom/dto/response/PessoaResponseDTO
 8 ;  < ¥(Ljava/util/UUID;Lbr/com/legalconnect/commom/dto/response/UserResponseDTO;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/util/List;Ljava/util/List;)V toString ()Ljava/lang/String;
 @ B A java/lang/String C D valueOf &(Ljava/lang/Object;)Ljava/lang/String;   F G H makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile PessoaResponseDTO.java BootstrapMethods
 M O N $java/lang/invoke/StringConcatFactory G P (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; L S ~PessoaResponseDTO.PessoaResponseDTOBuilder(id=, usuario=, nomeCompleto=, cpf=, dataNascimento=, telefones=, enderecos=) InnerClasses PessoaResponseDTOBuilder W %java/lang/invoke/MethodHandles$Lookup Y java/lang/invoke/MethodHandles Lookup NestHost !                   	 
                       
                                                         
                 /     *· ±                                       ;     *+µ  *°                              "       	 #             ;     *+µ $*°                           	 
  "    	    &             ;     *+µ '*°                              "       
 &             ;     *+µ )*°                           
   "    
    +             ;     *+µ ,*°                              "        .      /            M     *+µ 0*°                              2           "        .      3            M     *+µ 4*°                              2           "       6 7             N 	    $» 8Y*´  *´ $*´ '*´ )*´ ,*´ 0*´ 4· :°                   $      = >             [     1*´  ¸ ?*´ $¸ ?*´ '*´ )*´ ,¸ ?*´ 0¸ ?*´ 4¸ ?º E  °                   1      I    J         K     Q  R T      8 U 	 V X Z  [    8
```
```java
Êþº¾   = W  9br/com/legalconnect/commom/dto/response/PessoaResponseDTO  java/lang/Object id Ljava/util/UUID; usuario 9Lbr/com/legalconnect/commom/dto/response/UserResponseDTO; nomeCompleto Ljava/lang/String; cpf dataNascimento Ljava/time/LocalDate; 	telefones Ljava/util/List; 	Signature $Ljava/util/List<Ljava/lang/String;>; 	enderecos OLjava/util/List<Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO;>; builder V()Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  Rbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	  $   this ;Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO; 
getUsuario ;()Lbr/com/legalconnect/commom/dto/response/UserResponseDTO;	  *   getNomeCompleto ()Ljava/lang/String;	  . 	 
 getCpf	  1  
 getDataNascimento ()Ljava/time/LocalDate;	  5  
 getTelefones ()Ljava/util/List; &()Ljava/util/List<Ljava/lang/String;>;	  :   getEnderecos Q()Ljava/util/List<Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO;>;	  >   setId (Ljava/util/UUID;)V MethodParameters 
setUsuario <(Lbr/com/legalconnect/commom/dto/response/UserResponseDTO;)V setNomeCompleto (Ljava/lang/String;)V setCpf setDataNascimento (Ljava/time/LocalDate;)V setTelefones (Ljava/util/List;)V '(Ljava/util/List<Ljava/lang/String;>;)V LocalVariableTypeTable setEnderecos R(Ljava/util/List<Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO;>;)V
   ¥(Ljava/util/UUID;Lbr/com/legalconnect/commom/dto/response/UserResponseDTO;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/util/List;Ljava/util/List;)V ø(Ljava/util/UUID;Lbr/com/legalconnect/commom/dto/response/UserResponseDTO;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO;>;)V 
SourceFile PessoaResponseDTO.java InnerClasses PessoaResponseDTOBuilder NestMembers !                 	 
     
     
                      	               (      » Y· °                    ! "             /     *´ #°                     % &    ' (             /     *´ )°                     % &    + ,             /     *´ -°                     % &    / ,             /     *´ 0°                     % &    2 3             /     *´ 4°                     % &    6 7      8            /     *´ 9°                     % &    ; 7      <            /     *´ =°                     % &    ? @             :     *+µ #±                     % &         A       B C             :     *+µ )±                     % &         A       D E             :     *+µ -±                     % &      	 
  A    	   F E             :     *+µ 0±                     % &       
  A       G H             :     *+µ 4±                     % &       
  A       I J      K            L     *+µ 9±                     % &         L           A       M J      N            L     *+µ =±                     % &         L           A                     /     *· O±                     % &     P      Q            ¸     ,*· O*+µ #*,µ )*-µ -*µ 0*µ 4*µ 9*µ =±                R    , % &     ,      ,      , 	 
    ,  
    ,  
    ,      ,    L       ,      ,    A        	           R    S T   
    U 	 V     
```
```java
Êþº¾   = _  Nbr/com/legalconnect/commom/dto/response/UserResponseDTO$UserResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; nomeCompleto Ljava/lang/String; email cpf telefone fotoUrl userType 0Lbr/com/legalconnect/commom/model/User$UserType; 
userStatus 2Lbr/com/legalconnect/commom/model/User$UserStatus; <init> ()V Code
     LineNumberTable LocalVariableTable this PLbr/com/legalconnect/commom/dto/response/UserResponseDTO$UserResponseDTOBuilder; b(Ljava/util/UUID;)Lbr/com/legalconnect/commom/dto/response/UserResponseDTO$UserResponseDTOBuilder;	     MethodParameters d(Ljava/lang/String;)Lbr/com/legalconnect/commom/dto/response/UserResponseDTO$UserResponseDTOBuilder;	  " 	 
	  $  
	  &  
	  ( 
 
	  *  
 (Lbr/com/legalconnect/commom/model/User$UserType;)Lbr/com/legalconnect/commom/dto/response/UserResponseDTO$UserResponseDTOBuilder;	  -   (Lbr/com/legalconnect/commom/model/User$UserStatus;)Lbr/com/legalconnect/commom/dto/response/UserResponseDTO$UserResponseDTOBuilder;	  0   build ;()Lbr/com/legalconnect/commom/dto/response/UserResponseDTO; 4 7br/com/legalconnect/commom/dto/response/UserResponseDTO
 3 6  7 Ï(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/commom/model/User$UserType;Lbr/com/legalconnect/commom/model/User$UserStatus;)V toString ()Ljava/lang/String;
 ; = < java/lang/String > ? valueOf &(Ljava/lang/Object;)Ljava/lang/String;   A B C makeConcatWithConstants ¤(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile UserResponseDTO.java BootstrapMethods
 H J I $java/lang/invoke/StringConcatFactory B K (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; G N }UserResponseDTO.UserResponseDTOBuilder(id=, nomeCompleto=, email=, cpf=, telefone=, fotoUrl=, userType=, userStatus=) InnerClasses UserResponseDTOBuilder R 0br/com/legalconnect/commom/model/User$UserStatus T %br/com/legalconnect/commom/model/User 
UserStatus W .br/com/legalconnect/commom/model/User$UserType UserType Z %java/lang/invoke/MethodHandles$Lookup \ java/lang/invoke/MethodHandles Lookup NestHost !                   	 
            
            
           
 
            
                                                   /     *· ±                                       ;     *+µ *°                                     	               ;     *+µ !*°                           	 
      	                  ;     *+µ #*°                            
                        ;     *+µ %*°                            
         
               ;     *+µ '*°                           
 
      
                  ;     *+µ )*°                            
          +             ;     *+µ ,*°                                      .             ;     *+µ /*°                                     1 2             R 
    (» 3Y*´ *´ !*´ #*´ %*´ '*´ )*´ ,*´ /· 5°                   (      8 9             Y     /*´ ¸ :*´ !*´ #*´ %*´ '*´ )*´ ,¸ :*´ /¸ :º @  °                   /      D    E         F     L  M O   "   3 P 	 Q S U@ V S X@ Y [ ]  ^    3
```
```java
Êþº¾   = X  7br/com/legalconnect/commom/dto/response/UserResponseDTO  java/lang/Object id Ljava/util/UUID; nomeCompleto Ljava/lang/String; email cpf telefone fotoUrl userType 0Lbr/com/legalconnect/commom/model/User$UserType; 
userStatus 2Lbr/com/legalconnect/commom/model/User$UserStatus; builder R()Lbr/com/legalconnect/commom/dto/response/UserResponseDTO$UserResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  Nbr/com/legalconnect/commom/dto/response/UserResponseDTO$UserResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	  !   this 9Lbr/com/legalconnect/commom/dto/response/UserResponseDTO; getNomeCompleto ()Ljava/lang/String;	  '   getEmail	  * 	  getCpf	  - 
  getTelefone	  0   
getFotoUrl	  3   getUserType 2()Lbr/com/legalconnect/commom/model/User$UserType;	  7 
  
getUserStatus 4()Lbr/com/legalconnect/commom/model/User$UserStatus;	  ;   setId (Ljava/util/UUID;)V MethodParameters setNomeCompleto (Ljava/lang/String;)V setEmail setCpf setTelefone 
setFotoUrl setUserType 3(Lbr/com/legalconnect/commom/model/User$UserType;)V 
setUserStatus 5(Lbr/com/legalconnect/commom/model/User$UserStatus;)V
   Ï(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/commom/model/User$UserType;Lbr/com/legalconnect/commom/model/User$UserStatus;)V 
SourceFile UserResponseDTO.java InnerClasses UserResponseDTOBuilder P 0br/com/legalconnect/commom/model/User$UserStatus R %br/com/legalconnect/commom/model/User 
UserStatus U .br/com/legalconnect/commom/model/User$UserType UserType NestMembers !                 	     
               
          	               (      » Y· °                                 /     *´  °                    " #    $ %             /     *´ &°                    " #    ( %             /     *´ )°                    " #    + %             /     *´ ,°                    " #    . %             /     *´ /°                    " #    1 %             /     *´ 2°                    " #    4 5             /     *´ 6°                    " #    8 9             /     *´ :°                    " #    < =             :     *+µ  ±                    " #         >       ? @             :     *+µ &±                    " #         >       A @             :     *+µ )±                    " #      	   >    	   B @             :     *+µ ,±                    " #      
   >    
   C @             :     *+µ /±                    " #         >       D @             :     *+µ 2±                    " #         >       E F             :     *+µ 6±                    " #      
   >    
   G H             :     *+µ :±                    " #         >                     /     *· I±                    " #     J             ¬  	   2*· I*+µ  *,µ &*-µ )*µ ,*µ /*µ 2*µ 6*µ :±               \ 	   2 " #     2      2      2 	     2 
     2      2      2 
     2    >   !     	  
      
     K    L M       N 	 O Q S@ T Q V@ W     
```
```java
Êþº¾   = C  0br/com/legalconnect/commom/mapper/EnderecoMapper  java/lang/Object INSTANCE 2Lbr/com/legalconnect/commom/mapper/EnderecoMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable toEntity h(Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;)Lbr/com/legalconnect/commom/model/Endereco; RuntimeInvisibleAnnotations Lorg/mapstruct/Mappings; value Lorg/mapstruct/Mapping; target pessoa ignore    id source qualifiedByName mapStringToUuid dto MethodParameters 
toResponseDTO j(Lbr/com/legalconnect/commom/model/Endereco;)Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO; mapUuidToString entity updateEntityFromDto i(Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;Lbr/com/legalconnect/commom/model/Endereco;)V $RuntimeInvisibleParameterAnnotations Lorg/mapstruct/MappingTarget; $(Ljava/lang/String;)Ljava/util/UUID; Lorg/mapstruct/Named;
 / 1 0 java/util/UUID 2 , 
fromString this Ljava/lang/String; 
StackMapTable $(Ljava/util/UUID;)Ljava/lang/String;
 / 8 9 : toString ()Ljava/lang/String; Ljava/util/UUID; = java/lang/String 
SourceFile EnderecoMapper.java Lorg/mapstruct/Mapper; componentModel spring                	   ,      ¸ 
À ³ ±                        1    [ @   s  Z @   s  s   [ s ! #    "   $ %         s  s   [ s & #    '   ( )     )    [ @   s  Z @   s  Z  *   	    +   #   	 "   '    ! ,       -  s ! 	   N     
+Æ 
+¸ .§ °           B        
 3      
  4  5    @ / #        & 6       -  s & 	   N     
+Æ 
+¶ 7§ °           M        
 3      
  ;  5    @ < #        >    ?      @  As B
```
```java
Êþº¾   = ×  4br/com/legalconnect/commom/mapper/EnderecoMapperImpl  java/lang/Object  0br/com/legalconnect/commom/mapper/EnderecoMapper <init> ()V Code
     LineNumberTable LocalVariableTable this 6Lbr/com/legalconnect/commom/mapper/EnderecoMapperImpl; toEntity h(Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;)Lbr/com/legalconnect/commom/model/Endereco;
    )br/com/legalconnect/commom/model/Endereco   builder =()Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder;
    9br/com/legalconnect/commom/dto/request/EnderecoRequestDTO   getId ()Ljava/lang/String;
     ! mapStringToUuid $(Ljava/lang/String;)Ljava/util/UUID;
 # % $ 9br/com/legalconnect/commom/model/Endereco$EnderecoBuilder & ' id O(Ljava/util/UUID;)Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;
  ) *  	getBairro
 # , - . bairro O(Ljava/lang/String;)Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder;
  0 1  getCep
 # 3 4 . cep
  6 7  	getCidade
 # 9 : . cidade
  < =  getComplemento
 # ? @ . complemento
  B C  	getEstado
 # E F . estado
  H I  
getLogradouro
 # K L . 
logradouro
  N O  	getNumero
 # Q R . numero
  T U  getPais
 # W X . pais
  Z [ \ getTipoEndereco :()Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;
 # ^ _ ` tipoEndereco u(Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder;
 # b c d build -()Lbr/com/legalconnect/commom/model/Endereco; dto ;Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO; endereco ;Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder; LocalVariableTypeTable ?Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder<**>; 
StackMapTable MethodParameters 
toResponseDTO j(Lbr/com/legalconnect/commom/model/Endereco;)Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO;
 p r q ;br/com/legalconnect/commom/dto/response/EnderecoResponseDTO  s Z()Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO$EnderecoResponseDTOBuilder;
  u  v ()Ljava/util/UUID;
  x y z mapUuidToString $(Ljava/util/UUID;)Ljava/lang/String;
 | ~ } java/util/UUID  ! 
fromString
    Vbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO$EnderecoResponseDTOBuilder &  j(Ljava/util/UUID;)Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO$EnderecoResponseDTOBuilder;
  )
   -  l(Ljava/lang/String;)Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO$EnderecoResponseDTOBuilder;
  0
   4 
  6
   : 
  <
   @ 
  B
   F 
  H
   L 
  N
   R 
  T
   X 
  Z
    _ ¡ (Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO$EnderecoResponseDTOBuilder;
  £ c ¤ ?()Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO; entity +Lbr/com/legalconnect/commom/model/Endereco; enderecoResponseDTO XLbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO$EnderecoResponseDTOBuilder; updateEntityFromDto i(Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;Lbr/com/legalconnect/commom/model/Endereco;)V
  ¬ ­ ® 	setBairro (Ljava/lang/String;)V
  ° ± ® setCep
  ³ ´ ® 	setCidade
  ¶ · ® setComplemento
  ¹ º ® 	setEstado
  ¼ ½ ® 
setLogradouro
  ¿ À ® 	setNumero
  Â Ã ® setPais
  Å Æ Ç setTipoEndereco ;(Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)V 
SourceFile EnderecoMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; InnerClasses EnderecoResponseDTOBuilder EnderecoBuilder Ð 6br/com/legalconnect/commom/model/Endereco$TipoEndereco TipoEndereco Ó ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder Õ )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder !            	   /     *· 
±            
                	   ú     m+Ç °¸ M,*+¶ ¶ ¶ "W,+¶ (¶ +W,+¶ /¶ 2W,+¶ 5¶ 8W,+¶ ;¶ >W,+¶ A¶ DW,+¶ G¶ JW,+¶ M¶ PW,+¶ S¶ VW,+¶ Y¶ ]W,¶ a°       :         
       )  2  ;  D   M ! V " _ # h % 
        m       m e f  
 c g h  i     
 c g j  k     l    e    m n  	   ü     w+Ç °¸ oM+¶ tÆ ,*+¶ t¶ w¸ {¶ W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,¶ ¢°       >    *  +  . 
 0  1 ! 3 * 4 3 5 < 6 E 7 N 8 W 9 ` : i ; r = 
        w       w ¥ ¦  
 m § ¨  k   	 ü   l    ¥    © ª  	   Á     N+Ç ±,+¶ (¶ «,+¶ /¶ ¯,+¶ 5¶ ²,+¶ ;¶ µ,+¶ A¶ ¸,+¶ G¶ »,+¶ M¶ ¾,+¶ S¶ Á,+¶ Y¶ Ä±       2    B  C  F 
 G  H  I % J - K 5 L = M E N M O 
        N       N e f    N ¥ ¦  k     l   	 e   ¥    È    É Ê     Ë   Ì   "   p Í 	 #  Î	 Ï  Ñ@ Ò Ô Ö	
```
```java
Êþº¾   = 1  .br/com/legalconnect/commom/mapper/PessoaMapper  java/lang/Object INSTANCE 0Lbr/com/legalconnect/commom/mapper/PessoaMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable 
toResponseDTO f(Lbr/com/legalconnect/commom/model/Pessoa;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO; entity MethodParameters updateEntityFromDto e(Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;Lbr/com/legalconnect/commom/model/Pessoa;)V RuntimeInvisibleAnnotations Lorg/mapstruct/Mappings; value Lorg/mapstruct/Mapping; target id ignore    usuario 	enderecos source 	telefones $RuntimeInvisibleParameterAnnotations Lorg/mapstruct/MappingTarget; dto 
SourceFile PessoaMapper.java Lorg/mapstruct/Mapper; componentModel spring uses .Lbr/com/legalconnect/commom/mapper/UserMapper; 2Lbr/com/legalconnect/commom/mapper/EnderecoMapper;                	   ,      ¸ 
À ³ ±                                  G    [ @   s   Z !@   s "  Z !@   s #  Z !@   $s % s % &   	    '      	 (       )    *      +  ,s - .[ c /c 0
```
```java
Êþº¾   = Í  2br/com/legalconnect/commom/mapper/PessoaMapperImpl  java/lang/Object  .br/com/legalconnect/commom/mapper/PessoaMapper 
userMapper .Lbr/com/legalconnect/commom/mapper/UserMapper; RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; enderecoMapper 2Lbr/com/legalconnect/commom/mapper/EnderecoMapper; <init> ()V Code
   
  LineNumberTable LocalVariableTable this 4Lbr/com/legalconnect/commom/mapper/PessoaMapperImpl; 
toResponseDTO f(Lbr/com/legalconnect/commom/model/Pessoa;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO;
    9br/com/legalconnect/commom/dto/response/PessoaResponseDTO   builder V()Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;
  !   'br/com/legalconnect/commom/model/Pessoa " # getCpf ()Ljava/lang/String;
 % ' & Rbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder ( ) cpf h(Ljava/lang/String;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;
  + , - getDataNascimento ()Ljava/time/LocalDate;
 % / 0 1 dataNascimento k(Ljava/time/LocalDate;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;
  3 4 5 getEnderecos ()Ljava/util/Set;
  7 8 9 $enderecoSetToEnderecoResponseDTOList !(Ljava/util/Set;)Ljava/util/List;
 % ; < = 	enderecos f(Ljava/util/List;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;
  ? @ A getId ()Ljava/util/UUID;
 % C D E id f(Ljava/util/UUID;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;
  G H # getNomeCompleto
 % J K ) nomeCompleto
  M N 5 getTelefones P java/util/ArrayList
 O R 
 S (Ljava/util/Collection;)V
 % U V = 	telefones	  X  
  Z [ \ 
getUsuario )()Lbr/com/legalconnect/commom/model/User; ^ ` _ ,br/com/legalconnect/commom/mapper/UserMapper  a b(Lbr/com/legalconnect/commom/model/User;)Lbr/com/legalconnect/commom/dto/response/UserResponseDTO;
 % c d e usuario (Lbr/com/legalconnect/commom/dto/response/UserResponseDTO;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder;
 % g h i build =()Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO; entity )Lbr/com/legalconnect/commom/model/Pessoa; pessoaResponseDTO TLbr/com/legalconnect/commom/dto/response/PessoaResponseDTO$PessoaResponseDTOBuilder; set Ljava/util/Set; LocalVariableTypeTable #Ljava/util/Set<Ljava/lang/String;>; 
StackMapTable t 
java/util/Set MethodParameters updateEntityFromDto e(Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;Lbr/com/legalconnect/commom/model/Pessoa;)V
 y { z 7br/com/legalconnect/commom/dto/request/PessoaRequestDTO N | ()Ljava/util/List; s ~   clear s    addAll (Ljava/util/Collection;)Z
     setTelefones (Ljava/util/Set;)V  java/util/LinkedHashSet
  R
 y !
     setCpf (Ljava/lang/String;)V
 y +
     setDataNascimento (Ljava/time/LocalDate;)V
 y G
     setNomeCompleto dto 9Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO; list Ljava/util/List; $Ljava/util/List<Ljava/lang/String;>;  java/util/List 	Signature (Ljava/util/Set<Lbr/com/legalconnect/commom/model/Endereco;>;)Ljava/util/List<Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO;>; s £ ¤ ¥ size ()I
 O § 
 ¨ (I)V s ª « ¬ iterator ()Ljava/util/Iterator; ® ° ¯ java/util/Iterator ± ² next ()Ljava/lang/Object; ´ )br/com/legalconnect/commom/model/Endereco	  ¶   ¸ º ¹ 0br/com/legalconnect/commom/mapper/EnderecoMapper  » j(Lbr/com/legalconnect/commom/model/Endereco;)Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO;  ½ ¾ ¿ add (Ljava/lang/Object;)Z ® Á Â Ã hasNext ()Z endereco +Lbr/com/legalconnect/commom/model/Endereco; <Ljava/util/Set<Lbr/com/legalconnect/commom/model/Endereco;>; OLjava/util/List<Lbr/com/legalconnect/commom/dto/response/EnderecoResponseDTO;>; 
SourceFile PessoaMapperImpl.java *Lorg/springframework/stereotype/Component; InnerClasses PessoaResponseDTOBuilder !          	     
       	     
     
      /     *· ±                                   h+Ç °¸ M,+¶ ¶ $W,+¶ *¶ .W,*+¶ 2¶ 6¶ :W,+¶ >¶ BW,+¶ F¶ IW+¶ LN-Æ ,» OY-· Q¶ TW,*´ W+¶ Y¹ ] ¶ bW,¶ f°       6 
        # 
 %  &  ' ) ( 2 ) ; * @ + D , Q . c 0    *    h       h j k  
 ^ l m  @ ( n o  p     @ ( n q  r    ý J % s u    j    v w    #     b+Ç ±,¶ LÆ ++¶ xN-Æ ,¶ L¹ } ,¶ L-¹  W§  ,¶ § +¶ xN-Æ ,» Y-· ¶ ,+¶ ¶ ,+¶ ¶ ,+¶ ¶ ±       F    5  6  9  :  ;  <  = ) > , @ 1 B 4 D 9 E = F I I Q J Y K a L    4    b       b      b j k        9     p           9     r   
 ü & ú  u   	    j    8 9       ¡    á     G+Ç °» OY+¹ ¢ · ¦M+¹ © :§ ¹ ­ À ³N,*´ µ-¹ · ¹ ¼ W¹ À ÿÝ,°           O  P  S  T * U ; T E X    *    G       G n o   3    *  Ä Å  p       G n Æ   3  Ç  r    ÿ    s   ®   u    n    È    É 	     Ê   Ë   
  %  Ì 	
```
```java
Êþº¾   = /  ,br/com/legalconnect/commom/mapper/UserMapper  java/lang/Object INSTANCE .Lbr/com/legalconnect/commom/mapper/UserMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable toEntity `(Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;)Lbr/com/legalconnect/commom/model/User; RuntimeInvisibleAnnotations Lorg/mapstruct/Mapping; source senha target 	senhaHash dto MethodParameters 
toResponseDTO b(Lbr/com/legalconnect/commom/model/User;)Lbr/com/legalconnect/commom/dto/response/UserResponseDTO; entity updateEntityFromDto a(Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;Lbr/com/legalconnect/commom/model/User;)V Lorg/mapstruct/Mappings; value id ignore    $RuntimeInvisibleParameterAnnotations Lorg/mapstruct/MappingTarget; 
SourceFile UserMapper.java Lorg/mapstruct/Mapper; componentModel spring                	   ,      ¸ 
À ³ ±                            s  s                    ! "     )  #  $[ @   s % &Z '@   s  s  (   	    )      	         *    +      ,  -s .
```
```java
Êþº¾   = ¢  0br/com/legalconnect/commom/mapper/UserMapperImpl  java/lang/Object  ,br/com/legalconnect/commom/mapper/UserMapper <init> ()V Code
     LineNumberTable LocalVariableTable this 2Lbr/com/legalconnect/commom/mapper/UserMapperImpl; toEntity `(Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;)Lbr/com/legalconnect/commom/model/User;
    %br/com/legalconnect/commom/model/User   builder 5()Lbr/com/legalconnect/commom/model/User$UserBuilder;
    5br/com/legalconnect/commom/dto/request/UserRequestDTO   getSenha ()Ljava/lang/String;
  !   1br/com/legalconnect/commom/model/User$UserBuilder " # 	senhaHash G(Ljava/lang/String;)Lbr/com/legalconnect/commom/model/User$UserBuilder;
  % &  getId
 ( * ) java/util/UUID + , 
fromString $(Ljava/lang/String;)Ljava/util/UUID;
  . / 0 id O(Ljava/util/UUID;)Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;
  2 3  getCpf
  5 6 # cpf
  8 9  getEmail
  ; < # email
  > ?  
getFotoUrl
  A B # fotoUrl
  D E  getNomeCompleto
  G H # nomeCompleto
  J K  getTelefone
  M N # telefone
  P Q R build )()Lbr/com/legalconnect/commom/model/User; dto 7Lbr/com/legalconnect/commom/dto/request/UserRequestDTO; user 3Lbr/com/legalconnect/commom/model/User$UserBuilder; LocalVariableTypeTable 7Lbr/com/legalconnect/commom/model/User$UserBuilder<**>; 
StackMapTable MethodParameters 
toResponseDTO b(Lbr/com/legalconnect/commom/model/User;)Lbr/com/legalconnect/commom/dto/response/UserResponseDTO;
 ^ ` _ 7br/com/legalconnect/commom/dto/response/UserResponseDTO  a R()Lbr/com/legalconnect/commom/dto/response/UserResponseDTO$UserResponseDTOBuilder;
  2
 d f e Nbr/com/legalconnect/commom/dto/response/UserResponseDTO$UserResponseDTOBuilder 6 g d(Ljava/lang/String;)Lbr/com/legalconnect/commom/dto/response/UserResponseDTO$UserResponseDTOBuilder;
  8
 d j < g
  >
 d m B g
  o & p ()Ljava/util/UUID;
 d r / s b(Ljava/util/UUID;)Lbr/com/legalconnect/commom/dto/response/UserResponseDTO$UserResponseDTOBuilder;
  D
 d v H g
  J
 d y N g
 d { Q | ;()Lbr/com/legalconnect/commom/dto/response/UserResponseDTO; entity 'Lbr/com/legalconnect/commom/model/User; userResponseDTO PLbr/com/legalconnect/commom/dto/response/UserResponseDTO$UserResponseDTOBuilder; updateEntityFromDto a(Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;Lbr/com/legalconnect/commom/model/User;)V
     setSenhaHash (Ljava/lang/String;)V
     setCpf
     setEmail
     
setFotoUrl
     setNomeCompleto
     setTelefone 
SourceFile UserMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; InnerClasses UserResponseDTOBuilder UserBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder   )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder !            	   /     *· 
±            
                	   ã     X+Ç °¸ M,+¶ ¶ W+¶ $Æ ,+¶ $¸ '¶ -W,+¶ 1¶ 4W,+¶ 7¶ :W,+¶ =¶ @W,+¶ C¶ FW,+¶ I¶ LW,¶ O°       2         
      &  /  8   A ! J " S $ 
        X       X S T  
 N U V  W     
 N U X  Y   	 ü   Z    S    [ \  	   °     E+Ç °¸ ]M,+¶ b¶ cW,+¶ h¶ iW,+¶ k¶ lW,+¶ n¶ qW,+¶ t¶ uW,+¶ w¶ xW,¶ z°       * 
   )  *  - 
 /  0  1 % 2 . 3 7 4 @ 6 
        E       E } ~  
 ;    Y     Z    }       	        6+Ç ±,+¶ ¶ ,+¶ 1¶ ,+¶ 7¶ ,+¶ =¶ ,+¶ C¶ ,+¶ I¶ ±       & 	   ;  <  ? 
 @  A  B % C - D 5 E 
        6       6 S T    6 } ~  Y     Z   	 S   }                      d ^  	   	   ¡	
```
```java
Êþº¾   = q  9br/com/legalconnect/commom/model/Endereco$EnderecoBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder 
logradouro Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; numero complemento bairro cidade estado cep pais tipoEndereco 8Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco; pessoa )Lbr/com/legalconnect/commom/model/Pessoa; <init> ()V Code
     LineNumberTable LocalVariableTable this ;Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder; LocalVariableTypeTable CLbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder<TC;TB;>; O(Ljava/lang/String;)Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder; 	Signature (Ljava/lang/String;)TB;	  #  
  % & ' self =()Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder; MethodParameters	  * 	 	  , 
 	  .  	  0  	  2 
 	  4  	  6   u(Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder; =(Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)TB;	  :   f(Lbr/com/legalconnect/commom/model/Pessoa;)Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder; .(Lbr/com/legalconnect/commom/model/Pessoa;)TB;	  >   ()TB; build -()Lbr/com/legalconnect/commom/model/Endereco; ()TC; toString ()Ljava/lang/String;
  F C D
 H J I java/lang/String K L valueOf &(Ljava/lang/Object;)Ljava/lang/String;   N O P makeConcatWithConstants Ú(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  T @ A 
SourceFile 
Endereco.java ¹<C:Lbr/com/legalconnect/commom/model/Endereco;B:Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 Z \ [ $java/lang/invoke/StringConcatFactory O ] (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; Y ` Endereco.EnderecoBuilder(super=, logradouro=, numero=, complemento=, bairro=, cidade=, estado=, cep=, pais=, tipoEndereco=, pessoa=) InnerClasses c )br/com/legalconnect/commom/model/Endereco EnderecoBuilder f 6br/com/legalconnect/commom/model/Endereco$TipoEndereco TipoEndereco i )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder l %java/lang/invoke/MethodHandles$Lookup n java/lang/invoke/MethodHandles Lookup NestHost!     
              	            
                                    
                                                                   A     *· ±                                             !            P     
*+µ "*¶ $°                   
       
           
     (       	        !            P     
*+µ )*¶ $°                   
       
 	          
     (    	   
        !            P     
*+µ +*¶ $°                   
       
 
          
     (    
           !            P     
*+µ -*¶ $°                   
       
           
     (               !            P     
*+µ /*¶ $°                   
       
           
     (       
        !            P     
*+µ 1*¶ $°                   
       
 
          
     (    
           !            P     
*+µ 3*¶ $°                   
       
           
     (               !            P     
*+µ 5*¶ $°                   
       
           
     (        7       8            P     
*+µ 9*¶ $°                   
       
           
     (        ;       <            P     
*+µ =*¶ $°                   
       
           
     (      & '       ?         @ A       B          C D             t     8*· E*´ "*´ )*´ +*´ -*´ /*´ 1*´ 3*´ 5*´ 9¸ G*´ =¸ Gº M  °                   8            8    D & Q             %     *¶ $°                 A @ R             %     *¶ S°                   U    V      W         X     ^  _ a   "   b d	 e b g@  h j	 k m o  p    b
```
```java
Êþº¾   = $  =br/com/legalconnect/commom/model/Endereco$EnderecoBuilderImpl  9br/com/legalconnect/commom/model/Endereco$EnderecoBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this ?Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilderImpl; self A()Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build -()Lbr/com/legalconnect/commom/model/Endereco;  )br/com/legalconnect/commom/model/Endereco
     >(Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder;)V =()Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder;
     
SourceFile 
Endereco.java 	Signature §Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder<Lbr/com/legalconnect/commom/model/Endereco;Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilderImpl;>; InnerClasses EnderecoBuilder EnderecoBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = G  6br/com/legalconnect/commom/model/Endereco$TipoEndereco  java/lang/Enum RESIDENCIAL 8Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco; 	COMERCIAL 
ESCRITORIO COBRANCA ENTREGA OUTRO ENUM$VALUES 9[Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco; <clinit> ()V Code 
     <init> (Ljava/lang/String;I)V	     	     	     		    	  
	  # 
  	  &  	  (  
 LineNumberTable LocalVariableTable
   this 
$enum$name 
$enum$ordinal MethodParameters values ;()[Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;
 3 5 4 java/lang/System 6 7 	arraycopy *(Ljava/lang/Object;ILjava/lang/Object;II)V valueOf L(Ljava/lang/String;)Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;
  ; 8 < 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; name 
SourceFile 
Endereco.java 	Signature JLjava/lang/Enum<Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;>; InnerClasses D )br/com/legalconnect/commom/model/Endereco TipoEndereco NestHost@1     @    @    @    @ 	   @ 
   @      
           ³      {» Y· ³ » Y· ³ » Y· ³ » Y· ³ » Y!· ³ "» Y$· ³ %½ Y² SY² SY² SY² SY² "SY² %S³ '±    )       T 
 U  V ' W 4 X A Y N S *             1     *+· +±    )       S *        ,    /   	 -  .  	 0 1     6     ² 'YK*¾Y<½ YM¸ 2,°    )        *      	 8 9     *     
*¸ :À °    )        *      /    =   >    ? @    A B   
   C E@ F    C
```
```java
Êþº¾   =   )br/com/legalconnect/commom/model/Endereco  )br/com/legalconnect/common/dto/BaseEntity 
logradouro Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nullable     length   ÿ numero    complemento bairro   d cidade estado    cep   	 pais   2 tipoEndereco 8Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;  Ljakarta/persistence/Enumerated; value Ljakarta/persistence/EnumType; STRING 
tipo_endereco pessoa )Lbr/com/legalconnect/commom/model/Pessoa; Ljakarta/persistence/ManyToOne; fetch Ljakarta/persistence/FetchType; LAZY  Ljakarta/persistence/JoinColumn; 	pessoa_id <init> >(Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder;)V 	Signature B(Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  1 ) 2 @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V 4 Brasil	  6  	 8 : 9 9br/com/legalconnect/commom/model/Endereco$EnderecoBuilder  	  :	 8 =  	  =	 8 @  	  @	 8 C  	  C	 8 F  	  F	 8 I  	  I	 8 L  	  L	 8 6	 8 P  	  P	 8 S ! "	  S LineNumberTable LocalVariableTable this +Lbr/com/legalconnect/commom/model/Endereco; b ;Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder; LocalVariableTypeTable ?Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder<**>; MethodParameters builder =()Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder; A()Lbr/com/legalconnect/commom/model/Endereco$EnderecoBuilder<**>; b =br/com/legalconnect/commom/model/Endereco$EnderecoBuilderImpl
 a d ) e ()V 
getLogradouro ()Ljava/lang/String; 	getNumero getComplemento 	getBairro 	getCidade 	getEstado getCep getPais getTipoEndereco :()Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco; 	getPessoa +()Lbr/com/legalconnect/commom/model/Pessoa; 
setLogradouro (Ljava/lang/String;)V 	setNumero setComplemento 	setBairro 	setCidade 	setEstado setCep setPais setTipoEndereco ;(Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)V 	setPessoa ,(Lbr/com/legalconnect/commom/model/Pessoa;)V
  d ô(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;Lbr/com/legalconnect/commom/model/Pessoa;)V 
SourceFile 
Endereco.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_endereco InnerClasses EnderecoBuilder EnderecoBuilderImpl  6br/com/legalconnect/commom/model/Endereco$TipoEndereco TipoEndereco  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder NestMembers !     
            	s  
Z  I 
            	s  
Z  I             	s  I 
            	s  
Z  I             	s  
Z  I             	s  
Z  I             	s  
Z  I             	s  
Z  I              e     	s   
Z  I   ! "       #  $e % & '  	s (   ) *  +    , -     .   /   ª     \*+· 0*3µ 5*+´ 7µ ;*+´ <µ >*+´ ?µ A*+´ Bµ D*+´ Eµ G*+´ Hµ J*+´ Kµ M*+´ Nµ 5*+´ Oµ Q*+´ Rµ T±    U         7   V       \ W X     \ Y Z  [       \ Y \  ]    Y  	 ^ _  +    ` -     .   /   (      » aY· c°    U        V       f g  -     .   /   /     *´ ;°    U        V        W X    h g  -     .   /   /     *´ >°    U        V        W X    i g  -     .   /   /     *´ A°    U        V        W X    j g  -     .   /   /     *´ D°    U        V        W X    k g  -     .   /   /     *´ G°    U        V        W X    l g  -     .   /   /     *´ J°    U        V        W X    m g  -     .   /   /     *´ M°    U        V        W X    n g  -     .   /   /     *´ 5°    U        V        W X    o p  -     .   /   /     *´ Q°    U        V        W X    q r  -     .   /   /     *´ T°    U        V        W X    s t  -     .   /   :     *+µ ;±    U        V        W X         ]       u t  -     .   /   :     *+µ >±    U        V        W X         ]       v t  -     .   /   :     *+µ A±    U        V        W X         ]       w t  -     .   /   :     *+µ D±    U        V        W X         ]       x t  -     .   /   :     *+µ G±    U        V        W X         ]       y t  -     .   /   :     *+µ J±    U        V        W X         ]       z t  -     .   /   :     *+µ M±    U        V        W X         ]       { t  -     .   /   :     *+µ 5±    U        V        W X         ]       | }  -     .   /   :     *+µ Q±    U        V        W X         ]       ~   -     .   /   :     *+µ T±    U        V        W X      ! "  ]    !   ) e  -     .   /   =     *· *3µ 5±    U         7 
  V        W X    )   -     .   /   Ú     D*· *3µ 5*+µ ;*,µ >*-µ A*µ D*µ G*µ J*µ M*µ 5*	µ Q*
µ T±    U         7 
  V   p    D W X     D      D      D      D      D      D      D      D      D   	   D ! " 
 ]   )
                   !                  	s     "  8  	 a      @   	      8 a 
```
```java
Êþº¾   = h  5br/com/legalconnect/commom/model/Pessoa$PessoaBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder usuario 'Lbr/com/legalconnect/commom/model/User; RuntimeInvisibleAnnotations Llombok/Generated; nomeCompleto Ljava/lang/String; cpf dataNascimento Ljava/time/LocalDate; 	enderecos Ljava/util/Set; 	Signature <Ljava/util/Set<Lbr/com/legalconnect/commom/model/Endereco;>; 	telefones #Ljava/util/Set<Ljava/lang/String;>; <init> ()V Code
     LineNumberTable LocalVariableTable this 7Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder; LocalVariableTypeTable ?Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder<TC;TB;>; `(Lbr/com/legalconnect/commom/model/User;)Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder; ,(Lbr/com/legalconnect/commom/model/User;)TB;	  "  
  $ % & self 9()Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder; MethodParameters K(Ljava/lang/String;)Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder; (Ljava/lang/String;)TB;	  + 	 
	  -  
 N(Ljava/time/LocalDate;)Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder; (Ljava/time/LocalDate;)TB;	  1  
 H(Ljava/util/Set;)Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder; A(Ljava/util/Set<Lbr/com/legalconnect/commom/model/Endereco;>;)TB;	  5   ((Ljava/util/Set<Ljava/lang/String;>;)TB;	  8   ()TB; build +()Lbr/com/legalconnect/commom/model/Pessoa; ()TC; toString ()Ljava/lang/String;
  @ = >
 B D C java/lang/String E F valueOf &(Ljava/lang/Object;)Ljava/lang/String;   H I J makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  N : ; 
SourceFile Pessoa.java ³<C:Lbr/com/legalconnect/commom/model/Pessoa;B:Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 T V U $java/lang/invoke/StringConcatFactory I W (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; S Z kPessoa.PessoaBuilder(super=, usuario=, nomeCompleto=, cpf=, dataNascimento=, enderecos=, telefones=) InnerClasses ] 'br/com/legalconnect/commom/model/Pessoa 
PessoaBuilder ` )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder c %java/lang/invoke/MethodHandles$Lookup e java/lang/invoke/MethodHandles Lookup NestHost!                   	 
            
            
                                                    A     *· ±           *                                              P     
*+µ !*¶ #°           *        
       
           
     '       	 (      )            P     
*+µ **¶ #°           *        
       
 	 
         
     '    	    (      )            P     
*+µ ,*¶ #°           *        
       
  
         
     '        .      /            P     
*+µ 0*¶ #°           *        
       
  
         
     '        2      3            Z     
*+µ 4*¶ #°           *        
       
           
       
    '        2      6            Z     
*+µ 7*¶ #°           *        
       
           
       
    '      % &      9         : ;      <          = >             j     .*· ?*´ !¸ A*´ **´ ,*´ 0¸ A*´ 4¸ A*´ 7¸ Aº G  °           *        .            .    D % K             %     *¶ #°                 A : L             %     *¶ M°                   O    P     Q         R     X  Y [      \ ^	  _ a	 b d f  g    \
```
```java
Êþº¾   = $  9br/com/legalconnect/commom/model/Pessoa$PessoaBuilderImpl  5br/com/legalconnect/commom/model/Pessoa$PessoaBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this ;Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilderImpl; self =()Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build +()Lbr/com/legalconnect/commom/model/Pessoa;  'br/com/legalconnect/commom/model/Pessoa
     :(Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder;)V 9()Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder;
     
SourceFile Pessoa.java 	Signature Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder<Lbr/com/legalconnect/commom/model/Pessoa;Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilderImpl;>; InnerClasses 
PessoaBuilder PessoaBuilderImpl NestHost 0               /     *· ±    
       *          
                        *°             
                  3     	» Y*· °    
       *        	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   =   'br/com/legalconnect/commom/model/Pessoa  )br/com/legalconnect/common/dto/BaseEntity usuario 'Lbr/com/legalconnect/commom/model/User; RuntimeVisibleAnnotations Ljakarta/persistence/OneToOne; fetch Ljakarta/persistence/FetchType; LAZY cascade !Ljakarta/persistence/CascadeType; ALL  Ljakarta/persistence/JoinColumn; name user_id referencedColumnName id nullable     unique    nomeCompleto Ljava/lang/String; Ljakarta/persistence/Column; 
nome_completo length   ÿ cpf    dataNascimento Ljava/time/LocalDate; data_nascimento 	enderecos Ljava/util/Set; 	Signature <Ljava/util/Set<Lbr/com/legalconnect/commom/model/Endereco;>; Ljakarta/persistence/OneToMany; mappedBy pessoa 
orphanRemoval 	telefones #Ljava/util/Set<Ljava/lang/String;>; 'Ljakarta/persistence/ElementCollection; %Ljakarta/persistence/CollectionTable; tb_pessoa_telefones joinColumns 	pessoa_id numero_telefone    <init> :(Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder;)V >(Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  ; 4 < @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V > java/util/HashSet
 = @ 4 A ()V	  C # $	  E + $	 G I H 5br/com/legalconnect/commom/model/Pessoa$PessoaBuilder  	  I	 G L  	  L	 G O  	  O	 G R   !	  R	 G C	 G E LineNumberTable LocalVariableTable this )Lbr/com/legalconnect/commom/model/Pessoa; b 7Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder; LocalVariableTypeTable ;Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder<**>; MethodParameters builder 9()Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder; =()Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder<**>; c 9br/com/legalconnect/commom/model/Pessoa$PessoaBuilderImpl
 b @ 
getUsuario )()Lbr/com/legalconnect/commom/model/User; getNomeCompleto ()Ljava/lang/String; getCpf getDataNascimento ()Ljava/time/LocalDate; getEnderecos ()Ljava/util/Set; >()Ljava/util/Set<Lbr/com/legalconnect/commom/model/Endereco;>; getTelefones %()Ljava/util/Set<Ljava/lang/String;>; 
setUsuario *(Lbr/com/legalconnect/commom/model/User;)V setNomeCompleto (Ljava/lang/String;)V setCpf setDataNascimento (Ljava/time/LocalDate;)V setEnderecos (Ljava/util/Set;)V ?(Ljava/util/Set<Lbr/com/legalconnect/commom/model/Endereco;>;)V setTelefones &(Ljava/util/Set<Ljava/lang/String;>;)V
  @ (Lbr/com/legalconnect/commom/model/User;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/util/Set;Ljava/util/Set;)V Â(Lbr/com/legalconnect/commom/model/User;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/util/Set<Lbr/com/legalconnect/commom/model/Endereco;>;Ljava/util/Set<Ljava/lang/String;>;)V 
SourceFile Pessoa.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; 	tb_pessoa !Ljakarta/persistence/Inheritance; strategy %Ljakarta/persistence/InheritanceType; JOINED InnerClasses 
PessoaBuilder PessoaBuilderImpl  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder NestMembers !             /    	e 
  [ e 
    s  s  Z  Z             s  Z  I             s  Z  Z  I     !         s "  # $  %    &    !  '  (s ) [ e 
  *Z  	e 
   + $  %    ,    3  -  	e 
  .  s / 0[ @   s 1   s 2 I 3   4 5  %    6 7     8   9        L*+· :*» =Y· ?µ B*» =Y· ?µ D*+´ Fµ J*+´ Kµ M*+´ Nµ P*+´ Qµ S*+´ Tµ B*+´ Uµ D±    V       *  K  T  * W       L X Y     L Z [  \       L Z ]  ^    Z  	 _ `  %    a 7     8   9   (      » bY· d°    V       * W       e f  7     8   9   /     *´ J°    V       & W        X Y    g h  7     8   9   /     *´ M°    V       & W        X Y    i h  7     8   9   /     *´ P°    V       & W        X Y    j k  7     8   9   /     *´ S°    V       & W        X Y    l m  %    n 7     8   9   /     *´ B°    V       & W        X Y    o m  %    p 7     8   9   /     *´ D°    V       & W        X Y    q r  7     8   9   :     *+µ J±    V       ' W        X Y         ^       s t  7     8   9   :     *+µ M±    V       ' W        X Y         ^       u t  7     8   9   :     *+µ P±    V       ' W        X Y         ^       v w  7     8   9   :     *+µ S±    V       ' W        X Y        !  ^        x y  %    z 7     8   9   L     *+µ B±    V       ' W        X Y      # $  \        # &  ^    #   { y  %    | 7     8   9   L     *+µ D±    V       ' W        X Y      + $  \        + ,  ^    +   4 A  7     8   9   Q     *· }*» =Y· ?µ B*» =Y· ?µ D±    V       (  K  T  ( W        X Y    4 ~  %     7     8   9   Ê     <*· }*» =Y· ?µ B*» =Y· ?µ D*+µ J*,µ M*-µ P*µ S*µ B*µ D±    V       )  K  T  ) W   H    < X Y     <      <      <      <   !    < # $    < + $  \       < # &    < + ,  ^             #  +                  s    e        G  	 b      	      G b
```
```java
Êþº¾   = V  1br/com/legalconnect/commom/model/User$UserBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder nomeCompleto Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; email cpf telefone 	senhaHash fotoUrl <init> ()V Code
     LineNumberTable LocalVariableTable this 3Lbr/com/legalconnect/commom/model/User$UserBuilder; LocalVariableTypeTable ;Lbr/com/legalconnect/commom/model/User$UserBuilder<TC;TB;>; G(Ljava/lang/String;)Lbr/com/legalconnect/commom/model/User$UserBuilder; 	Signature (Ljava/lang/String;)TB;	    
     ! self 5()Lbr/com/legalconnect/commom/model/User$UserBuilder; MethodParameters	  $ 	 	  & 
 	  (  	  *  	  , 
  ()TB; build )()Lbr/com/legalconnect/commom/model/User; ()TC; toString ()Ljava/lang/String;
  4 1 2   6 7 8 makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  < . / 
SourceFile 	User.java ­<C:Lbr/com/legalconnect/commom/model/User;B:Lbr/com/legalconnect/commom/model/User$UserBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 B D C $java/lang/invoke/StringConcatFactory 7 E (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; A H ]User.UserBuilder(super=, nomeCompleto=, email=, cpf=, telefone=, senhaHash=, fotoUrl=) InnerClasses K %br/com/legalconnect/commom/model/User UserBuilder N )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder Q %java/lang/invoke/MethodHandles$Lookup S java/lang/invoke/MethodHandles Lookup NestHost!                   	            
                                    
                   A     *· ±                                                        P     
*+µ *¶ °                   
       
           
     "       	                   P     
*+µ #*¶ °                   
       
 	          
     "    	   
                   P     
*+µ %*¶ °                   
       
 
          
     "    
                      P     
*+µ '*¶ °                   
       
           
     "                          P     
*+µ )*¶ °                   
       
           
     "       
                   P     
*+µ +*¶ °                   
       
 
          
     "    
    !      -         . /      0          1 2             ^     "*· 3*´ *´ #*´ %*´ '*´ )*´ +º 5  °                   "            "    D   9             %     *¶ °                 A . :             %     *¶ ;°                   =    >     ?         @     F  G I      J L	  M O	 P R T  U    J
```
```java
Êþº¾   = $  5br/com/legalconnect/commom/model/User$UserBuilderImpl  1br/com/legalconnect/commom/model/User$UserBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this 7Lbr/com/legalconnect/commom/model/User$UserBuilderImpl; self 9()Lbr/com/legalconnect/commom/model/User$UserBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build )()Lbr/com/legalconnect/commom/model/User;  %br/com/legalconnect/commom/model/User
     6(Lbr/com/legalconnect/commom/model/User$UserBuilder;)V 5()Lbr/com/legalconnect/commom/model/User$UserBuilder;
     
SourceFile 	User.java 	Signature Lbr/com/legalconnect/commom/model/User$UserBuilder<Lbr/com/legalconnect/commom/model/User;Lbr/com/legalconnect/commom/model/User$UserBuilderImpl;>; InnerClasses UserBuilder UserBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = C  0br/com/legalconnect/commom/model/User$UserStatus  java/lang/Enum ACTIVE 2Lbr/com/legalconnect/commom/model/User$UserStatus; INACTIVE PENDING_APPROVAL REJECTED PENDING ENUM$VALUES 3[Lbr/com/legalconnect/commom/model/User$UserStatus; <clinit> ()V Code 
     <init> (Ljava/lang/String;I)V	     	     	     		   	  
	  " 
 	  $   LineNumberTable LocalVariableTable
   this 
$enum$name 
$enum$ordinal MethodParameters values 5()[Lbr/com/legalconnect/commom/model/User$UserStatus;
 / 1 0 java/lang/System 2 3 	arraycopy *(Ljava/lang/Object;ILjava/lang/Object;II)V valueOf F(Ljava/lang/String;)Lbr/com/legalconnect/commom/model/User$UserStatus;
  7 4 8 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; name 
SourceFile 	User.java 	Signature DLjava/lang/Enum<Lbr/com/legalconnect/commom/model/User$UserStatus;>; InnerClasses @ %br/com/legalconnect/commom/model/User 
UserStatus NestHost@1     @    @    @    @ 	   @ 
          
            g» Y· ³ » Y· ³ » Y· ³ » Y· ³ » Y · ³ !½ Y² SY² SY² SY² SY² !S³ #±    %   
    F A E &             1     *+· '±    %       E &        (    +   	 )  *  	 , -     6     ² #YK*¾Y<½ YM¸ .,°    %        &      	 4 5     *     
*¸ 6À °    %        &      +    9   :    ; <    = >   
   ? A@ B    ?
```
```java
Êþº¾   = ?  .br/com/legalconnect/commom/model/User$UserType  java/lang/Enum CLIENTE 0Lbr/com/legalconnect/commom/model/User$UserType; ADVOGADO PLATAFORMA_ADMIN SOCIO ENUM$VALUES 1[Lbr/com/legalconnect/commom/model/User$UserType; <clinit> ()V Code 
     <init> (Ljava/lang/String;I)V	     	     	     		   	 	    
  LineNumberTable LocalVariableTable
   this 
$enum$name 
$enum$ordinal MethodParameters values 3()[Lbr/com/legalconnect/commom/model/User$UserType;
 + - , java/lang/System . / 	arraycopy *(Ljava/lang/Object;ILjava/lang/Object;II)V valueOf D(Ljava/lang/String;)Lbr/com/legalconnect/commom/model/User$UserType;
  3 0 4 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; name 
SourceFile 	User.java 	Signature BLjava/lang/Enum<Lbr/com/legalconnect/commom/model/User$UserType;>; InnerClasses < %br/com/legalconnect/commom/model/User UserType NestHost@1     @    @    @    @ 	    
       
           T» Y· ³ » Y· ³ » Y· ³ » Y· ³ ½ Y² SY² SY² SY² S³ ±    !       : 
 ;  < ' = 4 9 "             1     *+· #±    !       9 "        $    '   	 %  &  	 ( )     6     ² YK*¾Y<½ YM¸ *,°    !        "      	 0 1     *     
*¸ 2À °    !        "      '    5   6    7 8    9 :   
   ; =@ >    ;
```
```java
Êþº¾   =   %br/com/legalconnect/commom/model/User  )br/com/legalconnect/common/dto/BaseEntity nomeCompleto Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name 
nome_completo nullable     length   ÿ email unique    cpf    telefone    	senhaHash 
senha_hash columnDefinition TEXT fotoUrl foto_url <init> 6(Lbr/com/legalconnect/commom/model/User$UserBuilder;)V 	Signature :(Lbr/com/legalconnect/commom/model/User$UserBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  $  % @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	 ' ) ( 1br/com/legalconnect/commom/model/User$UserBuilder  	  )	 ' ,  	  ,	 ' /  	  /	 ' 2  	  2	 ' 5  	  5	 ' 8  	  8 LineNumberTable LocalVariableTable this 'Lbr/com/legalconnect/commom/model/User; b 3Lbr/com/legalconnect/commom/model/User$UserBuilder; LocalVariableTypeTable 7Lbr/com/legalconnect/commom/model/User$UserBuilder<**>; MethodParameters builder 5()Lbr/com/legalconnect/commom/model/User$UserBuilder; 9()Lbr/com/legalconnect/commom/model/User$UserBuilder<**>; G 5br/com/legalconnect/commom/model/User$UserBuilderImpl
 F I  J ()V getNomeCompleto ()Ljava/lang/String; getEmail getCpf getTelefone getSenhaHash 
getFotoUrl setNomeCompleto (Ljava/lang/String;)V setEmail setCpf setTelefone setSenhaHash 
setFotoUrl
  I o(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V equals (Ljava/lang/Object;)Z
  ^ _ \ canEqual
 a c b java/lang/Object [ \
  e K L
  g M L
  i N L
  k O L
  m P L
  o Q L o Ljava/lang/Object; other this$nomeCompleto other$nomeCompleto 
this$email other$email this$cpf 	other$cpf 
this$telefone other$telefone this$senhaHash other$senhaHash this$fotoUrl 
other$fotoUrl 
StackMapTable hashCode ()I
 a    PRIME I result 
$nomeCompleto $email $cpf 	$telefone 
$senhaHash $fotoUrl 
SourceFile 	User.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_user InnerClasses UserBuilder UserBuilderImpl  0br/com/legalconnect/commom/model/User$UserStatus 
UserStatus  .br/com/legalconnect/commom/model/User$UserType UserType  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder NestMembers !                 	s 
 Z  
I             	s  Z  Z  
I             	s  Z  Z  
I             	s  
I             	s  Z  s             	s  s                  !   "   |     6*+· #*+´ &µ **+´ +µ -*+´ .µ 0*+´ 1µ 3*+´ 4µ 6*+´ 7µ 9±    :        ;       6 < =     6 > ?  @       6 > A  B    >  	 C D      E       !   "   (      » FY· H°    :        ;       K L        !   "   /     *´ *°    :        ;        < =    M L        !   "   /     *´ -°    :        ;        < =    N L        !   "   /     *´ 0°    :        ;        < =    O L        !   "   /     *´ 3°    :        ;        < =    P L        !   "   /     *´ 6°    :        ;        < =    Q L        !   "   /     *´ 9°    :        ;        < =    R S        !   "   :     *+µ *±    :        ;        < =         B       T S        !   "   :     *+µ -±    :        ;        < =         B       U S        !   "   :     *+µ 0±    :        ;        < =         B       V S        !   "   :     *+µ 3±    :        ;        < =         B       W S        !   "   :     *+µ 6±    :        ;        < =         B       X S        !   "   :     *+µ 9±    :        ;        < =         B        J        !   "   /     *· Y±    :        ;        < =     Z        !   "        &*· Y*+µ **,µ -*-µ 0*µ 3*µ 6*µ 9±    :        ;   H    & < =     &      &      &      &      &      &    B                 [ \        !   "      +*¦ ¬+Á  ¬+À M,*¶ ] ¬*+· ` ¬*¶ dN,¶ d:-Ç Æ § -¶ ` ¬*¶ f:,¶ f:Ç Æ § 
¶ ` ¬*¶ h:,¶ h:Ç Æ § 
¶ ` ¬*¶ j:	,¶ j:
	Ç 
Æ § 
	
¶ ` ¬*¶ l:,¶ l:Ç Æ § 
¶ ` ¬*¶ n:
,¶ n:
Ç Æ § 

¶ ` ¬¬    :        ;       < =     p q   ñ r =  . Ø s q  4 Ò t q  Q µ u q  W ¯ v q  v  w q  |  x q   k y q 	 ¡ e z q 
 À F { q  Æ @ | q  å ! } q 
 ë  ~ q     M ü  	ý  a aý  a a	ý  a a	ý  a a	ý  a a	ý  a a	 B    p   _ \        !   "   9     +Á ¬    :        ;        < =      r q  B    r            !   "  K  	   ©;<*· =*¶ dN;h-Ç +§ -¶ `=*¶ f:;hÇ +§ ¶ `=*¶ h:;hÇ +§ ¶ `=*¶ j:;hÇ +§ ¶ `=*¶ l:;hÇ +§ ¶ `=*¶ n:;hÇ +§ ¶ `=¬    :        ;   \ 	   © < =    ¦     ¡    
   q  &   q  A h  q  \ M  q  w 2  q     q    " ÿ    a ÿ    a ÿ    a a ÿ    a a ÿ    a a a ÿ    a a a ÿ    a a a a ÿ    a a a a ÿ    a a a a a ÿ    a a a a a ÿ  	  a a a a a a ÿ  	  a a a a a a                  	s     *  '  	 F      @   @   	    
  ' F  
```
```java
Êþº¾   =   6br/com/legalconnect/commom/repository/PessoaRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository existsByCpf (Ljava/lang/String;)Z cpf MethodParameters findByUsuarioId &(Ljava/util/UUID;)Ljava/util/Optional; 	Signature Q(Ljava/util/UUID;)Ljava/util/Optional<Lbr/com/legalconnect/commom/model/Pessoa;>; userId 	findByCpf ((Ljava/lang/String;)Ljava/util/Optional; S(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/commom/model/Pessoa;>; 
SourceFile PessoaRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/commom/model/Pessoa;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           
    	      
     
          
     
    	         
            
```
```java
Êþº¾   =   4br/com/legalconnect/commom/repository/UserRepository  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository findByEmail ((Ljava/lang/String;)Ljava/util/Optional; 	Signature Q(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/commom/model/User;>; email MethodParameters 
existsByEmail (Ljava/lang/String;)Z 
SourceFile UserRepository.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/commom/model/User;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
                	            
```
```java
Êþº¾   = :  /br/com/legalconnect/commom/service/EmailService  java/lang/Object log Lorg/slf4j/Logger; <clinit> ()V Code
  
  org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>
     this 1Lbr/com/legalconnect/commom/service/EmailService; sendActivationEmail '(Ljava/lang/String;Ljava/lang/String;)V  0Simulando envio de e-mail de ativaÃ§Ã£o para: {}     org/slf4j/Logger ! " info '(Ljava/lang/String;Ljava/lang/Object;)V $ Link de AtivaÃ§Ã£o: {} & 2E-mail de ativaÃ§Ã£o simulado enviado com sucesso.  ( ! ) (Ljava/lang/String;)V toEmail Ljava/lang/String; activationLink MethodParameters  sendAppointmentConfirmationEmail 0 BSimulando envio de e-mail de confirmaÃ§Ã£o de agendamento para: {} 2 Detalhes do Agendamento: {} 4 DE-mail de confirmaÃ§Ã£o de agendamento simulado enviado com sucesso. details 
SourceFile EmailService.java RuntimeVisibleAnnotations (Lorg/springframework/stereotype/Service; !                	   )      	¸ 
³ ±                      	   /     *· ±           
                 	   k     !² +¹  ² #,¹  ² %¹ ' ±               !   "         !       ! * +    ! , +  -   	 *   ,    .   	   k     !² /+¹  ² 1,¹  ² 3¹ ' ±           +  ,  -   .         !       ! * +    ! 5 +  -   	 *   5    6    7 8     9  
```
```java
Êþº¾   =ø  0br/com/legalconnect/commom/service/PessoaService  java/lang/Object pessoaRepository 8Lbr/com/legalconnect/commom/repository/PessoaRepository; userRepository 6Lbr/com/legalconnect/commom/repository/UserRepository; pessoaMapper 0Lbr/com/legalconnect/commom/mapper/PessoaMapper; 
userMapper .Lbr/com/legalconnect/commom/mapper/UserMapper; <init> Ï(Lbr/com/legalconnect/commom/repository/PessoaRepository;Lbr/com/legalconnect/commom/repository/UserRepository;Lbr/com/legalconnect/commom/mapper/PessoaMapper;Lbr/com/legalconnect/commom/mapper/UserMapper;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
   
  ()V	    	    	   	 
	     LineNumberTable LocalVariableTable this 2Lbr/com/legalconnect/commom/service/PessoaService; MethodParameters createPessoa d(Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;)Lbr/com/legalconnect/commom/model/Pessoa; #Ljakarta/transaction/Transactional;
 & ( ' 7br/com/legalconnect/commom/dto/request/PessoaRequestDTO ) * getCpf ()Ljava/lang/String; , . - 6br/com/legalconnect/commom/repository/PessoaRepository / 0 existsByCpf (Ljava/lang/String;)Z 2 6br/com/legalconnect/common/exception/BusinessException	 4 6 5 .br/com/legalconnect/common/exception/ErrorCode 7 8 
CPF_DUPLICADO 0Lbr/com/legalconnect/common/exception/ErrorCode;	 : < ; #org/springframework/http/HttpStatus = > CONFLICT %Lorg/springframework/http/HttpStatus;
 1 @ 
 A j(Lbr/com/legalconnect/common/exception/ErrorCode;Lorg/springframework/http/HttpStatus;Ljava/lang/String;)V
 & C D E 
getUsuario 9()Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;
 G I H 5br/com/legalconnect/commom/dto/request/UserRequestDTO J * getEmail L N M 4br/com/legalconnect/commom/repository/UserRepository O 0 
existsByEmail	 4 Q R 8 EMAIL_DUPLICADO T %br/com/legalconnect/commom/model/User
 S 
 G W X * getId
 Z \ [ java/util/UUID ] ^ 
fromString $(Ljava/lang/String;)Ljava/util/UUID;
 S ` a b setId (Ljava/util/UUID;)V
 d f e 'br/com/legalconnect/commom/model/Pessoa g h builder 9()Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder;
 j l k 5br/com/legalconnect/commom/model/Pessoa$PessoaBuilder m n usuario `(Lbr/com/legalconnect/commom/model/User;)Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder;
 & p q * getNomeCompleto
 j s t u nomeCompleto K(Ljava/lang/String;)Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder;
 j w x u cpf
 & z { | getDataNascimento ()Ljava/time/LocalDate;
 j ~   dataNascimento N(Ljava/time/LocalDate;)Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder;  java/util/HashSet
 &    getTelefones ()Ljava/util/List;
   
  (Ljava/util/Collection;)V
 j    	telefones H(Ljava/util/Set;)Lbr/com/legalconnect/commom/model/Pessoa$PessoaBuilder;
 j    build +()Lbr/com/legalconnect/commom/model/Pessoa;
 &    getEnderecos    java/util/List   isEmpty ()Z     stream ()Ljava/util/stream/Stream;     ¡ ¢ apply H(Lbr/com/legalconnect/commom/model/Pessoa;)Ljava/util/function/Function; ¤ ¦ ¥ java/util/stream/Stream § ¨ map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 ª ¬ « java/util/stream/Collectors ­ ® toSet ()Ljava/util/stream/Collector; ¤ ° ± ² collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; ´ 
java/util/Set
 d ¶ · ¸ setEnderecos (Ljava/util/Set;)V , º » ¼ save &(Ljava/lang/Object;)Ljava/lang/Object; pessoaRequestDTO 9Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO; newUser 'Lbr/com/legalconnect/commom/model/User; 	newPessoa )Lbr/com/legalconnect/commom/model/Pessoa; 	enderecos Ljava/util/Set; LocalVariableTypeTable <Ljava/util/Set<Lbr/com/legalconnect/commom/model/Endereco;>; 
StackMapTable findPessoaById M(Ljava/util/UUID;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO; , Ë Ì Í findById ((Ljava/lang/Object;)Ljava/util/Optional;  Ï Ð Ñ get ()Ljava/util/function/Supplier;
 Ó Õ Ô java/util/Optional Ö × orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; Ù Û Ú .br/com/legalconnect/commom/mapper/PessoaMapper Ü Ý 
toResponseDTO f(Lbr/com/legalconnect/commom/model/Pessoa;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO; id Ljava/util/UUID; pessoa updatePessoa (Ljava/util/UUID;Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;)Lbr/com/legalconnect/commom/dto/response/PessoaResponseDTO;  Ï
 d (
 æ è ç java/lang/String é ê equals (Ljava/lang/Object;)Z	 4 ì í 8 DADOS_INVALIDOS	 : ï ð > BAD_REQUEST ò 8NÃ£o Ã© permitido alterar o CPF de uma pessoa existente.
 d ô D õ )()Lbr/com/legalconnect/commom/model/User;
 S I ø ú ù ,br/com/legalconnect/commom/mapper/UserMapper û ü updateEntityFromDto a(Lbr/com/legalconnect/commom/dto/request/UserRequestDTO;Lbr/com/legalconnect/commom/model/User;)V L º Ù ÿ û  e(Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;Lbr/com/legalconnect/commom/model/Pessoa;)V
 d  ()Ljava/util/Set;  test Y(Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;)Ljava/util/function/Predicate; ³	
 removeIf !(Ljava/util/function/Predicate;)Z 
 iterator ()Ljava/util/Iterator; java/util/Iterator next ()Ljava/lang/Object; 9br/com/legalconnect/commom/dto/request/EnderecoRequestDTO
 W )br/com/legalconnect/commom/model/Endereco
 
 * 
getLogradouro
 !" 
setLogradouro (Ljava/lang/String;)V
$% * 	getNumero
'(" 	setNumero
*+ * getComplemento
-." setComplemento
01 * 	getBairro
34" 	setBairro
67 * 	getCidade
9:" 	setCidade
<= * 	getEstado
?@" 	setEstado
BC * getCep
EF" setCep
HI * getPaisK Brasil
MN" setPais
PQR getTipoEndereco :()Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;
TUV setTipoEndereco ;(Lbr/com/legalconnect/commom/model/Endereco$TipoEndereco;)V
XYZ 	setPessoa ,(Lbr/com/legalconnect/commom/model/Pessoa;)V ³\] ê add ³  `a [(Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;)Ljava/util/function/Predicate; ¤cde filter 9(Ljava/util/function/Predicate;)Ljava/util/stream/Stream; ¤ghi 	findFirst ()Ljava/util/Optional; klm accept Z(Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;)Ljava/util/function/Consumer;
 Óopq 	ifPresent  (Ljava/util/function/Consumer;)Vst  hasNext existingPessoa existingUser userRequestDTO 7Lbr/com/legalconnect/commom/dto/request/UserRequestDTO; dto ;Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO; newEndereco +Lbr/com/legalconnect/commom/model/Endereco; deletePessoa , ê 
existsById	 4 8 ENTIDADE_NAO_ENCONTRADA	 : > 	NOT_FOUND &Pessoa nÃ£o encontrada para deleÃ§Ã£o. , 
deleteById (Ljava/lang/Object;)V findPessoaByCpf ((Ljava/lang/String;)Ljava/util/Optional; 	Signature i(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/advogado/domain/modal/entity/LocalAtuacao;>; 'java/lang/UnsupportedOperationException &Unimplemented method 'findPessoaByCpf'
 
" Ljava/lang/String; findPessoaByEmail (Unimplemented method 'findPessoaByEmail' email lambda$0 (Lbr/com/legalconnect/commom/model/Pessoa;Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;)Lbr/com/legalconnect/commom/model/Endereco; endereco lambda$1 :()Lbr/com/legalconnect/common/exception/BusinessException;¢ Pessoa nÃ£o encontrada. lambda$2¥ *Pessoa nÃ£o encontrada para atualizaÃ§Ã£o. lambda$3 g(Lbr/com/legalconnect/commom/dto/request/PessoaRequestDTO;Lbr/com/legalconnect/commom/model/Endereco;)Z ©ª K(Lbr/com/legalconnect/commom/model/Endereco;)Ljava/util/function/Predicate; ¤¬­ 	noneMatch existingEndereco lambda$5 i(Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;Lbr/com/legalconnect/commom/model/Endereco;)Z
² X³ ()Ljava/util/UUID;
 Zµ¶ * toString e lambda$6 i(Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;Lbr/com/legalconnect/commom/model/Endereco;)V lambda$4 i(Lbr/com/legalconnect/commom/model/Endereco;Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;)Z 
SourceFile PessoaService.java (Lorg/springframework/stereotype/Service; BootstrapMethods
ÁÃÂ "java/lang/invoke/LambdaMetafactoryÄÅ metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;À ¼
 ÉÈ h(Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;)Lbr/com/legalconnect/commom/model/Endereco;Ë
 Ï Î 
 Ô£ Ó  ê
 Ù¦§Ø .(Lbr/com/legalconnect/commom/model/Endereco;)ZÛ ê
 ß¯°ÞÛ
 ä¸¹ã .(Lbr/com/legalconnect/commom/model/Endereco;)Væ ê
 êº»é >(Lbr/com/legalconnect/commom/dto/request/EnderecoRequestDTO;)Zì InnerClassesð 6br/com/legalconnect/commom/model/Endereco$TipoEndereco TipoEndereco 
PessoaBuilderô %java/lang/invoke/MethodHandles$Lookupö java/lang/invoke/MethodHandles Lookup !                 	 
          
                   *· *+µ *,µ *-µ *µ ±           .  0 	 1  2  3  4    4                         	 
        !          	       " #       $     ¥     Ö*´ +¶ %¹ +  » 1Y² 3² 9+¶ %· ?¿*´ +¶ B¶ F¹ K  » 1Y² P² 9+¶ B¶ F· ?¿» SY· UM,+¶ B¶ V¸ Y¶ _¸ c,¶ i+¶ o¶ r+¶ %¶ v+¶ y¶ }» Y+¶ · ¶ ¶ N+¶ Æ 6+¶ ¹   *+¶ ¹  -º   ¹ £ ¸ ©¹ ¯ À ³:-¶ µ*´ -¹ ¹ À d°       ^    D  E " I 5 J ? K F J J Q R R ` U c V g W n X u Y | Z  [  U  ^ ¡ _ ª ` µ m À _ Â n È q    4    Ö        Ö ½ ¾  R  ¿ À   H Á Â  Â  Ã Ä  Å     Â  Ã Æ  Ç   
 "'ý } S d !    ½    È É     k     !*´ +¹ Ê º Î  ¶ ÒÀ dM*´ ,¹ Ø °           | 
 }  |           !        ! Þ ß    à Â  !    Þ    á â       $     `  	  *´ +¹ Ê º ã  ¶ ÒÀ dN-¶ ä,¶ %¶ å » 1Y² ë² îñ· ?¿-¶ ó:,¶ B:¶ ö¶ F¶ å '*´ ¶ F¹ K  » 1Y² P² 9¶ F· ?¿*´ ¹ ÷ *´ ¹ ý W*´ ,-¹ þ ,¶ Æ é-¶,º  ¹ W,¶ ¹ :§ Á¹ À:¶Ç »Y·:¶¶¶#¶&¶)¶,¶/¶2¶5¶8¶;¶>¶A¶D¶GÆ ¶G§ J¶L¶O¶S-¶W-¶¹[ W§ '-¶¹^ º_  ¹b ¹f ºj  ¶n¹r ÿ;*´ -¹ ¹ À dN*´ -¹ Ø °        '    
      $  .  0  4  :  @   P ¡ a ¢ t ¥  ¦  ª  ³  µ ¯ ¹ É º Ñ ¼ Ú ½ ä ¾ î ¿ ø À Á Â Ã  Ä8 ÅB ÆH ÇT ÈW Ê` Ël Ìq Í{ ¹ Ü Ý    R           Þ ß    ½ ¾  u Â  :dv À  @^wx  É ²yz  Ú z{|  Ç   ´ ü 4 dý ? S Gÿ H   Z & d S G   ÿ t 	  Z & d S G ÿ  	  Z & d S G  æú !ÿ #   Z & d S G   ÿ 	   Z & d S G   !   	 Þ   ½   } b       $      z     )*´ +¹~  » 1Y²²· ?¿*´ +¹ ±           ê 
 ë  ì  ë  î ( ï        )        ) Þ ß  Ç     !    Þ           ?     »Y·¿           ó                 x  !    x           ?     »Y·¿           ø                  !     
     õ     d»Y·M,+¶¶,+¶#¶&,+¶)¶,,+¶/¶2,+¶5¶8,+¶;¶>,+¶A¶D,+¶GÆ 
+¶G§ J¶L,+¶O¶S,*¶W,°       2    a  b  c  d   e ( f 0 g 8 h @ i U j ] k b l        dyz   \|  Ç   + ÿ O  d ÿ   d  æ
      =      » 1Y²²¡· ?°           } 
 ~ 
 }  ~      
£      =      » 1Y²²¤· ?°            
  
         
¦§     C     *¶ ¹  +º¨  ¹« ¬       
    µ 	 ¶        ®| 
¯°     9     +¶±¶´*¶¶ å¬           Ë        ·| 
¸¹     Å     V+*¶¶+*¶#¶&+*¶)¶,+*¶/¶2+*¶5¶8+*¶;¶>+*¶A¶D+*¶GÆ 
*¶G§ J¶L+*¶O¶S±       * 
   Î  Ï  Ð  Ñ   Ò ( Ó 0 Ô 8 Õ M Ö U ×        V·|  Ç    ÷ Gÿ    æ
º»     S     +¶Æ +¶*¶±¶´¶ å § ¬           ¶        yz  Ç    @ ¼   ½     ¾  ¿   H Æ ÇÊÌÆ ÍÐÑÆ ÒÕÖÆ ×ÚÜÆ ÝàáÆ âåçÆ èëíî    ïñ@ j dò	óõ÷ 
```
```java
Êþº¾   = w  ,br/com/legalconnect/commom/service/S3Service  java/lang/Object log Lorg/slf4j/Logger; MOCK_S3_BASE_URL Ljava/lang/String; 
ConstantValue  (https://mock-s3-bucket.s3.amazonaws.com/ <clinit> ()V Code
    org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>
    
 this .Lbr/com/legalconnect/commom/service/S3Service; 
uploadFile :([BLjava/lang/String;Ljava/lang/String;)Ljava/lang/String; ! 6br/com/legalconnect/common/exception/BusinessException	 # % $ .br/com/legalconnect/common/exception/ErrorCode & ' DOCUMENT_UPLOAD_FAILED 0Lbr/com/legalconnect/common/exception/ErrorCode;	 ) + * #org/springframework/http/HttpStatus , - BAD_REQUEST %Lorg/springframework/http/HttpStatus; / +O conteÃºdo do arquivo nÃ£o pode ser vazio.
   1  2 j(Lbr/com/legalconnect/common/exception/ErrorCode;Lorg/springframework/http/HttpStatus;Ljava/lang/String;)V
 4 6 5 java/lang/String 7 8 isEmpty ()Z : "A chave do S3 nÃ£o pode ser vazia. < @Simulando upload para S3. Chave: {}, Tamanho: {} bytes, Tipo: {}
 > @ ? java/lang/Integer A B valueOf (I)Ljava/lang/Integer; D F E org/slf4j/Logger G H info ((Ljava/lang/String;[Ljava/lang/Object;)V   J K L makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String; N #Upload simulado concluÃ­do. URL: {} D P G Q '(Ljava/lang/String;Ljava/lang/Object;)V 	fileBytes [B key mimeType fileUrl 
StackMapTable MethodParameters 
deleteFile (Ljava/lang/String;)V	 # \ ] ' DADOS_INVALIDOS _ 2URL do arquivo nÃ£o pode ser vazia para deleÃ§Ã£o. a "Simulando deleÃ§Ã£o de S3. URL: {} c *DeleÃ§Ã£o simulada concluÃ­da para URL: {} 
SourceFile S3Service.java RuntimeVisibleAnnotations (Lorg/springframework/stereotype/Service; BootstrapMethods
 j l k $java/lang/invoke/StringConcatFactory K m (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; i p )https://mock-s3-bucket.s3.amazonaws.com/ InnerClasses s %java/lang/invoke/MethodHandles$Lookup u java/lang/invoke/MethodHandles Lookup !               	    
    
     -      	¸ ³ ±       
               
     /     *· ±                               ó     i+Æ +¾ »  Y² "² (.· 0¿,Æ 
,¶ 3 »  Y² "² (9· 0¿² ;½ Y,SY+¾¸ =SY-S¹ C ,º I  :² M¹ O °       2      	 !  "  !  $ $ % . & 0 % 4 * R + Z , f -    4    i       i R S    i T     i U   Z  V   W    	
 X   
 R   T   U    Y Z          2+Æ 
+¶ 3 »  Y² [² (^· 0¿² `+¹ O ² b+¹ O ±           7  8  9  8  = & A 1 B        2       2 V   W     X    V    d    e f     g   h     n  o q   
  r t v 
```
```java
Êþº¾   = 7  0br/com/legalconnect/commom/service/TenantContext  java/lang/Object 
currentTenant Ljava/lang/ThreadLocal; 	Signature )Ljava/lang/ThreadLocal<Ljava/util/UUID;>; <clinit> ()V Code 
 java/lang/ThreadLocal
    
 <init>	     LineNumberTable LocalVariableTable
   this 2Lbr/com/legalconnect/commom/service/TenantContext; setCurrentTenantId (Ljava/util/UUID;)V
     set (Ljava/lang/Object;)V tenantId Ljava/util/UUID; MethodParameters getCurrentTenantId ()Ljava/util/UUID;
  $ % & get ()Ljava/lang/Object; ( java/util/UUID * java/lang/IllegalStateException , \Tenant ID nÃ£o estÃ¡ definido no contexto da requisiÃ§Ã£o. Verifique o filtro de seguranÃ§a.
 ) .  / (Ljava/lang/String;)V 
StackMapTable clear
  3 4 
 remove 
SourceFile TenantContext.java !                 	 
     +      » Y· ³ ±                    
     /     *· ±           
             	       6     ² *¶ ±       
                           	 ! "     ^     ² ¶ #À 'K*Ç 
» )Y+· -¿*°            
   #  %      
      0    ü  ' 	 1 
     +      ² ¶ 2±       
    -  .        5    6
```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.response.AreaAtuacaoResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.AreaAtuacao;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:37:22-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class AreaAtuacaoMapperImpl implements AreaAtuacaoMapper {

    @Override
    public AreaAtuacaoResponseDTO toResponseDTO(AreaAtuacao entity) {
        if ( entity == null ) {
            return null;
        }

        AreaAtuacaoResponseDTO.AreaAtuacaoResponseDTOBuilder areaAtuacaoResponseDTO = AreaAtuacaoResponseDTO.builder();

        areaAtuacaoResponseDTO.descricao( entity.getDescricao() );
        areaAtuacaoResponseDTO.id( entity.getId() );
        areaAtuacaoResponseDTO.nome( entity.getNome() );

        return areaAtuacaoResponseDTO.build();
    }

    @Override
    public AreaAtuacao toEntity(AreaAtuacaoResponseDTO dto) {
        if ( dto == null ) {
            return null;
        }

        AreaAtuacao.AreaAtuacaoBuilder<?, ?> areaAtuacao = AreaAtuacao.builder();

        areaAtuacao.id( dto.getId() );
        areaAtuacao.descricao( dto.getDescricao() );
        areaAtuacao.nome( dto.getNome() );

        return areaAtuacao.build();
    }
}

```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.request.CertificacaoRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.CertificacaoResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.Certificacao;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:37:22-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class CertificacaoMapperImpl implements CertificacaoMapper {

    @Override
    public Certificacao toEntity(CertificacaoRequestDTO dto) {
        if ( dto == null ) {
            return null;
        }

        Certificacao.CertificacaoBuilder<?, ?> certificacao = Certificacao.builder();

        certificacao.id( dto.getId() );
        certificacao.dataConclusao( dto.getDataConclusao() );
        certificacao.instituicao( dto.getInstituicao() );
        certificacao.nome( dto.getNome() );

        return certificacao.build();
    }

    @Override
    public CertificacaoResponseDTO toResponseDTO(Certificacao entity) {
        if ( entity == null ) {
            return null;
        }

        CertificacaoResponseDTO.CertificacaoResponseDTOBuilder certificacaoResponseDTO = CertificacaoResponseDTO.builder();

        certificacaoResponseDTO.dataConclusao( entity.getDataConclusao() );
        certificacaoResponseDTO.id( entity.getId() );
        certificacaoResponseDTO.instituicao( entity.getInstituicao() );
        certificacaoResponseDTO.nome( entity.getNome() );

        return certificacaoResponseDTO.build();
    }

    @Override
    public void updateEntityFromDto(CertificacaoRequestDTO dto, Certificacao entity) {
        if ( dto == null ) {
            return;
        }

        entity.setDataConclusao( dto.getDataConclusao() );
        entity.setInstituicao( dto.getInstituicao() );
        entity.setNome( dto.getNome() );
    }
}

```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.request.DocumentoUploadRequest;
import br.com.legalconnect.advogado.application.dto.response.DocumentoResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.Documento;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:37:22-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class DocumentoMapperImpl implements DocumentoMapper {

    @Override
    public Documento toEntity(DocumentoUploadRequest dto) {
        if ( dto == null ) {
            return null;
        }

        Documento.DocumentoBuilder<?, ?> documento = Documento.builder();

        documento.tipoDocumento( mapDocumentoTipoToString( dto.getTipoDocumento() ) );
        documento.nomeArquivo( dto.getNomeArquivo() );

        return documento.build();
    }

    @Override
    public DocumentoResponseDTO toResponseDTO(Documento entity) {
        if ( entity == null ) {
            return null;
        }

        DocumentoResponseDTO.DocumentoResponseDTOBuilder documentoResponseDTO = DocumentoResponseDTO.builder();

        documentoResponseDTO.tipoDocumento( entity.getTipoDocumento() );
        documentoResponseDTO.id( entity.getId() );
        documentoResponseDTO.nomeArquivo( entity.getNomeArquivo() );
        documentoResponseDTO.urlS3( entity.getUrlS3() );

        return documentoResponseDTO.build();
    }

    @Override
    public void updateEntityFromDto(DocumentoUploadRequest dto, Documento entity) {
        if ( dto == null ) {
            return;
        }

        entity.setTipoDocumento( mapDocumentoTipoToString( dto.getTipoDocumento() ) );
        entity.setNomeArquivo( dto.getNomeArquivo() );
    }
}

```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.request.ExperienciaProfissionalRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.ExperienciaProfissionalResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.ExperienciaProfissional;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:37:22-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class ExperienciaProfissionalMapperImpl implements ExperienciaProfissionalMapper {

    @Override
    public ExperienciaProfissional toEntity(ExperienciaProfissionalRequestDTO dto) {
        if ( dto == null ) {
            return null;
        }

        ExperienciaProfissional.ExperienciaProfissionalBuilder<?, ?> experienciaProfissional = ExperienciaProfissional.builder();

        experienciaProfissional.id( dto.getId() );
        experienciaProfissional.cargo( dto.getCargo() );
        experienciaProfissional.dataFim( dto.getDataFim() );
        experienciaProfissional.dataInicio( dto.getDataInicio() );
        experienciaProfissional.descricao( dto.getDescricao() );
        experienciaProfissional.empresa( dto.getEmpresa() );

        return experienciaProfissional.build();
    }

    @Override
    public ExperienciaProfissionalResponseDTO toResponseDTO(ExperienciaProfissional entity) {
        if ( entity == null ) {
            return null;
        }

        ExperienciaProfissionalResponseDTO.ExperienciaProfissionalResponseDTOBuilder experienciaProfissionalResponseDTO = ExperienciaProfissionalResponseDTO.builder();

        experienciaProfissionalResponseDTO.cargo( entity.getCargo() );
        experienciaProfissionalResponseDTO.dataFim( entity.getDataFim() );
        experienciaProfissionalResponseDTO.dataInicio( entity.getDataInicio() );
        experienciaProfissionalResponseDTO.descricao( entity.getDescricao() );
        experienciaProfissionalResponseDTO.empresa( entity.getEmpresa() );
        experienciaProfissionalResponseDTO.id( entity.getId() );

        return experienciaProfissionalResponseDTO.build();
    }

    @Override
    public void updateEntityFromDto(ExperienciaProfissionalRequestDTO dto, ExperienciaProfissional entity) {
        if ( dto == null ) {
            return;
        }

        entity.setCargo( dto.getCargo() );
        entity.setDataFim( dto.getDataFim() );
        entity.setDataInicio( dto.getDataInicio() );
        entity.setDescricao( dto.getDescricao() );
        entity.setEmpresa( dto.getEmpresa() );
    }
}

```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.request.FormacaoAcademicaRequestDTO;
import br.com.legalconnect.advogado.application.dto.response.FormacaoAcademicaResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.FormacaoAcademica;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:37:21-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class FormacaoAcademicaMapperImpl implements FormacaoAcademicaMapper {

    @Override
    public FormacaoAcademica toEntity(FormacaoAcademicaRequestDTO dto) {
        if ( dto == null ) {
            return null;
        }

        FormacaoAcademica.FormacaoAcademicaBuilder<?, ?> formacaoAcademica = FormacaoAcademica.builder();

        formacaoAcademica.id( dto.getId() );
        formacaoAcademica.curso( dto.getCurso() );
        formacaoAcademica.dataConclusao( dto.getDataConclusao() );
        formacaoAcademica.instituicao( dto.getInstituicao() );

        return formacaoAcademica.build();
    }

    @Override
    public FormacaoAcademicaResponseDTO toResponseDTO(FormacaoAcademica entity) {
        if ( entity == null ) {
            return null;
        }

        FormacaoAcademicaResponseDTO.FormacaoAcademicaResponseDTOBuilder formacaoAcademicaResponseDTO = FormacaoAcademicaResponseDTO.builder();

        formacaoAcademicaResponseDTO.curso( entity.getCurso() );
        formacaoAcademicaResponseDTO.dataConclusao( entity.getDataConclusao() );
        formacaoAcademicaResponseDTO.id( entity.getId() );
        formacaoAcademicaResponseDTO.instituicao( entity.getInstituicao() );

        return formacaoAcademicaResponseDTO.build();
    }

    @Override
    public void updateEntityFromDto(FormacaoAcademicaRequestDTO dto, FormacaoAcademica entity) {
        if ( dto == null ) {
            return;
        }

        entity.setCurso( dto.getCurso() );
        entity.setDataConclusao( dto.getDataConclusao() );
        entity.setInstituicao( dto.getInstituicao() );
    }
}

```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.response.IdiomaResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.Idioma;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:37:22-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class IdiomaMapperImpl implements IdiomaMapper {

    @Override
    public IdiomaResponseDTO toResponseDTO(Idioma entity) {
        if ( entity == null ) {
            return null;
        }

        IdiomaResponseDTO.IdiomaResponseDTOBuilder idiomaResponseDTO = IdiomaResponseDTO.builder();

        idiomaResponseDTO.codigo( entity.getCodigo() );
        idiomaResponseDTO.id( entity.getId() );
        idiomaResponseDTO.nivel( entity.getNivel() );
        idiomaResponseDTO.nome( entity.getNome() );

        return idiomaResponseDTO.build();
    }

    @Override
    public Idioma toEntity(IdiomaResponseDTO dto) {
        if ( dto == null ) {
            return null;
        }

        Idioma.IdiomaBuilder<?, ?> idioma = Idioma.builder();

        idioma.id( dto.getId() );
        idioma.codigo( dto.getCodigo() );
        idioma.nivel( dto.getNivel() );
        idioma.nome( dto.getNome() );

        return idioma.build();
    }
}

```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.response.LocalAtuacaoResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.LocalAtuacao;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:37:21-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class LocalAtuacaoMapperImpl implements LocalAtuacaoMapper {

    @Override
    public LocalAtuacaoResponseDTO toResponseDTO(LocalAtuacao entity) {
        if ( entity == null ) {
            return null;
        }

        LocalAtuacaoResponseDTO.LocalAtuacaoResponseDTOBuilder localAtuacaoResponseDTO = LocalAtuacaoResponseDTO.builder();

        localAtuacaoResponseDTO.id( entity.getId() );
        localAtuacaoResponseDTO.nome( entity.getNome() );

        return localAtuacaoResponseDTO.build();
    }

    @Override
    public LocalAtuacao toEntity(LocalAtuacaoResponseDTO dto) {
        if ( dto == null ) {
            return null;
        }

        LocalAtuacao.LocalAtuacaoBuilder<?, ?> localAtuacao = LocalAtuacao.builder();

        localAtuacao.id( dto.getId() );
        localAtuacao.nome( dto.getNome() );

        return localAtuacao.build();
    }
}

```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.request.ProfissionalCreateRequest;
import br.com.legalconnect.advogado.application.dto.request.ProfissionalUpdateRequest;
import br.com.legalconnect.advogado.application.dto.response.CertificacaoResponseDTO;
import br.com.legalconnect.advogado.application.dto.response.DocumentoResponseDTO;
import br.com.legalconnect.advogado.application.dto.response.ExperienciaProfissionalResponseDTO;
import br.com.legalconnect.advogado.application.dto.response.FormacaoAcademicaResponseDTO;
import br.com.legalconnect.advogado.application.dto.response.ProfissionalResponseDTO;
import br.com.legalconnect.advogado.application.dto.response.RoleProfissionalResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.Certificacao;
import br.com.legalconnect.advogado.domain.modal.entity.Documento;
import br.com.legalconnect.advogado.domain.modal.entity.ExperienciaProfissional;
import br.com.legalconnect.advogado.domain.modal.entity.FormacaoAcademica;
import br.com.legalconnect.advogado.domain.modal.entity.Profissional;
import br.com.legalconnect.advogado.domain.modal.entity.RoleProfissional;
import br.com.legalconnect.commom.dto.request.EnderecoRequestDTO;
import br.com.legalconnect.commom.dto.request.PessoaRequestDTO;
import br.com.legalconnect.commom.dto.request.UserRequestDTO;
import br.com.legalconnect.commom.dto.response.PessoaResponseDTO;
import br.com.legalconnect.commom.model.Endereco;
import br.com.legalconnect.commom.model.User;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:37:22-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class ProfissionalMapperImpl implements ProfissionalMapper {

    @Autowired
    private CertificacaoMapper certificacaoMapper;
    @Autowired
    private DocumentoMapper documentoMapper;
    @Autowired
    private ExperienciaProfissionalMapper experienciaProfissionalMapper;
    @Autowired
    private FormacaoAcademicaMapper formacaoAcademicaMapper;
    @Autowired
    private RoleProfissionalMapper roleProfissionalMapper;

    @Override
    public Profissional toEntity(ProfissionalCreateRequest dto) {
        if ( dto == null ) {
            return null;
        }

        Profissional.ProfissionalBuilder<?, ?> profissional = Profissional.builder();

        List<UUID> list = dto.getLocaisAtuacaoIds();
        if ( list != null ) {
            profissional.locaisAtuacaoIds( new LinkedHashSet<UUID>( list ) );
        }
        List<UUID> list1 = dto.getAreaAtuacaoIds();
        if ( list1 != null ) {
            profissional.areaAtuacaoIds( new LinkedHashSet<UUID>( list1 ) );
        }
        List<UUID> list2 = dto.getIdiomaIds();
        if ( list2 != null ) {
            profissional.idiomaIds( new LinkedHashSet<UUID>( list2 ) );
        }
        List<UUID> list3 = dto.getTipoAtendimentoIds();
        if ( list3 != null ) {
            profissional.tipoAtendimentoIds( new LinkedHashSet<UUID>( list3 ) );
        }
        profissional.cpf( dto.getCpf() );
        profissional.dataNascimento( dto.getDataNascimento() );
        profissional.enderecos( enderecoRequestDTOListToEnderecoSet( dto.getEnderecos() ) );
        profissional.nomeCompleto( dto.getNomeCompleto() );
        List<String> list4 = dto.getTelefones();
        if ( list4 != null ) {
            profissional.telefones( new LinkedHashSet<String>( list4 ) );
        }
        profissional.usuario( userRequestDTOToUser( dto.getUsuario() ) );
        profissional.numeroOab( dto.getNumeroOab() );
        profissional.planoId( dto.getPlanoId() );
        profissional.tenantId( dto.getTenantId() );
        profissional.usaMarketplace( dto.getUsaMarketplace() );

        return profissional.build();
    }

    @Override
    public void updateEntityFromDto(ProfissionalUpdateRequest dto, Profissional entity) {
        if ( dto == null ) {
            return;
        }

        UserRequestDTO usuario = dtoPessoaUsuario( dto );
        if ( usuario != null ) {
            if ( entity.getUsuario() == null ) {
                entity.setUsuario( User.builder().build() );
            }
            userRequestDTOToUser1( usuario, entity.getUsuario() );
        }
        else {
            entity.setUsuario( null );
        }
        if ( entity.getLocaisAtuacaoIds() != null ) {
            List<UUID> list = dto.getLocaisAtuacaoIds();
            if ( list != null ) {
                entity.getLocaisAtuacaoIds().clear();
                entity.getLocaisAtuacaoIds().addAll( list );
            }
            else {
                entity.setLocaisAtuacaoIds( null );
            }
        }
        else {
            List<UUID> list = dto.getLocaisAtuacaoIds();
            if ( list != null ) {
                entity.setLocaisAtuacaoIds( new LinkedHashSet<UUID>( list ) );
            }
        }
        if ( entity.getAreaAtuacaoIds() != null ) {
            List<UUID> list1 = dto.getAreaAtuacaoIds();
            if ( list1 != null ) {
                entity.getAreaAtuacaoIds().clear();
                entity.getAreaAtuacaoIds().addAll( list1 );
            }
            else {
                entity.setAreaAtuacaoIds( null );
            }
        }
        else {
            List<UUID> list1 = dto.getAreaAtuacaoIds();
            if ( list1 != null ) {
                entity.setAreaAtuacaoIds( new LinkedHashSet<UUID>( list1 ) );
            }
        }
        if ( entity.getIdiomaIds() != null ) {
            List<UUID> list2 = dto.getIdiomaIds();
            if ( list2 != null ) {
                entity.getIdiomaIds().clear();
                entity.getIdiomaIds().addAll( list2 );
            }
            else {
                entity.setIdiomaIds( null );
            }
        }
        else {
            List<UUID> list2 = dto.getIdiomaIds();
            if ( list2 != null ) {
                entity.setIdiomaIds( new LinkedHashSet<UUID>( list2 ) );
            }
        }
        if ( entity.getTipoAtendimentoIds() != null ) {
            List<UUID> list3 = dto.getTipoAtendimentoIds();
            if ( list3 != null ) {
                entity.getTipoAtendimentoIds().clear();
                entity.getTipoAtendimentoIds().addAll( list3 );
            }
            else {
                entity.setTipoAtendimentoIds( null );
            }
        }
        else {
            List<UUID> list3 = dto.getTipoAtendimentoIds();
            if ( list3 != null ) {
                entity.setTipoAtendimentoIds( new LinkedHashSet<UUID>( list3 ) );
            }
        }
        entity.setEmpresaId( dto.getEmpresaId() );
        entity.setNumeroOab( dto.getNumeroOab() );
        entity.setPlanoId( dto.getPlanoId() );
        entity.setUsaMarketplace( dto.getUsaMarketplace() );
    }

    @Override
    public ProfissionalResponseDTO toResponseDTO(Profissional entity) {
        if ( entity == null ) {
            return null;
        }

        ProfissionalResponseDTO.ProfissionalResponseDTOBuilder profissionalResponseDTO = ProfissionalResponseDTO.builder();

        profissionalResponseDTO.pessoa( userToPessoaResponseDTO( entity.getUsuario() ) );
        profissionalResponseDTO.rolesProfissional( roleProfissionalSetToRoleProfissionalResponseDTOList( entity.getRoleProfissionals() ) );
        profissionalResponseDTO.certificacoes( certificacaoSetToCertificacaoResponseDTOList( entity.getCertificacoes() ) );
        profissionalResponseDTO.documentos( documentoSetToDocumentoResponseDTOList( entity.getDocumentos() ) );
        profissionalResponseDTO.empresaId( entity.getEmpresaId() );
        profissionalResponseDTO.experiencias( experienciaProfissionalSetToExperienciaProfissionalResponseDTOList( entity.getExperiencias() ) );
        profissionalResponseDTO.fazParteDePlano( entity.getFazParteDePlano() );
        profissionalResponseDTO.formacoes( formacaoAcademicaSetToFormacaoAcademicaResponseDTOList( entity.getFormacoes() ) );
        profissionalResponseDTO.id( entity.getId() );
        profissionalResponseDTO.numeroOab( entity.getNumeroOab() );
        profissionalResponseDTO.planoId( entity.getPlanoId() );
        profissionalResponseDTO.statusProfissional( entity.getStatusProfissional() );
        profissionalResponseDTO.tenantId( entity.getTenantId() );
        profissionalResponseDTO.usaMarketplace( entity.getUsaMarketplace() );

        return profissionalResponseDTO.build();
    }

    protected Endereco enderecoRequestDTOToEndereco(EnderecoRequestDTO enderecoRequestDTO) {
        if ( enderecoRequestDTO == null ) {
            return null;
        }

        Endereco.EnderecoBuilder<?, ?> endereco = Endereco.builder();

        if ( enderecoRequestDTO.getId() != null ) {
            endereco.id( UUID.fromString( enderecoRequestDTO.getId() ) );
        }
        endereco.bairro( enderecoRequestDTO.getBairro() );
        endereco.cep( enderecoRequestDTO.getCep() );
        endereco.cidade( enderecoRequestDTO.getCidade() );
        endereco.complemento( enderecoRequestDTO.getComplemento() );
        endereco.estado( enderecoRequestDTO.getEstado() );
        endereco.logradouro( enderecoRequestDTO.getLogradouro() );
        endereco.numero( enderecoRequestDTO.getNumero() );
        endereco.pais( enderecoRequestDTO.getPais() );
        endereco.tipoEndereco( enderecoRequestDTO.getTipoEndereco() );

        return endereco.build();
    }

    protected Set<Endereco> enderecoRequestDTOListToEnderecoSet(List<EnderecoRequestDTO> list) {
        if ( list == null ) {
            return null;
        }

        Set<Endereco> set = new LinkedHashSet<Endereco>( Math.max( (int) ( list.size() / .75f ) + 1, 16 ) );
        for ( EnderecoRequestDTO enderecoRequestDTO : list ) {
            set.add( enderecoRequestDTOToEndereco( enderecoRequestDTO ) );
        }

        return set;
    }

    protected User userRequestDTOToUser(UserRequestDTO userRequestDTO) {
        if ( userRequestDTO == null ) {
            return null;
        }

        User.UserBuilder<?, ?> user = User.builder();

        if ( userRequestDTO.getId() != null ) {
            user.id( UUID.fromString( userRequestDTO.getId() ) );
        }
        user.cpf( userRequestDTO.getCpf() );
        user.email( userRequestDTO.getEmail() );
        user.fotoUrl( userRequestDTO.getFotoUrl() );
        user.nomeCompleto( userRequestDTO.getNomeCompleto() );
        user.telefone( userRequestDTO.getTelefone() );

        return user.build();
    }

    private UserRequestDTO dtoPessoaUsuario(ProfissionalUpdateRequest profissionalUpdateRequest) {
        if ( profissionalUpdateRequest == null ) {
            return null;
        }
        PessoaRequestDTO pessoa = profissionalUpdateRequest.getPessoa();
        if ( pessoa == null ) {
            return null;
        }
        UserRequestDTO usuario = pessoa.getUsuario();
        if ( usuario == null ) {
            return null;
        }
        return usuario;
    }

    protected void userRequestDTOToUser1(UserRequestDTO userRequestDTO, User mappingTarget) {
        if ( userRequestDTO == null ) {
            return;
        }

        if ( userRequestDTO.getId() != null ) {
            mappingTarget.setId( UUID.fromString( userRequestDTO.getId() ) );
        }
        else {
            mappingTarget.setId( null );
        }
        mappingTarget.setCpf( userRequestDTO.getCpf() );
        mappingTarget.setEmail( userRequestDTO.getEmail() );
        mappingTarget.setFotoUrl( userRequestDTO.getFotoUrl() );
        mappingTarget.setNomeCompleto( userRequestDTO.getNomeCompleto() );
        mappingTarget.setTelefone( userRequestDTO.getTelefone() );
    }

    protected PessoaResponseDTO userToPessoaResponseDTO(User user) {
        if ( user == null ) {
            return null;
        }

        PessoaResponseDTO.PessoaResponseDTOBuilder pessoaResponseDTO = PessoaResponseDTO.builder();

        pessoaResponseDTO.cpf( user.getCpf() );
        pessoaResponseDTO.id( user.getId() );
        pessoaResponseDTO.nomeCompleto( user.getNomeCompleto() );

        return pessoaResponseDTO.build();
    }

    protected List<RoleProfissionalResponseDTO> roleProfissionalSetToRoleProfissionalResponseDTOList(Set<RoleProfissional> set) {
        if ( set == null ) {
            return null;
        }

        List<RoleProfissionalResponseDTO> list = new ArrayList<RoleProfissionalResponseDTO>( set.size() );
        for ( RoleProfissional roleProfissional : set ) {
            list.add( roleProfissionalMapper.toResponseDTO( roleProfissional ) );
        }

        return list;
    }

    protected List<CertificacaoResponseDTO> certificacaoSetToCertificacaoResponseDTOList(Set<Certificacao> set) {
        if ( set == null ) {
            return null;
        }

        List<CertificacaoResponseDTO> list = new ArrayList<CertificacaoResponseDTO>( set.size() );
        for ( Certificacao certificacao : set ) {
            list.add( certificacaoMapper.toResponseDTO( certificacao ) );
        }

        return list;
    }

    protected List<DocumentoResponseDTO> documentoSetToDocumentoResponseDTOList(Set<Documento> set) {
        if ( set == null ) {
            return null;
        }

        List<DocumentoResponseDTO> list = new ArrayList<DocumentoResponseDTO>( set.size() );
        for ( Documento documento : set ) {
            list.add( documentoMapper.toResponseDTO( documento ) );
        }

        return list;
    }

    protected List<ExperienciaProfissionalResponseDTO> experienciaProfissionalSetToExperienciaProfissionalResponseDTOList(Set<ExperienciaProfissional> set) {
        if ( set == null ) {
            return null;
        }

        List<ExperienciaProfissionalResponseDTO> list = new ArrayList<ExperienciaProfissionalResponseDTO>( set.size() );
        for ( ExperienciaProfissional experienciaProfissional : set ) {
            list.add( experienciaProfissionalMapper.toResponseDTO( experienciaProfissional ) );
        }

        return list;
    }

    protected List<FormacaoAcademicaResponseDTO> formacaoAcademicaSetToFormacaoAcademicaResponseDTOList(Set<FormacaoAcademica> set) {
        if ( set == null ) {
            return null;
        }

        List<FormacaoAcademicaResponseDTO> list = new ArrayList<FormacaoAcademicaResponseDTO>( set.size() );
        for ( FormacaoAcademica formacaoAcademica : set ) {
            list.add( formacaoAcademicaMapper.toResponseDTO( formacaoAcademica ) );
        }

        return list;
    }
}

```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.response.RoleProfissionalResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.RoleProfissional;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:37:22-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class RoleProfissionalMapperImpl implements RoleProfissionalMapper {

    @Override
    public RoleProfissionalResponseDTO toResponseDTO(RoleProfissional entity) {
        if ( entity == null ) {
            return null;
        }

        RoleProfissionalResponseDTO.RoleProfissionalResponseDTOBuilder roleProfissionalResponseDTO = RoleProfissionalResponseDTO.builder();

        roleProfissionalResponseDTO.id( entity.getId() );
        roleProfissionalResponseDTO.name( entity.getName() );

        return roleProfissionalResponseDTO.build();
    }

    @Override
    public RoleProfissional toEntity(RoleProfissionalResponseDTO dto) {
        if ( dto == null ) {
            return null;
        }

        RoleProfissional.RoleProfissionalBuilder<?, ?> roleProfissional = RoleProfissional.builder();

        roleProfissional.id( dto.getId() );
        roleProfissional.name( dto.getName() );

        return roleProfissional.build();
    }
}

```
```java
package br.com.legalconnect.advogado.application.mapper;

import br.com.legalconnect.advogado.application.dto.response.TipoAtendimentoResponseDTO;
import br.com.legalconnect.advogado.domain.modal.entity.TipoAtendimento;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:37:22-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class TipoAtendimentoMapperImpl implements TipoAtendimentoMapper {

    @Override
    public TipoAtendimentoResponseDTO toResponseDTO(TipoAtendimento entity) {
        if ( entity == null ) {
            return null;
        }

        TipoAtendimentoResponseDTO.TipoAtendimentoResponseDTOBuilder tipoAtendimentoResponseDTO = TipoAtendimentoResponseDTO.builder();

        tipoAtendimentoResponseDTO.id( entity.getId() );
        tipoAtendimentoResponseDTO.nome( entity.getNome() );

        return tipoAtendimentoResponseDTO.build();
    }

    @Override
    public TipoAtendimento toEntity(TipoAtendimentoResponseDTO dto) {
        if ( dto == null ) {
            return null;
        }

        TipoAtendimento.TipoAtendimentoBuilder<?, ?> tipoAtendimento = TipoAtendimento.builder();

        tipoAtendimento.id( dto.getId() );
        tipoAtendimento.nome( dto.getNome() );

        return tipoAtendimento.build();
    }
}

```
```java
package br.com.legalconnect.commom.mapper;

import br.com.legalconnect.commom.dto.request.EnderecoRequestDTO;
import br.com.legalconnect.commom.dto.response.EnderecoResponseDTO;
import br.com.legalconnect.commom.model.Endereco;
import java.util.UUID;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:37:22-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class EnderecoMapperImpl implements EnderecoMapper {

    @Override
    public Endereco toEntity(EnderecoRequestDTO dto) {
        if ( dto == null ) {
            return null;
        }

        Endereco.EnderecoBuilder<?, ?> endereco = Endereco.builder();

        endereco.id( mapStringToUuid( dto.getId() ) );
        endereco.bairro( dto.getBairro() );
        endereco.cep( dto.getCep() );
        endereco.cidade( dto.getCidade() );
        endereco.complemento( dto.getComplemento() );
        endereco.estado( dto.getEstado() );
        endereco.logradouro( dto.getLogradouro() );
        endereco.numero( dto.getNumero() );
        endereco.pais( dto.getPais() );
        endereco.tipoEndereco( dto.getTipoEndereco() );

        return endereco.build();
    }

    @Override
    public EnderecoResponseDTO toResponseDTO(Endereco entity) {
        if ( entity == null ) {
            return null;
        }

        EnderecoResponseDTO.EnderecoResponseDTOBuilder enderecoResponseDTO = EnderecoResponseDTO.builder();

        if ( entity.getId() != null ) {
            enderecoResponseDTO.id( UUID.fromString( mapUuidToString( entity.getId() ) ) );
        }
        enderecoResponseDTO.bairro( entity.getBairro() );
        enderecoResponseDTO.cep( entity.getCep() );
        enderecoResponseDTO.cidade( entity.getCidade() );
        enderecoResponseDTO.complemento( entity.getComplemento() );
        enderecoResponseDTO.estado( entity.getEstado() );
        enderecoResponseDTO.logradouro( entity.getLogradouro() );
        enderecoResponseDTO.numero( entity.getNumero() );
        enderecoResponseDTO.pais( entity.getPais() );
        enderecoResponseDTO.tipoEndereco( entity.getTipoEndereco() );

        return enderecoResponseDTO.build();
    }

    @Override
    public void updateEntityFromDto(EnderecoRequestDTO dto, Endereco entity) {
        if ( dto == null ) {
            return;
        }

        entity.setBairro( dto.getBairro() );
        entity.setCep( dto.getCep() );
        entity.setCidade( dto.getCidade() );
        entity.setComplemento( dto.getComplemento() );
        entity.setEstado( dto.getEstado() );
        entity.setLogradouro( dto.getLogradouro() );
        entity.setNumero( dto.getNumero() );
        entity.setPais( dto.getPais() );
        entity.setTipoEndereco( dto.getTipoEndereco() );
    }
}

```
```java
package br.com.legalconnect.commom.mapper;

import br.com.legalconnect.commom.dto.request.PessoaRequestDTO;
import br.com.legalconnect.commom.dto.response.EnderecoResponseDTO;
import br.com.legalconnect.commom.dto.response.PessoaResponseDTO;
import br.com.legalconnect.commom.model.Endereco;
import br.com.legalconnect.commom.model.Pessoa;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:37:21-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class PessoaMapperImpl implements PessoaMapper {

    @Autowired
    private UserMapper userMapper;
    @Autowired
    private EnderecoMapper enderecoMapper;

    @Override
    public PessoaResponseDTO toResponseDTO(Pessoa entity) {
        if ( entity == null ) {
            return null;
        }

        PessoaResponseDTO.PessoaResponseDTOBuilder pessoaResponseDTO = PessoaResponseDTO.builder();

        pessoaResponseDTO.cpf( entity.getCpf() );
        pessoaResponseDTO.dataNascimento( entity.getDataNascimento() );
        pessoaResponseDTO.enderecos( enderecoSetToEnderecoResponseDTOList( entity.getEnderecos() ) );
        pessoaResponseDTO.id( entity.getId() );
        pessoaResponseDTO.nomeCompleto( entity.getNomeCompleto() );
        Set<String> set = entity.getTelefones();
        if ( set != null ) {
            pessoaResponseDTO.telefones( new ArrayList<String>( set ) );
        }
        pessoaResponseDTO.usuario( userMapper.toResponseDTO( entity.getUsuario() ) );

        return pessoaResponseDTO.build();
    }

    @Override
    public void updateEntityFromDto(PessoaRequestDTO dto, Pessoa entity) {
        if ( dto == null ) {
            return;
        }

        if ( entity.getTelefones() != null ) {
            List<String> list = dto.getTelefones();
            if ( list != null ) {
                entity.getTelefones().clear();
                entity.getTelefones().addAll( list );
            }
            else {
                entity.setTelefones( null );
            }
        }
        else {
            List<String> list = dto.getTelefones();
            if ( list != null ) {
                entity.setTelefones( new LinkedHashSet<String>( list ) );
            }
        }
        entity.setCpf( dto.getCpf() );
        entity.setDataNascimento( dto.getDataNascimento() );
        entity.setNomeCompleto( dto.getNomeCompleto() );
    }

    protected List<EnderecoResponseDTO> enderecoSetToEnderecoResponseDTOList(Set<Endereco> set) {
        if ( set == null ) {
            return null;
        }

        List<EnderecoResponseDTO> list = new ArrayList<EnderecoResponseDTO>( set.size() );
        for ( Endereco endereco : set ) {
            list.add( enderecoMapper.toResponseDTO( endereco ) );
        }

        return list;
    }
}

```
```java
package br.com.legalconnect.commom.mapper;

import br.com.legalconnect.commom.dto.request.UserRequestDTO;
import br.com.legalconnect.commom.dto.response.UserResponseDTO;
import br.com.legalconnect.commom.model.User;
import java.util.UUID;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:37:22-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class UserMapperImpl implements UserMapper {

    @Override
    public User toEntity(UserRequestDTO dto) {
        if ( dto == null ) {
            return null;
        }

        User.UserBuilder<?, ?> user = User.builder();

        user.senhaHash( dto.getSenha() );
        if ( dto.getId() != null ) {
            user.id( UUID.fromString( dto.getId() ) );
        }
        user.cpf( dto.getCpf() );
        user.email( dto.getEmail() );
        user.fotoUrl( dto.getFotoUrl() );
        user.nomeCompleto( dto.getNomeCompleto() );
        user.telefone( dto.getTelefone() );

        return user.build();
    }

    @Override
    public UserResponseDTO toResponseDTO(User entity) {
        if ( entity == null ) {
            return null;
        }

        UserResponseDTO.UserResponseDTOBuilder userResponseDTO = UserResponseDTO.builder();

        userResponseDTO.cpf( entity.getCpf() );
        userResponseDTO.email( entity.getEmail() );
        userResponseDTO.fotoUrl( entity.getFotoUrl() );
        userResponseDTO.id( entity.getId() );
        userResponseDTO.nomeCompleto( entity.getNomeCompleto() );
        userResponseDTO.telefone( entity.getTelefone() );

        return userResponseDTO.build();
    }

    @Override
    public void updateEntityFromDto(UserRequestDTO dto, User entity) {
        if ( dto == null ) {
            return;
        }

        entity.setSenhaHash( dto.getSenha() );
        entity.setCpf( dto.getCpf() );
        entity.setEmail( dto.getEmail() );
        entity.setFotoUrl( dto.getFotoUrl() );
        entity.setNomeCompleto( dto.getNomeCompleto() );
        entity.setTelefone( dto.getTelefone() );
    }
}

```
```java
Êþº¾   =   >br/com/legalconnect/legal_usuario/LegalUsuarioApplicationTests  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this @Lbr/com/legalconnect/legal_usuario/LegalUsuarioApplicationTests; contextLoads RuntimeVisibleAnnotations Lorg/junit/jupiter/api/Test; 
SourceFile !LegalUsuarioApplicationTests.java 6Lorg/springframework/boot/test/context/SpringBootTest;                  /     *· ±    
                 
                   +      ±    
                 
                
```
```java
/mvnw text eol=lf
*.cmd text eol=crlf

```
```java
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

```
```java
# Read Me First
The following was discovered as part of building this project:

* The original package name 'br.com.legalconnect.common.common-lib' is invalid and this project uses 'br.com.legalconnect.common.common_lib' instead.

# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.5.3/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.5.3/maven-plugin/build-image.html)
* [Flyway Migration](https://docs.spring.io/spring-boot/3.5.3/how-to/data-initialization.html#howto.data-initialization.migration-tool.flyway)
* [Spring Boot DevTools](https://docs.spring.io/spring-boot/3.5.3/reference/using/devtools.html)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.


```
```java
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

```
```java
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

```
```java
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.5</version> <!-- Usando 3.2.5, uma versão estável do Spring Boot 3 -->
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>br.com.legalconnect</groupId>
	<artifactId>gateway</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>legalconnect-gateway</name>
	<description>API Gateway for LegalConnect Microservices</description>

	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2023.0.3</spring-cloud.version>
	</properties>

	<dependencies>
		<!-- Spring Cloud Gateway -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-gateway</artifactId>
		</dependency>

		<!-- Service Discovery (Eureka) -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

		<!-- Swagger para documentação do Gateway -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webflux-ui</artifactId>
			<version>2.0.2</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.12.6</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.12.6</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>0.12.6</version>
			<scope>runtime</scope>
		</dependency>
		<!-- common-lib (se aplicável, mantenha a versão correta) -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.20</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
```
```java
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip

```
```java
{
  "configurations": [
    {
      "type": "java",
      "name": "Spring Boot-LegalconnectGatewayApplication<gateway>",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "mainClass": "br.com.legalconnect.gateway.LegalconnectGatewayApplication",
      "projectName": "gateway",
      "args": "",
      "envFile": "${workspaceFolder}/.env"
    }
  ]
}

```
```java
{
  "java.configuration.updateBuildConfiguration": "interactive"
}

```
```java
2025-07-19T00:04:15.152-03:00  INFO 15528 --- [api-gateway] [main] b.c.l.g.LegalconnectGatewayApplication   : Starting LegalconnectGatewayApplication using Java 17.0.14 with PID 15528 (E:\legalconnect\legalconnect\microservices\legal-gaateway\target\classes started by marce in E:\legalconnect\legalconnect\microservices\legal-gaateway)
2025-07-19T00:04:15.157-03:00  INFO 15528 --- [api-gateway] [main] b.c.l.g.LegalconnectGatewayApplication   : The following 1 profile is active: "prod"
2025-07-19T00:04:16.294-03:00  INFO 15528 --- [api-gateway] [main] o.s.cloud.context.scope.GenericScope     : BeanFactory id=5f08001b-9a87-30ca-868e-5ada63b5f73e
2025-07-19T00:04:16.371-03:00  WARN 15528 --- [api-gateway] [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [lbRestClientPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-07-19T00:04:16.375-03:00  WARN 15528 --- [api-gateway] [main] trationDelegate$BeanPostProcessorChecker : Bean 'deferringLoadBalancerInterceptor' of type [org.springframework.cloud.client.loadbalancer.DeferringLoadBalancerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-19T00:04:16.377-03:00  WARN 15528 --- [api-gateway] [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [loadBalancerWebClientBuilderBeanPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-07-19T00:04:16.379-03:00  WARN 15528 --- [api-gateway] [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactorDeferringLoadBalancerFilterConfig' of type [org.springframework.cloud.client.loadbalancer.reactive.LoadBalancerBeanPostProcessorAutoConfiguration$ReactorDeferringLoadBalancerFilterConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [loadBalancerWebClientBuilderBeanPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-19T00:04:16.381-03:00  WARN 15528 --- [api-gateway] [main] trationDelegate$BeanPostProcessorChecker : Bean 'reactorDeferringLoadBalancerExchangeFilterFunction' of type [org.springframework.cloud.client.loadbalancer.reactive.DeferringLoadBalancerExchangeFilterFunction] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [loadBalancerWebClientBuilderBeanPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2025-07-19T00:04:17.438-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [After]
2025-07-19T00:04:17.439-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [Before]
2025-07-19T00:04:17.440-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [Between]
2025-07-19T00:04:17.440-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [Cookie]
2025-07-19T00:04:17.440-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [Header]
2025-07-19T00:04:17.440-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [Host]
2025-07-19T00:04:17.441-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [Method]
2025-07-19T00:04:17.441-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [Path]
2025-07-19T00:04:17.441-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [Query]
2025-07-19T00:04:17.441-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [ReadBody]
2025-07-19T00:04:17.442-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [RemoteAddr]
2025-07-19T00:04:17.442-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [XForwardedRemoteAddr]
2025-07-19T00:04:17.442-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [Weight]
2025-07-19T00:04:17.442-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator    : Loaded RoutePredicateFactory [CloudFoundryRouteService]
2025-07-19T00:04:17.939-03:00  INFO 15528 --- [api-gateway] [main] DiscoveryClientOptionalArgsConfiguration : Eureka HTTP Client uses RestTemplate.
2025-07-19T00:04:18.093-03:00  WARN 15528 --- [api-gateway] [main] iguration$LoadBalancerCaffeineWarnLogger : Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2025-07-19T00:04:18.162-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.n.eureka.InstanceInfoFactory       : Setting initial instance status as: STARTING
2025-07-19T00:04:18.195-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : Initializing Eureka in region us-east-1
2025-07-19T00:04:18.200-03:00  INFO 15528 --- [api-gateway] [main] c.n.d.s.r.aws.ConfigClusterResolver      : Resolving eureka endpoints via configuration
2025-07-19T00:04:18.224-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : Disable delta property : false
2025-07-19T00:04:18.226-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : Single vip registry refresh property : null
2025-07-19T00:04:18.226-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : Force full registry fetch : false
2025-07-19T00:04:18.227-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : Application is null : false
2025-07-19T00:04:18.227-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : Registered Applications size is zero : true
2025-07-19T00:04:18.227-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : Application version is -1: true
2025-07-19T00:04:18.227-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : Getting all instance registry info from the eureka server
2025-07-19T00:04:18.629-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : The response status is 200
2025-07-19T00:04:18.632-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : Starting heartbeat executor: renew interval is: 30
2025-07-19T00:04:18.634-03:00  INFO 15528 --- [api-gateway] [main] c.n.discovery.InstanceInfoReplicator     : InstanceInfoReplicator onDemand update allowed rate per min is 4
2025-07-19T00:04:18.642-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp 1752894258641 with initial instances count: 1
2025-07-19T00:04:18.644-03:00  INFO 15528 --- [api-gateway] [main] o.s.c.n.e.s.EurekaServiceRegistry        : Registering application API-GATEWAY with eureka with status UP
2025-07-19T00:04:18.646-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=1752894258646, current=UP, previous=STARTING]
2025-07-19T00:04:18.649-03:00  INFO 15528 --- [api-gateway] [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_API-GATEWAY/host.docker.internal:api-gateway:8080: registering service...
2025-07-19T00:04:18.701-03:00  INFO 15528 --- [api-gateway] [DiscoveryClient-InstanceInfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_API-GATEWAY/host.docker.internal:api-gateway:8080 - registration status: 204
2025-07-19T00:04:18.699-03:00 ERROR 15528 --- [api-gateway] [main] o.s.c.gateway.route.CachingRouteLocator  : Refresh routes error !!!

java.lang.IllegalArgumentException: Unable to find GatewayFilterFactory with name name
	at org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator.loadGatewayFilters(RouteDefinitionRouteLocator.java:145) ~[spring-cloud-gateway-server-4.1.2.jar:4.1.2]
	at org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator.getFilters(RouteDefinitionRouteLocator.java:186) ~[spring-cloud-gateway-server-4.1.2.jar:4.1.2]
	at org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator.convertToRoute(RouteDefinitionRouteLocator.java:132) ~[spring-cloud-gateway-server-4.1.2.jar:4.1.2]
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.tryEmitScalar(FluxFlatMap.java:492) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:424) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxMergeSequential$MergeSequentialMain.drain(FluxMergeSequential.java:439) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxMergeSequential$MergeSequentialMain.innerComplete(FluxMergeSequential.java:335) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxMergeSequential$MergeSequentialInner.onSubscribe(FluxMergeSequential.java:559) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.Flux.subscribe(Flux.java:8840) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxMergeSequential$MergeSequentialMain.onNext(FluxMergeSequential.java:237) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxMergeSequential$MergeSequentialMain.onSubscribe(FluxMergeSequential.java:198) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.Flux.subscribe(Flux.java:8840) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxMergeSequential$MergeSequentialMain.onNext(FluxMergeSequential.java:237) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxMergeSequential$MergeSequentialMain.onSubscribe(FluxMergeSequential.java:198) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.Mono.subscribe(Mono.java:4568) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.Mono.subscribeWith(Mono.java:4634) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.Mono.subscribe(Mono.java:4534) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.Mono.subscribe(Mono.java:4470) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.Mono.subscribe(Mono.java:4442) ~[reactor-core-3.6.5.jar:3.6.5]
	at org.springframework.cloud.gateway.route.CachingRouteLocator.onApplicationEvent(CachingRouteLocator.java:100) ~[spring-cloud-gateway-server-4.1.2.jar:4.1.2]
	at org.springframework.cloud.gateway.route.CachingRouteLocator.onApplicationEvent(CachingRouteLocator.java:42) ~[spring-cloud-gateway-server-4.1.2.jar:4.1.2]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:185) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:178) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:156) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:451) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:384) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.cloud.gateway.route.RouteRefreshListener.reset(RouteRefreshListener.java:73) ~[spring-cloud-gateway-server-4.1.2.jar:4.1.2]
	at org.springframework.cloud.gateway.route.RouteRefreshListener.onApplicationEvent(RouteRefreshListener.java:54) ~[spring-cloud-gateway-server-4.1.2.jar:4.1.2]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:185) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:178) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:156) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:451) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:384) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:91) ~[spring-cloud-netflix-eureka-client-4.1.1.jar:4.1.1]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:288) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:471) ~[spring-context-6.1.6.jar:6.1.6]
	at java.base/java.lang.Iterable.forEach(Iterable.java:75) ~[na:na]
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:260) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:205) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:981) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:66) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.5.jar:3.2.5]
	at br.com.legalconnect.gateway.LegalconnectGatewayApplication.main(LegalconnectGatewayApplication.java:18) ~[classes/:na]

2025-07-19T00:04:18.715-03:00  WARN 15528 --- [api-gateway] [main] onfigReactiveWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'eurekaAutoServiceRegistration'
2025-07-19T00:04:18.723-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : Shutting down DiscoveryClient ...
2025-07-19T00:04:21.733-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : Unregistering ...
2025-07-19T00:04:21.742-03:00  INFO 15528 --- [api-gateway] [main] c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:8761/eureka/} exception=Connection pool shut down stacktrace=java.lang.IllegalStateException: Connection pool shut down
	at org.apache.hc.core5.util.Asserts.check(Asserts.java:38)
	at org.apache.hc.core5.pool.StrictConnPool.lease(StrictConnPool.java:176)
	at org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager.lease(PoolingHttpClientConnectionManager.java:298)
	at org.apache.hc.client5.http.impl.classic.InternalExecRuntime.acquireEndpoint(InternalExecRuntime.java:103)
	at org.apache.hc.client5.http.impl.classic.ConnectExec.execute(ConnectExec.java:125)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.ProtocolExec.execute(ProtocolExec.java:192)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.HttpRequestRetryExec.execute(HttpRequestRetryExec.java:96)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.ContentCompressionExec.execute(ContentCompressionExec.java:152)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.RedirectExec.execute(RedirectExec.java:115)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.InternalHttpClient.doExecute(InternalHttpClient.java:170)
	at org.apache.hc.client5.http.impl.classic.CloseableHttpClient.execute(CloseableHttpClient.java:87)
	at org.apache.hc.client5.http.impl.classic.CloseableHttpClient.execute(CloseableHttpClient.java:55)
	at org.apache.hc.client5.http.classic.HttpClient.executeOpen(HttpClient.java:183)
	at org.springframework.http.client.HttpComponentsClientHttpRequest.executeInternal(HttpComponentsClientHttpRequest.java:95)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:112)
	at org.springframework.cloud.netflix.eureka.http.RestTemplateTransportClientFactory.lambda$restTemplate$0(RestTemplateTransportClientFactory.java:143)
	at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:88)
	at org.springframework.http.client.InterceptingClientHttpRequest.executeInternal(InterceptingClientHttpRequest.java:72)
	at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:48)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:672)
	at org.springframework.cloud.netflix.eureka.http.RestTemplateEurekaHttpClient.cancel(RestTemplateEurekaHttpClient.java:87)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:91)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)
	at com.netflix.discovery.DiscoveryClient.unregister(DiscoveryClient.java:916)
	at com.netflix.discovery.DiscoveryClient.shutdown(DiscoveryClient.java:892)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMethod.invoke(InitDestroyAnnotationBeanPostProcessor.java:457)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeDestroyMethods(InitDestroyAnnotationBeanPostProcessor.java:415)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(InitDestroyAnnotationBeanPostProcessor.java:239)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:202)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.run(DisposableBeanAdapter.java:195)
	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.destroy(GenericScope.java:389)
	at org.springframework.cloud.context.scope.GenericScope.destroy(GenericScope.java:136)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:211)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:587)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:559)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1202)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:520)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1195)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1186)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:637)
	at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:66)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at br.com.legalconnect.gateway.LegalconnectGatewayApplication.main(LegalconnectGatewayApplication.java:18)

2025-07-19T00:04:21.744-03:00  WARN 15528 --- [api-gateway] [main] c.n.d.s.t.d.RetryableEurekaHttpClient    : Request execution failed with message: Connection pool shut down
2025-07-19T00:04:21.749-03:00  INFO 15528 --- [api-gateway] [main] c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:8761/eureka/}, exception=Connection pool shut down stacktrace=java.lang.IllegalStateException: Connection pool shut down
	at org.apache.hc.core5.util.Asserts.check(Asserts.java:38)
	at org.apache.hc.core5.pool.StrictConnPool.lease(StrictConnPool.java:176)
	at org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager.lease(PoolingHttpClientConnectionManager.java:298)
	at org.apache.hc.client5.http.impl.classic.InternalExecRuntime.acquireEndpoint(InternalExecRuntime.java:103)
	at org.apache.hc.client5.http.impl.classic.ConnectExec.execute(ConnectExec.java:125)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.ProtocolExec.execute(ProtocolExec.java:192)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.HttpRequestRetryExec.execute(HttpRequestRetryExec.java:96)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.ContentCompressionExec.execute(ContentCompressionExec.java:152)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.RedirectExec.execute(RedirectExec.java:115)
	at org.apache.hc.client5.http.impl.classic.ExecChainElement.execute(ExecChainElement.java:51)
	at org.apache.hc.client5.http.impl.classic.InternalHttpClient.doExecute(InternalHttpClient.java:170)
	at org.apache.hc.client5.http.impl.classic.CloseableHttpClient.execute(CloseableHttpClient.java:87)
	at org.apache.hc.client5.http.impl.classic.CloseableHttpClient.execute(CloseableHttpClient.java:55)
	at org.apache.hc.client5.http.classic.HttpClient.executeOpen(HttpClient.java:183)
	at org.springframework.http.client.HttpComponentsClientHttpRequest.executeInternal(HttpComponentsClientHttpRequest.java:95)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:112)
	at org.springframework.cloud.netflix.eureka.http.RestTemplateTransportClientFactory.lambda$restTemplate$0(RestTemplateTransportClientFactory.java:143)
	at org.springframework.http.client.InterceptingClientHttpRequest$InterceptingRequestExecution.execute(InterceptingClientHttpRequest.java:88)
	at org.springframework.http.client.InterceptingClientHttpRequest.executeInternal(InterceptingClientHttpRequest.java:72)
	at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:48)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:672)
	at org.springframework.cloud.netflix.eureka.http.RestTemplateEurekaHttpClient.cancel(RestTemplateEurekaHttpClient.java:87)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:121)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:80)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)
	at com.netflix.discovery.DiscoveryClient.unregister(DiscoveryClient.java:916)
	at com.netflix.discovery.DiscoveryClient.shutdown(DiscoveryClient.java:892)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMethod.invoke(InitDestroyAnnotationBeanPostProcessor.java:457)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeDestroyMethods(InitDestroyAnnotationBeanPostProcessor.java:415)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(InitDestroyAnnotationBeanPostProcessor.java:239)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:202)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.run(DisposableBeanAdapter.java:195)
	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.destroy(GenericScope.java:389)
	at org.springframework.cloud.context.scope.GenericScope.destroy(GenericScope.java:136)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:211)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:587)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:559)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1202)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:520)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1195)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1186)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:637)
	at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:66)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at br.com.legalconnect.gateway.LegalconnectGatewayApplication.main(LegalconnectGatewayApplication.java:18)

2025-07-19T00:04:21.749-03:00  WARN 15528 --- [api-gateway] [main] c.n.d.s.t.d.RetryableEurekaHttpClient    : Request execution failed with message: Connection pool shut down
2025-07-19T00:04:21.750-03:00 ERROR 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_API-GATEWAY/host.docker.internal:api-gateway:8080 - de-registration failedCannot execute request on any known server

com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-2.0.2.jar:2.0.2]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71) ~[eureka-client-2.0.2.jar:2.0.2]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74) ~[eureka-client-2.0.2.jar:2.0.2]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-2.0.2.jar:2.0.2]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71) ~[eureka-client-2.0.2.jar:2.0.2]
	at com.netflix.discovery.DiscoveryClient.unregister(DiscoveryClient.java:916) ~[eureka-client-2.0.2.jar:2.0.2]
	at com.netflix.discovery.DiscoveryClient.shutdown(DiscoveryClient.java:892) ~[eureka-client-2.0.2.jar:2.0.2]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[na:na]
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMethod.invoke(InitDestroyAnnotationBeanPostProcessor.java:457) ~[spring-beans-6.1.6.jar:6.1.6]
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeDestroyMethods(InitDestroyAnnotationBeanPostProcessor.java:415) ~[spring-beans-6.1.6.jar:6.1.6]
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(InitDestroyAnnotationBeanPostProcessor.java:239) ~[spring-beans-6.1.6.jar:6.1.6]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:202) ~[spring-beans-6.1.6.jar:6.1.6]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.run(DisposableBeanAdapter.java:195) ~[spring-beans-6.1.6.jar:6.1.6]
	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.destroy(GenericScope.java:389) ~[spring-cloud-context-4.1.2.jar:4.1.2]
	at org.springframework.cloud.context.scope.GenericScope.destroy(GenericScope.java:136) ~[spring-cloud-context-4.1.2.jar:4.1.2]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:211) ~[spring-beans-6.1.6.jar:6.1.6]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:587) ~[spring-beans-6.1.6.jar:6.1.6]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:559) ~[spring-beans-6.1.6.jar:6.1.6]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1202) ~[spring-beans-6.1.6.jar:6.1.6]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:520) ~[spring-beans-6.1.6.jar:6.1.6]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1195) ~[spring-beans-6.1.6.jar:6.1.6]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1186) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:637) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:66) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.5.jar:3.2.5]
	at br.com.legalconnect.gateway.LegalconnectGatewayApplication.main(LegalconnectGatewayApplication.java:18) ~[classes/:na]

2025-07-19T00:04:21.756-03:00  INFO 15528 --- [api-gateway] [main] com.netflix.discovery.DiscoveryClient    : Completed shut down of DiscoveryClient
2025-07-19T00:04:21.770-03:00  INFO 15528 --- [api-gateway] [main] .s.b.a.l.ConditionEvaluationReportLogger : 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-19T00:04:21.790-03:00 ERROR 15528 --- [api-gateway] [main] o.s.boot.SpringApplication               : Application run failed

org.springframework.context.ApplicationContextException: Failed to start bean 'eurekaAutoServiceRegistration'
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:291) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:471) ~[spring-context-6.1.6.jar:6.1.6]
	at java.base/java.lang.Iterable.forEach(Iterable.java:75) ~[na:na]
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:260) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:205) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:981) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:66) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354) ~[spring-boot-3.2.5.jar:3.2.5]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-3.2.5.jar:3.2.5]
	at br.com.legalconnect.gateway.LegalconnectGatewayApplication.main(LegalconnectGatewayApplication.java:18) ~[classes/:na]
Caused by: java.lang.IllegalArgumentException: Unable to find GatewayFilterFactory with name name
	at org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator.loadGatewayFilters(RouteDefinitionRouteLocator.java:145) ~[spring-cloud-gateway-server-4.1.2.jar:4.1.2]
	at org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator.getFilters(RouteDefinitionRouteLocator.java:186) ~[spring-cloud-gateway-server-4.1.2.jar:4.1.2]
	at org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator.convertToRoute(RouteDefinitionRouteLocator.java:132) ~[spring-cloud-gateway-server-4.1.2.jar:4.1.2]
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.tryEmitScalar(FluxFlatMap.java:492) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:424) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxMergeSequential$MergeSequentialMain.drain(FluxMergeSequential.java:439) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxMergeSequential$MergeSequentialMain.innerComplete(FluxMergeSequential.java:335) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxMergeSequential$MergeSequentialInner.onSubscribe(FluxMergeSequential.java:559) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.Flux.subscribe(Flux.java:8840) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxMergeSequential$MergeSequentialMain.onNext(FluxMergeSequential.java:237) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxMergeSequential$MergeSequentialMain.onSubscribe(FluxMergeSequential.java:198) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.Flux.subscribe(Flux.java:8840) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxMergeSequential$MergeSequentialMain.onNext(FluxMergeSequential.java:237) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxMergeSequential$MergeSequentialMain.onSubscribe(FluxMergeSequential.java:198) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.InternalFluxOperator.subscribe(InternalFluxOperator.java:68) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.FluxDefer.subscribe(FluxDefer.java:54) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.Flux.subscribe(Flux.java:8840) ~[reactor-core-3.6.5.jar:3.6.5]
	at reactor.core.publisher.Flux.blockLast(Flux.java:2816) ~[reactor-core-3.6.5.jar:3.6.5]
	at org.springframework.cloud.gateway.filter.WeightCalculatorWebFilter.lambda$onApplicationEvent$3(WeightCalculatorWebFilter.java:156) ~[spring-cloud-gateway-server-4.1.2.jar:4.1.2]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider.ifAvailable(DefaultListableBeanFactory.java:2126) ~[spring-beans-6.1.6.jar:6.1.6]
	at org.springframework.cloud.gateway.filter.WeightCalculatorWebFilter.onApplicationEvent(WeightCalculatorWebFilter.java:156) ~[spring-cloud-gateway-server-4.1.2.jar:4.1.2]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:185) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:178) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:156) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:451) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:384) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.cloud.gateway.route.RouteRefreshListener.reset(RouteRefreshListener.java:73) ~[spring-cloud-gateway-server-4.1.2.jar:4.1.2]
	at org.springframework.cloud.gateway.route.RouteRefreshListener.onApplicationEvent(RouteRefreshListener.java:54) ~[spring-cloud-gateway-server-4.1.2.jar:4.1.2]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:185) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:178) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:156) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:451) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:384) ~[spring-context-6.1.6.jar:6.1.6]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:91) ~[spring-cloud-netflix-eureka-client-4.1.1.jar:4.1.1]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:288) ~[spring-context-6.1.6.jar:6.1.6]
	... 13 common frames omitted
	Suppressed: java.lang.Exception: #block terminated with an error
		at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:104) ~[reactor-core-3.6.5.jar:3.6.5]
		at reactor.core.publisher.Flux.blockLast(Flux.java:2817) ~[reactor-core-3.6.5.jar:3.6.5]
		... 30 common frames omitted


```
```java
{
  "openapi": "3.0.1",
  "info": {
    "title": "LegalConnect Gateway API",
    "description": "API Gateway para o sistema LegalConnect",
    "version": "1.0"
  },
  "servers": [
    { "url": "http://192.168.1.4:54557", "description": "Generated server url" }
  ],
  "security": [{ "JWT": [] }],
  "paths": {
    "/api/v1/auth/socios/registrar": {
      "post": {
        "tags": ["auth-controller"],
        "operationId": "registerSocio",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseUserResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/senhas/redefinir": {
      "post": {
        "tags": ["auth-controller"],
        "operationId": "resetPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ResetPasswordRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/senhas/recuperar": {
      "post": {
        "tags": ["auth-controller"],
        "operationId": "recoverPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecoverPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/BaseResponseVoid" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/refresh-token": {
      "post": {
        "tags": ["auth-controller"],
        "operationId": "refreshToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseAuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": ["auth-controller"],
        "operationId": "authenticate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginRequestDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseAuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/clientes/registrar": {
      "post": {
        "tags": ["auth-controller"],
        "operationId": "registerClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseUserResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/advogados/registrar": {
      "post": {
        "tags": ["auth-controller"],
        "operationId": "registerAdvogado",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseUserResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/administradores/registrar": {
      "post": {
        "tags": ["auth-controller"],
        "operationId": "registerAdmin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseUserResponseDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRegistrationRequest": {
        "required": ["cpf", "email", "nomeCompleto", "senha", "userType"],
        "type": "object",
        "properties": {
          "nomeCompleto": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "email": { "maxLength": 255, "minLength": 0, "type": "string" },
          "cpf": {
            "pattern": "^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$",
            "type": "string"
          },
          "telefone": { "maxLength": 20, "minLength": 0, "type": "string" },
          "senha": {
            "maxLength": 2147483647,
            "minLength": 8,
            "type": "string"
          },
          "userType": { "type": "string" }
        }
      },
      "BaseResponseUserResponseDTO": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": { "$ref": "#/components/schemas/UserResponseDTO" },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "UserResponseDTO": {
        "type": "object",
        "properties": {
          "nomeCompleto": { "type": "string" },
          "email": { "type": "string" },
          "cpf": { "type": "string" },
          "telefone": { "type": "string" },
          "fotoUrl": { "type": "string" },
          "status": { "type": "string" }
        }
      },
      "ResetPasswordRequest": {
        "required": ["novaSenha", "token"],
        "type": "object",
        "properties": {
          "token": { "type": "string" },
          "novaSenha": {
            "maxLength": 2147483647,
            "minLength": 8,
            "type": "string"
          }
        }
      },
      "BaseResponseVoid": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": { "type": "object" },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "RecoverPasswordRequest": {
        "required": ["email"],
        "type": "object",
        "properties": { "email": { "type": "string" } }
      },
      "RefreshTokenRequestDTO": {
        "required": ["refreshToken"],
        "type": "object",
        "properties": { "refreshToken": { "type": "string" } }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "accessToken": { "type": "string" },
          "refreshToken": { "type": "string" },
          "tokenType": { "type": "string" },
          "expiresIn": { "type": "integer", "format": "int64" }
        }
      },
      "BaseResponseAuthResponse": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["SUCESSO", "ERRO", "AVISO"] },
          "message": { "type": "string" },
          "timestamp": { "type": "string", "format": "date-time" },
          "data": { "$ref": "#/components/schemas/AuthResponse" },
          "errors": { "type": "array", "items": { "type": "string" } }
        }
      },
      "LoginRequestDTO": {
        "required": ["email", "senha"],
        "type": "object",
        "properties": {
          "email": { "type": "string" },
          "senha": { "type": "string" }
        }
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "http",
        "name": "JWT",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}

```
```java
```java
package br.com.legalconnect.gateway;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

@SpringBootApplication
@EnableDiscoveryClient
public class LegalconnectGatewayApplication {

	public static void main(String[] args) {
		SpringApplication.run(LegalconnectGatewayApplication.class, args);
	}

}

```
```java
package br.com.legalconnect.gateway.config;

import java.net.URI;

import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class GatewayConfig {

    // Este bean é para permitir o roteamento dinâmico no application.yml
    // para o Swagger, onde precisamos pegar o URI de qualquer serviço.
    @Bean
    public CustomDiscoveryClientService customDiscoveryClientService(DiscoveryClient discoveryClient) {
        return new CustomDiscoveryClientService(discoveryClient);
    }

    public static class CustomDiscoveryClientService {
        private final DiscoveryClient discoveryClient;

        public CustomDiscoveryClientService(DiscoveryClient discoveryClient) {
            this.discoveryClient = discoveryClient;
        }

        public URI getServiceUri() {
            // Este método será usado no application.yml para resolver o URI dinamicamente.
            // Para o Swagger, precisamos de um URI genérico para que o Gateway possa
            // proxyar requisições para qualquer serviço.
            // Em um cenário real, você pode querer listar todos os serviços
            // e construir as rotas do Swagger dinamicamente em tempo de execução
            // ou ter um serviço de agregação de Swagger.
            // Aqui, apenas retornamos um URI base para o balanceador de carga.
            return URI.create("lb://");
        }
    }

}

```
```java
package br.com.legalconnect.gateway.config;

import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class GatewayRouteConfig {
        private final GatewayFilter jwtFilter;

        public GatewayRouteConfig(GatewayFilter jwtFilter) {
                this.jwtFilter = jwtFilter;
        }
        // @Bean
        // public RouteLocator customRouteLocator(RouteLocatorBuilder builder) {
        // return builder.routes()
        // // Swagger AUTH
        // .route("swagger-ui-auth", r -> r.path("/auth/swagger-ui/**")
        // .filters(f -> f.rewritePath("/auth/swagger-ui/(?<segment>.*)",
        // "/swagger-ui/${segment}"))
        // .uri("lb://AUTH-SERVICE"))
        // // API Docs AUTH
        // .route("api-docs-auth", r -> r.path("/auth/v3/api-docs/**")
        // .filters(f -> f.rewritePath("/auth/v3/api-docs/(?<segment>.*)",
        // "/v3/api-docs/${segment}"))
        // .uri("lb://AUTH-SERVICE"))
        // // Swagger USUARIO
        // .route("swagger-ui-usuario", r -> r.path("/usuario/swagger-ui/**")
        // .filters(f -> f.rewritePath("/usuario/swagger-ui/(?<segment>.*)",
        // "/swagger-ui/${segment}"))
        // .uri("lb://LEGALCONNECT-USUARIO-SERVICE"))
        // // API Docs USUARIO
        // .route("api-docs-usuario", r -> r.path("/usuario/v3/api-docs/**")
        // .filters(f -> f.rewritePath("/usuario/v3/api-docs/(?<segment>.*)",
        // "/v3/api-docs/${segment}"))
        // .uri("lb://LEGALCONNECT-USUARIO-SERVICE"))
        // .build();
        // }

        @Bean
        public RouteLocator customRouteLocator(RouteLocatorBuilder builder) {
                return builder.routes()
                                // Rota principal para o serviço de usuário
                                .route("usuario-service", r -> r.path("/api/usuarios/**")
                                                .filters(f -> f.rewritePath("/api/usuarios/(?<segment>.*)",
                                                                "/${segment}"))
                                                .uri("lb://legalconnect-usuario-service"))

                                // Rota para a documentação OpenAPI
                                .route("usuario-service-api-docs", r -> r.path("/api/usuarios/v3/api-docs/**")
                                                .filters(f -> f.rewritePath("/api/usuarios/v3/api-docs/(?<segment>.*)",
                                                                "/v3/api-docs/${segment}"))
                                                .uri("lb://legalconnect-usuario-service"))

                                // Rota para o Swagger UI
                                .route("usuario-service-swagger-ui", r -> r.path("/api/usuarios/swagger-ui/**")
                                                .filters(f -> f.rewritePath("/api/usuarios/swagger-ui/(?<segment>.*)",
                                                                "/swagger-ui/${segment}"))
                                                .uri("lb://legalconnect-usuario-service"))

                                .build();
        }

}

```
```java
package br.com.legalconnect.gateway.config;

import java.util.List;
import java.util.Map;

import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;

import br.com.legalconnect.gateway.util.JwtUtil;
import reactor.core.publisher.Mono;

@Component // Nome do bean para uso no application.yml
public class JwtTokenFilter implements GatewayFilter {

    private final JwtUtil jwtUtil;

    public JwtTokenFilter(JwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        ServerHttpRequest request = exchange.getRequest();
        ServerHttpResponse response = exchange.getResponse();

        // Verifica se a rota é pública (ex: /auth/** ou Swagger)
        // Isso é mais robusto fazer com Spring Security WebFilterChain
        // Mas para este exemplo, podemos verificar o path
        if (isPublicPath(request.getPath().value())) {
            return chain.filter(exchange);
        }

        List<String> authHeaders = request.getHeaders().get(HttpHeaders.AUTHORIZATION);

        if (authHeaders == null || authHeaders.isEmpty() || !authHeaders.get(0).startsWith("Bearer ")) {
            response.setStatusCode(HttpStatus.UNAUTHORIZED);
            return response.setComplete();
        }

        String token = authHeaders.get(0).substring(7); // Remove "Bearer "

        if (!jwtUtil.validateToken(token)) {
            response.setStatusCode(HttpStatus.UNAUTHORIZED);
            return response.setComplete();
        }

        // Extrai e remove claims específicos
        Map<String, Object> claims = jwtUtil.getAllClaimsFromToken(token);
        String userId = (String) claims.get("X-Correlaton-ID");
        String tenantId = (String) claims.get("X-Tenant-ID");

        // Remove os claims do token original (se necessário para nova validação
        // downstream)
        // Isso é mais complexo pois você precisaria gerar um novo token sem esses
        // claims.
        // Uma abordagem mais comum é manter o token original e propagar os claims
        // em headers separados para os microserviços.
        // Para este projeto, vamos propagar os claims como headers.

        ServerHttpRequest.Builder builder = request.mutate();
        if (userId != null) {
            builder.header("X-User-Id", userId);
        }
        if (tenantId != null) {
            builder.header("X-Tenant-Id", tenantId);
        }

        // Para evitar que o token completo seja enviado para os serviços downstream
        // Se você precisar do token completo downstream, considere remover essa linha
        // ou validar a necessidade.
        builder.header(HttpHeaders.AUTHORIZATION, "Bearer " + token); // Mantém o token original

        return chain.filter(exchange.mutate().request(builder.build()).build());
    }

    // Helper para verificar se o path é público
    private boolean isPublicPath(String path) {
        // Rotas que devem ser liberadas sem autenticação
        return path.startsWith("/auth/") ||
                path.startsWith("/swagger-ui/") ||
                path.startsWith("/v3/api-docs/");
    }
}

```
```java
// com.example.gateway.config/SecurityConfig.java
package br.com.legalconnect.gateway.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.reactive.CorsWebFilter;
import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;

@Configuration
public class SecurityConfig {
    @Bean
    public CorsWebFilter corsWebFilter() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowCredentials(true);
        config.addAllowedOrigin("*");
        config.addAllowedHeader("*");
        config.addAllowedMethod("*");

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);

        return new CorsWebFilter(source);
    }
}
```
```java
package br.com.legalconnect.gateway.util;

import java.util.Date;
import java.util.Map;
import java.util.function.Function;

import javax.crypto.SecretKey;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtUtil {

    @Value("${application.security.jwt.secret-key}")
    private String secret;

    private SecretKey getSigningKey() {
        byte[] keyBytes = secret.getBytes();
        return Keys.hmacShaKeyFor(keyBytes);
    }

    public Map<String, Object> getAllClaimsFromToken(String token) {
        return Jwts.parserBuilder().setSigningKey(getSigningKey()).build().parseClaimsJws(token).getBody();
    }

    public <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = (Claims) getAllClaimsFromToken(token);
        return claimsResolver.apply(claims);
    }

    public Date getExpirationDateFromToken(String token) {
        return getClaimFromToken(token, Claims::getExpiration);
    }

    private Boolean isTokenExpired(String token) {
        final Date expiration = getExpirationDateFromToken(token);
        return expiration.before(new Date());
    }

    public Boolean validateToken(String token) {
        try {
            Jwts.parserBuilder().setSigningKey(getSigningKey()).build().parseClaimsJws(token);
            return true;
        } catch (SignatureException e) {
            // Logger.error("Assinatura JWT inválida: {}", e.getMessage());
        } catch (MalformedJwtException e) {
            // Logger.error("Token JWT malformado: {}", e.getMessage());
        } catch (ExpiredJwtException e) {
            // Logger.error("Token JWT expirado: {}", e.getMessage());
        } catch (UnsupportedJwtException e) {
            // Logger.error("Token JWT não suportado: {}", e.getMessage());
        } catch (IllegalArgumentException e) {
            // Logger.error("String JWT compacta vazia: {}", e.getMessage());
        }
        return false;
    }
}
```
```java
# Server Configuration
server.port=8080

# Application Configuration
spring.application.name=legalconnect-gateway

# Gateway Discovery Configuration
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Eureka Discovery Configuration
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.instance.prefer-ip-address=true

# Swagger Configuration
 

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
```
```java
package br.com.legalconnect.common.common_lib;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class CommonLibApplicationTests {

	@Test
	void contextLoads() {
	}

}

```
```
```java

```
```java
package br.com.legalconnect.gateway;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

@SpringBootApplication
@EnableDiscoveryClient
public class LegalconnectGatewayApplication {

	public static void main(String[] args) {
		SpringApplication.run(LegalconnectGatewayApplication.class, args);
	}

}

```
```java
package br.com.legalconnect.gateway.config.enums;

public enum StatusResponse {
    SUCESSO,
    ERRO,
    AVISO;
}

```
```java
package br.com.legalconnect.gateway.config.exception;

import java.time.LocalDateTime;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;

import br.com.legalconnect.gateway.config.enums.StatusResponse;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class BaseResponse
 * @brief DTO base para padronizar as respostas da API.
 *
 *        Inclui campos comuns para todas as respostas, como status, mensagem,
 *        timestamp e, opcionalmente, uma lista de erros.
 *        Utiliza Lombok para reduzir boilerplate (getters, setters,
 *        construtores, builder).
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL) // Inclui apenas campos não nulos na serialização JSON
public class BaseResponse<T> {

    private StatusResponse status; // Status da resposta (ex: StatusResponse.SUCESSO, StatusResponse.ERRO,
                                   // "WARNING")
    private String message; // Mensagem descritiva da resposta
    private LocalDateTime timestamp; // Data e hora da resposta
    private T data; // Payload da resposta (dados de sucesso)
    private List<String> errors; // Lista de mensagens de erro, se houver
}
```
```java
package br.com.legalconnect.gateway.config.exception;

import org.springframework.http.HttpStatus;

import lombok.Getter;

/**
 * @class BusinessException
 * @brief Exceção personalizada para representar erros de negócio na aplicação.
 *
 *        Esta exceção é lançada quando uma regra de negócio não é satisfeita.
 *        Ela encapsula um {@link ErrorCode} e, opcionalmente, argumentos para
 *        formatar
 *        a mensagem de erro, além de um status HTTP para a resposta da API.
 */
@Getter
public class BusinessException extends RuntimeException {

    private final ErrorCode errorCode; // O código de erro padronizado
    private final String[] args; // Argumentos para formatar a mensagem do erro
    private final HttpStatus httpStatus; // Status HTTP associado a esta exceção

    public BusinessException(ErrorCode errorCode, HttpStatus httpStatus, String args) {
        super(args);
        this.errorCode = errorCode;
        this.args = new String[] { args, errorCode.getMessage() };
        this.httpStatus = httpStatus;
    }

    /**
     * Construtor para BusinessException com um ErrorCode e status HTTP padrão
     * (BAD_REQUEST).
     *
     * @param errorCode O código de erro que define o tipo de exceção de negócio.
     * @param args      Argumentos opcionais para formatar a mensagem do erro.
     */
    public BusinessException(ErrorCode errorCode, String... args) {
        this(errorCode, HttpStatus.BAD_REQUEST, args); // Por padrão, erros de negócio são BAD_REQUEST
    }

    /**
     * Construtor para BusinessException com um ErrorCode e um status HTTP
     * específico.
     *
     * @param errorCode  O código de erro que define o tipo de exceção de negócio.
     * @param httpStatus O status HTTP a ser retornado na resposta da API.
     * @param args       Argumentos opcionais para formatar a mensagem do erro.
     */
    public BusinessException(ErrorCode errorCode, HttpStatus httpStatus, String... args) {
        super(errorCode.getFormattedMessage(args)); // Define a mensagem da exceção usando a mensagem formatada do
                                                    // ErrorCode
        this.errorCode = errorCode;
        this.args = args;
        this.httpStatus = httpStatus;

    }

    /**
     * @brief Retorna a mensagem de erro formatada.
     * @return A mensagem de erro formatada.
     */
    @Override
    public String getMessage() {
        return errorCode.getFormattedMessage(args);
    }

    /**
     * @brief Retorna o código de erro.
     * @return O código de erro.
     */
    public String getCode() {
        return errorCode.getCode();
    }
}
```
```java
package br.com.legalconnect.gateway.config.exception;

import lombok.Getter;

/**
 * @enum ErrorCode
 * @brief Enumeração que define códigos de erro padronizados para a aplicação.
 *
 *        Cada código de erro possui uma mensagem associada, facilitando a
 *        padronização
 *        de respostas de erro na API e a internacionalização ou localização
 *        futura.
 */
@Getter
public enum ErrorCode {
    // Erros gerais de validação
    DADOS_INVALIDOS("001", "Dados fornecidos são inválidos."),
    REQUISICAO_MAL_FORMADA("002", "A requisição está mal formada."),
    PARAMETRO_AUSENTE("003", "Parâmetro obrigatório ausente."),

    // Erros de entidade / negócio
    ENTIDADE_NAO_ENCONTRADA("100", "Entidade não encontrada."),
    EMPRESA_NAO_ENCONTRADA("101", "Empresa não encontrada."),
    PROFISSIONAL_NAO_ENCONTRADO("102", "Profissional não encontrado."),
    CLIENTE_NAO_ENCONTRADO("103", "Cliente não encontrado."),
    ADMINISTRADOR_NAO_ENCONTRADO("104", "Administrador não encontrado."),
    PLANO_NAO_ENCONTRADO("105", "Plano não encontrado."),
    USER_NAO_ENCONTRADO("106", "Usuário associado não encontrado."),

    // Erros de duplicidade
    CNPJ_DUPLICADO("200", "CNPJ já cadastrado."),
    CPF_DUPLICADO("201", "CPF já cadastrado."),
    OAB_DUPLICADA("202", "Número da OAB já cadastrado."),
    EMAIL_DUPLICADO("203", "Email já cadastrado."),
    NOME_PLANO_DUPLICADO("204", "Nome do plano já cadastrado."),

    // Erros de integridade
    INTEGRIDADE_VIOLADA("300", "Violação de integridade de dados."),
    RECURSO_EM_USO("301", "Recurso não pode ser excluído pois está em uso."),

    // Erros de sistema / internos
    ERRO_INTERNO_SERVIDOR("500", "Ocorreu um erro interno no servidor."),
    SERVICO_INDISPONIVEL("503", "Serviço temporariamente indisponível."),

    // Erros Gerais/Comuns (1000-1999)
    GENERIC_ERROR("1000", "Ocorreu um erro inesperado. Por favor, tente novamente mais tarde."),
    INVALID_INPUT("1001", "Dados de entrada inválidos."),
    RESOURCE_NOT_FOUND("1002", "Recurso não encontrado."),
    UNAUTHORIZED_ACCESS("1003", "Acesso não autorizado. Credenciais inválidas ou ausentes."),
    FORBIDDEN_ACCESS("1004", "Acesso negado. Você não tem permissão para realizar esta ação."),
    SERVICE_UNAVAILABLE("1005", "O serviço está temporariamente indisponível. Tente novamente mais tarde."),
    TOO_MANY_REQUESTS("1006", "Muitas requisições. Por favor, aguarde e tente novamente."),
    VALIDATION_ERROR("1007", "Erro de validação nos dados fornecidos."),
    DATABASE_ERROR("1008", "Erro ao acessar o banco de dados."),
    INTEGRATION_ERROR("1009", "Erro de integração com serviço externo."),

    // Erros de Autenticação e Autorização (2000-2999)
    INVALID_CREDENTIALS("2000", "Credenciais de autenticação inválidas."),
    ACCOUNT_LOCKED("2001", "Sua conta está bloqueada."),
    ACCOUNT_DISABLED("2002", "Sua conta está desativada."),
    TOKEN_EXPIRED("2003", "O token de acesso expirou."),
    INVALID_TOKEN("2004", "O token de acesso é inválido."),
    REFRESH_TOKEN_EXPIRED("2005", "O refresh token expirou. Faça login novamente."),
    INVALID_REFRESH_TOKEN("2006", "O refresh token é inválido."),
    USER_NOT_FOUND("2007", "Usuário não encontrado."),
    EMAIL_ALREADY_REGISTERED("2008", "Este e-mail já está cadastrado."),
    PASSWORD_RESET_FAILED("2009", "Falha ao redefinir a senha."),
    INVALID_CURRENT_PASSWORD("2010", "A senha atual fornecida está incorreta."), // Novo erro
    PASSWORD_RESET_TOKEN_INVALID("2011", "Token de redefinição de senha inválido."), // Novo erro
    PASSWORD_RESET_TOKEN_EXPIRED("2012", "Token de redefinição de senha expirado."), // Novo erro
    PASSWORD_RESET_TOKEN_USED("2013", "Token de redefinição de senha já utilizado."), // Novo erro
    PASSWORD_RESET_TOKEN_EXCEEDED("2014", "Limite de redefinições de senha excedido."), // Novo erro

    // Erros de Negócio Específicos (3000-3999) - Exemplo
    TENANT_NOT_FOUND("3000", "Tenant não encontrado."),
    TENANT_DISABLED("3001", "O tenant está desativado."),
    SUBSCRIPTION_EXPIRED("3002", "Sua assinatura expirou."),
    PLAN_NOT_ACTIVE("3003", "O plano selecionado não está ativo."),
    SERVICE_LIMIT_EXCEEDED("3004", "Limite de serviços agendáveis excedido para o seu plano."),
    ADVOCATE_NOT_AVAILABLE("3005", "Advogado não disponível no horário selecionado."),
    APPOINTMENT_CONFLICT("3006", "Conflito de agendamento. O horário já está ocupado."),
    PAYMENT_FAILED("3007", "Falha no processamento do pagamento."),
    INVALID_PROMO_CODE("3008", "Código promocional inválido ou expirado."),
    DOCUMENT_UPLOAD_FAILED("3009", "Falha ao fazer upload do documento."),
    INVALID_DOCUMENT_FORMAT("3010", "Formato de documento inválido."),

    // Erros de Validação de Campo (4000-4999) - Mais específicos, geralmente
    // tratados por @Valid
    FIELD_REQUIRED("4000", "O campo '%s' é obrigatório."),
    INVALID_FORMAT("4001", "O campo '%s' possui formato inválido."),
    MIN_LENGTH("4002", "O campo '%s' deve ter no mínimo %d caracteres."),
    MAX_LENGTH("4003", "O campo '%s' deve ter no máximo %d caracteres."),
    INVALID_EMAIL("4004", "O e-mail fornecido é inválido."),
    INVALID_CPF("4005", "O CPF fornecido é inválido."),
    INVALID_CNPJ("4006", "O CNPJ fornecido é inválido."),
    PASSWORD_TOO_WEAK("4007", "A senha é muito fraca."),
    DATE_IN_PAST("4008", "A data não pode ser no passado."),
    INVALID_ENUM_VALUE("4009", "Valor inválido para o campo '%s'.");

    private final String code;
    private final String message;

    /**
     * Construtor para ErrorCode.
     *
     * @param code    O código único do erro.
     * @param message A mensagem descritiva do erro.
     */
    ErrorCode(String code, String message) {
        this.code = code;
        this.message = message;
    }

    /**
     * @brief Retorna a mensagem de erro formatada com argumentos.
     * @param args Argumentos para formatar a mensagem.
     * @return A mensagem de erro formatada.
     */
    public String getFormattedMessage(Object... args) {
        return String.format(this.message, args);
    }
}

```
```java
package br.com.legalconnect.gateway.config.exception;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.server.ServerWebExchange;

import br.com.legalconnect.gateway.config.enums.StatusResponse;
import reactor.core.publisher.Mono;

@RestControllerAdvice
public class GlobalExceptionHandler {

        @ExceptionHandler(BusinessException.class)
        public Mono<ResponseEntity<BaseResponse>> handleBusinessException(
                        BusinessException ex,
                        ServerWebExchange exchange) {

                BaseResponse response = BaseResponse.builder()
                                .status(StatusResponse.ERRO)
                                .message(ex.getMessage())
                                .build();

                return Mono.just(ResponseEntity
                                .status(ex.getHttpStatus())
                                .body(response));
        }
}
```
```java
package br.com.legalconnect.gateway.util;

import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.function.Function;

import javax.crypto.SecretKey;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;

import br.com.legalconnect.gateway.config.exception.BusinessException;
import br.com.legalconnect.gateway.config.exception.ErrorCode;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component

public class AuthFilter extends AbstractGatewayFilterFactory<AuthFilter.Config> {

    @Value("${application.security.jwt.secret-key}")
    private String secretKey;

    public AuthFilter(

    ) {
        super(Config.class);

    }

    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {
            try {
                String authHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);

                if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                    throw new BusinessException(ErrorCode.USER_NOT_FOUND, "Token não encontrado");
                }

                String token = authHeader.substring(7);

                if (token == null || token.isBlank()) {
                    throw new BusinessException(ErrorCode.USER_NOT_FOUND, "Token não encontrado");
                }

                Claims claims = extractAllClaims(token);
                if (isTokenExpired(token)) {
                    throw new BusinessException(ErrorCode.TOKEN_EXPIRED, "Token expirado");
                }
                String correlationId = claims.get("X-Correlation-ID", String.class);
                String tenantId = claims.get("X-Tenant-ID", String.class);

                if (correlationId == null || correlationId.isBlank()) {
                    throw new BusinessException(ErrorCode.USER_NOT_FOUND, "X-Correlation-ID não encontrado no token");
                }

                if (tenantId == null || tenantId.isBlank()) {
                    throw new BusinessException(ErrorCode.TENANT_NOT_FOUND, "tenantId não encontrado no token");
                }

                ServerWebExchange mutated = exchange.mutate()
                        .request(builder -> {
                            builder.header("X-Correlation-ID", correlationId);
                            builder.header("X-Tenant-ID", tenantId);

                        })
                        .build();

                return chain.filter(mutated);

            } catch (Exception e) {
                log.error("Erro ao processar token JWT: {}", e.getMessage());
                // if (e instanceof BusinessException) {
                // throw (BusinessException) e;
                // }
                throw new BusinessException(ErrorCode.INVALID_TOKEN, "Token inválido ou malformado");
            }
        };
    }

    public static class Config {
    }

    private Claims extractAllClaims(String token) {
        SecretKey key = Keys.hmacShaKeyFor(secretKey.getBytes(StandardCharsets.UTF_8));
        return Jwts.parser()
                .verifyWith(key)
                .build()
                .parseSignedClaims(token)
                .getPayload();
    }

    /**
     * Verifica se o token JWT expirou.
     * 
     * @param token O token JWT.
     * @return True se o token expirou, false caso contrário.
     */
    private boolean isTokenExpired(String token) {
        Date expiration = extractExpiration(token);
        boolean expired = expiration.before(new Date());
        if (expired) {
            log.debug("Token expirado em: {}", expiration);
        }
        return expired;
    }

    /**
     * Extrai a data de expiração do token JWT.
     * 
     * @param token O token JWT.
     * @return A data de expiração.
     */
    Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    public String extractUsername(String token) {
        try {
            return extractClaim(token, Claims::getSubject);
        } catch (Exception e) {
            log.warn("Erro ao extrair username do token: {}", e.getMessage());
            return null;
        }
    }

    /**
     * Extrai uma claim específica do token JWT.
     * 
     * @param token          O token JWT.
     * @param claimsResolver Função para resolver a claim.
     * @param <T>            Tipo da claim.
     * @return O valor da claim.
     */
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

}
```
```java

# src/main/resources/application.properties
# Configuração do Servidor
server.port=8080

# Configuração da Aplicação
spring.application.name=legalconnect-gateway

 
# Configuração de Descoberta do Eureka
# URL do servidor Eureka.
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
# Habilita a busca do registro de serviços do Eureka.
eureka.client.fetch-registry=true
# Habilita o registro deste serviço no Eureka.
eureka.client.register-with-eureka=true
# Prefere o endereço IP ao invés do hostname para registro no Eureka.
eureka.instance.prefer-ip-address=true
# Additional Swagger configuration
 

# Swagger configuration
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packagesToScan=br.com.legalconnect
spring.mvc.favicon.enabled=false

# Configuração do Swagger (Espaço reservado, pode ser configurado dinamicamente via GatewayConfig)

# Configuração do Actuator
# Inclui endpoints do Actuator para monitoramento de saúde e informações.
management.endpoints.web.exposure.include=health,info
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true
 
# application.properties

# Nome da sua aplicação Gateway 

# Configuração das rotas do Gateway
# spring.cloud.gateway.routes[0].id=clientes-route
# spring.cloud.gateway.routes[0].uri=lb://legalconnect-usuario-service
# spring.cloud.gateway.routes[0].predicates[0]=Path=/api/v1/clientes/**


# # Filtros específicos para a rota 'clientes-route'
# # Exemplo de filtro: remove os 2 primeiros segmentos do path
# spring.cloud.gateway.routes[0].filters[0]=StripPrefix=2
# # Exemplo de filtro personalizado (se você tiver um filtro Java chamado MyCustomFilterGatewayFilterFactory)
# spring.cloud.gateway.routes[0].filters[1]=MyCustomFilter
# # Exemplo de filtro que adiciona um cabeçalho à requisição 

# Filtros padrão que se aplicam a todas as rotas

spring.cloud.gateway.routes[1].id=auth-service-route
spring.cloud.gateway.routes[1].uri=lb://auth-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/v1/auth/**
# spring.cloud.gateway.routes[1].filters[0]=AuthFilter

spring.cloud.gateway.routes[0].id=clientes-route
spring.cloud.gateway.routes[0].uri=lb://legalconnect-usuario-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/v1/usuarios/**
spring.cloud.gateway.routes[0].filters[0]=AuthFilter
spring.cloud.gateway.global-filters[0].DedupeResponseHeader.strategy=RETAIN_LAST

spring.cloud.gateway.routes[2].id=advogados-route
spring.cloud.gateway.routes[2].uri=lb://legalconnect-advogados
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/v1/advogados/**
spring.cloud.gateway.routes[2].filters[0]=AuthFilter
spring.cloud.gateway.global-filters[2].DedupeResponseHeader.strategy=RETAIN_LAST
# Chave secreta JWT
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Rotas públicas
application.security.public-paths=/auth/**,/swagger-ui/**,/v3/api-docs/**,/api/usuarios/swagger-ui.html,/api/usuarios/webjars/**,/api/usuarios/v3/api-docs/**

# Configurações específicas para a rota de clientes
application.security.routes.clientes.required-role=CLIENT
application.security.routes.clientes.required-scopes=client.read,client.write
# Desabilite o tratamento de erro padrão do Spring
# Desabilite o tratamento de erro padrão do Spring
spring.webflux.auto-configure-error=false
```
```java
package br.com.legalconnect.common.common_lib;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class CommonLibApplicationTests {

	@Test
	void contextLoads() {
	}

}

```
```java

# src/main/resources/application.properties
# Configuração do Servidor
server.port=8080

# Configuração da Aplicação
spring.application.name=legalconnect-gateway

 
# Configuração de Descoberta do Eureka
# URL do servidor Eureka.
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
# Habilita a busca do registro de serviços do Eureka.
eureka.client.fetch-registry=true
# Habilita o registro deste serviço no Eureka.
eureka.client.register-with-eureka=true
# Prefere o endereço IP ao invés do hostname para registro no Eureka.
eureka.instance.prefer-ip-address=true
# Additional Swagger configuration
 

# Swagger configuration
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packagesToScan=br.com.legalconnect
spring.mvc.favicon.enabled=false

# Configuração do Swagger (Espaço reservado, pode ser configurado dinamicamente via GatewayConfig)

# Configuração do Actuator
# Inclui endpoints do Actuator para monitoramento de saúde e informações.
management.endpoints.web.exposure.include=health,info
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true
 
# application.properties

# Nome da sua aplicação Gateway 

# Configuração das rotas do Gateway
# spring.cloud.gateway.routes[0].id=clientes-route
# spring.cloud.gateway.routes[0].uri=lb://legalconnect-usuario-service
# spring.cloud.gateway.routes[0].predicates[0]=Path=/api/v1/clientes/**


# # Filtros específicos para a rota 'clientes-route'
# # Exemplo de filtro: remove os 2 primeiros segmentos do path
# spring.cloud.gateway.routes[0].filters[0]=StripPrefix=2
# # Exemplo de filtro personalizado (se você tiver um filtro Java chamado MyCustomFilterGatewayFilterFactory)
# spring.cloud.gateway.routes[0].filters[1]=MyCustomFilter
# # Exemplo de filtro que adiciona um cabeçalho à requisição 

# Filtros padrão que se aplicam a todas as rotas

spring.cloud.gateway.routes[1].id=auth-service-route
spring.cloud.gateway.routes[1].uri=lb://auth-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/v1/auth/**
# spring.cloud.gateway.routes[1].filters[0]=AuthFilter

spring.cloud.gateway.routes[0].id=clientes-route
spring.cloud.gateway.routes[0].uri=lb://legalconnect-usuario-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/v1/usuarios/**
spring.cloud.gateway.routes[0].filters[0]=AuthFilter
spring.cloud.gateway.global-filters[0].DedupeResponseHeader.strategy=RETAIN_LAST

spring.cloud.gateway.routes[2].id=advogados-route
spring.cloud.gateway.routes[2].uri=lb://legalconnect-advogados
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/v1/advogados/**
spring.cloud.gateway.routes[2].filters[0]=AuthFilter
spring.cloud.gateway.global-filters[2].DedupeResponseHeader.strategy=RETAIN_LAST
# Chave secreta JWT
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Rotas públicas
application.security.public-paths=/auth/**,/swagger-ui/**,/v3/api-docs/**,/api/usuarios/swagger-ui.html,/api/usuarios/webjars/**,/api/usuarios/v3/api-docs/**

# Configurações específicas para a rota de clientes
application.security.routes.clientes.required-role=CLIENT
application.security.routes.clientes.required-scopes=client.read,client.write
# Desabilite o tratamento de erro padrão do Spring
# Desabilite o tratamento de erro padrão do Spring
spring.webflux.auto-configure-error=false
```
```java
Êþº¾   =   :br/com/legalconnect/gateway/LegalconnectGatewayApplication  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this <Lbr/com/legalconnect/gateway/LegalconnectGatewayApplication; main ([Ljava/lang/String;)V
    *org/springframework/boot/SpringApplication   run b(Ljava/lang/Class;[Ljava/lang/String;)Lorg/springframework/context/ConfigurableApplicationContext; args [Ljava/lang/String; MethodParameters 
SourceFile #LegalconnectGatewayApplication.java RuntimeVisibleAnnotations >Lorg/springframework/boot/autoconfigure/SpringBootApplication; BLorg/springframework/cloud/client/discovery/EnableDiscoveryClient; !               /     *· ±    
       	          
   	       6     *¸ W±    
   
      
                             
       
```
```java
Êþº¾   = 6  7br/com/legalconnect/gateway/config/enums/StatusResponse  java/lang/Enum SUCESSO 9Lbr/com/legalconnect/gateway/config/enums/StatusResponse; ERRO AVISO ENUM$VALUES :[Lbr/com/legalconnect/gateway/config/enums/StatusResponse; <clinit> ()V Code 
     <init> (Ljava/lang/String;I)V	     	     	    	   	 
 LineNumberTable LocalVariableTable
   this 
$enum$name 
$enum$ordinal MethodParameters values <()[Lbr/com/legalconnect/gateway/config/enums/StatusResponse;
 ' ) ( java/lang/System * + 	arraycopy *(Ljava/lang/Object;ILjava/lang/Object;II)V valueOf M(Ljava/lang/String;)Lbr/com/legalconnect/gateway/config/enums/StatusResponse;
  / , 0 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; name 
SourceFile StatusResponse.java 	Signature KLjava/lang/Enum<Lbr/com/legalconnect/gateway/config/enums/StatusResponse;>;@1     @    @    @     	 
        
   m      A» Y· ³ » Y· ³ » Y· ³ ½ Y² SY² SY² S³ ±            
    '            
   1     *+· ±                         #   	 !  "  	 $ %  
   6     ² YK*¾Y<½ YM¸ &,°                  	 , -  
   *     
*¸ .À °                  #    1   2    3 4    5
```
```java
Êþº¾   = \  Mbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder  java/lang/Object status 9Lbr/com/legalconnect/gateway/config/enums/StatusResponse; RuntimeInvisibleAnnotations Llombok/Generated; message Ljava/lang/String; 	timestamp Ljava/time/LocalDateTime; data Ljava/lang/Object; 	Signature TT; errors Ljava/util/List; $Ljava/util/List<Ljava/lang/String;>; <init> ()V Code
     LineNumberTable LocalVariableTable this OLbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder; LocalVariableTypeTable TLbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder<TT;>; (Lbr/com/legalconnect/gateway/config/enums/StatusResponse;)Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder; (Lbr/com/legalconnect/gateway/config/enums/StatusResponse;)Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder<TT;>;	  "   MethodParameters c(Ljava/lang/String;)Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder; h(Ljava/lang/String;)Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder<TT;>;	  ' 	 
 j(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder; o(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder<TT;>;	  +   c(Ljava/lang/Object;)Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder; Y(TT;)Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder<TT;>;	  / 
  a(Ljava/util/List;)Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder; z(Ljava/util/List<Ljava/lang/String;>;)Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder<TT;>;	  3   build =()Lbr/com/legalconnect/gateway/config/exception/BaseResponse; B()Lbr/com/legalconnect/gateway/config/exception/BaseResponse<TT;>; 8 9br/com/legalconnect/gateway/config/exception/BaseResponse
 7 :  ; (Lbr/com/legalconnect/gateway/config/enums/StatusResponse;Ljava/lang/String;Ljava/time/LocalDateTime;Ljava/lang/Object;Ljava/util/List;)V toString ()Ljava/lang/String;
 ? A @ java/lang/String B C valueOf &(Ljava/lang/Object;)Ljava/lang/String;   E F G makeConcatWithConstants n(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile BaseResponse.java (<T:Ljava/lang/Object;>Ljava/lang/Object; BootstrapMethods
 M O N $java/lang/invoke/StringConcatFactory F P (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; L S TBaseResponse.BaseResponseBuilder(status=, message=, timestamp=, data=, errors=) InnerClasses BaseResponseBuilder W %java/lang/invoke/MethodHandles$Lookup Y java/lang/invoke/MethodHandles Lookup NestHost !                   	 
                       
                                                  A     *· ±                                                         M     *+µ !*°                                          #       	 $      %            M     *+µ &*°                           	 
              #    	    (      )            M     *+µ **°                                          #       
 ,      -            W     *+µ .*°                           
                  
   #    
    0      1            W     *+µ 2*°                                                #       4 5      6            X     » 7Y*´ !*´ &*´ **´ .*´ 2· 9°                                     < =             b     &*´ !¸ >*´ &*´ *¸ >*´ .¸ >*´ 2¸ >º D  °                   &            &      H    I     J         K     Q  R T      7 U 	 V X Z  [    7
```
```java
Êþº¾   =   9br/com/legalconnect/gateway/config/exception/BaseResponse  java/lang/Object status 9Lbr/com/legalconnect/gateway/config/enums/StatusResponse; message Ljava/lang/String; 	timestamp Ljava/time/LocalDateTime; data Ljava/lang/Object; 	Signature TT; errors Ljava/util/List; $Ljava/util/List<Ljava/lang/String;>; builder Q()Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder; l<T:Ljava/lang/Object;>()Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder<TT;>; RuntimeInvisibleAnnotations Llombok/Generated; Code  Mbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder
     <init> ()V LineNumberTable LocalVariableTable 	getStatus ;()Lbr/com/legalconnect/gateway/config/enums/StatusResponse;	  #   this ;Lbr/com/legalconnect/gateway/config/exception/BaseResponse; LocalVariableTypeTable @Lbr/com/legalconnect/gateway/config/exception/BaseResponse<TT;>; 
getMessage ()Ljava/lang/String;	  +   getTimestamp ()Ljava/time/LocalDateTime;	  / 	 
 getData ()Ljava/lang/Object; ()TT;	  4   	getErrors ()Ljava/util/List; &()Ljava/util/List<Ljava/lang/String;>;	  9   	setStatus <(Lbr/com/legalconnect/gateway/config/enums/StatusResponse;)V MethodParameters 
setMessage (Ljava/lang/String;)V setTimestamp (Ljava/time/LocalDateTime;)V setData (Ljava/lang/Object;)V (TT;)V 	setErrors (Ljava/util/List;)V '(Ljava/util/List<Ljava/lang/String;>;)V equals (Ljava/lang/Object;)Z
  J K H canEqual
  M   !
  O G H
  Q ( )
  S , -
  U 0 1
  W 5 6 o other this$status other$status this$message 
other$message this$timestamp other$timestamp 	this$data 
other$data this$errors other$errors >Lbr/com/legalconnect/gateway/config/exception/BaseResponse<*>; 
StackMapTable hashCode ()I
  i f g PRIME I result $status $message 
$timestamp $data $errors toString
 t v u java/lang/String w x valueOf &(Ljava/lang/Object;)Ljava/lang/String;   z { | makeConcatWithConstants n(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
   (Lbr/com/legalconnect/gateway/config/enums/StatusResponse;Ljava/lang/String;Ljava/time/LocalDateTime;Ljava/lang/Object;Ljava/util/List;)V (Lbr/com/legalconnect/gateway/config/enums/StatusResponse;Ljava/lang/String;Ljava/time/LocalDateTime;TT;Ljava/util/List<Ljava/lang/String;>;)V 
SourceFile BaseResponse.java (<T:Ljava/lang/Object;>Ljava/lang/Object; RuntimeVisibleAnnotations .Lcom/fasterxml/jackson/annotation/JsonInclude; value 6Lcom/fasterxml/jackson/annotation/JsonInclude$Include; NON_NULL BootstrapMethods
    $java/lang/invoke/StringConcatFactory {  (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;   @BaseResponse(status=, message=, timestamp=, data=, errors=) InnerClasses BaseResponseBuilder  4com/fasterxml/jackson/annotation/JsonInclude$Include  ,com/fasterxml/jackson/annotation/JsonInclude Include  %java/lang/invoke/MethodHandles$Lookup  java/lang/invoke/MethodHandles Lookup NestMembers !                 	 
       
         
      	    
                (      » Y· °                     !             A     *´ "°                    $ %   &        $ '    ( )             A     *´ *°                    $ %   &        $ '    , -             A     *´ .°                    $ %   &        $ '    0 1  
    2            A     *´ 3°                    $ %   &        $ '    5 6  
    7            A     *´ 8°                    $ %   &        $ '    : ;             L     *+µ "±                    $ %         &        $ '   <       = >             L     *+µ *±                    $ %         &        $ '   <       ? @             L     *+µ .±                    $ %      	 
  &        $ '   <    	   A B  
    C            V     *+µ 3±                    $ %         &        $ '         <       D E  
    F            V     *+µ 8±                    $ %         &        $ '         <       G H            Ü  
   ×+*¦ ¬+Á  ¬+À M,*¶ I ¬*¶ LN,¶ L:-Ç Æ § -¶ N ¬*¶ P:,¶ P:Ç Æ § 
¶ N ¬*¶ R:,¶ R:Ç Æ § 
¶ N ¬*¶ T:	,¶ T:
	Ç 
Æ § 
	
¶ N ¬*¶ V:,¶ V:Ç Æ § 
¶ N ¬¬                
   × $ %     × X    Â Y %  $ ³ Z   * ­ [   G  \   M  ]   l k ^   r e _    F `  	  @ a  
 ¶ ! b   ¼  c   &       × $ '    Â Y d  e   A ü  ý   ý   	ý   	ý   	ý   	 <    X   K H             K     +Á ¬                    $ %      Y   &        $ '   <    Y   f g            ö     ;<=*¶ LN;h-Ç +§ -¶ h`=*¶ P:;hÇ +§ ¶ h`=*¶ R:;hÇ +§ ¶ h`=*¶ T:;hÇ +§ ¶ h`=*¶ V:;hÇ +§ ¶ h`=¬               R     $ %     j k    l k  
  m   # h n   > M o   Y 2 p   t  q   &        $ '   e   ã 
ÿ     ÿ     ÿ      ÿ      ÿ       ÿ       ÿ        ÿ        ÿ         ÿ           r )             b     &*¶ L¸ s*¶ P*¶ R¸ s*¶ T¸ s*¶ V¸ sº y  °                   & $ %   &       & $ '                  A     *· }±                    $ %   &        $ '     ~  
                ¢      *· }*+µ "*,µ **-µ .*µ 3*µ 8±               >      $ %                     	 
                &          $ '                 <        	            
        
    e                   	   @          
```
```java
Êþº¾   = ?  >br/com/legalconnect/gateway/config/exception/BusinessException  java/lang/RuntimeException 	errorCode 8Lbr/com/legalconnect/gateway/config/exception/ErrorCode; args [Ljava/lang/String; 
httpStatus %Lorg/springframework/http/HttpStatus; <init> r(Lbr/com/legalconnect/gateway/config/exception/ErrorCode;Lorg/springframework/http/HttpStatus;Ljava/lang/String;)V Code
     (Ljava/lang/String;)V	      java/lang/String
    6br/com/legalconnect/gateway/config/exception/ErrorCode   
getMessage ()Ljava/lang/String;	    	   	 
 LineNumberTable LocalVariableTable this @Lbr/com/legalconnect/gateway/config/exception/BusinessException; Ljava/lang/String; MethodParameters N(Lbr/com/legalconnect/gateway/config/exception/ErrorCode;[Ljava/lang/String;)V	 ' ) ( #org/springframework/http/HttpStatus * 
 BAD_REQUEST
  ,  - s(Lbr/com/legalconnect/gateway/config/exception/ErrorCode;Lorg/springframework/http/HttpStatus;[Ljava/lang/String;)V
  / 0 1 getFormattedMessage '([Ljava/lang/Object;)Ljava/lang/String; getCode
  4 2  getErrorCode :()Lbr/com/legalconnect/gateway/config/exception/ErrorCode; RuntimeInvisibleAnnotations Llombok/Generated; getArgs ()[Ljava/lang/String; 
getHttpStatus '()Lorg/springframework/http/HttpStatus; 
SourceFile BusinessException.java !                 	 
        
   {     #*-· *+µ *½ Y-SY+¶ Sµ *,µ ±              
    "      *    # ! "     #      # 	 
    #  #  $   
    	        %  
   L     
*+² &,· +±       
    & 	 '          
 ! "     
      
    $   	         -  
   q     *+-¶ .· *+µ *-µ *,µ ±           2 	 4  5  6  8     *     ! "            	 
        $   
    	          
   6     *´ *´ ¶ .°           @          ! "    2   
   2     *´ ¶ 3°           H          ! "    5 6  7     8   
   /     *´ °                     ! "    9 :  7     8   
   /     *´ °                     ! "    ; <  7     8   
   /     *´ °                     ! "    =    >
```
```java
Êþº¾   =J  6br/com/legalconnect/gateway/config/exception/ErrorCode  java/lang/Enum DADOS_INVALIDOS 8Lbr/com/legalconnect/gateway/config/exception/ErrorCode; REQUISICAO_MAL_FORMADA PARAMETRO_AUSENTE ENTIDADE_NAO_ENCONTRADA EMPRESA_NAO_ENCONTRADA PROFISSIONAL_NAO_ENCONTRADO CLIENTE_NAO_ENCONTRADO ADMINISTRADOR_NAO_ENCONTRADO PLANO_NAO_ENCONTRADO USER_NAO_ENCONTRADO CNPJ_DUPLICADO 
CPF_DUPLICADO 
OAB_DUPLICADA EMAIL_DUPLICADO NOME_PLANO_DUPLICADO INTEGRIDADE_VIOLADA RECURSO_EM_USO ERRO_INTERNO_SERVIDOR SERVICO_INDISPONIVEL 
GENERIC_ERROR 
INVALID_INPUT RESOURCE_NOT_FOUND UNAUTHORIZED_ACCESS FORBIDDEN_ACCESS SERVICE_UNAVAILABLE TOO_MANY_REQUESTS VALIDATION_ERROR DATABASE_ERROR INTEGRATION_ERROR INVALID_CREDENTIALS ACCOUNT_LOCKED ACCOUNT_DISABLED 
TOKEN_EXPIRED 
INVALID_TOKEN REFRESH_TOKEN_EXPIRED INVALID_REFRESH_TOKEN USER_NOT_FOUND EMAIL_ALREADY_REGISTERED PASSWORD_RESET_FAILED INVALID_CURRENT_PASSWORD PASSWORD_RESET_TOKEN_INVALID PASSWORD_RESET_TOKEN_EXPIRED PASSWORD_RESET_TOKEN_USED PASSWORD_RESET_TOKEN_EXCEEDED TENANT_NOT_FOUND TENANT_DISABLED SUBSCRIPTION_EXPIRED PLAN_NOT_ACTIVE SERVICE_LIMIT_EXCEEDED ADVOCATE_NOT_AVAILABLE APPOINTMENT_CONFLICT PAYMENT_FAILED INVALID_PROMO_CODE DOCUMENT_UPLOAD_FAILED INVALID_DOCUMENT_FORMAT FIELD_REQUIRED INVALID_FORMAT 
MIN_LENGTH 
MAX_LENGTH 
INVALID_EMAIL INVALID_CPF INVALID_CNPJ PASSWORD_TOO_WEAK DATE_IN_PAST INVALID_ENUM_VALUE code Ljava/lang/String; message ENUM$VALUES 9[Lbr/com/legalconnect/gateway/config/exception/ErrorCode; <clinit> ()V Code  Q 001 S !Dados fornecidos sÃ£o invÃ¡lidos.
  U V W <init> :(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V	  Y    \ 002 ^ !A requisiÃ§Ã£o estÃ¡ mal formada.	  `    c 003 e  ParÃ¢metro obrigatÃ³rio ausente.	  g   	 j 100 l Entidade nÃ£o encontrada.	  n 	  
 q 101 s Empresa nÃ£o encontrada.	  u 
   x 102 z Profissional nÃ£o encontrado.	  |     103  Cliente nÃ£o encontrado.	     
  104  Administrador nÃ£o encontrado.	   
    105  Plano nÃ£o encontrado.	       106  #UsuÃ¡rio associado nÃ£o encontrado.	       200  CNPJ jÃ¡ cadastrado.	      ¢ 201 ¤ CPF jÃ¡ cadastrado.	  ¦    © 202 « NÃºmero da OAB jÃ¡ cadastrado.	  ­    ° 203 ² Email jÃ¡ cadastrado.	  ´    · 204 ¹ Nome do plano jÃ¡ cadastrado.	  »    ¾ 300 À #ViolaÃ§Ã£o de integridade de dados.	  Â    Å 301 Ç 2Recurso nÃ£o pode ser excluÃ­do pois estÃ¡ em uso.	  É    Ì 500 Î $Ocorreu um erro interno no servidor.	  Ð    Ó 503 Õ 'ServiÃ§o temporariamente indisponÃ­vel.	  ×    Ú 1000 Ü BOcorreu um erro inesperado. Por favor, tente novamente mais tarde.	  Þ    á 1001 ã Dados de entrada invÃ¡lidos.	  å    è 1002 ê Recurso nÃ£o encontrado.	  ì    ï 1003 ñ ;Acesso nÃ£o autorizado. Credenciais invÃ¡lidas ou ausentes.	  ó    ö 1004 ø CAcesso negado. VocÃª nÃ£o tem permissÃ£o para realizar esta aÃ§Ã£o.	  ú    ý 1005 ÿ KO serviÃ§o estÃ¡ temporariamente indisponÃ­vel. Tente novamente mais tarde.	     1006 ;Muitas requisiÃ§Ãµes. Por favor, aguarde e tente novamente.	      1007
 )Erro de validaÃ§Ã£o nos dados fornecidos.	     ! 1008 !Erro ao acessar o banco de dados.	  !  " 1009 *Erro de integraÃ§Ã£o com serviÃ§o externo.	  "  #  2000" )Credenciais de autenticaÃ§Ã£o invÃ¡lidas.	 $ #  $' 2001) Sua conta estÃ¡ bloqueada.	 + $  %. 20020 Sua conta estÃ¡ desativada.	 2 %  &5 20037 O token de acesso expirou.	 9 &  '< 2004> O token de acesso Ã© invÃ¡lido.	 @ '  (C 2005E /O refresh token expirou. FaÃ§a login novamente.	 G (  )J 2006L O refresh token Ã© invÃ¡lido.	 N )  *Q 2007S UsuÃ¡rio nÃ£o encontrado.	 U *  +X 2008Z !Este e-mail jÃ¡ estÃ¡ cadastrado.	 \ +  ,_ 2009a Falha ao redefinir a senha.	 c ,  -f 2010h (A senha atual fornecida estÃ¡ incorreta.	 j -  .m 2011o *Token de redefiniÃ§Ã£o de senha invÃ¡lido.	 q .  /t 2012v )Token de redefiniÃ§Ã£o de senha expirado.	 x /  0{ 2013} .Token de redefiniÃ§Ã£o de senha jÃ¡ utilizado.	  0  1 2014 +Limite de redefiniÃ§Ãµes de senha excedido.	  1  2 3000 Tenant nÃ£o encontrado.	  2  3 3001 O tenant estÃ¡ desativado.	  3  4 3002 Sua assinatura expirou.	  4  5 3003  %O plano selecionado nÃ£o estÃ¡ ativo.	 ¢ 5  6¥ 3004§ :Limite de serviÃ§os agendÃ¡veis excedido para o seu plano.	 © 6  7¬ 3005® 2Advogado nÃ£o disponÃ­vel no horÃ¡rio selecionado.	 ° 7  8³ 3006µ 6Conflito de agendamento. O horÃ¡rio jÃ¡ estÃ¡ ocupado.	 · 8  9º 3007¼ $Falha no processamento do pagamento.	 ¾ 9  :Á 3008Ã *CÃ³digo promocional invÃ¡lido ou expirado.	 Å :  ;È 3009Ê #Falha ao fazer upload do documento.	 Ì ;  <Ï 3010Ñ Formato de documento invÃ¡lido.	 Ó <  =Ö 4000Ø O campo '%s' Ã© obrigatÃ³rio.	 Ú =  >Ý 4001ß &O campo '%s' possui formato invÃ¡lido.	 á >  ?ä 4002æ /O campo '%s' deve ter no mÃ­nimo %d caracteres.	 è ?  @ë 4003í /O campo '%s' deve ter no mÃ¡ximo %d caracteres.	 ï @  Aò 4004ô  O e-mail fornecido Ã© invÃ¡lido.	 ö A  Bù 4005û O CPF fornecido Ã© invÃ¡lido.	 ý B  C  4006 O CNPJ fornecido Ã© invÃ¡lido.	  C  D 4007	 A senha Ã© muito fraca.	  D  E 4008  A data nÃ£o pode ser no passado.	  E  F 4009 "Valor invÃ¡lido para o campo '%s'.	  F 	  J K LineNumberTable LocalVariableTable
  V  (Ljava/lang/String;I)V	 " G H	 $ I H this 
$enum$name 
$enum$ordinal MethodParameters getFormattedMessage '([Ljava/lang/Object;)Ljava/lang/String;
,.- java/lang/String/0 format 9(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; args [Ljava/lang/Object; getCode ()Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; 
getMessage values ;()[Lbr/com/legalconnect/gateway/config/exception/ErrorCode;
;=< java/lang/System>? 	arraycopy *(Ljava/lang/Object;ILjava/lang/Object;II)V valueOf L(Ljava/lang/String;)Lbr/com/legalconnect/gateway/config/exception/ErrorCode;
 C@D 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; name 
SourceFile ErrorCode.java 	Signature JLjava/lang/Enum<Lbr/com/legalconnect/gateway/config/exception/ErrorCode;>;@1     D@    @    @    @ 	   @ 
   @    @    @ 
   @    @    @    @    @    @    @    @    @    @    @    @    @    @    @    @    @    @    @     @ !   @ "   @ #   @ $   @ %   @ &   @ '   @ (   @ )   @ *   @ +   @ ,   @ -   @ .   @ /   @ 0   @ 1   @ 2   @ 3   @ 4   @ 5   @ 6   @ 7   @ 8   @ 9   @ :   @ ;   @ <   @ =   @ >   @ ?   @ @   @ A   @ B   @ C   @ D   @ E   @ F     G H    I H   J K     L M  N       Î» YOPR· T³ X» YZ[]· T³ _» Yabd· T³ f» Yhik· T³ m» Yopr· T³ t» Yvwy· T³ {» Y}~· T³ » Y· T³ » Y· T³ » Y	· T³ » Y
· T³ » Y ¡£· T³ ¥» Y§¨ª· T³ ¬» Y®
¯±· T³ ³» Yµ¶¸· T³ º» Y¼½¿· T³ Á» YÃÄÆ· T³ È» YÊËÍ· T³ Ï» YÑÒÔ· T³ Ö» YØÙÛ· T³ Ý» Yßàâ· T³ ä» Yæçé· T³ ë» Yíîð· T³ ò» Yôõ÷· T³ ù» Yûüþ· T³ » Y· T³» Y	
· T³» Y· T³» Y· T³» Y!· T³#» Y%&(· T³*» Y,-/· T³1» Y3 46· T³8» Y:!;=· T³?» YA"BD· T³F» YH#IK· T³M» YO$PR· T³T» YV%WY· T³[» Y]&^`· T³b» Yd'eg· T³i» Yk(ln· T³p» Yr)su· T³w» Yy*z|· T³~» Y+· T³» Y,· T³» Y-· T³» Y.· T³» Y/· T³¡» Y£0¤¦· T³¨» Yª1«­· T³¯» Y±2²´· T³¶» Y¸3¹»· T³½» Y¿4ÀÂ· T³Ä» YÆ5ÇÉ· T³Ë» YÍ6ÎÐ· T³Ò» YÔ7Õ×· T³Ù» YÛ8ÜÞ· T³à» Yâ9ãå· T³ç» Yé:êì· T³î» Yð;ñó· T³õ» Y÷<øú· T³ü» Yþ=ÿ· T³» Y>· T³
» Y?
· T³» Y@· T³A½ Y² XSY² _SY² fSY² mSY² tSY² {SY² SY² SY² SY	² SY
² SY² ¥SY² ¬SY
² ³SY² ºSY² ÁSY² ÈSY² ÏSY² ÖSY² ÝSY² äSY² ëSY² òSY² ùSY² SY²SY²SY²SY²SY²#SY²*SY²1SY ²8SY!²?SY"²FSY#²MSY$²TSY%²[SY&²bSY'²iSY(²pSY)²wSY*²~SY+²SY,²SY-²SY.²SY/²¡SY0²¨SY1²¯SY2²¶SY3²½SY4²ÄSY5²ËSY6²ÒSY7²ÙSY8²àSY9²çSY:²îSY;²õSY<²üSY=²SY>²
SY?²SY@²S³±     * J        "  3  :  D  U  f  x      ®  ¶  À   Ò ! ä " ö # % & ', )4 *> +P -X .b /t 0 1 2ª 3¼ 4Ñ 5æ 6û 7 9 :% ;: <O =d >y ? @£ A¸ BÍ Câ D÷ E F! G6 HK K` Lu M N O´ PÉ QÞ Ró S T U2 W; YG Z\ [q \ ] ^° _Å `Ú aï b        V W  N   \     *+·*-µ!*µ#±          m  n  o  p        %       G H     I H (   & '  G   I   )*  N   =     	*´#+¸+°          x       	%      	12 (   1   34 5    6   N   /     *´!°                 %    74 5    6   N   /     *´#°                 %    	89  N   6     ²YK*¾Y<½ YM¸:,°                	@A  N   *     
*¸BÀ °               (   E  F   GH   I
```
```java
Êþº¾   = W  Cbr/com/legalconnect/gateway/config/exception/GlobalExceptionHandler  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this ELbr/com/legalconnect/gateway/config/exception/GlobalExceptionHandler; handleBusinessException (Lbr/com/legalconnect/gateway/config/exception/BusinessException;Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono; 	Signature ù(Lbr/com/legalconnect/gateway/config/exception/BusinessException;Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono<Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/gateway/config/exception/BaseResponse;>;>; RuntimeVisibleAnnotations :Lorg/springframework/web/bind/annotation/ExceptionHandler; value @Lbr/com/legalconnect/gateway/config/exception/BusinessException;
    9br/com/legalconnect/gateway/config/exception/BaseResponse   builder Q()Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder;	    7br/com/legalconnect/gateway/config/enums/StatusResponse   ! ERRO 9Lbr/com/legalconnect/gateway/config/enums/StatusResponse;
 # % $ Mbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder & ' status (Lbr/com/legalconnect/gateway/config/enums/StatusResponse;)Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder;
 ) + * >br/com/legalconnect/gateway/config/exception/BusinessException , - 
getMessage ()Ljava/lang/String;
 # / 0 1 message c(Ljava/lang/String;)Lbr/com/legalconnect/gateway/config/exception/BaseResponse$BaseResponseBuilder;
 # 3 4 5 build =()Lbr/com/legalconnect/gateway/config/exception/BaseResponse;
 ) 7 8 9 
getHttpStatus '()Lorg/springframework/http/HttpStatus;
 ; = < 'org/springframework/http/ResponseEntity & > `(Lorg/springframework/http/HttpStatusCode;)Lorg/springframework/http/ResponseEntity$BodyBuilder; @ B A 3org/springframework/http/ResponseEntity$BodyBuilder C D body =(Ljava/lang/Object;)Lorg/springframework/http/ResponseEntity;
 F H G reactor/core/publisher/Mono I J just 1(Ljava/lang/Object;)Lreactor/core/publisher/Mono; ex exchange 2Lorg/springframework/web/server/ServerWebExchange; response ;Lbr/com/legalconnect/gateway/config/exception/BaseResponse; MethodParameters 
SourceFile GlobalExceptionHandler.java >Lorg/springframework/web/bind/annotation/RestControllerAdvice; InnerClasses BaseResponseBuilder BodyBuilder !               /     *· ±    
                 
                   [ c          %¸ ² ¶ "+¶ (¶ .¶ 2N+¶ 6¸ :-¹ ? ¸ E°    
   "       	          !     *    %  
     % K     % L M    N O  P   	 K   L    Q    R      S   T     #  U 	 @ ; V	
```
```java
Êþº¾   =   2br/com/legalconnect/gateway/util/AuthFilter$Config  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this 4Lbr/com/legalconnect/gateway/util/AuthFilter$Config; 
SourceFile AuthFilter.java InnerClasses  +br/com/legalconnect/gateway/util/AuthFilter Config NestHost !               /     *· ±    
       Y          
            
     	     
```
```java
Êþº¾   =O  +br/com/legalconnect/gateway/util/AuthFilter  Morg/springframework/cloud/gateway/filter/factory/AbstractGatewayFilterFactory log Lorg/slf4j/Logger; RuntimeInvisibleAnnotations Llombok/Generated; 	secretKey Ljava/lang/String; RuntimeVisibleAnnotations 4Lorg/springframework/beans/factory/annotation/Value; value &${application.security.jwt.secret-key} <clinit> ()V Code
    org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>  2br/com/legalconnect/gateway/util/AuthFilter$Config
     ! (Ljava/lang/Class;)V this -Lbr/com/legalconnect/gateway/util/AuthFilter; apply n(Lbr/com/legalconnect/gateway/util/AuthFilter$Config;)Lorg/springframework/cloud/gateway/filter/GatewayFilter;   ' ( ) filter g(Lbr/com/legalconnect/gateway/util/AuthFilter;)Lorg/springframework/cloud/gateway/filter/GatewayFilter; config 4Lbr/com/legalconnect/gateway/util/AuthFilter$Config; MethodParameters extractAllClaims ,(Ljava/lang/String;)Lio/jsonwebtoken/Claims;	  0 	 
	 2 4 3 !java/nio/charset/StandardCharsets 5 6 UTF_8 Ljava/nio/charset/Charset;
 8 : 9 java/lang/String ; < getBytes (Ljava/nio/charset/Charset;)[B
 > @ ? io/jsonwebtoken/security/Keys A B 
hmacShaKeyFor ([B)Ljavax/crypto/SecretKey;
 D F E io/jsonwebtoken/Jwts G H parser $()Lio/jsonwebtoken/JwtParserBuilder; J L K  io/jsonwebtoken/JwtParserBuilder M N 
verifyWith <(Ljavax/crypto/SecretKey;)Lio/jsonwebtoken/JwtParserBuilder; J P Q R build ()Lio/jsonwebtoken/JwtParser; T V U io/jsonwebtoken/JwtParser W X parseSignedClaims /(Ljava/lang/CharSequence;)Lio/jsonwebtoken/Jws; Z \ [ io/jsonwebtoken/Jws ] ^ 
getPayload ()Ljava/lang/Object; ` io/jsonwebtoken/Claims token key Ljavax/crypto/SecretKey; isTokenExpired (Ljava/lang/String;)Z
  g h i extractExpiration $(Ljava/lang/String;)Ljava/util/Date; k java/util/Date
 j m  
 j o p q before (Ljava/util/Date;)Z s Token expirado em: {} u w v org/slf4j/Logger x y debug '(Ljava/lang/String;Ljava/lang/Object;)V 
expiration Ljava/util/Date; expired Z 
StackMapTable   $  ()Ljava/util/function/Function;
     extractClaim C(Ljava/lang/String;Ljava/util/function/Function;)Ljava/lang/Object; extractUsername &(Ljava/lang/String;)Ljava/lang/String;    %Erro ao extrair username do token: {}
    java/lang/Exception   
getMessage ()Ljava/lang/String; u   y warn e Ljava/lang/Exception; 	Signature g<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/util/function/Function<Lio/jsonwebtoken/Claims;TT;>;)TT;
   - .    java/util/function/Function $  &(Ljava/lang/Object;)Ljava/lang/Object; claimsResolver Ljava/util/function/Function; claims Lio/jsonwebtoken/Claims; LocalVariableTypeTable :Ljava/util/function/Function<Lio/jsonwebtoken/Claims;TT;>; L(Ljava/lang/Object;)Lorg/springframework/cloud/gateway/filter/GatewayFilter;
  § $ % lambda$0 (Lorg/springframework/web/server/ServerWebExchange;Lorg/springframework/cloud/gateway/filter/GatewayFilterChain;)Lreactor/core/publisher/Mono; « ­ ¬ 0org/springframework/web/server/ServerWebExchange ® ¯ 
getRequest >()Lorg/springframework/http/server/reactive/ServerHttpRequest; ± ³ ² :org/springframework/http/server/reactive/ServerHttpRequest ´ µ 
getHeaders (()Lorg/springframework/http/HttpHeaders; · $org/springframework/http/HttpHeaders ¹ 
Authorization
 ¶ » ¼  getFirst ¾ Bearer 
 8 À Á e 
startsWith Ã >br/com/legalconnect/gateway/config/exception/BusinessException	 Å Ç Æ 6br/com/legalconnect/gateway/config/exception/ErrorCode È É USER_NOT_FOUND 8Lbr/com/legalconnect/gateway/config/exception/ErrorCode; Ë Token nÃ£o encontrado
 Â Í  Î N(Lbr/com/legalconnect/gateway/config/exception/ErrorCode;[Ljava/lang/String;)V
 8 Ð Ñ Ò 	substring (I)Ljava/lang/String;
 8 Ô Õ Ö isBlank ()Z
  Ø d e	 Å Ú Û É 
TOKEN_EXPIRED Ý Token expirado ß X-Correlation-ID _ á â ã get 7(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object; å X-Tenant-ID ç )X-Correlation-ID nÃ£o encontrado no token	 Å é ê É TENANT_NOT_FOUND ì !tenantId nÃ£o encontrado no token « î ï ð mutate <()Lorg/springframework/web/server/ServerWebExchange$Builder;  ò ó ô accept C(Ljava/lang/String;Ljava/lang/String;)Ljava/util/function/Consumer; ö ø ÷ 8org/springframework/web/server/ServerWebExchange$Builder ù ú request Y(Ljava/util/function/Consumer;)Lorg/springframework/web/server/ServerWebExchange$Builder; ö ü Q ý 4()Lorg/springframework/web/server/ServerWebExchange; ÿ  ;org/springframework/cloud/gateway/filter/GatewayFilterChain ( Q(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono; Erro ao processar token JWT: {} u y error	 Å	
 É 
INVALID_TOKEN Token invÃ¡lido ou malformado exchange 2Lorg/springframework/web/server/ServerWebExchange; chain =Lorg/springframework/cloud/gateway/filter/GatewayFilterChain; 
authHeader 
correlationId tenantId mutated lambda$1 k(Ljava/lang/String;Ljava/lang/String;Lorg/springframework/http/server/reactive/ServerHttpRequest$Builder;)V Borg/springframework/http/server/reactive/ServerHttpRequest$Builder header k(Ljava/lang/String;[Ljava/lang/String;)Lorg/springframework/http/server/reactive/ServerHttpRequest$Builder; builder DLorg/springframework/http/server/reactive/ServerHttpRequest$Builder; 
SourceFile AuthFilter.java Lorg/springframework/cloud/gateway/filter/factory/AbstractGatewayFilterFactory<Lbr/com/legalconnect/gateway/util/AuthFilter$Config;>; *Lorg/springframework/stereotype/Component; BootstrapMethods
%'& "java/lang/invoke/LambdaMetafactory() metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;$ ©
 - ¨ ©, ©  _234 
getExpiration ()Ljava/util/Date;	1 *(Lio/jsonwebtoken/Claims;)Ljava/util/Date;6  _:;  
getSubject	9 ,(Lio/jsonwebtoken/Claims;)Ljava/lang/String;= (Ljava/lang/Object;)V?
 BA G(Lorg/springframework/http/server/reactive/ServerHttpRequest$Builder;)VD InnerClasses ConfigI %java/lang/invoke/MethodHandles$LookupK java/lang/invoke/MethodHandles Lookup Builder NestMembers !                   	 
         
s          )      	¸ ³ ±                         5     *· ±       
    "  $         " #    $ %     ;     *º &  °           (         " #      * +  ,    *    - .          +*´ /² 1¶ 7¸ =M¸ C,¹ I ¹ O +¹ S ¹ Y À _°           ]  ^  _  `  a " b * ^         + " #     + a 
    b c  ,    a    d e          #*+¶ fM,» jY· l¶ n> ² r,¹ t ¬           l  m  n  o ! q    *    # " #     # a 
    z {    | }  ~   	 ý ! j ,    a     h i     B     *+º   ¶ À j°           {         " #      a 
  ,    a          }     *+º   ¶ À 8°M² ,¶ ¹  °    
                           " #      a 
       ~    N  ,    a               l     *+¶ N,-¹  °       
          *     " #      a 
           ¡ ¢  £         ¤  ,   	 a     A $ ¥     )     	*+À ¶ ¦°                  ¨ ©    J  	  ++¹ ª ¹ ° ¸¶ ºN-Æ -½¶ ¿ » ÂY² Ä½ 8YÊS· Ì¿-¶ Ï:Æ ¶ Ó » ÂY² Ä½ 8YÊS· Ì¿*¶ :*¶ × » ÂY² Ù½ 8YÜS· Ì¿Þ8¹ à À 8:ä8¹ à À 8:Æ ¶ Ó » ÂY² Ä½ 8YæS· Ì¿Æ ¶ Ó » ÂY² è½ 8YëS· Ì¿+¹ í º ñ  ¹ õ ¹ û :,¹ þ °N² -¶ ¹ » ÂY²½ 8YS· Ì¿         ^    *  ,  - 2 0 : 2 G 3 [ 6 c 7 l 8  :  ;   = ­ > Á A Î B â E è F ö K û E ý M O P T    f 
  + " #    +
   +   õ 
  : Ì a 
  c £ ¡ ¢   v 
    f 
  ý 	  $    ~   5 
ü  8ü  8ü $ _ý , 8 8ÿ #   « ÿ  
     U     #,Þ½ 8Y*S¹ W,ä½ 8Y+S¹ W±           G  H " J        #          !     "  #   * * +./* 057* 8<>* @CEF   "   G 	HJL  ±M	 ö «M	N     
```
```java
br\com\legalconnect\gateway\config\RouteConfig.class
br\com\legalconnect\gateway\config\JwtTokenFilterFactory.class
br\com\legalconnect\gateway\config\SecurityProperties.class
br\com\legalconnect\gateway\util\JwtUtil.class
br\com\legalconnect\gateway\LegalconnectGatewayApplication.class
br\com\legalconnect\gateway\config\JwtTokenFilter.class
br\com\legalconnect\gateway\config\JwtTokenFilterFactory$Config.class

```
```java
E:\legalconnect\legalconnect\microservices\legal-gaateway\src\main\java\br\com\legalconnect\gateway\LegalconnectGatewayApplication.java
E:\legalconnect\legalconnect\microservices\legal-gaateway\src\main\java\br\com\legalconnect\gateway\config\JwtTokenFilter.java
E:\legalconnect\legalconnect\microservices\legal-gaateway\src\main\java\br\com\legalconnect\gateway\config\RouteConfig.java
E:\legalconnect\legalconnect\microservices\legal-gaateway\src\main\java\br\com\legalconnect\gateway\config\SecurityProperties.java
E:\legalconnect\legalconnect\microservices\legal-gaateway\src\main\java\br\com\legalconnect\gateway\util\JwtUtil.java
E:\legalconnect\legalconnect\microservices\legal-gaateway\src\main\java\br\com\legalconnect\gateway\config\JwtTokenFilterFactory.java

```
```java
br\com\legalconnect\common\common_lib\CommonLibApplicationTests.class

```
```java
E:\legalconnect\legalconnect\microservices\legal-gaateway\src\test\java\br\com\legalconnect\common\common_lib\CommonLibApplicationTests.java

```
```java
# Created at 2025-07-21T20:21:10.988
Boot Manifest-JAR contains absolute paths in classpath 'E:\legalconnect\legalconnect\microservices\legal-gaateway\target\test-classes'
Hint: <argLine>-Djdk.net.URLClassPath.disableClassPathURLCheck=true</argLine>
'other' has different root


```
```java
-------------------------------------------------------------------------------
Test set: br.com.legalconnect.common.common_lib.CommonLibApplicationTests
-------------------------------------------------------------------------------
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.213 s <<< FAILURE! -- in br.com.legalconnect.common.common_lib.CommonLibApplicationTests
br.com.legalconnect.common.common_lib.CommonLibApplicationTests -- Time elapsed: 0.213 s <<< ERROR!
java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=...) with your test
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.findConfigurationClass(SpringBootTestContextBootstrapper.java:246)
	at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.getOrFindConfigurationClasses(SpringBootTestContextBootstrapper.java:233)
	at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.processMergedContextConfiguration(SpringBootTestContextBootstrapper.java:150)
	at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:351)
	at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildDefaultMergedContextConfiguration(AbstractTestContextBootstrapper.java:267)
	at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:215)
	at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildTestContext(AbstractTestContextBootstrapper.java:108)
	at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.buildTestContext(SpringBootTestContextBootstrapper.java:111)
	at org.springframework.test.context.TestContextManager.<init>(TestContextManager.java:142)
	at org.springframework.test.context.TestContextManager.<init>(TestContextManager.java:126)
	at org.springframework.test.context.junit.jupiter.SpringExtension.getTestContextManager(SpringExtension.java:366)
	at org.springframework.test.context.junit.jupiter.SpringExtension.beforeAll(SpringExtension.java:131)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)


```
```java
<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="br.com.legalconnect.common.common_lib.CommonLibApplicationTests" time="0.213" tests="1" errors="1" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="E:\legalconnect\legalconnect\microservices\legal-gaateway\target\test-classes;E:\legalconnect\legalconnect\microservices\legal-gaateway\target\classes;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-starter-gateway\4.1.5\spring-cloud-starter-gateway-4.1.5.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-starter\4.1.4\spring-cloud-starter-4.1.4.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-context\4.1.4\spring-cloud-context-4.1.4.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-commons\4.1.4\spring-cloud-commons-4.1.4.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-rsa\1.1.3\spring-security-rsa-1.1.3.jar;C:\Users\marce\.m2\repository\org\bouncycastle\bcprov-jdk18on\1.78\bcprov-jdk18on-1.78.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-gateway-server\4.1.5\spring-cloud-gateway-server-4.1.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-validation\3.2.5\spring-boot-starter-validation-3.2.5.jar;C:\Users\marce\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.20\tomcat-embed-el-10.1.20.jar;C:\Users\marce\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.1.Final\hibernate-validator-8.0.1.Final.jar;C:\Users\marce\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\marce\.m2\repository\org\jboss\logging\jboss-logging\3.5.3.Final\jboss-logging-3.5.3.Final.jar;C:\Users\marce\.m2\repository\com\fasterxml\classmate\1.6.0\classmate-1.6.0.jar;C:\Users\marce\.m2\repository\io\projectreactor\addons\reactor-extra\3.5.1\reactor-extra-3.5.1.jar;C:\Users\marce\.m2\repository\io\projectreactor\reactor-core\3.6.5\reactor-core-3.6.5.jar;C:\Users\marce\.m2\repository\org\reactivestreams\reactive-streams\1.0.4\reactive-streams-1.0.4.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-webflux\3.2.5\spring-boot-starter-webflux-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.2.5\spring-boot-starter-json-3.2.5.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.15.4\jackson-datatype-jdk8-2.15.4.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.15.4\jackson-datatype-jsr310-2.15.4.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.15.4\jackson-module-parameter-names-2.15.4.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-reactor-netty\3.2.5\spring-boot-starter-reactor-netty-3.2.5.jar;C:\Users\marce\.m2\repository\io\projectreactor\netty\reactor-netty-http\1.1.18\reactor-netty-http-1.1.18.jar;C:\Users\marce\.m2\repository\io\netty\netty-codec-http\4.1.109.Final\netty-codec-http-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-common\4.1.109.Final\netty-common-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-buffer\4.1.109.Final\netty-buffer-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-transport\4.1.109.Final\netty-transport-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-codec\4.1.109.Final\netty-codec-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-handler\4.1.109.Final\netty-handler-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-codec-http2\4.1.109.Final\netty-codec-http2-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-resolver-dns\4.1.109.Final\netty-resolver-dns-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-resolver\4.1.109.Final\netty-resolver-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-codec-dns\4.1.109.Final\netty-codec-dns-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-resolver-dns-native-macos\4.1.109.Final\netty-resolver-dns-native-macos-4.1.109.Final-osx-x86_64.jar;C:\Users\marce\.m2\repository\io\netty\netty-resolver-dns-classes-macos\4.1.109.Final\netty-resolver-dns-classes-macos-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-transport-native-epoll\4.1.109.Final\netty-transport-native-epoll-4.1.109.Final-linux-x86_64.jar;C:\Users\marce\.m2\repository\io\netty\netty-transport-native-unix-common\4.1.109.Final\netty-transport-native-unix-common-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-transport-classes-epoll\4.1.109.Final\netty-transport-classes-epoll-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\projectreactor\netty\reactor-netty-core\1.1.18\reactor-netty-core-1.1.18.jar;C:\Users\marce\.m2\repository\io\netty\netty-handler-proxy\4.1.109.Final\netty-handler-proxy-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-codec-socks\4.1.109.Final\netty-codec-socks-4.1.109.Final.jar;C:\Users\marce\.m2\repository\org\springframework\spring-web\6.1.6\spring-web-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-webflux\6.1.6\spring-webflux-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-starter-netflix-eureka-client\4.1.3\spring-cloud-starter-netflix-eureka-client-4.1.3.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-netflix-eureka-client\4.1.3\spring-cloud-netflix-eureka-client-4.1.3.jar;C:\Users\marce\.m2\repository\org\apache\httpcomponents\client5\httpclient5\5.2.3\httpclient5-5.2.3.jar;C:\Users\marce\.m2\repository\org\apache\httpcomponents\core5\httpcore5\5.2.4\httpcore5-5.2.4.jar;C:\Users\marce\.m2\repository\org\apache\httpcomponents\core5\httpcore5-h2\5.2.4\httpcore5-h2-5.2.4.jar;C:\Users\marce\.m2\repository\com\netflix\eureka\eureka-client\2.0.3\eureka-client-2.0.3.jar;C:\Users\marce\.m2\repository\com\thoughtworks\xstream\xstream\1.4.20\xstream-1.4.20.jar;C:\Users\marce\.m2\repository\io\github\x-stream\mxparser\1.2.2\mxparser-1.2.2.jar;C:\Users\marce\.m2\repository\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;C:\Users\marce\.m2\repository\jakarta\ws\rs\jakarta.ws.rs-api\3.1.0\jakarta.ws.rs-api-3.1.0.jar;C:\Users\marce\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\marce\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\marce\.m2\repository\com\netflix\spectator\spectator-api\1.7.3\spectator-api-1.7.3.jar;C:\Users\marce\.m2\repository\org\slf4j\slf4j-api\2.0.13\slf4j-api-2.0.13.jar;C:\Users\marce\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar;C:\Users\marce\.m2\repository\org\apache\httpcomponents\httpcore\4.4.16\httpcore-4.4.16.jar;C:\Users\marce\.m2\repository\commons-codec\commons-codec\1.16.1\commons-codec-1.16.1.jar;C:\Users\marce\.m2\repository\commons-configuration\commons-configuration\1.10\commons-configuration-1.10.jar;C:\Users\marce\.m2\repository\commons-lang\commons-lang\2.6\commons-lang-2.6.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.15.4\jackson-annotations-2.15.4.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.15.4\jackson-core-2.15.4.jar;C:\Users\marce\.m2\repository\com\netflix\netflix-commons\netflix-eventbus\0.3.0\netflix-eventbus-0.3.0.jar;C:\Users\marce\.m2\repository\com\netflix\netflix-commons\netflix-infix\0.3.0\netflix-infix-0.3.0.jar;C:\Users\marce\.m2\repository\commons-jxpath\commons-jxpath\1.3\commons-jxpath-1.3.jar;C:\Users\marce\.m2\repository\joda-time\joda-time\2.3\joda-time-2.3.jar;C:\Users\marce\.m2\repository\org\antlr\antlr-runtime\3.4\antlr-runtime-3.4.jar;C:\Users\marce\.m2\repository\org\antlr\stringtemplate\3.2.1\stringtemplate-3.2.1.jar;C:\Users\marce\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\marce\.m2\repository\com\google\code\gson\gson\2.10.1\gson-2.10.1.jar;C:\Users\marce\.m2\repository\com\netflix\servo\servo-core\0.5.3\servo-core-0.5.3.jar;C:\Users\marce\.m2\repository\org\apache\commons\commons-math\2.2\commons-math-2.2.jar;C:\Users\marce\.m2\repository\javax\annotation\javax.annotation-api\1.2\javax.annotation-api-1.2.jar;C:\Users\marce\.m2\repository\org\codehaus\jettison\jettison\1.5.4\jettison-1.5.4.jar;C:\Users\marce\.m2\repository\com\netflix\eureka\eureka-core\2.0.3\eureka-core-2.0.3.jar;C:\Users\marce\.m2\repository\com\fasterxml\woodstox\woodstox-core\6.2.1\woodstox-core-6.2.1.jar;C:\Users\marce\.m2\repository\org\codehaus\woodstox\stax2-api\4.2.1\stax2-api-4.2.1.jar;C:\Users\marce\.m2\repository\com\google\guava\guava\33.0.0-jre\guava-33.0.0-jre.jar;C:\Users\marce\.m2\repository\com\google\guava\failureaccess\1.0.2\failureaccess-1.0.2.jar;C:\Users\marce\.m2\repository\com\google\guava\listenablefuture\9999.0-empty-to-avoid-conflict-with-guava\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;C:\Users\marce\.m2\repository\org\checkerframework\checker-qual\3.41.0\checker-qual-3.41.0.jar;C:\Users\marce\.m2\repository\com\google\errorprone\error_prone_annotations\2.23.0\error_prone_annotations-2.23.0.jar;C:\Users\marce\.m2\repository\com\google\j2objc\j2objc-annotations\2.8\j2objc-annotations-2.8.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-starter-loadbalancer\4.1.4\spring-cloud-starter-loadbalancer-4.1.4.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-loadbalancer\4.1.4\spring-cloud-loadbalancer-4.1.4.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-cache\3.2.5\spring-boot-starter-cache-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\spring-context-support\6.1.6\spring-context-support-6.1.6.jar;C:\Users\marce\.m2\repository\com\stoyanr\evictor\1.0.0\evictor-1.0.0.jar;C:\Users\marce\.m2\repository\org\springdoc\springdoc-openapi-starter-webflux-ui\2.0.2\springdoc-openapi-starter-webflux-ui-2.0.2.jar;C:\Users\marce\.m2\repository\org\springdoc\springdoc-openapi-starter-webflux-api\2.0.2\springdoc-openapi-starter-webflux-api-2.0.2.jar;C:\Users\marce\.m2\repository\org\springdoc\springdoc-openapi-starter-common\2.0.2\springdoc-openapi-starter-common-2.0.2.jar;C:\Users\marce\.m2\repository\io\swagger\core\v3\swagger-core-jakarta\2.2.7\swagger-core-jakarta-2.2.7.jar;C:\Users\marce\.m2\repository\org\apache\commons\commons-lang3\3.13.0\commons-lang3-3.13.0.jar;C:\Users\marce\.m2\repository\io\swagger\core\v3\swagger-annotations-jakarta\2.2.7\swagger-annotations-jakarta-2.2.7.jar;C:\Users\marce\.m2\repository\io\swagger\core\v3\swagger-models-jakarta\2.2.7\swagger-models-jakarta-2.2.7.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.15.4\jackson-dataformat-yaml-2.15.4.jar;C:\Users\marce\.m2\repository\org\webjars\swagger-ui\4.15.5\swagger-ui-4.15.5.jar;C:\Users\marce\.m2\repository\org\webjars\webjars-locator-core\0.55\webjars-locator-core-0.55.jar;C:\Users\marce\.m2\repository\io\github\classgraph\classgraph\4.8.149\classgraph-4.8.149.jar;C:\Users\marce\.m2\repository\io\jsonwebtoken\jjwt-api\0.11.5\jjwt-api-0.11.5.jar;C:\Users\marce\.m2\repository\io\jsonwebtoken\jjwt-impl\0.11.5\jjwt-impl-0.11.5.jar;C:\Users\marce\.m2\repository\io\jsonwebtoken\jjwt-jackson\0.11.5\jjwt-jackson-0.11.5.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.15.4\jackson-databind-2.15.4.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.2.5\spring-boot-starter-test-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter\3.2.5\spring-boot-starter-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot\3.2.5\spring-boot-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.2.5\spring-boot-autoconfigure-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.2.5\spring-boot-starter-logging-3.2.5.jar;C:\Users\marce\.m2\repository\ch\qos\logback\logback-classic\1.4.14\logback-classic-1.4.14.jar;C:\Users\marce\.m2\repository\ch\qos\logback\logback-core\1.4.14\logback-core-1.4.14.jar;C:\Users\marce\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.21.1\log4j-to-slf4j-2.21.1.jar;C:\Users\marce\.m2\repository\org\apache\logging\log4j\log4j-api\2.21.1\log4j-api-2.21.1.jar;C:\Users\marce\.m2\repository\org\slf4j\jul-to-slf4j\2.0.13\jul-to-slf4j-2.0.13.jar;C:\Users\marce\.m2\repository\org\yaml\snakeyaml\2.2\snakeyaml-2.2.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-test\3.2.5\spring-boot-test-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.2.5\spring-boot-test-autoconfigure-3.2.5.jar;C:\Users\marce\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\marce\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\marce\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\marce\.m2\repository\net\minidev\json-smart\2.5.1\json-smart-2.5.1.jar;C:\Users\marce\.m2\repository\net\minidev\accessors-smart\2.5.1\accessors-smart-2.5.1.jar;C:\Users\marce\.m2\repository\org\ow2\asm\asm\9.6\asm-9.6.jar;C:\Users\marce\.m2\repository\org\assertj\assertj-core\3.24.2\assertj-core-3.24.2.jar;C:\Users\marce\.m2\repository\net\bytebuddy\byte-buddy\1.14.13\byte-buddy-1.14.13.jar;C:\Users\marce\.m2\repository\org\awaitility\awaitility\4.2.1\awaitility-4.2.1.jar;C:\Users\marce\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.2\junit-jupiter-5.10.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.2\junit-jupiter-api-5.10.2.jar;C:\Users\marce\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\marce\.m2\repository\org\junit\platform\junit-platform-commons\1.10.2\junit-platform-commons-1.10.2.jar;C:\Users\marce\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.2\junit-jupiter-params-5.10.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.2\junit-jupiter-engine-5.10.2.jar;C:\Users\marce\.m2\repository\org\junit\platform\junit-platform-engine\1.10.2\junit-platform-engine-1.10.2.jar;C:\Users\marce\.m2\repository\org\mockito\mockito-core\5.7.0\mockito-core-5.7.0.jar;C:\Users\marce\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.13\byte-buddy-agent-1.14.13.jar;C:\Users\marce\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\marce\.m2\repository\org\mockito\mockito-junit-jupiter\5.7.0\mockito-junit-jupiter-5.7.0.jar;C:\Users\marce\.m2\repository\org\skyscreamer\jsonassert\1.5.1\jsonassert-1.5.1.jar;C:\Users\marce\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\marce\.m2\repository\org\springframework\spring-core\6.1.6\spring-core-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-jcl\6.1.6\spring-jcl-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-test\6.1.6\spring-test-6.1.6.jar;C:\Users\marce\.m2\repository\org\xmlunit\xmlunit-core\2.9.1\xmlunit-core-2.9.1.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-test\6.2.4\spring-security-test-6.2.4.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-core\6.2.4\spring-security-core-6.2.4.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-crypto\6.2.4\spring-security-crypto-6.2.4.jar;C:\Users\marce\.m2\repository\org\springframework\spring-aop\6.1.6\spring-aop-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-beans\6.1.6\spring-beans-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-context\6.1.6\spring-context-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-expression\6.1.6\spring-expression-6.1.6.jar;C:\Users\marce\.m2\repository\io\micrometer\micrometer-observation\1.12.5\micrometer-observation-1.12.5.jar;C:\Users\marce\.m2\repository\io\micrometer\micrometer-commons\1.12.5\micrometer-commons-1.12.5.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-web\6.2.4\spring-security-web-6.2.4.jar;"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="America/Sao_Paulo"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="BR"/>
    <property name="sun.boot.library.path" value="C:\Users\marce\.jdks\corretto-17.0.14\bin"/>
    <property name="sun.java.command" value="C:\Users\marce\AppData\Local\Temp\surefire4746615836191248057\surefirebooter-20250721202110947_3.jar C:\Users\marce\AppData\Local\Temp\surefire4746615836191248057 2025-07-21T20-21-10_708-jvmRun1 surefire-20250721202110947_1tmp surefire_0-20250721202110947_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="E:\legalconnect\legalconnect\microservices\legal-gaateway\target\test-classes;E:\legalconnect\legalconnect\microservices\legal-gaateway\target\classes;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-starter-gateway\4.1.5\spring-cloud-starter-gateway-4.1.5.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-starter\4.1.4\spring-cloud-starter-4.1.4.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-context\4.1.4\spring-cloud-context-4.1.4.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-commons\4.1.4\spring-cloud-commons-4.1.4.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-rsa\1.1.3\spring-security-rsa-1.1.3.jar;C:\Users\marce\.m2\repository\org\bouncycastle\bcprov-jdk18on\1.78\bcprov-jdk18on-1.78.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-gateway-server\4.1.5\spring-cloud-gateway-server-4.1.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-validation\3.2.5\spring-boot-starter-validation-3.2.5.jar;C:\Users\marce\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.20\tomcat-embed-el-10.1.20.jar;C:\Users\marce\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.1.Final\hibernate-validator-8.0.1.Final.jar;C:\Users\marce\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\marce\.m2\repository\org\jboss\logging\jboss-logging\3.5.3.Final\jboss-logging-3.5.3.Final.jar;C:\Users\marce\.m2\repository\com\fasterxml\classmate\1.6.0\classmate-1.6.0.jar;C:\Users\marce\.m2\repository\io\projectreactor\addons\reactor-extra\3.5.1\reactor-extra-3.5.1.jar;C:\Users\marce\.m2\repository\io\projectreactor\reactor-core\3.6.5\reactor-core-3.6.5.jar;C:\Users\marce\.m2\repository\org\reactivestreams\reactive-streams\1.0.4\reactive-streams-1.0.4.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-webflux\3.2.5\spring-boot-starter-webflux-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.2.5\spring-boot-starter-json-3.2.5.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.15.4\jackson-datatype-jdk8-2.15.4.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.15.4\jackson-datatype-jsr310-2.15.4.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.15.4\jackson-module-parameter-names-2.15.4.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-reactor-netty\3.2.5\spring-boot-starter-reactor-netty-3.2.5.jar;C:\Users\marce\.m2\repository\io\projectreactor\netty\reactor-netty-http\1.1.18\reactor-netty-http-1.1.18.jar;C:\Users\marce\.m2\repository\io\netty\netty-codec-http\4.1.109.Final\netty-codec-http-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-common\4.1.109.Final\netty-common-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-buffer\4.1.109.Final\netty-buffer-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-transport\4.1.109.Final\netty-transport-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-codec\4.1.109.Final\netty-codec-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-handler\4.1.109.Final\netty-handler-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-codec-http2\4.1.109.Final\netty-codec-http2-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-resolver-dns\4.1.109.Final\netty-resolver-dns-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-resolver\4.1.109.Final\netty-resolver-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-codec-dns\4.1.109.Final\netty-codec-dns-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-resolver-dns-native-macos\4.1.109.Final\netty-resolver-dns-native-macos-4.1.109.Final-osx-x86_64.jar;C:\Users\marce\.m2\repository\io\netty\netty-resolver-dns-classes-macos\4.1.109.Final\netty-resolver-dns-classes-macos-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-transport-native-epoll\4.1.109.Final\netty-transport-native-epoll-4.1.109.Final-linux-x86_64.jar;C:\Users\marce\.m2\repository\io\netty\netty-transport-native-unix-common\4.1.109.Final\netty-transport-native-unix-common-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-transport-classes-epoll\4.1.109.Final\netty-transport-classes-epoll-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\projectreactor\netty\reactor-netty-core\1.1.18\reactor-netty-core-1.1.18.jar;C:\Users\marce\.m2\repository\io\netty\netty-handler-proxy\4.1.109.Final\netty-handler-proxy-4.1.109.Final.jar;C:\Users\marce\.m2\repository\io\netty\netty-codec-socks\4.1.109.Final\netty-codec-socks-4.1.109.Final.jar;C:\Users\marce\.m2\repository\org\springframework\spring-web\6.1.6\spring-web-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-webflux\6.1.6\spring-webflux-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-starter-netflix-eureka-client\4.1.3\spring-cloud-starter-netflix-eureka-client-4.1.3.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-netflix-eureka-client\4.1.3\spring-cloud-netflix-eureka-client-4.1.3.jar;C:\Users\marce\.m2\repository\org\apache\httpcomponents\client5\httpclient5\5.2.3\httpclient5-5.2.3.jar;C:\Users\marce\.m2\repository\org\apache\httpcomponents\core5\httpcore5\5.2.4\httpcore5-5.2.4.jar;C:\Users\marce\.m2\repository\org\apache\httpcomponents\core5\httpcore5-h2\5.2.4\httpcore5-h2-5.2.4.jar;C:\Users\marce\.m2\repository\com\netflix\eureka\eureka-client\2.0.3\eureka-client-2.0.3.jar;C:\Users\marce\.m2\repository\com\thoughtworks\xstream\xstream\1.4.20\xstream-1.4.20.jar;C:\Users\marce\.m2\repository\io\github\x-stream\mxparser\1.2.2\mxparser-1.2.2.jar;C:\Users\marce\.m2\repository\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;C:\Users\marce\.m2\repository\jakarta\ws\rs\jakarta.ws.rs-api\3.1.0\jakarta.ws.rs-api-3.1.0.jar;C:\Users\marce\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\marce\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\marce\.m2\repository\com\netflix\spectator\spectator-api\1.7.3\spectator-api-1.7.3.jar;C:\Users\marce\.m2\repository\org\slf4j\slf4j-api\2.0.13\slf4j-api-2.0.13.jar;C:\Users\marce\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar;C:\Users\marce\.m2\repository\org\apache\httpcomponents\httpcore\4.4.16\httpcore-4.4.16.jar;C:\Users\marce\.m2\repository\commons-codec\commons-codec\1.16.1\commons-codec-1.16.1.jar;C:\Users\marce\.m2\repository\commons-configuration\commons-configuration\1.10\commons-configuration-1.10.jar;C:\Users\marce\.m2\repository\commons-lang\commons-lang\2.6\commons-lang-2.6.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.15.4\jackson-annotations-2.15.4.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.15.4\jackson-core-2.15.4.jar;C:\Users\marce\.m2\repository\com\netflix\netflix-commons\netflix-eventbus\0.3.0\netflix-eventbus-0.3.0.jar;C:\Users\marce\.m2\repository\com\netflix\netflix-commons\netflix-infix\0.3.0\netflix-infix-0.3.0.jar;C:\Users\marce\.m2\repository\commons-jxpath\commons-jxpath\1.3\commons-jxpath-1.3.jar;C:\Users\marce\.m2\repository\joda-time\joda-time\2.3\joda-time-2.3.jar;C:\Users\marce\.m2\repository\org\antlr\antlr-runtime\3.4\antlr-runtime-3.4.jar;C:\Users\marce\.m2\repository\org\antlr\stringtemplate\3.2.1\stringtemplate-3.2.1.jar;C:\Users\marce\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\marce\.m2\repository\com\google\code\gson\gson\2.10.1\gson-2.10.1.jar;C:\Users\marce\.m2\repository\com\netflix\servo\servo-core\0.5.3\servo-core-0.5.3.jar;C:\Users\marce\.m2\repository\org\apache\commons\commons-math\2.2\commons-math-2.2.jar;C:\Users\marce\.m2\repository\javax\annotation\javax.annotation-api\1.2\javax.annotation-api-1.2.jar;C:\Users\marce\.m2\repository\org\codehaus\jettison\jettison\1.5.4\jettison-1.5.4.jar;C:\Users\marce\.m2\repository\com\netflix\eureka\eureka-core\2.0.3\eureka-core-2.0.3.jar;C:\Users\marce\.m2\repository\com\fasterxml\woodstox\woodstox-core\6.2.1\woodstox-core-6.2.1.jar;C:\Users\marce\.m2\repository\org\codehaus\woodstox\stax2-api\4.2.1\stax2-api-4.2.1.jar;C:\Users\marce\.m2\repository\com\google\guava\guava\33.0.0-jre\guava-33.0.0-jre.jar;C:\Users\marce\.m2\repository\com\google\guava\failureaccess\1.0.2\failureaccess-1.0.2.jar;C:\Users\marce\.m2\repository\com\google\guava\listenablefuture\9999.0-empty-to-avoid-conflict-with-guava\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;C:\Users\marce\.m2\repository\org\checkerframework\checker-qual\3.41.0\checker-qual-3.41.0.jar;C:\Users\marce\.m2\repository\com\google\errorprone\error_prone_annotations\2.23.0\error_prone_annotations-2.23.0.jar;C:\Users\marce\.m2\repository\com\google\j2objc\j2objc-annotations\2.8\j2objc-annotations-2.8.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-starter-loadbalancer\4.1.4\spring-cloud-starter-loadbalancer-4.1.4.jar;C:\Users\marce\.m2\repository\org\springframework\cloud\spring-cloud-loadbalancer\4.1.4\spring-cloud-loadbalancer-4.1.4.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-cache\3.2.5\spring-boot-starter-cache-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\spring-context-support\6.1.6\spring-context-support-6.1.6.jar;C:\Users\marce\.m2\repository\com\stoyanr\evictor\1.0.0\evictor-1.0.0.jar;C:\Users\marce\.m2\repository\org\springdoc\springdoc-openapi-starter-webflux-ui\2.0.2\springdoc-openapi-starter-webflux-ui-2.0.2.jar;C:\Users\marce\.m2\repository\org\springdoc\springdoc-openapi-starter-webflux-api\2.0.2\springdoc-openapi-starter-webflux-api-2.0.2.jar;C:\Users\marce\.m2\repository\org\springdoc\springdoc-openapi-starter-common\2.0.2\springdoc-openapi-starter-common-2.0.2.jar;C:\Users\marce\.m2\repository\io\swagger\core\v3\swagger-core-jakarta\2.2.7\swagger-core-jakarta-2.2.7.jar;C:\Users\marce\.m2\repository\org\apache\commons\commons-lang3\3.13.0\commons-lang3-3.13.0.jar;C:\Users\marce\.m2\repository\io\swagger\core\v3\swagger-annotations-jakarta\2.2.7\swagger-annotations-jakarta-2.2.7.jar;C:\Users\marce\.m2\repository\io\swagger\core\v3\swagger-models-jakarta\2.2.7\swagger-models-jakarta-2.2.7.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.15.4\jackson-dataformat-yaml-2.15.4.jar;C:\Users\marce\.m2\repository\org\webjars\swagger-ui\4.15.5\swagger-ui-4.15.5.jar;C:\Users\marce\.m2\repository\org\webjars\webjars-locator-core\0.55\webjars-locator-core-0.55.jar;C:\Users\marce\.m2\repository\io\github\classgraph\classgraph\4.8.149\classgraph-4.8.149.jar;C:\Users\marce\.m2\repository\io\jsonwebtoken\jjwt-api\0.11.5\jjwt-api-0.11.5.jar;C:\Users\marce\.m2\repository\io\jsonwebtoken\jjwt-impl\0.11.5\jjwt-impl-0.11.5.jar;C:\Users\marce\.m2\repository\io\jsonwebtoken\jjwt-jackson\0.11.5\jjwt-jackson-0.11.5.jar;C:\Users\marce\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.15.4\jackson-databind-2.15.4.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.2.5\spring-boot-starter-test-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter\3.2.5\spring-boot-starter-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot\3.2.5\spring-boot-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.2.5\spring-boot-autoconfigure-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.2.5\spring-boot-starter-logging-3.2.5.jar;C:\Users\marce\.m2\repository\ch\qos\logback\logback-classic\1.4.14\logback-classic-1.4.14.jar;C:\Users\marce\.m2\repository\ch\qos\logback\logback-core\1.4.14\logback-core-1.4.14.jar;C:\Users\marce\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.21.1\log4j-to-slf4j-2.21.1.jar;C:\Users\marce\.m2\repository\org\apache\logging\log4j\log4j-api\2.21.1\log4j-api-2.21.1.jar;C:\Users\marce\.m2\repository\org\slf4j\jul-to-slf4j\2.0.13\jul-to-slf4j-2.0.13.jar;C:\Users\marce\.m2\repository\org\yaml\snakeyaml\2.2\snakeyaml-2.2.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-test\3.2.5\spring-boot-test-3.2.5.jar;C:\Users\marce\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.2.5\spring-boot-test-autoconfigure-3.2.5.jar;C:\Users\marce\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\marce\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\marce\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\marce\.m2\repository\net\minidev\json-smart\2.5.1\json-smart-2.5.1.jar;C:\Users\marce\.m2\repository\net\minidev\accessors-smart\2.5.1\accessors-smart-2.5.1.jar;C:\Users\marce\.m2\repository\org\ow2\asm\asm\9.6\asm-9.6.jar;C:\Users\marce\.m2\repository\org\assertj\assertj-core\3.24.2\assertj-core-3.24.2.jar;C:\Users\marce\.m2\repository\net\bytebuddy\byte-buddy\1.14.13\byte-buddy-1.14.13.jar;C:\Users\marce\.m2\repository\org\awaitility\awaitility\4.2.1\awaitility-4.2.1.jar;C:\Users\marce\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.2\junit-jupiter-5.10.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.2\junit-jupiter-api-5.10.2.jar;C:\Users\marce\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\marce\.m2\repository\org\junit\platform\junit-platform-commons\1.10.2\junit-platform-commons-1.10.2.jar;C:\Users\marce\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.2\junit-jupiter-params-5.10.2.jar;C:\Users\marce\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.2\junit-jupiter-engine-5.10.2.jar;C:\Users\marce\.m2\repository\org\junit\platform\junit-platform-engine\1.10.2\junit-platform-engine-1.10.2.jar;C:\Users\marce\.m2\repository\org\mockito\mockito-core\5.7.0\mockito-core-5.7.0.jar;C:\Users\marce\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.13\byte-buddy-agent-1.14.13.jar;C:\Users\marce\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\marce\.m2\repository\org\mockito\mockito-junit-jupiter\5.7.0\mockito-junit-jupiter-5.7.0.jar;C:\Users\marce\.m2\repository\org\skyscreamer\jsonassert\1.5.1\jsonassert-1.5.1.jar;C:\Users\marce\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\marce\.m2\repository\org\springframework\spring-core\6.1.6\spring-core-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-jcl\6.1.6\spring-jcl-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-test\6.1.6\spring-test-6.1.6.jar;C:\Users\marce\.m2\repository\org\xmlunit\xmlunit-core\2.9.1\xmlunit-core-2.9.1.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-test\6.2.4\spring-security-test-6.2.4.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-core\6.2.4\spring-security-core-6.2.4.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-crypto\6.2.4\spring-security-crypto-6.2.4.jar;C:\Users\marce\.m2\repository\org\springframework\spring-aop\6.1.6\spring-aop-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-beans\6.1.6\spring-beans-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-context\6.1.6\spring-context-6.1.6.jar;C:\Users\marce\.m2\repository\org\springframework\spring-expression\6.1.6\spring-expression-6.1.6.jar;C:\Users\marce\.m2\repository\io\micrometer\micrometer-observation\1.12.5\micrometer-observation-1.12.5.jar;C:\Users\marce\.m2\repository\io\micrometer\micrometer-commons\1.12.5\micrometer-commons-1.12.5.jar;C:\Users\marce\.m2\repository\org\springframework\security\spring-security-web\6.2.4\spring-security-web-6.2.4.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\marce"/>
    <property name="user.language" value="pt"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-01-21"/>
    <property name="java.home" value="C:\Users\marce\.jdks\corretto-17.0.14"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="E:\legalconnect\legalconnect\microservices\legal-gaateway"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="surefire.real.class.path" value="C:\Users\marce\AppData\Local\Temp\surefire4746615836191248057\surefirebooter-20250721202110947_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="17.0.14+7-LTS"/>
    <property name="user.name" value="marce"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.14.7.1"/>
    <property name="localRepository" value="C:\Users\marce\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="C:\Users\marce\AppData\Local\Temp\"/>
    <property name="java.version" value="17.0.14"/>
    <property name="user.dir" value="E:\legalconnect\legalconnect\microservices\legal-gaateway"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Users\marce\.jdks\corretto-17.0.14\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Python313\Scripts\;C:\Python313\;C:\Program Files\Python312\Scripts\;C:\Program Files\Python312\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Users\marce\AppData\Local\nvm;C:\nvm4w\nodejs;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\ProgramData\chocolatey\bin;C:\Program Files\Docker\Docker\resources\bin;C:\Users\marce\.jbang\bin;C:\Users\marce\.local\bin;C:\Users\marce\AppData\Local\Microsoft\WindowsApps;C:\Users\marce\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\marce\AppData\Local\nvm;C:\nvm4w\nodejs;E:\dev\ambiente\apache-maven-3.9.9\bin;C:\Program Files\Python312\Scripts\;C:\Program Files\Python312\;C:\Users\marce\.jdks\corretto-17.0.14\bin;;C:\Users\marce\AppData\Local\Programs\Ollama;c:\Users\marce\AppData\Roaming\Code\User\globalStorage\github.copilot-chat\debugCommand;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.14+7-LTS"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="" classname="br.com.legalconnect.common.common_lib.CommonLibApplicationTests" time="0.213">
    <error message="Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=...) with your test" type="java.lang.IllegalStateException"><![CDATA[java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=...) with your test
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.findConfigurationClass(SpringBootTestContextBootstrapper.java:246)
	at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.getOrFindConfigurationClasses(SpringBootTestContextBootstrapper.java:233)
	at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.processMergedContextConfiguration(SpringBootTestContextBootstrapper.java:150)
	at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:351)
	at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildDefaultMergedContextConfiguration(AbstractTestContextBootstrapper.java:267)
	at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildMergedContextConfiguration(AbstractTestContextBootstrapper.java:215)
	at org.springframework.test.context.support.AbstractTestContextBootstrapper.buildTestContext(AbstractTestContextBootstrapper.java:108)
	at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.buildTestContext(SpringBootTestContextBootstrapper.java:111)
	at org.springframework.test.context.TestContextManager.<init>(TestContextManager.java:142)
	at org.springframework.test.context.TestContextManager.<init>(TestContextManager.java:126)
	at org.springframework.test.context.junit.jupiter.SpringExtension.getTestContextManager(SpringExtension.java:366)
	at org.springframework.test.context.junit.jupiter.SpringExtension.beforeAll(SpringExtension.java:131)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></error>
    <system-out><![CDATA[20:21:11.862 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [br.com.legalconnect.common.common_lib.CommonLibApplicationTests]: CommonLibApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
]]></system-out>
  </testcase>
</testsuite>
```
```java
Êþº¾   =   ?br/com/legalconnect/common/common_lib/CommonLibApplicationTests  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this ALbr/com/legalconnect/common/common_lib/CommonLibApplicationTests; contextLoads RuntimeVisibleAnnotations Lorg/junit/jupiter/api/Test; 
SourceFile CommonLibApplicationTests.java 6Lorg/springframework/boot/test/context/SpringBootTest;                  /     *· ±    
                 
                   +      ±    
                 
                
```
```java
/mvnw text eol=lf
*.cmd text eol=crlf

```
```java
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

```
```java
# Read Me First

The following was discovered as part of building this project:

- The original package name 'br.com.legalconnect.auth.auth-service' is invalid and this project uses 'br.com.legalconnect.auth.auth_service' instead.

# Getting Started

### Reference Documentation

For further reference, please consider the following sections:

- [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
- [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.5.3/maven-plugin)
- [Create an OCI image](https://docs.spring.io/spring-boot/3.5.3/maven-plugin/build-image.html)
- [Flyway Migration](https://docs.spring.io/spring-boot/3.5.3/how-to/data-initialization.html#howto.data-initialization.migration-tool.flyway)
- [Spring Boot DevTools](https://docs.spring.io/spring-boot/3.5.3/reference/using/devtools.html)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.

docker run --name jusplatform_db -e POSTGRES_DB=jusplatform_db -e POSTGRES_USER=jususer -e POSTGRES_PASSWORD=juspassword -p 5432:5432 -d postgres

```
```java
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

```
```java
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

```
```java
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.5</version> <!-- Mantendo 3.2.5 para consistência com o Gateway, mas você pode usar
        3.2.12 se preferir -->
        <relativePath /> <!-- lookup parent from repository -->
    </parent>
    <groupId>br.com.legalconnect</groupId>
    <artifactId>legalconnect-usuario-service</artifactId> <!-- Certifique-se de que o artifactId está correto para o auth-service -->
    <version>0.0.1-SNAPSHOT</version>
    <name>legalconnect-usuario-service</name>
    <description>Authentication Microservice for LegalConnect</description>

    <properties>
        <java.version>17</java.version>
        <spring-cloud.version>2023.0.1</spring-cloud.version>

        <jjwt.version>0.11.5</jjwt.version> <!-- Mantido 0.12.5 para compatibilidade com a classe
        JwtUtil -->
        <flyway.version>11.8.2</flyway.version> <!-- CORRIGIDO: Define a versão do Flyway para 11.8.2 -->
        <lombok.version>1.18.30</lombok.version> <!-- Adicionado/Atualizado para garantir
        compatibilidade -->
        <org.mapstruct.version>1.5.5.Final</org.mapstruct.version> <!-- Adicionado/Atualizado para
        garantir compatibilidade -->
        <springdoc.version>2.5.0</springdoc.version> <!-- Atualizado para 2.5.0 para consistência com
        o Gateway -->
    </properties>

    <dependencies>
        <!-- Spring Boot Starters -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!-- Database -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>${jjwt.version}</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>${jjwt.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>${jjwt.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- MapStruct for DTO-Entity mapping -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>${org.mapstruct.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- common-lib (se aplicável, mantenha a versão correta) -->
        <dependency>
            <groupId>br.com.legalconnect.common</groupId>
            <artifactId>common-lib</artifactId>
            <version>1.0.0</version>
        </dependency>  <!-- common-lib (se aplicável, mantenha a versão
        correta) -->
        <dependency>
            <groupId>br.com.legalconnect.common</groupId>
            <artifactId>common-tenent</artifactId>
            <version>1.0.0</version>
        </dependency>

        <!-- Lombok for boilerplate code reduction -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Spring Boot Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- OpenAPI/Swagger UI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc.version}</version>
        </dependency>

        <!-- Jackson for JSON processing (used by JwtAuthEntryPoint) -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>


    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!-- Plugin para MapStruct -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${org.mapstruct.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>0.2.0</version>
                        </path>
                    </annotationProcessorPaths>
                    <compilerArgs>
                        <arg>-Amapstruct.defaultComponentModel=spring</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
```
```java
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip

```
```java
{
  "configurations": [
    {
      "type": "java",
      "name": "Spring Boot-AuthServiceApplication<legalconnect-usuario-service>",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "mainClass": "br.com.legalconnect.AuthServiceApplication",
      "projectName": "legalconnect-usuario-service",
      "args": "",
      "envFile": "${workspaceFolder}/.env"
    },
    {
      "type": "java",
      "name": "Spring Boot-LegalUsuarioApplication<legalconnect-usuario-service>",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "mainClass": "br.com.legalconnect.LegalUsuarioApplication",
      "projectName": "legalconnect-usuario-service",
      "args": "",
      "envFile": "${workspaceFolder}/.env"
    }
  ]
}

```
```java
```java
```java
package br.com.legalconnect;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

@EnableDiscoveryClient
@SpringBootApplication(exclude = FlywayAutoConfiguration.class) // Remova o scanBasePackages aqui também, se já está no
                                                                // pacote raiz
@EntityScan(basePackages = {
        // "br.com.legalconnect.entity",
        "br.com.legalconnect.entity"
})
// @EnableJpaRepositories(basePackages = {
// "br.com.legalconnect.user.repository",
// "br.com.legalconnect.auth.repository"
// })
// REMOVA COMPLETAMENTE ESTE @ComponentScan, a menos que você tenha um motivo
// muito específico e saiba o que está fazendo
// @ComponentScan(basePackages = { "br.com.legalconnect.auth.service" })
public class LegalUsuarioApplication {

    private static final Logger log = LoggerFactory.getLogger(LegalUsuarioApplication.class);

    public static void main(String[] args) {
        SpringApplication.run(LegalUsuarioApplication.class, args);
        log.info("LegalUsuarioApplication iniciada com sucesso!");
    }
}
```
```java
package br.com.legalconnect.config; // Importa da common-lib

import java.io.IOException;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import br.com.legalconnect.common.config.multitenancy.TenantContext;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 * @class TenantFilter
 * @brief Filtro HTTP para interceptar requisições e extrair o ID do tenant.
 *        Define o tenant ID no TenantContext para que o Hibernate possa usá-lo.
 */
@Component
public class TenantFilter extends OncePerRequestFilter {

    @Value("${application.tenant.default-id}")
    private String defaultTenantId;

    private static final String TENANT_HEADER = "X-Tenant-ID";

    /**
     * @brief Filtra a requisição para extrair e definir o ID do tenant.
     * @param request     A requisição HTTP.
     * @param response    A resposta HTTP.
     * @param filterChain A cadeia de filtros.
     * @throws ServletException Se ocorrer um erro de servlet.
     * @throws IOException      Se ocorrer um erro de I/O.
     */
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        try {
            String tenantIdHeader = request.getHeader(TENANT_HEADER);
            String tenantId = "public";

            if (tenantIdHeader != null && !tenantIdHeader.isEmpty()) {
                try {
                    tenantId = (tenantIdHeader);
                } catch (IllegalArgumentException e) {
                    // Logar ou tratar o erro de UUID inválido, talvez retornar um 400 Bad Request
                    System.err.println("UUID de Tenant inválido no cabeçalho X-Tenant-ID: " + tenantIdHeader);
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "UUID de Tenant inválido.");
                    return;
                }
            } else {
                // Usar o tenant padrão se o cabeçalho não for fornecido
                try {
                    tenantId = (defaultTenantId);
                } catch (IllegalArgumentException e) {
                    System.err.println("UUID de Tenant padrão inválido na configuração: " + defaultTenantId);
                    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                            "Configuração de Tenant padrão inválida.");
                    return;
                }
            }

            TenantContext.setCurrentTenant(tenantId);
            filterChain.doFilter(request, response);
        } finally {
            TenantContext.clear(); // Limpar o TenantContext após a requisição
        }
    }
}
```
```java
package br.com.legalconnect.controller;

import dto.AdministradorRequestDTO;
import dto.AdministradorResponseDTO;
import service.ServicoAdministrador;
import common.dto.BaseResponse; // Importa da common-lib
import common.dto.SuccessResponseDTO; // Importa da common-lib
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

/**
 * @class ControladorAdministradorPlataforma
 * @brief Controlador REST para gerenciar operações relacionadas a Administradores da Plataforma.
 * Expõe endpoints para CRUD de Administradores.
 */
@RestController
@RequestMapping("/api/v1/administradores-plataforma")
public class ControladorAdministradorPlataforma {

    private final ServicoAdministrador servicoAdministrador;

    @Autowired
    public ControladorAdministradorPlataforma(ServicoAdministrador servicoAdministrador) {
        this.servicoAdministrador = servicoAdministrador;
    }

    /**
     * @brief Cadastra um novo Administrador da Plataforma.
     * @param requestDTO DTO com os dados do Administrador a ser cadastrado.
     * @return ResponseEntity com o DTO do Administrador cadastrado e status 201 Created.
     */
    @PostMapping
    public ResponseEntity<BaseResponse<AdministradorResponseDTO>> cadastrarAdministrador(@Valid @RequestBody AdministradorRequestDTO requestDTO) {
        AdministradorResponseDTO responseDTO = servicoAdministrador.cadastrarAdministrador(requestDTO);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Administrador cadastrado com sucesso.", null, responseDTO, null), HttpStatus.CREATED);
    }

    /**
     * @brief Busca um Administrador da Plataforma por ID.
     * @param id ID do Administrador a ser buscado.
     * @return ResponseEntity com o DTO do Administrador encontrado e status 200 OK.
     */
    @GetMapping("/{id}")
    public ResponseEntity<BaseResponse<AdministradorResponseDTO>> buscarAdministradorPorId(@PathVariable UUID id) {
        AdministradorResponseDTO responseDTO = servicoAdministrador.buscarAdministradorPorId(id);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Administrador encontrado.", null, responseDTO, null), HttpStatus.OK);
    }

    /**
     * @brief Lista todos os Administradores da Plataforma com paginação.
     * @param pageable Objeto Pageable para configuração da paginação (ex: ?page=0&size=10&sort=nomeCompleto,asc).
     * @return ResponseEntity com uma página de DTOs de Administradores e status 200 OK.
     */
    @GetMapping
    public ResponseEntity<BaseResponse<Page<AdministradorResponseDTO>>> listarAdministradores(
            @PageableDefault(size = 10, page = 0, sort = "nomeCompleto") Pageable pageable) {
        Page<AdministradorResponseDTO> responsePage = servicoAdministrador.listarAdministradores(pageable);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Lista de administradores recuperada com sucesso.", null, responsePage, null), HttpStatus.OK);
    }

    /**
     * @brief Atualiza os dados de um Administrador da Plataforma existente.
     * @param id ID do Administrador a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Administrador.
     * @return ResponseEntity com o DTO do Administrador atualizado e status 200 OK.
     */
    @PutMapping("/{id}")
    public ResponseEntity<BaseResponse<AdministradorResponseDTO>> atualizarAdministrador(
            @PathVariable UUID id,
            @Valid @RequestBody AdministradorRequestDTO requestDTO) {
        AdministradorResponseDTO responseDTO = servicoAdministrador.atualizarAdministrador(id, requestDTO);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Administrador atualizado com sucesso.", null, responseDTO, null), HttpStatus.OK);
    }

    /**
     * @brief Exclui um Administrador da Plataforma pelo ID.
     * @param id ID do Administrador a ser excluído.
     * @return ResponseEntity com status 204 No Content.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<BaseResponse<Void>> excluirAdministrador(@PathVariable UUID id) {
        servicoAdministrador.excluirAdministrador(id);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Administrador excluído com sucesso.", null, null, null), HttpStatus.NO_CONTENT);
    }
}
```
```java
package br.com.legalconnect.controller;

import dto.ClienteRequestDTO;
import dto.ClienteResponseDTO;
import service.ServicoCliente;
import common.dto.BaseResponse; // Importa da common-lib
import common.dto.SuccessResponseDTO; // Importa da common-lib
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

/**
 * @class ControladorCliente
 * @brief Controlador REST para gerenciar operações relacionadas a Clientes.
 * Expõe endpoints para CRUD de Clientes.
 */
@RestController
@RequestMapping("/api/v1/clientes")
public class ControladorCliente {

    private final ServicoCliente servicoCliente;

    @Autowired
    public ControladorCliente(ServicoCliente servicoCliente) {
        this.servicoCliente = servicoCliente;
    }

    /**
     * @brief Cadastra um novo Cliente.
     * @param requestDTO DTO com os dados do Cliente a ser cadastrado.
     * @return ResponseEntity com o DTO do Cliente cadastrado e status 201 Created.
     */
    @PostMapping
    public ResponseEntity<BaseResponse<ClienteResponseDTO>> cadastrarCliente(@Valid @RequestBody ClienteRequestDTO requestDTO) {
        ClienteResponseDTO responseDTO = servicoCliente.cadastrarCliente(requestDTO);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Cliente cadastrado com sucesso.", null, responseDTO, null), HttpStatus.CREATED);
    }

    /**
     * @brief Busca um Cliente por ID.
     * @param id ID do Cliente a ser buscado.
     * @return ResponseEntity com o DTO do Cliente encontrado e status 200 OK.
     */
    @GetMapping("/{id}")
    public ResponseEntity<BaseResponse<ClienteResponseDTO>> buscarClientePorId(@PathVariable UUID id) {
        ClienteResponseDTO responseDTO = servicoCliente.buscarClientePorId(id);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Cliente encontrado.", null, responseDTO, null), HttpStatus.OK);
    }

    /**
     * @brief Lista todos os Clientes com paginação.
     * @param pageable Objeto Pageable para configuração da paginação (ex: ?page=0&size=10&sort=nomeCompleto,asc).
     * @return ResponseEntity com uma página de DTOs de Clientes e status 200 OK.
     */
    @GetMapping
    public ResponseEntity<BaseResponse<Page<ClienteResponseDTO>>> listarClientes(
            @PageableDefault(size = 10, page = 0, sort = "nomeCompleto") Pageable pageable) {
        Page<ClienteResponseDTO> responsePage = servicoCliente.listarClientes(pageable);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Lista de clientes recuperada com sucesso.", null, responsePage, null), HttpStatus.OK);
    }

    /**
     * @brief Atualiza os dados de um Cliente existente.
     * @param id ID do Cliente a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Cliente.
     * @return ResponseEntity com o DTO do Cliente atualizado e status 200 OK.
     */
    @PutMapping("/{id}")
    public ResponseEntity<BaseResponse<ClienteResponseDTO>> atualizarCliente(
            @PathVariable UUID id,
            @Valid @RequestBody ClienteRequestDTO requestDTO) {
        ClienteResponseDTO responseDTO = servicoCliente.atualizarCliente(id, requestDTO);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Cliente atualizado com sucesso.", null, responseDTO, null), HttpStatus.OK);
    }

    /**
     * @brief Exclui um Cliente pelo ID.
     * @param id ID do Cliente a ser excluído.
     * @return ResponseEntity com status 204 No Content.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<BaseResponse<Void>> excluirCliente(@PathVariable UUID id) {
        servicoCliente.excluirCliente(id);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Cliente excluído com sucesso.", null, null, null), HttpStatus.NO_CONTENT);
    }
}
```
```java
package br.com.legalconnect.controller;

import dto.EmpresaRequestDTO;
import dto.EmpresaResponseDTO;
import service.ServicoEmpresa;
import common.dto.BaseResponse; // Importa da common-lib
import common.dto.SuccessResponseDTO; // Importa da common-lib
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

/**
 * @class ControladorEmpresa
 * @brief Controlador REST para gerenciar operações relacionadas a Empresas.
 * Expõe endpoints para CRUD de Empresas.
 */
@RestController
@RequestMapping("/api/v1/empresas")
public class ControladorEmpresa {

    private final ServicoEmpresa servicoEmpresa;

    @Autowired
    public ControladorEmpresa(ServicoEmpresa servicoEmpresa) {
        this.servicoEmpresa = servicoEmpresa;
    }

    /**
     * @brief Cadastra uma nova Empresa.
     * @param requestDTO DTO com os dados da Empresa a ser cadastrada.
     * @return ResponseEntity com o DTO da Empresa cadastrada e status 201 Created.
     */
    @PostMapping
    public ResponseEntity<BaseResponse<EmpresaResponseDTO>> cadastrarEmpresa(@Valid @RequestBody EmpresaRequestDTO requestDTO) {
        EmpresaResponseDTO responseDTO = servicoEmpresa.cadastrarEmpresa(requestDTO);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Empresa cadastrada com sucesso.", null, responseDTO, null), HttpStatus.CREATED);
    }

    /**
     * @brief Busca uma Empresa por ID.
     * @param id ID da Empresa a ser buscada.
     * @return ResponseEntity com o DTO da Empresa encontrada e status 200 OK.
     */
    @GetMapping("/{id}")
    public ResponseEntity<BaseResponse<EmpresaResponseDTO>> buscarEmpresaPorId(@PathVariable UUID id) {
        EmpresaResponseDTO responseDTO = servicoEmpresa.buscarEmpresaPorId(id);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Empresa encontrada.", null, responseDTO, null), HttpStatus.OK);
    }

    /**
     * @brief Lista todas as Empresas com paginação.
     * @param pageable Objeto Pageable para configuração da paginação (ex: ?page=0&size=10&sort=nomeFantasia,asc).
     * @return ResponseEntity com uma página de DTOs de Empresas e status 200 OK.
     */
    @GetMapping
    public ResponseEntity<BaseResponse<Page<EmpresaResponseDTO>>> listarEmpresas(
            @PageableDefault(size = 10, page = 0, sort = "nomeFantasia") Pageable pageable) {
        Page<EmpresaResponseDTO> responsePage = servicoEmpresa.listarEmpresas(pageable);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Lista de empresas recuperada com sucesso.", null, responsePage, null), HttpStatus.OK);
    }

    /**
     * @brief Atualiza os dados de uma Empresa existente.
     * @param id ID da Empresa a ser atualizada.
     * @param requestDTO DTO com os dados atualizados da Empresa.
     * @return ResponseEntity com o DTO da Empresa atualizada e status 200 OK.
     */
    @PutMapping("/{id}")
    public ResponseEntity<BaseResponse<EmpresaResponseDTO>> atualizarEmpresa(
            @PathVariable UUID id,
            @Valid @RequestBody EmpresaRequestDTO requestDTO) {
        EmpresaResponseDTO responseDTO = servicoEmpresa.atualizarEmpresa(id, requestDTO);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Empresa atualizada com sucesso.", null, responseDTO, null), HttpStatus.OK);
    }

    /**
     * @brief Exclui uma Empresa pelo ID.
     * @param id ID da Empresa a ser excluída.
     * @return ResponseEntity com status 204 No Content.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<BaseResponse<Void>> excluirEmpresa(@PathVariable UUID id) {
        servicoEmpresa.excluirEmpresa(id);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Empresa excluída com sucesso.", null, null, null), HttpStatus.NO_CONTENT);
    }
}
```
```java
package br.com.legalconnect.controller;

import dto.ProfissionalRequestDTO;
import dto.ProfissionalResponseDTO;
import service.ServicoProfissional;
import common.dto.BaseResponse; // Importa da common-lib
import common.dto.SuccessResponseDTO; // Importa da common-lib
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

/**
 * @class ControladorProfissional
 * @brief Controlador REST para gerenciar operações relacionadas a Profissionais.
 * Expõe endpoints para CRUD de Profissionais.
 */
@RestController
@RequestMapping("/api/v1/profissionais")
public class ControladorProfissional {

    private final ServicoProfissional servicoProfissional;

    @Autowired
    public ControladorProfissional(ServicoProfissional servicoProfissional) {
        this.servicoProfissional = servicoProfissional;
    }

    /**
     * @brief Cadastra um novo Profissional.
     * @param requestDTO DTO com os dados do Profissional a ser cadastrado.
     * @return ResponseEntity com o DTO do Profissional cadastrado e status 201 Created.
     */
    @PostMapping
    public ResponseEntity<BaseResponse<ProfissionalResponseDTO>> cadastrarProfissional(@Valid @RequestBody ProfissionalRequestDTO requestDTO) {
        ProfissionalResponseDTO responseDTO = servicoProfissional.cadastrarProfissional(requestDTO);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Profissional cadastrado com sucesso.", null, responseDTO, null), HttpStatus.CREATED);
    }

    /**
     * @brief Busca um Profissional por ID.
     * @param id ID do Profissional a ser buscado.
     * @return ResponseEntity com o DTO do Profissional encontrado e status 200 OK.
     */
    @GetMapping("/{id}")
    public ResponseEntity<BaseResponse<ProfissionalResponseDTO>> buscarProfissionalPorId(@PathVariable UUID id) {
        ProfissionalResponseDTO responseDTO = servicoProfissional.buscarProfissionalPorId(id);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Profissional encontrado.", null, responseDTO, null), HttpStatus.OK);
    }

    /**
     * @brief Lista todos os Profissionais com paginação.
     * @param pageable Objeto Pageable para configuração da paginação (ex: ?page=0&size=10&sort=nomeCompleto,asc).
     * @return ResponseEntity com uma página de DTOs de Profissionais e status 200 OK.
     */
    @GetMapping
    public ResponseEntity<BaseResponse<Page<ProfissionalResponseDTO>>> listarProfissionais(
            @PageableDefault(size = 10, page = 0, sort = "nomeCompleto") Pageable pageable) {
        Page<ProfissionalResponseDTO> responsePage = servicoProfissional.listarProfissionais(pageable);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Lista de profissionais recuperada com sucesso.", null, responsePage, null), HttpStatus.OK);
    }

    /**
     * @brief Atualiza os dados de um Profissional existente.
     * @param id ID do Profissional a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Profissional.
     * @return ResponseEntity com o DTO do Profissional atualizado e status 200 OK.
     */
    @PutMapping("/{id}")
    public ResponseEntity<BaseResponse<ProfissionalResponseDTO>> atualizarProfissional(
            @PathVariable UUID id,
            @Valid @RequestBody ProfissionalRequestDTO requestDTO) {
        ProfissionalResponseDTO responseDTO = servicoProfissional.atualizarProfissional(id, requestDTO);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Profissional atualizado com sucesso.", null, responseDTO, null), HttpStatus.OK);
    }

    /**
     * @brief Exclui um Profissional pelo ID.
     * @param id ID do Profissional a ser excluído.
     * @return ResponseEntity com status 204 No Content.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<BaseResponse<Void>> excluirProfissional(@PathVariable UUID id) {
        servicoProfissional.excluirProfissional(id);
        return new ResponseEntity<>(new BaseResponse<>("SUCCESS", "Profissional excluído com sucesso.", null, null, null), HttpStatus.NO_CONTENT);
    }
}
```
```java
package br.com.legalconnect.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class AdministradorRequestDTO
 * @brief DTO para requisições de criação ou atualização de Administrador.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class AdministradorRequestDTO extends PessoaRequestDTO {
    private String status;
}
```
```java
package br.com.legalconnect.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class AdministradorResponseDTO
 * @brief DTO para respostas de Administrador.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class AdministradorResponseDTO extends PessoaResponseDTO {
    private String status;
}
```
```java
package br.com.legalconnect.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class ClienteRequestDTO
 * @brief DTO para requisições de criação ou atualização de Cliente.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class ClienteRequestDTO extends PessoaRequestDTO {
    private String status;
}
```
```java
package br.com.legalconnect.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class ClienteResponseDTO
 * @brief DTO para respostas de Cliente.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class ClienteResponseDTO extends PessoaResponseDTO {
    private String status;
    private String tipo;
}
```
```java
package br.com.legalconnect.dto;

import java.util.List;
import java.util.Set;
import java.util.UUID;

import jakarta.validation.Valid;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class EmpresaRequestDTO
 * @brief DTO para requisições de criação ou atualização de Empresa.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EmpresaRequestDTO {
    private UUID id; // Para atualizações, pode ser necessário o ID

    @NotBlank(message = "O nome fantasia não pode estar em branco.")
    @Size(max = 255, message = "O nome fantasia deve ter no máximo 255 caracteres.")
    private String nomeFantasia;

    @NotBlank(message = "A razão social não pode estar em branco.")
    @Size(max = 255, message = "A razão social deve ter no máximo 255 caracteres.")
    private String razaoSocial;

    @NotBlank(message = "O CNPJ não pode estar em branco.")
    @Pattern(regexp = "\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}", message = "Formato de CNPJ inválido. Use XX.XXX.XXX/XXXX-XX.")
    private String cnpj;

    @Email(message = "Formato de email de contato inválido.")
    @Size(max = 255, message = "O email de contato deve ter no máximo 255 caracteres.")
    private String emailContato;

    @Valid // Valida a lista de DTOs aninhados
    private List<EnderecoRequestDTO> enderecos;

    private Set<String> telefones; // Lista de números de telefone como strings
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class EmpresaResponseDTO
 * @brief DTO para respostas de Empresa.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EmpresaResponseDTO {
    private UUID id;
    private String nomeFantasia;
    private String razaoSocial;
    private String cnpj;
    private String emailContato;
    private List<EnderecoResponseDTO> enderecos;
    private Set<String> telefones;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
```
```java
package br.com.legalconnect.dto;

import java.util.UUID;

import br.com.legalconnect.entity.Endereco.TipoEndereco;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class EnderecoRequestDTO
 * @brief DTO para requisições de criação ou atualização de Endereco.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EnderecoRequestDTO {
    private UUID id; // Para atualizações, pode ser necessário o ID

    @NotBlank(message = "O logradouro não pode estar em branco.")
    @Size(max = 255, message = "O logradouro deve ter no máximo 255 caracteres.")
    private String logradouro;

    @NotBlank(message = "O número não pode estar em branco.")
    @Size(max = 20, message = "O número deve ter no máximo 20 caracteres.")
    private String numero;

    @Size(max = 255, message = "O complemento deve ter no máximo 255 caracteres.")
    private String complemento;

    @NotBlank(message = "O bairro não pode estar em branco.")
    @Size(max = 100, message = "O bairro deve ter no máximo 100 caracteres.")
    private String bairro;

    @NotBlank(message = "A cidade não pode estar em branco.")
    @Size(max = 100, message = "A cidade deve ter no máximo 100 caracteres.")
    private String cidade;

    @NotBlank(message = "O estado não pode estar em branco.")
    @Size(min = 2, max = 2, message = "O estado deve ter 2 caracteres (UF).")
    private String estado;

    @NotBlank(message = "O CEP não pode estar em branco.")
    @Pattern(regexp = "\\d{5}-\\d{3}", message = "Formato de CEP inválido. Use XXXXX-XXX.")
    private String cep;

    @NotBlank(message = "O país não pode estar em branco.")
    @Size(max = 50, message = "O país deve ter no máximo 50 caracteres.")
    private String pais;

    @NotNull(message = "O tipo de endereço não pode ser nulo.")
    private TipoEndereco tipoEndereco;
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDateTime;
import java.util.UUID;

import br.com.legalconnect.entity.Endereco.TipoEndereco;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class EnderecoResponseDTO
 * @brief DTO para respostas de Endereco.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EnderecoResponseDTO {
    private UUID id;
    private String logradouro;
    private String numero;
    private String complemento;
    private String bairro;
    private String cidade;
    private String estado;
    private String cep;
    private String pais;
    private TipoEndereco tipoEndereco;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDate;
import java.util.List; // Usar List para Enderecos para manter a ordem se necessário
import java.util.Set;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class PessoaRequestDTO
 * @brief DTO base para requisições de criação ou atualização de Pessoa.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class PessoaRequestDTO {
    // Não incluir o ID aqui, pois ele será definido pela entidade base (BaseEntity)
    // e retornado no ResponseDTO.

    @NotNull(message = "Os dados do usuário não podem ser nulos.")
    @Valid // Valida o DTO aninhado
    private UserRequestDTO usuario;

    @NotBlank(message = "O nome completo não pode estar em branco.")
    @Size(max = 255, message = "O nome completo deve ter no máximo 255 caracteres.")
    private String nomeCompleto;

    @NotBlank(message = "O CPF não pode estar em branco.")
    @Pattern(regexp = "\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}", message = "Formato de CPF inválido. Use XXX.XXX.XXX-XX.")
    private String cpf;

    @PastOrPresent(message = "A data de nascimento não pode ser futura.")
    private LocalDate dataNascimento;

    @Valid // Valida a lista de DTOs aninhados
    private List<EnderecoRequestDTO> enderecos; // Usar List para manter a ordem se necessário

    private Set<String> telefones; // Lista de números de telefone como strings
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class PessoaResponseDTO
 * @brief DTO base para respostas de Pessoa.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class PessoaResponseDTO {
    private UUID id;
    private UserResponseDTO usuario;
    private String nomeCompleto;
    private String cpf;
    private LocalDate dataNascimento;
    private List<EnderecoResponseDTO> enderecos;
    private Set<String> telefones;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
```
```java
package br.com.legalconnect.dto;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

import br.com.legalconnect.entity.Plano.VisibilidadeDestaque;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class PlanoResponseDTO
 * @brief DTO para respostas de Plano.
 *        Esta classe é um DTO simplificado para ser usado em outros
 *        microsserviços.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class PlanoResponseDTO {
    private UUID id;
    private String nome;
    private String descricao;
    private BigDecimal precoMensal;
    private BigDecimal precoAnual;
    private Integer limiteServicosAgendaveis;
    private VisibilidadeDestaque visibilidadeDestaque;
    private Boolean acessoRelatoriosAvancados;
    private Boolean permitePedidosOrcamento;
    private Integer periodoTesteDias;
    private Boolean isDefault;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
```
```java
package br.com.legalconnect.dto;

import java.util.UUID;

import br.com.legalconnect.entity.Profissional.StatusProfissional;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class ProfissionalRequestDTO
 * @brief DTO para requisições de criação ou atualização de Profissional.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class ProfissionalRequestDTO extends PessoaRequestDTO {
    @NotBlank(message = "O número da OAB não pode estar em branco.")
    @Size(max = 50, message = "O número da OAB deve ter no máximo 50 caracteres.")
    private String numeroOab;

    @NotNull(message = "O status profissional não pode ser nulo.")
    private StatusProfissional statusProfissional;

    @NotNull(message = "A indicação de uso do marketplace não pode ser nula.")
    private Boolean usaMarketplace;

    @NotNull(message = "A indicação de participação em plano não pode ser nula.")
    private Boolean fazParteDePlano;

    private UUID empresaId; // ID da empresa associada (opcional)

    @NotNull(message = "O ID do plano não pode ser nulo.")
    private UUID planoId; // ID do plano de assinatura
}
```
```java
package br.com.legalconnect.dto;

import br.com.legalconnect.entity.Profissional.StatusProfissional;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class ProfissionalResponseDTO
 * @brief DTO para respostas de Profissional.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class ProfissionalResponseDTO extends PessoaResponseDTO {
    private String numeroOab;
    private StatusProfissional statusProfissional;
    private Boolean usaMarketplace;
    private Boolean fazParteDePlano;
    private EmpresaResponseDTO empresa; // DTO da empresa associada (simplificado)
    private PlanoResponseDTO plano; // DTO do plano de assinatura
}
```
```java
package br.com.legalconnect.dto;

import java.util.UUID;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class UserRequestDTO
 * @brief DTO para requisições de criação ou atualização de User.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserRequestDTO {
    private UUID id;
    @NotBlank(message = "O email não pode estar em branco.")
    @Email(message = "Formato de email inválido.")
    private String email;

    // @NotBlank(message = "A senha não pode estar em branco.")
    // @Size(min = 8, message = "A senha deve ter no mínimo 8 caracteres.")
    // private String password;

    // O papel (Role) pode ser definido aqui ou inferido pelo serviço de
    // autenticação/usuário
    // dependendo da lógica de negócio. Para simplificar, pode ser incluído se for
    // um input direto.
    // private String role;
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDateTime;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class UserResponseDTO
 * @brief DTO para respostas de User.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserResponseDTO {
    private UUID id;
    private String email;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    // private String role; // Incluir se o papel for relevante na resposta
}
```
```java
package br.com.legalconnect.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.PrimaryKeyJoinColumn;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Administrador
 * @brief Entidade que representa um administrador da plataforma.
 *        Estende a entidade Pessoa. Atualmente não possui campos adicionais,
 *        mas pode ser expandido.
 *        Mapeado para a tabela 'tb_administrador' que se junta a 'tb_pessoa'
 *        pela chave primária.
 */
@Entity
@Table(name = "tb_administrador")
@PrimaryKeyJoinColumn(name = "id")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Administrador extends Pessoa {
    private String status;

    // Atualmente, não há campos adicionais específicos para Administrador além dos
    // herdados de Pessoa.
    // Pode ser expandido no futuro com, por exemplo, nível de acesso
    // administrativo, etc.
}
```
```java
package br.com.legalconnect.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.PrimaryKeyJoinColumn;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Cliente
 * @brief Entidade que representa um cliente.
 *        Estende a entidade Pessoa. Atualmente não possui campos adicionais,
 *        mas pode ser expandido.
 *        Mapeado para a tabela 'tb_cliente' que se junta a 'tb_pessoa' pela
 *        chave primária.
 */
@Entity
@Table(name = "tb_cliente")
@PrimaryKeyJoinColumn(name = "id")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Cliente extends Pessoa {
    private String status;
    private String tipo;

    // Atualmente, não há campos adicionais específicos para Cliente além dos
    // herdados de Pessoa.
    // Pode ser expandido no futuro com, por exemplo, histórico de preferências,
    // etc.
}
```
```java
package br.com.legalconnect.entity;

import java.util.HashSet;
import java.util.Set;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.CascadeType;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Empresa
 * @brief Entidade que representa uma empresa que pode contratar planos na
 *        plataforma.
 *        Esta entidade não estende Pessoa, pois representa uma pessoa jurídica.
 *        Mapeada para a tabela 'tb_empresa'.
 */
@Entity
@Table(name = "tb_empresa")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Empresa extends BaseEntity {

    @Column(name = "nome_fantasia", nullable = false, length = 255)
    private String nomeFantasia; // Nome fantasia da empresa

    @Column(name = "razao_social", nullable = false, length = 255)
    private String razaoSocial; // Razão social da empresa

    @Column(name = "cnpj", nullable = false, unique = true, length = 18) // CNPJ com máscara
    private String cnpj; // Número do Cadastro Nacional de Pessoas Jurídicas (CNPJ), único por empresa

    @Column(name = "email_contato", length = 255)
    private String emailContato; // E-mail de contato da empresa

    /**
     * @brief Relacionamento um-para-muitos com a entidade Endereco.
     *        Uma empresa pode ter múltiplos endereços (sede, filiais, etc.).
     *        CascadeType.ALL garante que operações nos Enderecos se propaguem para
     *        Empresa.
     *        mappedBy indica que o relacionamento é gerenciado pelo campo 'empresa'
     *        na entidade Endereco.
     */
    @OneToMany(mappedBy = "empresa", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Endereco> enderecos = new HashSet<>(); // Conjunto de endereços da empresa

    /**
     * @brief Coleção de strings para armazenar múltiplos números de telefone.
     *        Será mapeada para uma tabela separada 'tb_empresa_telefones'.
     */
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_empresa_telefones", joinColumns = @JoinColumn(name = "empresa_id"))
    @Column(name = "numero_telefone", length = 20)
    private Set<String> telefones = new HashSet<>(); // Conjunto de números de telefone da empresa

    @OneToMany(mappedBy = "empresa", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Profissional> profissionais = new HashSet<>();
}
```
```java
package br.com.legalconnect.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Endereco
 * @brief Entidade que representa um endereço detalhado.
 *        Pode ser associada a Pessoas ou Empresas.
 *        Mapeada para a tabela 'tb_endereco'.
 */
@Entity
@Table(name = "tb_endereco")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Endereco extends BaseEntity {

    @Column(name = "logradouro", nullable = false, length = 255)
    private String logradouro; // Nome da rua, avenida, etc.

    @Column(name = "numero", nullable = false, length = 20)
    private String numero; // Número do imóvel

    @Column(name = "complemento", length = 255)
    private String complemento; // Complemento (ex: apto, sala, bloco)

    @Column(name = "bairro", nullable = false, length = 100)
    private String bairro; // Bairro

    @Column(name = "cidade", nullable = false, length = 100)
    private String cidade; // Cidade

    @Column(name = "estado", nullable = false, length = 2)
    private String estado; // Estado (UF)

    @Column(name = "cep", nullable = false, length = 9) // CEP com máscara
    private String cep; // Código de Endereçamento Postal

    @Column(name = "pais", nullable = false, length = 50)
    private String pais = "Brasil"; // País (valor padrão "Brasil")

    @Enumerated(EnumType.STRING)
    @Column(name = "tipo_endereco", nullable = false, length = 50)
    private TipoEndereco tipoEndereco; // Tipo de endereço (ex: RESIDENCIAL, COMERCIAL, ESCRITORIO)

    /**
     * @brief Relacionamento muitos-para-um com a entidade Pessoa (opcional).
     *        Um endereço pode pertencer a uma pessoa.
     *        Somente um dos campos (pessoa ou empresa) deve ser preenchido.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "pessoa_id")
    private Pessoa pessoa;

    /**
     * @brief Relacionamento muitos-para-um com a entidade Empresa (opcional).
     *        Um endereço pode pertencer a uma empresa.
     *        Somente um dos campos (pessoa ou empresa) deve ser preenchido.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "empresa_id")
    private Empresa empresa;

    /**
     * @enum TipoEndereco
     * @brief Enumeração para representar o tipo de endereço.
     */
    public enum TipoEndereco {
        RESIDENCIAL,
        COMERCIAL,
        ESCRITORIO,
        COBRANCA,
        ENTREGA,
        OUTRO
    }
}
```
```java
package br.com.legalconnect.entity;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set; // Usaremos Set para evitar duplicatas e garantir unicidade

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.CascadeType;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.Inheritance;
import jakarta.persistence.InheritanceType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Pessoa
 * @brief Entidade base abstrata para todas as pessoas no sistema (Profissional,
 *        Cliente, Administrador).
 *        Contém dados comuns a todos os tipos de pessoas e um relacionamento
 *        OneToOne com a entidade User.
 *        Utiliza estratégia de herança JOINED para mapear subclasses em tabelas
 *        separadas.
 */
@Entity
@Table(name = "tb_pessoa")
@Inheritance(strategy = InheritanceType.JOINED)
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public abstract class Pessoa extends BaseEntity {

    /**
     * @brief Relacionamento um-para-um com a entidade User.
     *        Este lado é o dono do relacionamento, e a coluna 'user_id' será criada
     *        em 'tb_pessoa'.
     *        O CascadeType.ALL garante que operações no User (como deleção) se
     *        propaguem para Pessoa.
     */
    @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinColumn(name = "user_id", referencedColumnName = "id", nullable = false, unique = true)
    private User usuario; // O usuário associado a esta pessoa

    @Column(name = "nome_completo", nullable = false, length = 255)
    private String nomeCompleto; // Nome completo da pessoa

    @Column(name = "cpf", nullable = false, unique = true, length = 14)
    private String cpf; // Número do Cadastro de Pessoa Física (CPF), único por pessoa

    @Column(name = "data_nascimento")
    private LocalDate dataNascimento; // Data de nascimento da pessoa

    /**
     * @brief Relacionamento um-para-muitos com a entidade Endereco.
     *        Uma pessoa pode ter múltiplos endereços (residencial, comercial,
     *        etc.).
     *        CascadeType.ALL garante que operações nos Enderecos se propaguem para
     *        Pessoa.
     *        mappedBy indica que o relacionamento é gerenciado pelo campo 'pessoa'
     *        na entidade Endereco.
     */
    @OneToMany(mappedBy = "pessoa", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Endereco> enderecos = new HashSet<>(); // Conjunto de endereços da pessoa

    /**
     * @brief Coleção de strings para armazenar múltiplos números de telefone.
     *        Será mapeada para uma tabela separada 'tb_pessoa_telefones'.
     */
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_pessoa_telefones", joinColumns = @JoinColumn(name = "pessoa_id"))
    @Column(name = "numero_telefone", length = 20)
    private Set<String> telefones = new HashSet<>(); // Conjunto de números de telefone da pessoa
}
```
```java
package br.com.legalconnect.entity;

import java.math.BigDecimal;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Plano
 * @brief Entidade que representa um plano de assinatura oferecido na
 *        plataforma.
 *        Esta classe é um placeholder e deve ser definida em seu próprio
 *        microsserviço (marketplace).
 *        Mapeada para a tabela 'tb_plano'.
 */
@Entity
@Table(name = "tb_plano")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Plano extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 100)
    private String nome; // Nome do plano (ex: Free, Premium)

    @Column(name = "descricao", columnDefinition = "TEXT")
    private String descricao; // Descrição detalhada do plano

    @Column(name = "preco_mensal", nullable = false, precision = 10, scale = 2)
    private BigDecimal precoMensal; // Preço mensal do plano

    @Column(name = "preco_anual", nullable = false, precision = 10, scale = 2)
    private BigDecimal precoAnual; // Preço anual do plano

    @Column(name = "limite_servicos_agendaveis")
    private Integer limiteServicosAgendaveis; // Limite de serviços que podem ser agendados

    @Enumerated(EnumType.STRING)
    @Column(name = "visibilidade_destaque", nullable = false, length = 50)
    private VisibilidadeDestaque visibilidadeDestaque; // Nível de destaque no marketplace

    @Column(name = "acesso_relatorios_avancados", nullable = false)
    private Boolean acessoRelatoriosAvancados; // Indica se o plano dá acesso a relatórios avançados

    @Column(name = "permite_pedidos_orcamento", nullable = false)
    private Boolean permitePedidosOrcamento; // Indica se o plano permite pedidos de orçamento

    @Column(name = "periodo_teste_dias")
    private Integer periodoTesteDias; // Período de teste gratuito em dias

    @Column(name = "is_default", nullable = false)
    private Boolean isDefault; // Indica se é o plano padrão para novos cadastros

    /**
     * @enum VisibilidadeDestaque
     * @brief Enumeração para representar o nível de visibilidade/destaque de um
     *        plano no marketplace.
     */
    public enum VisibilidadeDestaque {
        PADRAO,
        PREMIUM,
        DESTAQUE_MAXIMO
    }
}
```
```java
package br.com.legalconnect.entity;

import java.util.HashSet;
import java.util.Set;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.PrimaryKeyJoinColumn;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Profissional
 * @brief Entidade que representa um profissional do direito.
 *        Estende a entidade Pessoa e adiciona campos específicos de um
 *        profissional.
 *        Mapeado para a tabela 'tb_profissional' que se junta a 'tb_pessoa'
 *        pela chave primária.
 */
@Entity
@Table(name = "tb_profissional")
@PrimaryKeyJoinColumn(name = "id")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Profissional extends Pessoa {

    @Column(name = "numero_oab", nullable = false, unique = true, length = 50)
    private String numeroOab; // Número de registro na OAB, único por profissional

    @Enumerated(EnumType.STRING)
    @Column(name = "status_profissional", nullable = false, length = 50)
    private StatusProfissional statusProfissional; // Status específico do profissional (ex: ATIVO, LICENCIADO)

    @Column(name = "usa_marketplace", nullable = false)
    private Boolean usaMarketplace = false; // Indica se o profissional deseja aparecer no marketplace

    @Column(name = "faz_parte_de_plano", nullable = false)
    private Boolean fazParteDePlano = false; // Indica se o profissional está associado a um plano pago

    /**
     * @brief Relacionamento muitos-para-um com a entidade Empresa (opcional).
     *        Um profissional pode pertencer a uma empresa.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "empresa_id") // Coluna de chave estrangeira para a empresa
    private Empresa empresa; // A empresa à qual o profissional está associado (se houver)

    /**
     * @brief Relacionamento muitos-para-um com a entidade Plano.
     *        Um profissional está associado a um plano de assinatura.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "plano_id", nullable = false) // Coluna de chave estrangeira para o plano
    private Plano plano; // O plano de assinatura do advogado
    @ManyToMany(fetch = FetchType.EAGER) // Relacionamento muitos-para-muitos com Role
    @JoinTable(name = "tb_user_profissionals_role", // Tabela de junção
            joinColumns = @JoinColumn(name = "profissional_profissionals_id"), // Coluna que referencia User
            inverseJoinColumns = @JoinColumn(name = "role_id") // Coluna que referencia Role
    )
    private Set<RoleProfissional> roleProfissionals = new HashSet<>(); // Papéis/perfil de acesso do usuário

    /**
     * @enum StatusProfissional
     * @brief Enumeração para representar o status específico de um Profissional.
     */
    public enum StatusProfissional {
        ATIVO, // Profissional ativo e em dia
        LICENCIADO, // Profissional com licença temporariamente suspensa
        SUSPENSO, // Profissional suspenso (ex: por infração)
        EM_ANALISE // Profissional aguardando aprovação/verificação
    }
}
```
```java
package br.com.legalconnect.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Role
 * @brief Entidade para definir os papéis de acesso do usuário no sistema.
 *
 *        Esta tabela de roles agora reside nos schemas de tenant, o que
 *        significa
 *        que cada tenant pode ter seus próprios conjuntos de roles ou roles com
 *        IDs diferentes.
 */
@Entity
@Table(name = "tb_role") // A tabela tb_role agora reside no schema do tenant
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class RoleProfissional extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 100)
    private String nome; // Nome descritivo e único do papel (ex: CLIENTE, ADVOGADO)

    @Column(name = "descricao", columnDefinition = "TEXT")
    private String descricao; // Uma descrição detalhada do papel
}
```
```java
package br.com.legalconnect.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class User
 * @brief Entidade base para todos os usuários (clientes, advogados,
 *        administradores de tenant, etc.).
 *
 *        Esta entidade representa um usuário na plataforma e está associada a
 *        um tenant
 *        específico. A tabela de usuário reside nos schemas de tenant.
 */
@Entity
@Table(name = "tb_user") // A tabela tb_user agora reside no schema do tenant
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class User extends BaseEntity { // Implementa UserDetails

    @Column(name = "nome_completo", nullable = false, length = 255)
    private String nomeCompleto; // Nome completo do usuário

    @Column(name = "email", nullable = false, unique = true, length = 255)
    private String email; // Endereço de e-mail principal do usuário (único por schema de tenant)

    @Column(name = "cpf", nullable = false, unique = true, length = 14)
    private String cpf; // Número do Cadastro de Pessoa Física do usuário (único por schema de tenant)

    @Column(name = "telefone", length = 20)
    private String telefone; // Número de telefone de contato do usuário

    @Column(name = "senha_hash", nullable = false, columnDefinition = "TEXT")
    private String senhaHash; // Representação criptografada (hashed) da senha do usuário

    @Column(name = "foto_url", columnDefinition = "TEXT")
    private String fotoUrl; // URL da foto de perfil do usuário no S3

    /**
     * @enum UserType
     * @brief Enumeração para categorizar o tipo principal de um usuário.
     *        Define se o usuário é um cliente, advogado ou administrador da
     *        plataforma.
     */
    public enum UserType {
        CLIENTE, // Usuário final que busca serviços jurídicos
        ADVOGADO, // Profissional do direito que oferece serviços
        PLATAFORMA_ADMIN, // Administrador da plataforma com privilégios totais
        SOCIO
    }

    /**
     * @enum UserStatus
     * @brief Enumeração para representar o status atual da conta de um usuário.
     *        Define o estado operacional da conta do usuário na plataforma.
     */
    public enum UserStatus {
        ACTIVE, INACTIVE, PENDING_APPROVAL, REJECTED, PENDING
    }

    // --- Implementação de UserDetails ---

}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.AdministradorRequestDTO;
import br.com.legalconnect.dto.AdministradorResponseDTO;
import br.com.legalconnect.entity.Administrador;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

/**
 * @interface AdministradorMapper
 * @brief Mapper MapStruct para conversão entre Administrador e seus DTOs.
 */
@Mapper(componentModel = "spring", uses = {PessoaMapper.class, EnderecoMapper.class, UserMapper.class})
public interface AdministradorMapper extends PessoaMapper {

    AdministradorMapper INSTANCE = Mappers.getMapper(AdministradorMapper.class);

    /**
     * @brief Mapeia um AdministradorRequestDTO para uma entidade Administrador.
     * @param dto O DTO de requisição do administrador.
     * @return A entidade Administrador.
     */
    Administrador toEntity(AdministradorRequestDTO dto);

    /**
     * @brief Mapeia uma entidade Administrador para um AdministradorResponseDTO.
     * @param entity A entidade Administrador.
     * @return O DTO de resposta do administrador.
     */
    @Mapping(source = "status", target = "status")
    AdministradorResponseDTO toResponseDTO(Administrador entity);
}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.ClienteRequestDTO;
import br.com.legalconnect.dto.ClienteResponseDTO;
import br.com.legalconnect.entity.Cliente;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

/**
 * @interface ClienteMapper
 * @brief Mapper MapStruct para conversão entre Cliente e seus DTOs.
 */
@Mapper(componentModel = "spring", uses = {PessoaMapper.class, EnderecoMapper.class, UserMapper.class})
public interface ClienteMapper extends PessoaMapper {

    ClienteMapper INSTANCE = Mappers.getMapper(ClienteMapper.class);

    /**
     * @brief Mapeia um ClienteRequestDTO para uma entidade Cliente.
     * @param dto O DTO de requisição do cliente.
     * @return A entidade Cliente.
     */
    Cliente toEntity(ClienteRequestDTO dto);

    /**
     * @brief Mapeia uma entidade Cliente para um ClienteResponseDTO.
     * @param entity A entidade Cliente.
     * @return O DTO de resposta do cliente.
     */
    @Mapping(source = "status", target = "status")
    @Mapping(target = "tipo", ignore = true) // O campo 'tipo' não existe na entidade Cliente, apenas no DTO de resposta
    ClienteResponseDTO toResponseDTO(Cliente entity);
}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.EmpresaRequestDTO;
import br.com.legalconnect.dto.EmpresaResponseDTO;
import br.com.legalconnect.entity.Empresa;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import java.util.List;
import java.util.Set;

/**
 * @interface EmpresaMapper
 * @brief Mapper MapStruct para conversão entre Empresa e seus DTOs.
 */
@Mapper(componentModel = "spring", uses = {EnderecoMapper.class})
public interface EmpresaMapper {

    EmpresaMapper INSTANCE = Mappers.getMapper(EmpresaMapper.class);

    /**
     * @brief Converte um EmpresaRequestDTO para uma entidade Empresa.
     * @param dto O DTO de requisição da empresa.
     * @return A entidade Empresa.
     */
    @Mapping(target = "id", ignore = true) // ID é gerado, não vem do DTO de requisição
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(source = "enderecos", target = "enderecos")
    @Mapping(source = "telefones", target = "telefones")
    Empresa toEntity(EmpresaRequestDTO dto);

    /**
     * @brief Converte uma entidade Empresa para um EmpresaResponseDTO.
     * @param entity A entidade Empresa.
     * @return O DTO de resposta da empresa.
     */
    @Mapping(source = "enderecos", target = "enderecos")
    @Mapping(source = "telefones", target = "telefones")
    EmpresaResponseDTO toResponseDTO(Empresa entity);
}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.EnderecoRequestDTO;
import br.com.legalconnect.dto.EnderecoResponseDTO;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.entity.Endereco.TipoEndereco; // Importa o enum correto
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import java.util.List;
import java.util.Set;

/**
 * @interface EnderecoMapper
 * @brief Mapper MapStruct para conversão entre Endereco e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface EnderecoMapper {

    EnderecoMapper INSTANCE = Mappers.getMapper(EnderecoMapper.class);

    /**
     * @brief Converte um EnderecoRequestDTO para uma entidade Endereco.
     * @param dto O DTO de requisição do endereço.
     * @return A entidade Endereco.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(target = "pessoa", ignore = true) // Será setado no serviço
    @Mapping(target = "empresa", ignore = true) // Será setado no serviço
    Endereco toEntity(EnderecoRequestDTO dto);

    /**
     * @brief Converte uma entidade Endereco para um EnderecoResponseDTO.
     * @param entity A entidade Endereco.
     * @return O DTO de resposta do endereço.
     */
    EnderecoResponseDTO toResponseDTO(Endereco entity);

    /**
     * @brief Converte uma lista de EnderecoRequestDTOs para um Set de entidades Endereco.
     * @param dtoList A lista de DTOs de requisição de endereços.
     * @return Um Set de entidades Endereco.
     */
    Set<Endereco> toEntitySet(List<EnderecoRequestDTO> dtoList);

    /**
     * @brief Converte um Set de entidades Endereco para uma lista de EnderecoResponseDTOs.
     * @param entitySet Um Set de entidades Endereco.
     * @return Uma lista de DTOs de resposta de endereços.
     */
    List<EnderecoResponseDTO> toResponseDTOList(Set<Endereco> entitySet);
}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.PessoaResponseDTO;
import br.com.legalconnect.entity.Pessoa;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.InheritInverseConfiguration; // Importar se for usar @InheritInverseConfiguration
import org.mapstruct.factory.Mappers;

/**
 * @interface PessoaMapper
 * @brief Mapper MapStruct para conversão entre Pessoa e seus DTOs.
 * Esta é uma interface base para ser estendida por mappers de subclasses de Pessoa.
 */
@Mapper(componentModel = "spring", uses = {UserMapper.class, EnderecoMapper.class})
public interface PessoaMapper {

    PessoaMapper INSTANCE = Mappers.getMapper(PessoaMapper.class);

    /**
     * @brief Mapeia uma entidade Pessoa para um PessoaResponseDTO.
     * @param entity A entidade Pessoa.
     * @return O DTO de resposta da pessoa.
     */
    @Mapping(source = "usuario", target = "usuario")
    @Mapping(source = "enderecos", target = "enderecos")
    @Mapping(source = "telefones", target = "telefones")
    PessoaResponseDTO toResponseDTO(Pessoa entity);
}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.PlanoResponseDTO;
import br.com.legalconnect.entity.Plano; // Importar Plano da entidade
import br.com.legalconnect.dto.EmpresaResponseDTO; // Importar EmpresaResponseDTO
import br.com.legalconnect.dto.ProfissionalRequestDTO;
import br.com.legalconnect.dto.ProfissionalResponseDTO;
import br.com.legalconnect.entity.Empresa; // Importar Empresa da entidade
import br.com.legalconnect.entity.Profissional;
import br.com.legalconnect.entity.Profissional.StatusProfissional; // Importar o enum correto
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

/**
 * @interface ProfissionalMapper
 * @brief Mapper MapStruct para conversão entre Profissional e seus DTOs.
 */
@Mapper(componentModel = "spring", uses = {PessoaMapper.class, EnderecoMapper.class, UserMapper.class, EmpresaMapper.class})
public interface ProfissionalMapper extends PessoaMapper {

    ProfissionalMapper INSTANCE = Mappers.getMapper(ProfissionalMapper.class);

    /**
     * @brief Mapeia um ProfissionalRequestDTO para uma entidade Profissional.
     * @param dto O DTO de requisição do profissional.
     * @return A entidade Profissional.
     */
    @Mapping(target = "empresa", ignore = true) // Empresa será setada no serviço
    @Mapping(target = "plano", ignore = true)   // Plano será setado no serviço
    @Mapping(target = "roleProfissionals", ignore = true) // Não presente no DTO
    Profissional toEntity(ProfissionalRequestDTO dto);

    /**
     * @brief Mapeia uma entidade Profissional para um ProfissionalResponseDTO.
     * @param entity A entidade Profissional.
     * @return O DTO de resposta do profissional.
     */
    @Mapping(source = "empresa", target = "empresa")
    @Mapping(source = "plano", target = "plano")
    ProfissionalResponseDTO toResponseDTO(Profissional entity);

    /**
     * @brief Mapeia uma entidade Plano para um PlanoResponseDTO.
     * @param plano A entidade Plano.
     * @return O DTO de resposta do Plano.
     */
    PlanoResponseDTO toPlanoResponseDTO(Plano plano);
}
```
```java
package br.com.legalconnect.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.dto.UserRequestDTO;
import br.com.legalconnect.dto.UserResponseDTO;
import br.com.legalconnect.entity.User;

/**
 * @interface UserMapper
 * @brief Mapper MapStruct para conversão entre User e seus DTOs.
 */
@Mapper(componentModel = "spring") // Integração com Spring para injeção de dependência
public interface UserMapper {

    UserMapper INSTANCE = Mappers.getMapper(UserMapper.class);

    /**
     * @brief Converte um UserRequestDTO para uma entidade User.
     *        Ignora campos da entidade User que não estão presentes no
     *        UserRequestDTO.
     * @param dto O DTO de requisição do usuário.
     * @return A entidade User.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(target = "nomeCompleto", ignore = true) // Não presente no DTO de requisição
    @Mapping(target = "cpf", ignore = true) // Não presente no DTO de requisição
    @Mapping(target = "telefone", ignore = true) // Não presente no DTO de requisição
    // @Mapping(target = "senhaHash", source = "password") // Mapeia password do DTO
    // para senhaHash da entidade
    @Mapping(target = "fotoUrl", ignore = true) // Não presente no DTO de requisição
    User toEntity(UserRequestDTO dto);

    /**
     * @brief Converte uma entidade User para um UserResponseDTO.
     *        Ignora campos da entidade User que não estão presentes no
     *        UserResponseDTO.
     * @param entity A entidade User.
     * @return O DTO de resposta do usuário.
     */
    @Mapping(target = "email", source = "email")
    UserResponseDTO toResponseDTO(User entity);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Administrador;

/**
 * @interface RepositorioAdministrador
 * @brief Repositório Spring Data JPA para a entidade Administrador.
 *        Fornece métodos CRUD e de busca personalizados para Administrador.
 */
@Repository
public interface RepositorioAdministrador extends JpaRepository<Administrador, UUID> {

    /**
     * @brief Busca um Administrador pelo CPF.
     * @param cpf O CPF do administrador.
     * @return Um Optional contendo o Administrador, se encontrado.
     */
    Optional<Administrador> findByCpf(String cpf);

    /**
     * @brief Lista todos os Administradores com paginação.
     * @param pageable Objeto Pageable para configuração de paginação.
     * @return Uma página de Administradores.
     */
    Page<Administrador> findAll(Pageable pageable);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Cliente;

/**
 * @interface RepositorioCliente
 * @brief Repositório Spring Data JPA para a entidade Cliente.
 *        Fornece métodos CRUD e de busca personalizados para Cliente.
 */
@Repository
public interface RepositorioCliente extends JpaRepository<Cliente, UUID> {

    /**
     * @brief Busca um Cliente pelo CPF.
     * @param cpf O CPF do cliente.
     * @return Um Optional contendo o Cliente, se encontrado.
     */
    Optional<Cliente> findByCpf(String cpf);

    /**
     * @brief Lista todos os Clientes com paginação.
     * @param pageable Objeto Pageable para configuração de paginação.
     * @return Uma página de Clientes.
     */
    Page<Cliente> findAll(Pageable pageable);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Empresa;

/**
 * @interface RepositorioEmpresa
 * @brief Repositório Spring Data JPA para a entidade Empresa.
 *        Fornece métodos CRUD e de busca personalizados para Empresa.
 */
@Repository
public interface RepositorioEmpresa extends JpaRepository<Empresa, UUID> {

    /**
     * @brief Busca uma Empresa pelo CNPJ.
     * @param cnpj O CNPJ da empresa.
     * @return Um Optional contendo a Empresa, se encontrada.
     */
    Optional<Empresa> findByCnpj(String cnpj);

    /**
     * @brief Lista todas as Empresas com paginação.
     * @param pageable Objeto Pageable para configuração de paginação.
     * @return Uma página de Empresas.
     */
    Page<Empresa> findAll(Pageable pageable);
}
```
```java
package br.com.legalconnect.repository;

import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Endereco;

/**
 * @interface RepositorioEndereco
 * @brief Repositório Spring Data JPA para a entidade Endereco.
 *        Fornece métodos CRUD básicos para Endereco.
 */
@Repository
public interface RepositorioEndereco extends JpaRepository<Endereco, UUID> {
    // Métodos de busca adicionais podem ser definidos aqui se necessário,
    // como findByPessoaId(UUID pessoaId) ou findByEmpresaId(UUID empresaId)
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Pessoa;

/**
 * @interface RepositorioPessoa
 * @brief Repositório Spring Data JPA para a entidade Pessoa (base).
 *        Fornece métodos CRUD básicos para Pessoa e busca por CPF.
 *        Como Pessoa é uma entidade base abstrata com estratégia JOINED, este
 *        repositório
 *        pode ser usado para operações polimórficas se necessário, mas
 *        geralmente
 *        repositórios específicos para subclasses (Profissional, Cliente,
 *        Administrador)
 *        são mais comuns para operações de negócio.
 */
@Repository
public interface RepositorioPessoa extends JpaRepository<Pessoa, UUID> {

    /**
     * @brief Busca uma Pessoa pelo CPF.
     * @param cpf O CPF da pessoa.
     * @return Um Optional contendo a Pessoa, se encontrada.
     */
    Optional<Pessoa> findByCpf(String cpf);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Plano;

/**
 * @interface RepositorioPlano
 * @brief Repositório Spring Data JPA para a entidade Plano.
 *        Fornece métodos CRUD e de busca personalizados para Plano.
 *        **Nota:** Em uma arquitetura de microsserviços ideal, esta entidade e
 *        seu
 *        repositório poderiam residir em um serviço de 'marketplace' ou
 *        'assinatura'.
 *        Aqui, é mantido para fins de completude do modelo de dados do
 *        user-service,
 *        mas a gestão real dos planos pode ser externa.
 */
@Repository
public interface RepositorioPlano extends JpaRepository<Plano, UUID> {

    /**
     * @brief Busca um Plano pelo nome.
     * @param nome O nome do plano.
     * @return Um Optional contendo o Plano, se encontrado.
     */
    Optional<Plano> findByNome(String nome);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Profissional;

/**
 * @interface RepositorioProfissional
 * @brief Repositório Spring Data JPA para a entidade Profissional.
 *        Fornece métodos CRUD e de busca personalizados para Profissional.
 */
@Repository
public interface RepositorioProfissional extends JpaRepository<Profissional, UUID> {

    /**
     * @brief Busca um Profissional pelo CPF.
     * @param cpf O CPF do profissional.
     * @return Um Optional contendo o Profissional, se encontrado.
     */
    Optional<Profissional> findByCpf(String cpf);

    /**
     * @brief Busca um Profissional pelo número da OAB.
     * @param numeroOab O número da OAB do profissional.
     * @return Um Optional contendo o Profissional, se encontrado.
     */
    Optional<Profissional> findByNumeroOab(String numeroOab);

    /**
     * @brief Lista todos os Profissionais com paginação.
     * @param pageable Objeto Pageable para configuração de paginação.
     * @return Uma página de Profissionais.
     */
    Page<Profissional> findAll(Pageable pageable);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.RoleProfissional;

/**
 * @interface RepositorioRoleProfissional
 * @brief Repositório Spring Data JPA para a entidade RoleProfissional.
 *        Fornece métodos CRUD e de busca personalizados para RoleProfissional.
 *        **Nota:** Em um ambiente multi-tenant, os papéis podem ser globais ou
 *        por tenant.
 *        Este repositório assume que a entidade RoleProfissional está no schema
 *        do tenant.
 */
@Repository
public interface RepositorioRoleProfissional extends JpaRepository<RoleProfissional, UUID> {

    /**
     * @brief Busca um RoleProfissional pelo nome.
     * @param nome O nome do papel.
     * @return Um Optional contendo o RoleProfissional, se encontrado.
     */
    Optional<RoleProfissional> findByNome(String nome);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.User;

/**
 * @interface RepositorioUser
 * @brief Repositório Spring Data JPA para a entidade User.
 *        Fornece métodos CRUD e de busca personalizados para User.
 *        **Nota:** Este repositório é crucial para o pré-requisito de
 *        associação de Pessoa a um User existente.
 *        As operações de criação/atualização de User em si são de
 *        responsabilidade de outro microsserviço (ex: auth-service).
 */
@Repository
public interface RepositorioUser extends JpaRepository<User, UUID> {

    /**
     * @brief Busca um User pelo email.
     * @param email O email do usuário.
     * @return Um Optional contendo o User, se encontrado.
     */
    Optional<User> findByEmail(String email);

    /**
     * @brief Busca um User pelo CPF.
     * @param cpf O CPF do usuário.
     * @return Um Optional contendo o User, se encontrado.
     */
    Optional<User> findByCpf(String cpf);
}
```
```java
package br.com.legalconnect.service;

import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import br.com.legalconnect.dto.AdministradorRequestDTO;
import br.com.legalconnect.dto.AdministradorResponseDTO;
import br.com.legalconnect.entity.Administrador;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.entity.User;
import br.com.legalconnect.mapper.AdministradorMapper;
import br.com.legalconnect.repository.RepositorioAdministrador;
import br.com.legalconnect.repository.RepositorioUser;

/**
 * @class ServicoAdministrador
 * @brief Serviço de domínio para gerenciar operações relacionadas a
 *        Administradores.
 *        Contém a lógica de negócio para criação, busca, atualização e exclusão
 *        de Administradores.
 */
@Service
public class ServicoAdministrador {

    private final RepositorioAdministrador repositorioAdministrador;
    private final RepositorioUser repositorioUser;
    private final AdministradorMapper administradorMapper;

    @Autowired
    public ServicoAdministrador(RepositorioAdministrador repositorioAdministrador, RepositorioUser repositorioUser,
            AdministradorMapper administradorMapper) {
        this.repositorioAdministrador = repositorioAdministrador;
        this.repositorioUser = repositorioUser;
        this.administradorMapper = administradorMapper;
    }

    /**
     * @brief Cadastra um novo Administrador no sistema.
     * @param requestDTO DTO com os dados do Administrador a ser cadastrado.
     * @return DTO com os dados do Administrador cadastrado.
     * @throws BusinessException Se o CPF já estiver cadastrado ou o User associado
     *                           não for encontrado.
     */
    @Transactional
    public AdministradorResponseDTO cadastrarAdministrador(AdministradorRequestDTO requestDTO) {
        // 1. Verificar pré-requisito: User associado deve existir
        UUID userId = requestDTO.getUsuario().getId(); // Presume que o ID do User vem no DTO
        User user = repositorioUser.findById(userId)
                .orElseThrow(() -> new BusinessException(ErrorCode.USER_NOT_FOUND,
                        "Usuário associado com ID " + userId + " não encontrado."));

        // 2. Validação de duplicidade de CPF
        if (repositorioAdministrador.findByCpf(requestDTO.getCpf()).isPresent()) {
            throw new BusinessException(ErrorCode.INVALID_CPF, "CPF já cadastrado para outro administrador.");
        }

        // 3. Mapear DTO para entidade
        Administrador administrador = administradorMapper.toEntity(requestDTO);
        administrador.setUsuario(user); // Associar o User encontrado

        // 4. Associar endereços à pessoa (Administrador)
        Set<Endereco> enderecos = requestDTO.getEnderecos().stream()
                .map(enderecoDTO -> {
                    Endereco endereco = administradorMapper.toEntity(enderecoDTO);
                    endereco.setPessoa(administrador); // Garante a associação bidirecional
                    return endereco;
                })
                .collect(Collectors.toSet());
        administrador.setEnderecos(enderecos);

        // 5. Salvar a entidade
        Administrador savedAdministrador = repositorioAdministrador.save(administrador);

        // 6. Mapear entidade salva para DTO de resposta
        return administradorMapper.toResponseDTO(savedAdministrador);
    }

    /**
     * @brief Busca um Administrador pelo ID.
     * @param id ID do Administrador a ser buscado.
     * @return DTO com os dados do Administrador encontrado.
     * @throws BusinessException Se o Administrador não for encontrado.
     */
    @Transactional(readOnly = true)
    public AdministradorResponseDTO buscarAdministradorPorId(UUID id) {
        Administrador administrador = repositorioAdministrador.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Administrador com ID " + id + " não encontrado."));
        return administradorMapper.toResponseDTO(administrador);
    }

    /**
     * @brief Lista todos os Administradores com paginação.
     * @param pageable Objeto Pageable para configuração da paginação.
     * @return Página de DTOs de Administradores.
     */
    @Transactional(readOnly = true)
    public Page<AdministradorResponseDTO> listarAdministradores(Pageable pageable) {
        return repositorioAdministrador.findAll(pageable)
                .map(administradorMapper::toResponseDTO);
    }

    /**
     * @brief Atualiza os dados de um Administrador existente.
     * @param id         ID do Administrador a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Administrador.
     * @return DTO com os dados do Administrador atualizado.
     * @throws BusinessException Se o Administrador não for encontrado ou se houver
     *                           duplicidade de CPF.
     */
    @Transactional
    public AdministradorResponseDTO atualizarAdministrador(UUID id, AdministradorRequestDTO requestDTO) {
        Administrador existingAdministrador = repositorioAdministrador.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Administrador com ID " + id + " não encontrado para atualização."));

        // 1. Validação de duplicidade de CPF (se o CPF foi alterado)
        if (!existingAdministrador.getCpf().equals(requestDTO.getCpf())) {
            if (repositorioAdministrador.findByCpf(requestDTO.getCpf()).isPresent()) {
                throw new BusinessException(ErrorCode.INVALID_CPF, "Novo CPF já cadastrado para outro administrador.");
            }
        }

        // 2. Atualizar campos básicos da Pessoa e Administrador
        // O mapper precisa de um método de atualização, ou fazer manualmente
        existingAdministrador.setNomeCompleto(requestDTO.getNomeCompleto());
        existingAdministrador.setCpf(requestDTO.getCpf());
        existingAdministrador.setDataNascimento(requestDTO.getDataNascimento());
        existingAdministrador.setStatus(requestDTO.getStatus()); // Campo específico de Administrador

        // 3. Atualizar endereços (lógica de sincronização)
        existingAdministrador.getEnderecos().clear(); // Limpa os endereços existentes
        requestDTO.getEnderecos().forEach(enderecoDTO -> {
            // Reutiliza o mapper para converter DTO para Endereco
            Endereco newEndereco = administradorMapper.toEntity(enderecoDTO);
            newEndereco.setPessoa(existingAdministrador); // Garante a associação bidirecional
            existingAdministrador.getEnderecos().add(newEndereco);
        });

        // 4. Atualizar telefones
        existingAdministrador.getTelefones().clear();
        if (requestDTO.getTelefones() != null) {
            existingAdministrador.getTelefones().addAll(requestDTO.getTelefones());
        }

        // 5. Salvar a entidade atualizada
        Administrador updatedAdministrador = repositorioAdministrador.save(existingAdministrador);

        return administradorMapper.toResponseDTO(updatedAdministrador);
    }

    /**
     * @brief Exclui um Administrador pelo ID.
     * @param id ID do Administrador a ser excluído.
     * @throws BusinessException Se o Administrador não for encontrado.
     */
    @Transactional
    public void excluirAdministrador(UUID id) {
        if (!repositorioAdministrador.existsById(id)) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                    "Administrador com ID " + id + " não encontrado para exclusão.");
        }
        // A exclusão em cascata do Endereco e User (se configurado no mapeamento) será
        // tratada pelo JPA
        repositorioAdministrador.deleteById(id);
    }
}
```
```java
package br.com.legalconnect.service;

import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import br.com.legalconnect.dto.ClienteRequestDTO;
import br.com.legalconnect.dto.ClienteResponseDTO;
import br.com.legalconnect.entity.Cliente;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.entity.User;
import br.com.legalconnect.mapper.ClienteMapper;
import br.com.legalconnect.repository.RepositorioCliente;
import br.com.legalconnect.repository.RepositorioUser;

/**
 * @class ServicoCliente
 * @brief Serviço de domínio para gerenciar operações relacionadas a Clientes.
 *        Contém a lógica de negócio para criação, busca, atualização e exclusão
 *        de Clientes.
 */
@Service
public class ServicoCliente {

    private final RepositorioCliente repositorioCliente;
    private final RepositorioUser repositorioUser;
    private final ClienteMapper clienteMapper;

    @Autowired
    public ServicoCliente(RepositorioCliente repositorioCliente, RepositorioUser repositorioUser,
            ClienteMapper clienteMapper) {
        this.repositorioCliente = repositorioCliente;
        this.repositorioUser = repositorioUser;
        this.clienteMapper = clienteMapper;
    }

    /**
     * @brief Cadastra um novo Cliente no sistema.
     * @param requestDTO DTO com os dados do Cliente a ser cadastrado.
     * @return DTO com os dados do Cliente cadastrado.
     * @throws BusinessException Se o CPF já estiver cadastrado ou o User associado
     *                           não for encontrado.
     */
    @Transactional
    public ClienteResponseDTO cadastrarCliente(ClienteRequestDTO requestDTO) {
        // 1. Verificar pré-requisito: User associado deve existir
        UUID userId = requestDTO.getUsuario().getId(); // Presume que o ID do User vem no DTO
        User user = repositorioUser.findById(userId)
                .orElseThrow(() -> new BusinessException(ErrorCode.USER_NOT_FOUND,
                        "Usuário associado com ID " + userId + " não encontrado."));

        // 2. Validação de duplicidade de CPF
        if (repositorioCliente.findByCpf(requestDTO.getCpf()).isPresent()) {
            throw new BusinessException(ErrorCode.INVALID_CPF, "CPF já cadastrado para outro cliente.");
        }

        // 3. Mapear DTO para entidade
        Cliente cliente = clienteMapper.toEntity(requestDTO);
        cliente.setUsuario(user); // Associar o User encontrado

        // 4. Associar endereços à pessoa (Cliente)
        Set<Endereco> enderecos = requestDTO.getEnderecos().stream()
                .map(enderecoDTO -> {
                    Endereco endereco = clienteMapper.toEntity(enderecoDTO);
                    endereco.setPessoa(cliente); // Garante a associação bidirecional
                    return endereco;
                })
                .collect(Collectors.toSet());
        cliente.setEnderecos(enderecos);

        // 5. Salvar a entidade
        Cliente savedCliente = repositorioCliente.save(cliente);

        // 6. Mapear entidade salva para DTO de resposta
        return clienteMapper.toResponseDTO(savedCliente);
    }

    /**
     * @brief Busca um Cliente pelo ID.
     * @param id ID do Cliente a ser buscado.
     * @return DTO com os dados do Cliente encontrado.
     * @throws BusinessException Se o Cliente não for encontrado.
     */
    @Transactional(readOnly = true)
    public ClienteResponseDTO buscarClientePorId(UUID id) {
        Cliente cliente = repositorioCliente.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Cliente com ID " + id + " não encontrado."));
        return clienteMapper.toResponseDTO(cliente);
    }

    /**
     * @brief Lista todos os Clientes com paginação.
     * @param pageable Objeto Pageable para configuração da paginação.
     * @return Página de DTOs de Clientes.
     */
    @Transactional(readOnly = true)
    public Page<ClienteResponseDTO> listarClientes(Pageable pageable) {
        return repositorioCliente.findAll(pageable)
                .map(clienteMapper::toResponseDTO);
    }

    /**
     * @brief Atualiza os dados de um Cliente existente.
     * @param id         ID do Cliente a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Cliente.
     * @return DTO com os dados do Cliente atualizado.
     * @throws BusinessException Se o Cliente não for encontrado ou se houver
     *                           duplicidade de CPF.
     */
    @Transactional
    public ClienteResponseDTO atualizarCliente(UUID id, ClienteRequestDTO requestDTO) {
        Cliente existingCliente = repositorioCliente.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Cliente com ID " + id + " não encontrado para atualização."));

        // 1. Validação de duplicidade de CPF (se o CPF foi alterado)
        if (!existingCliente.getCpf().equals(requestDTO.getCpf())) {
            if (repositorioCliente.findByCpf(requestDTO.getCpf()).isPresent()) {
                throw new BusinessException(ErrorCode.INVALID_CPF, "Novo CPF já cadastrado para outro cliente.");
            }
        }

        // 2. Atualizar campos básicos da Pessoa e Cliente
        existingCliente.setNomeCompleto(requestDTO.getNomeCompleto());
        existingCliente.setCpf(requestDTO.getCpf());
        existingCliente.setDataNascimento(requestDTO.getDataNascimento());
        existingCliente.setStatus(requestDTO.getStatus()); // Campo específico de Cliente
        existingCliente.setTipo(requestDTO.getTipo()); // Campo específico de Cliente

        // 3. Atualizar endereços (lógica de sincronização)
        existingCliente.getEnderecos().clear(); // Limpa os endereços existentes
        requestDTO.getEnderecos().forEach(enderecoDTO -> {
            Endereco newEndereco = clienteMapper.toEntity(enderecoDTO);
            newEndereco.setPessoa(existingCliente);
            existingCliente.getEnderecos().add(newEndereco);
        });

        // 4. Atualizar telefones
        existingCliente.getTelefones().clear();
        if (requestDTO.getTelefones() != null) {
            existingCliente.getTelefones().addAll(requestDTO.getTelefones());
        }

        // 5. Salvar a entidade atualizada
        Cliente updatedCliente = repositorioCliente.save(existingCliente);

        return clienteMapper.toResponseDTO(updatedCliente);
    }

    /**
     * @brief Exclui um Cliente pelo ID.
     * @param id ID do Cliente a ser excluído.
     * @throws BusinessException Se o Cliente não for encontrado.
     */
    @Transactional
    public void excluirCliente(UUID id) {
        if (!repositorioCliente.existsById(id)) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                    "Cliente com ID " + id + " não encontrado para exclusão.");
        }
        // A exclusão em cascata do Endereco e User (se configurado no mapeamento) será
        // tratada pelo JPA
        repositorioCliente.deleteById(id);
    }
}
```
```java
package br.com.legalconnect.service;

import common.exception.ErrorCode; // Importa da common-lib
import dto.EmpresaRequestDTO;
import dto.EmpresaResponseDTO;
import entity.Empresa;
import entity.Endereco;
import common.exception.BusinessException; // Importa da common-lib
import mapper.EmpresaMapper;
import repository.RepositorioEmpresa;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * @class ServicoEmpresa
 * @brief Serviço de domínio para gerenciar operações relacionadas a Empresas.
 * Contém a lógica de negócio para criação, busca, atualização e exclusão de Empresas.
 */
@Service
public class ServicoEmpresa {

    private final RepositorioEmpresa repositorioEmpresa;
    private final EmpresaMapper empresaMapper;

    @Autowired
    public ServicoEmpresa(RepositorioEmpresa repositorioEmpresa, EmpresaMapper empresaMapper) {
        this.repositorioEmpresa = repositorioEmpresa;
        this.empresaMapper = empresaMapper;
    }

    /**
     * @brief Cadastra uma nova Empresa no sistema.
     * @param requestDTO DTO com os dados da Empresa a ser cadastrada.
     * @return DTO com os dados da Empresa cadastrada.
     * @throws BusinessException Se o CNPJ já estiver cadastrado.
     */
    @Transactional
    public EmpresaResponseDTO cadastrarEmpresa(EmpresaRequestDTO requestDTO) {
        // 1. Validação de duplicidade de CNPJ
        if (repositorioEmpresa.findByCnpj(requestDTO.getCnpj()).isPresent()) {
            throw new BusinessException(ErrorCode.INVALID_CNPJ, "CNPJ já cadastrado para outra empresa.");
        }

        // 2. Mapear DTO para entidade
        Empresa empresa = empresaMapper.toEntity(requestDTO);

        // 3. Associar endereços à empresa
        Set<Endereco> enderecos = requestDTO.getEnderecos().stream()
                .map(enderecoDTO -> {
                    // Reutiliza o mapper para converter DTO para Endereco
                    Endereco endereco = empresaMapper.toEntity(enderecoDTO);
                    endereco.setEmpresa(empresa); // Garante a associação bidirecional
                    return endereco;
                })
                .collect(Collectors.toSet());
        empresa.setEnderecos(enderecos);

        // 4. Salvar a entidade
        Empresa savedEmpresa = repositorioEmpresa.save(empresa);

        // 5. Mapear entidade salva para DTO de resposta
        return empresaMapper.toResponseDTO(savedEmpresa);
    }

    /**
     * @brief Busca uma Empresa pelo ID.
     * @param id ID da Empresa a ser buscada.
     * @return DTO com os dados da Empresa encontrada.
     * @throws BusinessException Se a Empresa não for encontrada.
     */
    @Transactional(readOnly = true)
    public EmpresaResponseDTO buscarEmpresaPorId(UUID id) {
        Empresa empresa = repositorioEmpresa.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND, "Empresa com ID " + id + " não encontrada."));
        return empresaMapper.toResponseDTO(empresa);
    }

    /**
     * @brief Lista todas as Empresas com paginação.
     * @param pageable Objeto Pageable para configuração da paginação.
     * @return Página de DTOs de Empresas.
     */
    @Transactional(readOnly = true)
    public Page<EmpresaResponseDTO> listarEmpresas(Pageable pageable) {
        return repositorioEmpresa.findAll(pageable)
                .map(empresaMapper::toResponseDTO);
    }

    /**
     * @brief Atualiza os dados de uma Empresa existente.
     * @param id ID da Empresa a ser atualizada.
     * @param requestDTO DTO com os dados atualizados da Empresa.
     * @return DTO com os dados da Empresa atualizada.
     * @throws BusinessException Se a Empresa não for encontrada ou se houver duplicidade de CNPJ.
     */
    @Transactional
    public EmpresaResponseDTO atualizarEmpresa(UUID id, EmpresaRequestDTO requestDTO) {
        Empresa existingEmpresa = repositorioEmpresa.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND, "Empresa com ID " + id + " não encontrada para atualização."));

        // 1. Validação de duplicidade de CNPJ (se o CNPJ foi alterado)
        if (!existingEmpresa.getCnpj().equals(requestDTO.getCnpj())) {
            if (repositorioEmpresa.findByCnpj(requestDTO.getCnpj()).isPresent()) {
                throw new BusinessException(ErrorCode.INVALID_CNPJ, "Novo CNPJ já cadastrado para outra empresa.");
            }
        }

        // 2. Atualizar campos básicos da Empresa
        existingEmpresa.setNomeFantasia(requestDTO.getNomeFantasia());
        existingEmpresa.setRazaoSocial(requestDTO.getRazaoSocial());
        existingEmpresa.setCnpj(requestDTO.getCnpj());
        existingEmpresa.setEmailContato(requestDTO.getEmailContato());

        // 3. Atualizar endereços (lógica de sincronização)
        existingEmpresa.getEnderecos().clear(); // Limpa os endereços existentes
        requestDTO.getEnderecos().forEach(enderecoDTO -> {
            Endereco newEndereco = empresaMapper.toEntity(enderecoDTO);
            newEndereco.setEmpresa(existingEmpresa);
            existingEmpresa.getEnderecos().add(newEndereco);
        });

        // 4. Atualizar telefones
        existingEmpresa.getTelefones().clear();
        if (requestDTO.getTelefones() != null) {
            existingEmpresa.getTelefones().addAll(requestDTO.getTelefones());
        }

        // 5. Salvar a entidade atualizada
        Empresa updatedEmpresa = repositorioEmpresa.save(existingEmpresa);

        return empresaMapper.toResponseDTO(updatedEmpresa);
    }

    /**
     * @brief Exclui uma Empresa pelo ID.
     * @param id ID da Empresa a ser excluída.
     * @throws BusinessException Se a Empresa não for encontrada ou se possuir profissionais associados.
     */
    @Transactional
    public void excluirEmpresa(UUID id) {
        Empresa empresa = repositorioEmpresa.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND, "Empresa com ID " + id + " não encontrada para exclusão."));

        // Verificar se existem profissionais associados antes de excluir
        if (!empresa.getProfissionais().isEmpty()) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND, "Empresa não pode ser excluída pois possui profissionais associados.");
        }

        // A exclusão em cascata do Endereco será tratada pelo JPA
        repositorioEmpresa.delete(empresa);
    }
}
```
```java
package br.com.legalconnect.service;

import common.exception.ErrorCode; // Importa da common-lib
import dto.EnderecoRequestDTO;
import dto.EnderecoResponseDTO;
import entity.Endereco;
import common.exception.BusinessException; // Importa da common-lib
import mapper.EnderecoMapper;
import repository.RepositorioEndereco;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * @class ServicoEndereco
 * @brief Serviço de domínio para gerenciar operações relacionadas a Endereços.
 * Este serviço pode ser usado para operações diretas em Endereços,
 * embora na maioria dos casos eles sejam gerenciados em cascata por Pessoa ou Empresa.
 */
@Service
public class ServicoEndereco {

    private final RepositorioEndereco repositorioEndereco;
    private final EnderecoMapper enderecoMapper;

    @Autowired
    public ServicoEndereco(RepositorioEndereco repositorioEndereco, EnderecoMapper enderecoMapper) {
        this.repositorioEndereco = repositorioEndereco;
        this.enderecoMapper = enderecoMapper;
    }

    /**
     * @brief Cadastra um novo Endereco.
     * @param requestDTO DTO com os dados do Endereco a ser cadastrado.
     * @return DTO com os dados do Endereco cadastrado.
     */
    @Transactional
    public EnderecoResponseDTO cadastrarEndereco(EnderecoRequestDTO requestDTO) {
        Endereco endereco = enderecoMapper.toEntity(requestDTO);
        Endereco savedEndereco = repositorioEndereco.save(endereco);
        return enderecoMapper.toResponseDTO(savedEndereco);
    }

    /**
     * @brief Busca um Endereco pelo ID.
     * @param id ID do Endereco a ser buscado.
     * @return DTO com os dados do Endereco encontrado.
     * @throws BusinessException Se o Endereco não for encontrado.
     */
    @Transactional(readOnly = true)
    public EnderecoResponseDTO buscarEnderecoPorId(UUID id) {
        Endereco endereco = repositorioEndereco.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND, "Endereço com ID " + id + " não encontrado."));
        return enderecoMapper.toResponseDTO(endereco);
    }

    /**
     * @brief Lista todos os Enderecos.
     * @return Lista de DTOs de Enderecos.
     */
    @Transactional(readOnly = true)
    public List<EnderecoResponseDTO> listarEnderecos() {
        return repositorioEndereco.findAll().stream()
                .map(enderecoMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    /**
     * @brief Atualiza os dados de um Endereco existente.
     * @param id ID do Endereco a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Endereco.
     * @return DTO com os dados do Endereco atualizado.
     * @throws BusinessException Se o Endereco não for encontrado.
     */
    @Transactional
    public EnderecoResponseDTO atualizarEndereco(UUID id, EnderecoRequestDTO requestDTO) {
        Endereco existingEndereco = repositorioEndereco.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND, "Endereço com ID " + id + " não encontrado para atualização."));

        // Atualizar campos básicos do Endereco
        existingEndereco.setLogradouro(requestDTO.getLogradouro());
        existingEndereco.setNumero(requestDTO.getNumero());
        existingEndereco.setComplemento(requestDTO.getComplemento());
        existingEndereco.setBairro(requestDTO.getBairro());
        existingEndereco.setCidade(requestDTO.getCidade());
        existingEndereco.setEstado(requestDTO.getEstado());
        existingEndereco.setCep(requestDTO.getCep());
        existingEndereco.setPais(requestDTO.getPais());
        existingEndereco.setTipoEndereco(requestDTO.getTipoEndereco());

        Endereco updatedEndereco = repositorioEndereco.save(existingEndereco);
        return enderecoMapper.toResponseDTO(updatedEndereco);
    }

    /**
     * @brief Exclui um Endereco pelo ID.
     * @param id ID do Endereco a ser excluído.
     * @throws BusinessException Se o Endereco não for encontrado.
     */
    @Transactional
    public void excluirEndereco(UUID id) {
        if (!repositorioEndereco.existsById(id)) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND, "Endereço com ID " + id + " não encontrado para exclusão.");
        }
        repositorioEndereco.deleteById(id);
    }
}
```
```java
package br.com.legalconnect.service;

import common.exception.ErrorCode; // Importa da common-lib
import dto.PessoaResponseDTO;
import entity.Pessoa;
import common.exception.BusinessException; // Importa da common-lib
import mapper.PessoaMapper;
import repository.RepositorioPessoa;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * @class ServicoPessoa
 * @brief Serviço de domínio para operações genéricas relacionadas a Pessoas.
 * Como Pessoa é uma entidade base abstrata, este serviço lida com operações
 * que podem ser comuns a todas as subclasses (Profissional, Cliente, Administrador).
 * Operações de criação/atualização específicas devem ser tratadas nos serviços das subclasses.
 */
@Service
public class ServicoPessoa {

    private final RepositorioPessoa repositorioPessoa;
    private final PessoaMapper pessoaMapper;

    @Autowired
    public ServicoPessoa(RepositorioPessoa repositorioPessoa, PessoaMapper pessoaMapper) {
        this.repositorioPessoa = repositorioPessoa;
        this.pessoaMapper = pessoaMapper;
    }

    /**
     * @brief Busca uma Pessoa pelo ID.
     * @param id ID da Pessoa a ser buscada.
     * @return DTO com os dados da Pessoa encontrada.
     * @throws BusinessException Se a Pessoa não for encontrada.
     */
    @Transactional(readOnly = true)
    public PessoaResponseDTO buscarPessoaPorId(UUID id) {
        Pessoa pessoa = repositorioPessoa.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND, "Pessoa com ID " + id + " não encontrada."));
        return pessoaMapper.toResponseDTO(pessoa);
    }

    /**
     * @brief Lista todas as Pessoas.
     * @return Lista de DTOs de Pessoas.
     */
    @Transactional(readOnly = true)
    public List<PessoaResponseDTO> listarTodasPessoas() {
        return repositorioPessoa.findAll().stream()
                .map(pessoaMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    /**
     * @brief Exclui uma Pessoa pelo ID.
     * @param id ID da Pessoa a ser excluída.
     * @throws BusinessException Se a Pessoa não for encontrada.
     * **Nota:** A exclusão de Pessoa deve ser feita com cautela, pois pode
     * impactar subclasses (Profissional, Cliente, Administrador) e o User associado.
     * Idealmente, a exclusão de subclasses deveria ser o ponto de entrada.
     */
    @Transactional
    public void excluirPessoa(UUID id) {
        if (!repositorioPessoa.existsById(id)) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND, "Pessoa com ID " + id + " não encontrada para exclusão.");
        }
        repositorioPessoa.deleteById(id);
    }
}
```
```java
package br.com.legalconnect.service;

import common.exception.ErrorCode; // Importa da common-lib
import dto.PlanoResponseDTO;
import entity.Plano;
import common.exception.BusinessException; // Importa da common-lib
import mapper.ProfissionalMapper; // Reutilizando mapper de profissional para plano
import repository.RepositorioPlano;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * @class ServicoPlano
 * @brief Serviço de domínio para gerenciar operações relacionadas a Planos.
 * **Nota:** Este serviço é um placeholder. Em uma arquitetura de microsserviços real,
 * a gestão de planos seria feita em um microsserviço dedicado (ex: marketplace ou assinatura).
 * Aqui, ele apenas fornece métodos de busca para que outros serviços possam referenciar planos.
 */
@Service
public class ServicoPlano {

    private final RepositorioPlano repositorioPlano;
    private final ProfissionalMapper profissionalMapper; // Usando o mapper de Profissional que já tem o toPlanoResponseDTO

    @Autowired
    public ServicoPlano(RepositorioPlano repositorioPlano, ProfissionalMapper profissionalMapper) {
        this.repositorioPlano = repositorioPlano;
        this.profissionalMapper = profissionalMapper;
    }

    /**
     * @brief Busca um Plano pelo ID.
     * @param id ID do Plano a ser buscado.
     * @return DTO com os dados do Plano encontrado.
     * @throws BusinessException Se o Plano não for encontrado.
     */
    @Transactional(readOnly = true)
    public PlanoResponseDTO buscarPlanoPorId(UUID id) {
        Plano plano = repositorioPlano.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND, "Plano com ID " + id + " não encontrado."));
        return profissionalMapper.toPlanoResponseDTO(plano);
    }

    /**
     * @brief Lista todos os Planos disponíveis.
     * @return Lista de DTOs de Planos.
     */
    @Transactional(readOnly = true)
    public List<PlanoResponseDTO> listarTodosPlanos() {
        return repositorioPlano.findAll().stream()
                .map(profissionalMapper::toPlanoResponseDTO)
                .collect(Collectors.toList());
    }

    // Métodos para cadastrar, atualizar e excluir planos não são implementados aqui,
    // pois seriam responsabilidade do microsserviço de marketplace/assinatura.
}
```
```java
package br.com.legalconnect.service;

import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import br.com.legalconnect.dto.ProfissionalRequestDTO;
import br.com.legalconnect.dto.ProfissionalResponseDTO;
import br.com.legalconnect.entity.Empresa;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.entity.Plano;
import br.com.legalconnect.entity.Profissional;
import br.com.legalconnect.entity.User;
import br.com.legalconnect.mapper.ProfissionalMapper;
import br.com.legalconnect.repository.RepositorioEmpresa;
import br.com.legalconnect.repository.RepositorioPlano;
import br.com.legalconnect.repository.RepositorioProfissional;
import br.com.legalconnect.repository.RepositorioUser;

/**
 * @class ServicoProfissional
 * @brief Serviço de domínio para gerenciar operações relacionadas a
 *        Profissionais.
 *        Contém a lógica de negócio para criação, busca, atualização e exclusão
 *        de Profissionais.
 */
@Service
public class ServicoProfissional {

    private final RepositorioProfissional repositorioProfissional;
    private final RepositorioUser repositorioUser;
    private final RepositorioPlano repositorioPlano;
    private final RepositorioEmpresa repositorioEmpresa;
    private final ProfissionalMapper profissionalMapper;

    @Autowired
    public ServicoProfissional(RepositorioProfissional repositorioProfissional,
            RepositorioUser repositorioUser,
            RepositorioPlano repositorioPlano,
            RepositorioEmpresa repositorioEmpresa,
            ProfissionalMapper profissionalMapper) {
        this.repositorioProfissional = repositorioProfissional;
        this.repositorioUser = repositorioUser;
        this.repositorioPlano = repositorioPlano;
        this.repositorioEmpresa = repositorioEmpresa;
        this.profissionalMapper = profissionalMapper;
    }

    /**
     * @brief Cadastra um novo Profissional no sistema.
     * @param requestDTO DTO com os dados do Profissional a ser cadastrado.
     * @return DTO com os dados do Profissional cadastrado.
     * @throws BusinessException Se o CPF ou OAB já estiverem cadastrados, ou se o
     *                           User/Plano/Empresa associado não for encontrado.
     */
    @Transactional
    public ProfissionalResponseDTO cadastrarProfissional(ProfissionalRequestDTO requestDTO) {
        // 1. Verificar pré-requisito: User associado deve existir
        UUID userId = requestDTO.getUsuario().getId(); // Presume que o ID do User vem no DTO
        User user = repositorioUser.findById(userId)
                .orElseThrow(() -> new BusinessException(ErrorCode.USER_NOT_FOUND,
                        "Usuário associado com ID " + userId + " não encontrado."));

        // 2. Validação de duplicidade de CPF e OAB
        if (repositorioProfissional.findByCpf(requestDTO.getCpf()).isPresent()) {
            throw new BusinessException(ErrorCode.INVALID_CPF, "CPF já cadastrado para outro profissional.");
        }
        if (repositorioProfissional.findByNumeroOab(requestDTO.getNumeroOab()).isPresent()) {
            throw new BusinessException(ErrorCode.INVALID_INPUT,
                    "Número da OAB já cadastrado para outro profissional.");
        }

        // 3. Buscar Plano e Empresa (se aplicável)
        Plano plano = repositorioPlano.findById(requestDTO.getPlanoId())
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Plano com ID " + requestDTO.getPlanoId() + " não encontrado."));

        Empresa empresa = null;
        if (requestDTO.getEmpresaId() != null) {
            empresa = repositorioEmpresa.findById(requestDTO.getEmpresaId())
                    .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                            "Empresa com ID " + requestDTO.getEmpresaId() + " não encontrada."));
        }

        // 4. Mapear DTO para entidade
        Profissional profissional = profissionalMapper.toEntity(requestDTO);
        profissional.setUsuario(user); // Associar o User encontrado
        profissional.setPlano(plano); // Associar o Plano encontrado
        profissional.setEmpresa(empresa); // Associar a Empresa (pode ser null)

        // 5. Associar endereços à pessoa (Profissional)
        Set<Endereco> enderecos = requestDTO.getEnderecos().stream()
                .map(enderecoDTO -> {
                    // Reutiliza o mapper para converter DTO para Endereco
                    Endereco endereco = profissionalMapper.toEntity(enderecoDTO);
                    endereco.setPessoa(profissional); // Garante a associação bidirecional
                    return endereco;
                })
                .collect(Collectors.toSet());
        profissional.setEnderecos(enderecos);

        // 6. Salvar a entidade
        Profissional savedProfissional = repositorioProfissional.save(profissional);

        // 7. Mapear entidade salva para DTO de resposta
        return profissionalMapper.toResponseDTO(savedProfissional);
    }

    /**
     * @brief Busca um Profissional pelo ID.
     * @param id ID do Profissional a ser buscado.
     * @return DTO com os dados do Profissional encontrado.
     * @throws BusinessException Se o Profissional não for encontrado.
     */
    @Transactional(readOnly = true)
    public ProfissionalResponseDTO buscarProfissionalPorId(UUID id) {
        Profissional profissional = repositorioProfissional.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Profissional com ID " + id + " não encontrado."));
        return profissionalMapper.toResponseDTO(profissional);
    }

    /**
     * @brief Lista todos os Profissionais com paginação.
     * @param pageable Objeto Pageable para configuração da paginação.
     * @return Página de DTOs de Profissionais.
     */
    @Transactional(readOnly = true)
    public Page<ProfissionalResponseDTO> listarProfissionais(Pageable pageable) {
        return repositorioProfissional.findAll(pageable)
                .map(profissionalMapper::toResponseDTO);
    }

    /**
     * @brief Atualiza os dados de um Profissional existente.
     * @param id         ID do Profissional a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Profissional.
     * @return DTO com os dados do Profissional atualizado.
     * @throws BusinessException Se o Profissional não for encontrado, ou se houver
     *                           duplicidade de CPF/OAB, ou se Plano/Empresa não for
     *                           encontrado.
     */
    @Transactional
    public ProfissionalResponseDTO atualizarProfissional(UUID id, ProfissionalRequestDTO requestDTO) {
        Profissional existingProfissional = repositorioProfissional.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Profissional com ID " + id + " não encontrado para atualização."));

        // 1. Validação de duplicidade de CPF (se o CPF foi alterado)
        if (!existingProfissional.getCpf().equals(requestDTO.getCpf())) {
            if (repositorioProfissional.findByCpf(requestDTO.getCpf()).isPresent()) {
                throw new BusinessException(ErrorCode.INVALID_CPF, "Novo CPF já cadastrado para outro profissional.");
            }
        }
        // 2. Validação de duplicidade de OAB (se a OAB foi alterada)
        if (!existingProfissional.getNumeroOab().equals(requestDTO.getNumeroOab())) {
            if (repositorioProfissional.findByNumeroOab(requestDTO.getNumeroOab()).isPresent()) {
                throw new BusinessException(ErrorCode.INVALID_INPUT,
                        "Novo número da OAB já cadastrado para outro profissional.");
            }
        }

        // 3. Buscar Plano e Empresa (se aplicável)
        Plano plano = repositorioPlano.findById(requestDTO.getPlanoId())
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Plano com ID " + requestDTO.getPlanoId() + " não encontrado."));

        Empresa empresa = null;
        if (requestDTO.getEmpresaId() != null) {
            empresa = repositorioEmpresa.findById(requestDTO.getEmpresaId())
                    .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                            "Empresa com ID " + requestDTO.getEmpresaId() + " não encontrada."));
        }

        // 4. Atualizar campos básicos da Pessoa e Profissional
        existingProfissional.setNomeCompleto(requestDTO.getNomeCompleto());
        existingProfissional.setCpf(requestDTO.getCpf());
        existingProfissional.setDataNascimento(requestDTO.getDataNascimento());
        existingProfissional.setNumeroOab(requestDTO.getNumeroOab());
        existingProfissional.setStatusProfissional(requestDTO.getStatusProfissional());
        existingProfissional.setUsaMarketplace(requestDTO.getUsaMarketplace());
        existingProfissional.setFazParteDePlano(requestDTO.getFazParteDePlano());
        existingProfissional.setPlano(plano);
        existingProfissional.setEmpresa(empresa);

        // 5. Atualizar endereços (lógica de sincronização)
        existingProfissional.getEnderecos().clear(); // Limpa os endereços existentes
        requestDTO.getEnderecos().forEach(enderecoDTO -> {
            Endereco newEndereco = profissionalMapper.toEntity(enderecoDTO);
            newEndereco.setPessoa(existingProfissional);
            existingProfissional.getEnderecos().add(newEndereco);
        });

        // 6. Atualizar telefones
        existingProfissional.getTelefones().clear();
        if (requestDTO.getTelefones() != null) {
            existingProfissional.getTelefones().addAll(requestDTO.getTelefones());
        }

        // 7. Salvar a entidade atualizada
        Profissional updatedProfissional = repositorioProfissional.save(existingProfissional);

        return profissionalMapper.toResponseDTO(updatedProfissional);
    }

    /**
     * @brief Exclui um Profissional pelo ID.
     * @param id ID do Profissional a ser excluído.
     * @throws BusinessException Se o Profissional não for encontrado.
     */
    @Transactional
    public void excluirProfissional(UUID id) {
        if (!repositorioProfissional.existsById(id)) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                    "Profissional com ID " + id + " não encontrado para exclusão.");
        }
        // A exclusão em cascata do Endereco e User (se configurado no mapeamento) será
        // tratada pelo JPA
        repositorioProfissional.deleteById(id);
    }
}
```
```java
package br.com.legalconnect.service;

import common.exception.ErrorCode; // Importa da common-lib
import dto.UserResponseDTO;
import entity.User;
import common.exception.BusinessException; // Importa da common-lib
import mapper.UserMapper;
import repository.RepositorioUser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * @class ServicoUser
 * @brief Serviço de domínio para gerenciar operações relacionadas a Users.
 * **Nota:** Este serviço é primariamente para busca e validação de Users existentes
 * para associação com entidades Pessoa (Profissional, Cliente, Administrador).
 * A criação e gestão principal de Users é responsabilidade de outro microsserviço (ex: auth-service).
 */
@Service
public class ServicoUser {

    private final RepositorioUser repositorioUser;
    private final UserMapper userMapper;

    @Autowired
    public ServicoUser(RepositorioUser repositorioUser, UserMapper userMapper) {
        this.repositorioUser = repositorioUser;
        this.userMapper = userMapper;
    }

    /**
     * @brief Busca um User pelo ID.
     * @param id ID do User a ser buscado.
     * @return DTO com os dados do User encontrado.
     * @throws BusinessException Se o User não for encontrado.
     */
    @Transactional(readOnly = true)
    public UserResponseDTO buscarUserPorId(UUID id) {
        User user = repositorioUser.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.USER_NOT_FOUND, "Usuário com ID " + id + " não encontrado."));
        return userMapper.toResponseDTO(user);
    }

    /**
     * @brief Lista todos os Users.
     * @return Lista de DTOs de Users.
     */
    @Transactional(readOnly = true)
    public List<UserResponseDTO> listarTodosUsers() {
        return repositorioUser.findAll().stream()
                .map(userMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    /**
     * @brief Verifica se um User existe pelo ID.
     * @param id ID do User a ser verificado.
     * @return true se o User existe, false caso contrário.
     */
    @Transactional(readOnly = true)
    public boolean userExiste(UUID id) {
        return repositorioUser.existsById(id);
    }

    /**
     * @brief Busca um User pelo CPF.
     * @param cpf O CPF do usuário.
     * @return Um Optional contendo o DTO do User, se encontrado.
     */
    @Transactional(readOnly = true)
    public Optional<UserResponseDTO> buscarUserPorCpf(String cpf) {
        return repositorioUser.findByCpf(cpf)
                .map(userMapper::toResponseDTO);
    }
}
```
```java
# src/main/resources/application.properties
# ===================================================================
# Configurações Gerais da Aplicação Spring Boot
# ===================================================================

# Nome da aplicação (usado em logs e monitoramento)
spring.application.name=legalconnect-usuario-service
# Porta em que a aplicação será executada
server.port=8084
# Desabilita o management server caso esteja ativo e conflitando (opcional)
# management.endpoints.web.exposure.include=*

# Habilita o Eureka Client
eureka.client.enabled=true
# URL do servidor Eureka onde o auth-service irá se registrar
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/

# Configurações de instância para garantir identificação única no Eureka
eureka.instance.hostname=localhost
eureka.instance.instance-id=${spring.application.name}:${instanceId:${random.value}}
# Configurações do SpringDoc OpenAPI
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packagesToScan=br.com.legalconnect
springdoc.pathsToMatch=/api/v1/**
# ===================================================================
# Configurações do Banco de Dados PostgreSQL
# ===================================================================

# URL de conexão com o banco de dados PostgreSQL
# O microsserviço de autenticação se conecta ao banco de dados global (public)
spring.datasource.url=jdbc:postgresql://localhost:5432/jusplatform_db

# Nome de usuário do banco de dados
spring.datasource.username=jususer

# Senha do banco de dados
spring.datasource.password=juspassword

# Driver JDBC para PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# Configurações do pool de conexões (HikariCP é o padrão no Spring Boot)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# ===================================================================
# Configurações do JPA e Hibernate
# ===================================================================

# Dialeto do Hibernate para PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Exibir queries SQL no console (para desenvolvimento)
# Desabilita a geração automática de DDL pelo Hibernate na inicialização principal.
# A criação de DDL para os esquemas de tenant será feita programaticamente pelo TenantSchemaService.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
# Removido: spring.jpa.properties.hibernate.default_schema=public
# Esta configuração forçava o Hibernate a usar o schema 'public' para DDL, o que não é desejado para entidades multi-tenant.


# ===================================================================
# Configurações de Segurança (JWT)
# ===================================================================

# Chave secreta para assinar e verificar os JWTs.
# **IMPORTANTE**: Esta chave deve ser longa, complexa e armazenada de forma segura (ex: HashiCorp Vault, variáveis de ambiente).
# Nunca exponha esta chave em um repositório público!
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Tempo de expiração do JWT em milissegundos (ex: 3600000ms = 1 hora)
application.security.jwt.expiration=3600000

# Tempo de expiração do Refresh Token em milissegundos (ex: 7 dias = 604800000ms)
application.security.jwt.refresh-expiration=604800000

# Força do encoder de senha (cost factor para BCrypt, padrão é 10)
# Um valor maior aumenta a segurança, mas também o tempo de hash.
application.security.password-encoder.strength=12

# ===================================================================
# Configurações de Logging (Logback)
# ===================================================================

# Nível de log padrão para a aplicação
logging.level.br.com.legalconnect=INFO
# Nível de log para o Spring Framework
logging.level.org.springframework=WARN

# Nível de log para Hibernate (queries SQL) - Desabilite em produção
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicExtractor=WARN

# Nível de log para o processo de DDL do Hibernate (agora menos relevante com Flyway)
logging.level.org.hibernate.hbm2ddl=WARN

# Nível de log para as conexões JDBC do Hibernate
logging.level.org.hibernate.engine.jdbc.connections=WARN

# Nível de log para o Flyway (muito importante para depurar migrações)
logging.level.org.flywaydb=INFO

# Adicione logs específicos para a configuração do JPA e Multi-Tenancy
logging.level.org.hibernate.jpa=INFO
logging.level.org.springframework.orm.jpa=INFO
logging.level.org.springframework.data.jpa=INFO
logging.level.org.hibernate.engine.jdbc.connections.spi=INFO

# ===================================================================
# Configurações de Multitenancy Específicas do Aplicativo
# ===================================================================

# ID do tenant padrão para usuários que não estão associados a um tenant específico (ex: clientes gerais)
# Este UUID deve corresponder a um registro na tabela tb_tenant no schema global (public).
application.tenant.default-id=00000000-0000-0000-0000-000000000001

# ===================================================================
# Configurações do Spring Boot Actuator
# ===================================================================

# Habilita todos os endpoints do Actuator (para monitoramento)
management.endpoints.web.exposure.include=*
# Define o caminho base para os endpoints do Actuator
management.endpoints.web.base-path=/actuator

# ===================================================================
# Configurações de CORS (Cross-Origin Resource Sharing)
# ===================================================================

# Configuração de CORS global (pode ser mais específica nos controladores)
# Esta configuração é um exemplo e pode ser ajustada conforme a necessidade.
# Em produção, 'allowed-origins' deve ser restrito aos domínios do seu frontend.
# spring.web.cors.allowed-origins=*
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
# spring.web.cors.allowed-headers=*
# spring.web.cors.allow-credentials=false
# spring.web.cors.max-age=3600
# ===================================================================
# Configurações do Flyway
# ===================================================================
spring.flyway.enabled=false
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=1
# ===================================================================
# Configurações de Cache (Exemplo com Caffeine, adicione a dependência se usar)
# ===================================================================

# spring.cache.type=caffeine
# spring.cache.cache-names=users,refreshTokens
# spring.cache.caffeine.spec=expireAfterWrite=60m,maximumSize=500

# ===================================================================
# Propriedades de Aplicação Customizadas
# ===================================================================

# Exemplo de uma propriedade customizada
# app.feature.new-registration-enabled=true

# ===================================================================
# Configurações para Proxy Reverso (Nginx)
# ===================================================================

# Habilita o processamento dos cabeçalhos X-Forwarded-* enviados por proxies.
# Isso garante que a aplicação veja o IP real do cliente, o protocolo original (HTTP/HTTPS)
# e o host original, em vez dos detalhes do proxy (Nginx).
server.forward-headers-strategy=FRAMEWORK
spring.main.allow-bean-definition-overriding=true
# Configuração do Outlook SMTP
spring.mail.username=marcelo.llm@outlook.com
spring.mail.password=qlbzudmmytioxztj
spring.mail.from=marcelo.llm@outlook.com
spring.mail.protocol=smtp

# Propriedades avançadas

spring.mail.host=smtp.office365.com
spring.mail.port=587 
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=15000
spring.mail.properties.mail.smtp.timeout=15000
spring.mail.properties.mail.smtp.writetimeout=15000

# Propriedade para o Thymeleaf (se estiver usando)
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false
# (Opcional, mas útil para debug)
spring.mail.properties.mail.debug=true
app.frontend.url=http://localhost:4200

```
```java
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title th:text="${subject}">Bem-vindo!</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f4f4f4;
        margin: 0;
        padding: 20px;
      }
      .container {
        max-width: 600px;
        margin: 0 auto;
        background: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }
      .header {
        text-align: center;
        padding-bottom: 20px;
        border-bottom: 1px solid #eee;
      }
      .header h1 {
        color: #007bff;
      }
      .content {
        padding: 20px 0;
      }
      .footer {
        text-align: center;
        padding-top: 20px;
        border-top: 1px solid #eee;
        font-size: 0.9em;
        color: #777;
      }
      .button {
        display: inline-block;
        background-color: #007bff;
        color: #ffffff;
        padding: 10px 20px;
        text-decoration: none;
        border-radius: 5px;
        margin-top: 20px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1 th:text="${title}">Olá!</h1>
      </div>
      <div class="content">
        <p>
          Prezado(a) <strong th:text="${userName}">Nome do Usuário</strong>,
        </p>
        <p>
          É com grande prazer que confirmamos seu cadastro em nossa plataforma.
        </p>
        <p>
          Seu e-mail de acesso é:
          <strong th:text="${userEmail}">email@example.com</strong>
        </p>
        <p th:text="${message}">
          Aproveite todas as funcionalidades que oferecemos!
        </p>

        <p style="text-align: center">
          <a
            th:href="${callToActionLink}"
            class="button"
            th:text="${callToActionText}"
            >Acessar Plataforma</a
          >
        </p>
      </div>
      <div class="footer">
        <p>
          Este é um e-mail de notificação automático. Por favor, não responda.
        </p>
        <p>
          &copy; <span th:text="${currentYear}">2025</span> Sua Empresa. Todos
          os direitos reservados.
        </p>
      </div>
    </div>
  </body>
</html>

```
```java
package br.com.legalconnect.auth.auth_service;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class AuthServiceApplicationTests {

	@Test
	void contextLoads() {
	}

}

```
```
```java
package br.com.legalconnect;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

@EnableDiscoveryClient
@SpringBootApplication(exclude = FlywayAutoConfiguration.class) // Remova o scanBasePackages aqui também, se já está no
                                                                // pacote raiz
@EntityScan(basePackages = {
        // "br.com.legalconnect.entity",
        "br.com.legalconnect.entity"
})
// @EnableJpaRepositories(basePackages = {
// "br.com.legalconnect.user.repository",
// "br.com.legalconnect.auth.repository"
// })
// REMOVA COMPLETAMENTE ESTE @ComponentScan, a menos que você tenha um motivo
// muito específico e saiba o que está fazendo
// @ComponentScan(basePackages = { "br.com.legalconnect.auth.service" })
public class LegalUsuarioApplication {

    private static final Logger log = LoggerFactory.getLogger(LegalUsuarioApplication.class);

    public static void main(String[] args) {
        SpringApplication.run(LegalUsuarioApplication.class, args);
        log.info("LegalUsuarioApplication iniciada com sucesso!");
    }
}
```
```java
package br.com.legalconnect.config; // Importa da common-lib

import java.io.IOException;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import br.com.legalconnect.common.config.multitenancy.TenantContext;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 * @class TenantFilter
 * @brief Filtro HTTP para interceptar requisições e extrair o ID do tenant.
 *        Define o tenant ID no TenantContext para que o Hibernate possa usá-lo.
 */
@Component
public class TenantFilter extends OncePerRequestFilter {

    @Value("${application.tenant.default-id}")
    private String defaultTenantId;

    private static final String TENANT_HEADER = "X-Tenant-ID";

    /**
     * @brief Filtra a requisição para extrair e definir o ID do tenant.
     * @param request     A requisição HTTP.
     * @param response    A resposta HTTP.
     * @param filterChain A cadeia de filtros.
     * @throws ServletException Se ocorrer um erro de servlet.
     * @throws IOException      Se ocorrer um erro de I/O.
     */
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        try {
            String tenantIdHeader = request.getHeader(TENANT_HEADER);
            String tenantId = "public";

            if (tenantIdHeader != null && !tenantIdHeader.isEmpty()) {
                try {
                    tenantId = (tenantIdHeader);
                } catch (IllegalArgumentException e) {
                    // Logar ou tratar o erro de UUID inválido, talvez retornar um 400 Bad Request
                    System.err.println("UUID de Tenant inválido no cabeçalho X-Tenant-ID: " + tenantIdHeader);
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "UUID de Tenant inválido.");
                    return;
                }
            } else {
                // Usar o tenant padrão se o cabeçalho não for fornecido
                try {
                    tenantId = (defaultTenantId);
                } catch (IllegalArgumentException e) {
                    System.err.println("UUID de Tenant padrão inválido na configuração: " + defaultTenantId);
                    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                            "Configuração de Tenant padrão inválida.");
                    return;
                }
            }

            TenantContext.setCurrentTenant(tenantId);
            filterChain.doFilter(request, response);
        } finally {
            TenantContext.clear(); // Limpar o TenantContext após a requisição
        }
    }
}
```
```java
package br.com.legalconnect.controller;

import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.common.dto.BaseResponse;
import br.com.legalconnect.dto.AdministradorRequestDTO;
import br.com.legalconnect.dto.AdministradorResponseDTO;
import br.com.legalconnect.enums.StatusResponse;
import br.com.legalconnect.service.ServicoAdministrador;
import jakarta.validation.Valid;

/**
 * @class ControladorAdministradorPlataforma
 * @brief Controlador REST para gerenciar operações relacionadas a
 *        Administradores da Plataforma.
 *        Expõe endpoints para CRUD de Administradores.
 */
@RestController
@RequestMapping("/api/v1/administradores-plataforma")
public class ControladorAdministradorPlataforma {

    private final ServicoAdministrador servicoAdministrador;

    @Autowired
    public ControladorAdministradorPlataforma(ServicoAdministrador servicoAdministrador) {
        this.servicoAdministrador = servicoAdministrador;
    }

    /**
     * @brief Cadastra um novo Administrador da Plataforma.
     * @param requestDTO DTO com os dados do Administrador a ser cadastrado.
     * @return ResponseEntity com o DTO do Administrador cadastrado e status 201
     *         Created.
     */
    @PostMapping
    public ResponseEntity<BaseResponse<AdministradorResponseDTO>> cadastrarAdministrador(
            @Valid @RequestBody AdministradorRequestDTO requestDTO) {
        AdministradorResponseDTO responseDTO = servicoAdministrador.cadastrarAdministrador(requestDTO); // Usar o método
                                                                                                        // 'cadastrar'
        // da classe base
        return ResponseEntity.status(HttpStatus.CREATED).body(
                BaseResponse.<AdministradorResponseDTO>builder()
                        .message("Administrador cadastrado com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .data(responseDTO)
                        .build());
    }

    /**
     * @brief Busca um Administrador da Plataforma por ID.
     * @param id ID do Administrador a ser buscado.
     * @return ResponseEntity com o DTO do Administrador encontrado e status 200 OK.
     */
    @GetMapping("/{id}")
    public ResponseEntity<BaseResponse<AdministradorResponseDTO>> buscarAdministradorPorId(@PathVariable UUID id) {
        AdministradorResponseDTO responseDTO = servicoAdministrador.buscarAdministradorPorId(id); // Usar o método
                                                                                                  // 'buscarPorId' da
        // classe base
        return ResponseEntity.ok(
                BaseResponse.<AdministradorResponseDTO>builder()
                        .message("Administrador encontrado.")
                        .status(StatusResponse.SUCESSO)
                        .data(responseDTO)
                        .build());
    }

    /**
     * @brief Lista todos os Administradores da Plataforma com paginação.
     * @param pageable Objeto Pageable para configuração da paginação (ex:
     *                 ?page=0&size=10&sort=nomeCompleto,asc).
     * @return ResponseEntity com uma página de DTOs de Administradores e status 200
     *         OK.
     */
    @GetMapping
    public ResponseEntity<BaseResponse<Page<AdministradorResponseDTO>>> listarAdministradores(
            @PageableDefault(size = 10, page = 0, sort = "nomeCompleto") Pageable pageable) {
        Page<AdministradorResponseDTO> responsePage = servicoAdministrador.listarAdministradores(pageable); // Usar o
                                                                                                            // método
                                                                                                            // 'listar'
        // da classe base
        return ResponseEntity.ok(
                BaseResponse.<Page<AdministradorResponseDTO>>builder()
                        .message("Lista de administradores recuperada com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .data(responsePage)
                        .build());
    }

    /**
     * @brief Atualiza os dados de um Administrador da Plataforma existente.
     * @param id         ID do Administrador a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Administrador.
     * @return ResponseEntity com o DTO do Administrador atualizado e status 200 OK.
     */
    @PutMapping("/{id}")
    public ResponseEntity<BaseResponse<AdministradorResponseDTO>> atualizarAdministrador(
            @PathVariable UUID id,
            @Valid @RequestBody AdministradorRequestDTO requestDTO) {
        AdministradorResponseDTO responseDTO = servicoAdministrador.atualizarAdministrador(id, requestDTO); // Usar o
                                                                                                            // método
        // 'atualizar' da classe
        // base
        return ResponseEntity.ok(
                BaseResponse.<AdministradorResponseDTO>builder()
                        .message("Administrador atualizado com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .data(responseDTO)
                        .build());
    }

    /**
     * @brief Exclui um Administrador da Plataforma pelo ID.
     * @param id ID do Administrador a ser excluído.
     * @return ResponseEntity com status 204 No Content.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<BaseResponse<Void>> excluirAdministrador(@PathVariable UUID id) {
        servicoAdministrador.excluirAdministrador(id); // Usar o método 'excluir' da classe base
        return ResponseEntity.status(HttpStatus.NO_CONTENT).body( // Retorna 204 No Content com um corpo de sucesso
                BaseResponse.<Void>builder()
                        .message("Administrador excluído com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .build());
    }
}

```
```java
package br.com.legalconnect.controller;

import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.common.dto.BaseResponse;
import br.com.legalconnect.dto.ClienteRequestDTO;
import br.com.legalconnect.dto.ClienteResponseDTO;
import br.com.legalconnect.enums.StatusResponse;
import br.com.legalconnect.service.ServicoCliente;
import jakarta.validation.Valid;

/**
 * @class ControladorCliente
 * @brief Controlador REST para gerenciar operações relacionadas a Clientes.
 *        Expõe endpoints para CRUD de Clientes.
 */
@RestController
@RequestMapping("/api/v1/clientes")
public class ControladorCliente {

    private final ServicoCliente servicoCliente;

    @Autowired
    public ControladorCliente(ServicoCliente servicoCliente) {
        this.servicoCliente = servicoCliente;
    }

    /**
     * @brief Cadastra um novo Cliente.
     * @param requestDTO DTO com os dados do Cliente a ser cadastrado.
     * @return ResponseEntity com o DTO do Cliente cadastrado e status 201 Created.
     */
    @PostMapping
    public ResponseEntity<BaseResponse<ClienteResponseDTO>> cadastrarCliente(
            @Valid @RequestBody ClienteRequestDTO requestDTO) {
        ClienteResponseDTO responseDTO = servicoCliente.cadastrarCliente(requestDTO); // Chamando o método original do
                                                                                      // serviço
        return ResponseEntity.status(HttpStatus.CREATED).body(
                BaseResponse.<ClienteResponseDTO>builder()
                        .message("Cliente cadastrado com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .data(responseDTO)
                        .build());
    }

    /**
     * @brief Busca um Cliente por ID.
     * @param id ID do Cliente a ser buscado.
     * @return ResponseEntity com o DTO do Cliente encontrado e status 200 OK.
     */
    @GetMapping("/{id}")
    public ResponseEntity<BaseResponse<ClienteResponseDTO>> buscarClientePorId(@PathVariable UUID id) {
        ClienteResponseDTO responseDTO = servicoCliente.buscarClientePorId(id); // Chamando o método original do serviço
        return ResponseEntity.ok(
                BaseResponse.<ClienteResponseDTO>builder()
                        .message("Cliente encontrado.")
                        .status(StatusResponse.SUCESSO)
                        .data(responseDTO)
                        .build());
    }

    /**
     * @brief Lista todos os Clientes com paginação.
     * @param pageable Objeto Pageable para configuração da paginação (ex:
     *                 ?page=0&size=10&sort=nomeCompleto,asc).
     * @return ResponseEntity com uma página de DTOs de Clientes e status 200 OK.
     */
    @GetMapping
    public ResponseEntity<BaseResponse<Page<ClienteResponseDTO>>> listarClientes(
            @PageableDefault(size = 10, page = 0, sort = "nomeCompleto") Pageable pageable) {
        Page<ClienteResponseDTO> responsePage = servicoCliente.listarClientes(pageable); // Chamando o método original
                                                                                         // do serviço
        return ResponseEntity.ok(
                BaseResponse.<Page<ClienteResponseDTO>>builder()
                        .message("Lista de clientes recuperada com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .data(responsePage)
                        .build());
    }

    /**
     * @brief Atualiza os dados de um Cliente existente.
     * @param id         ID do Cliente a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Cliente.
     * @return ResponseEntity com o DTO do Cliente atualizado e status 200 OK.
     */
    @PutMapping("/{id}")
    public ResponseEntity<BaseResponse<ClienteResponseDTO>> atualizarCliente(
            @PathVariable UUID id,
            @Valid @RequestBody ClienteRequestDTO requestDTO) {
        ClienteResponseDTO responseDTO = servicoCliente.atualizarCliente(id, requestDTO); // Chamando o método original
                                                                                          // do serviço
        return ResponseEntity.ok(
                BaseResponse.<ClienteResponseDTO>builder()
                        .message("Cliente atualizado com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .data(responseDTO)
                        .build());
    }

    /**
     * @brief Exclui um Cliente pelo ID.
     * @param id ID do Cliente a ser excluído.
     * @return ResponseEntity com status 204 No Content.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<BaseResponse<Void>> excluirCliente(@PathVariable UUID id) {
        servicoCliente.excluirCliente(id); // Chamando o método original do serviço
        return ResponseEntity.status(HttpStatus.NO_CONTENT).body(
                BaseResponse.<Void>builder()
                        .message("Cliente excluído com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .build());
    }
}

```
```java
package br.com.legalconnect.controller;

import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.common.dto.BaseResponse;
import br.com.legalconnect.dto.EmpresaRequestDTO;
import br.com.legalconnect.dto.EmpresaResponseDTO;
import br.com.legalconnect.enums.StatusResponse;
import br.com.legalconnect.service.ServicoEmpresa;
import jakarta.validation.Valid;

/**
 * @class ControladorEmpresa
 * @brief Controlador REST para gerenciar operações relacionadas a Empresas.
 *        Expõe endpoints para CRUD de Empresas.
 */
@RestController
@RequestMapping("/api/v1/empresas")
public class ControladorEmpresa {

    private final ServicoEmpresa servicoEmpresa;

    @Autowired
    public ControladorEmpresa(ServicoEmpresa servicoEmpresa) {
        this.servicoEmpresa = servicoEmpresa;
    }

    /**
     * @brief Cadastra uma nova Empresa.
     * @param requestDTO DTO com os dados da Empresa a ser cadastrada.
     * @return ResponseEntity com o DTO da Empresa cadastrada e status 201 Created.
     */
    @PostMapping
    public ResponseEntity<BaseResponse<EmpresaResponseDTO>> cadastrarEmpresa(
            @Valid @RequestBody EmpresaRequestDTO requestDTO) {
        EmpresaResponseDTO responseDTO = servicoEmpresa.cadastrarEmpresa(requestDTO); // Chamando o método original do
                                                                                      // serviço
        return ResponseEntity.status(HttpStatus.CREATED).body(
                BaseResponse.<EmpresaResponseDTO>builder()
                        .message("Empresa cadastrada com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .data(responseDTO)
                        .build());
    }

    /**
     * @brief Busca uma Empresa por ID.
     * @param id ID da Empresa a ser buscada.
     * @return ResponseEntity com o DTO da Empresa encontrada e status 200 OK.
     */
    @GetMapping("/{id}")
    public ResponseEntity<BaseResponse<EmpresaResponseDTO>> buscarEmpresaPorId(@PathVariable UUID id) {
        EmpresaResponseDTO responseDTO = servicoEmpresa.buscarEmpresaPorId(id); // Chamando o método original do serviço
        return ResponseEntity.ok(
                BaseResponse.<EmpresaResponseDTO>builder()
                        .message("Empresa encontrada.")
                        .status(StatusResponse.SUCESSO)
                        .data(responseDTO)
                        .build());
    }

    /**
     * @brief Lista todas as Empresas com paginação.
     * @param pageable Objeto Pageable para configuração da paginação (ex:
     *                 ?page=0&size=10&sort=nomeFantasia,asc).
     * @return ResponseEntity com uma página de DTOs de Empresas e status 200 OK.
     */
    @GetMapping
    public ResponseEntity<BaseResponse<Page<EmpresaResponseDTO>>> listarEmpresas(
            @PageableDefault(size = 10, page = 0, sort = "nomeFantasia") Pageable pageable) {
        Page<EmpresaResponseDTO> responsePage = servicoEmpresa.listarEmpresas(pageable); // Chamando o método original
                                                                                         // do serviço
        return ResponseEntity.ok(
                BaseResponse.<Page<EmpresaResponseDTO>>builder()
                        .message("Lista de empresas recuperada com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .data(responsePage)
                        .build());
    }

    /**
     * @brief Atualiza os dados de uma Empresa existente.
     * @param id         ID da Empresa a ser atualizada.
     * @param requestDTO DTO com os dados atualizados da Empresa.
     * @return ResponseEntity com o DTO da Empresa atualizada e status 200 OK.
     */
    @PutMapping("/{id}")
    public ResponseEntity<BaseResponse<EmpresaResponseDTO>> atualizarEmpresa(
            @PathVariable UUID id,
            @Valid @RequestBody EmpresaRequestDTO requestDTO) {
        EmpresaResponseDTO responseDTO = servicoEmpresa.atualizarEmpresa(id, requestDTO); // Chamando o método original
                                                                                          // do serviço
        return ResponseEntity.ok(
                BaseResponse.<EmpresaResponseDTO>builder()
                        .message("Empresa atualizada com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .data(responseDTO)
                        .build());
    }

    /**
     * @brief Exclui uma Empresa pelo ID.
     * @param id ID da Empresa a ser excluída.
     * @return ResponseEntity com status 204 No Content.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<BaseResponse<Void>> excluirEmpresa(@PathVariable UUID id) {
        servicoEmpresa.excluirEmpresa(id); // Chamando o método original do serviço
        return ResponseEntity.status(HttpStatus.NO_CONTENT).body(
                BaseResponse.<Void>builder()
                        .message("Empresa excluída com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .build());
    }
}

```
```java
package br.com.legalconnect.controller;

import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.common.dto.BaseResponse;
import br.com.legalconnect.dto.ProfissionalRequestDTO;
import br.com.legalconnect.dto.ProfissionalResponseDTO;
import br.com.legalconnect.enums.StatusResponse;
import br.com.legalconnect.service.ServicoProfissional;
import jakarta.validation.Valid;

/**
 * @class ControladorProfissional
 * @brief Controlador REST para gerenciar operações relacionadas a
 *        Profissionais.
 *        Expõe endpoints para CRUD de Profissionais.
 */
@RestController
@RequestMapping("/api/v1/profissionais")
public class ControladorProfissional {

    private final ServicoProfissional servicoProfissional;

    @Autowired
    public ControladorProfissional(ServicoProfissional servicoProfissional) {
        this.servicoProfissional = servicoProfissional;
    }

    /**
     * @brief Cadastra um novo Profissional.
     * @param requestDTO DTO com os dados do Profissional a ser cadastrado.
     * @return ResponseEntity com o DTO do Profissional cadastrado e status 201
     *         Created.
     */
    @PostMapping
    public ResponseEntity<BaseResponse<ProfissionalResponseDTO>> cadastrarProfissional(
            @Valid @RequestBody ProfissionalRequestDTO requestDTO) {
        ProfissionalResponseDTO responseDTO = servicoProfissional.cadastrarProfissional(requestDTO); // Chamando o
                                                                                                     // método original
                                                                                                     // do serviço
        return ResponseEntity.status(HttpStatus.CREATED).body(
                BaseResponse.<ProfissionalResponseDTO>builder()
                        .message("Profissional cadastrado com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .data(responseDTO)
                        .build());
    }

    /**
     * @brief Busca um Profissional por ID.
     * @param id ID do Profissional a ser buscado.
     * @return ResponseEntity com o DTO do Profissional encontrado e status 200 OK.
     */
    @GetMapping("/{id}")
    public ResponseEntity<BaseResponse<ProfissionalResponseDTO>> buscarProfissionalPorId(@PathVariable UUID id) {
        ProfissionalResponseDTO responseDTO = servicoProfissional.buscarProfissionalPorId(id); // Chamando o método
                                                                                               // original do serviço
        return ResponseEntity.ok(
                BaseResponse.<ProfissionalResponseDTO>builder()
                        .message("Profissional encontrado.")
                        .status(StatusResponse.SUCESSO)
                        .data(responseDTO)
                        .build());
    }

    /**
     * @brief Lista todos os Profissionais com paginação.
     * @param pageable Objeto Pageable para configuração da paginação (ex:
     *                 ?page=0&size=10&sort=nomeCompleto,asc).
     * @return ResponseEntity com uma página de DTOs de Profissionais e status 200
     *         OK.
     */
    @GetMapping
    public ResponseEntity<BaseResponse<Page<ProfissionalResponseDTO>>> listarProfissionais(
            @PageableDefault(size = 10, page = 0, sort = "nomeCompleto") Pageable pageable) {
        Page<ProfissionalResponseDTO> responsePage = servicoProfissional.listarProfissionais(pageable); // Chamando o
                                                                                                        // método
                                                                                                        // original do
                                                                                                        // serviço
        return ResponseEntity.ok(
                BaseResponse.<Page<ProfissionalResponseDTO>>builder()
                        .message("Lista de profissionais recuperada com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .data(responsePage)
                        .build());
    }

    /**
     * @brief Atualiza os dados de um Profissional existente.
     * @param id         ID do Profissional a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Profissional.
     * @return ResponseEntity com o DTO do Profissional atualizado e status 200 OK.
     */
    @PutMapping("/{id}")
    public ResponseEntity<BaseResponse<ProfissionalResponseDTO>> atualizarProfissional(
            @PathVariable UUID id,
            @Valid @RequestBody ProfissionalRequestDTO requestDTO) {
        ProfissionalResponseDTO responseDTO = servicoProfissional.atualizarProfissional(id, requestDTO); // Chamando o
                                                                                                         // método
                                                                                                         // original do
                                                                                                         // serviço
        return ResponseEntity.ok(
                BaseResponse.<ProfissionalResponseDTO>builder()
                        .message("Profissional atualizado com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .data(responseDTO)
                        .build());
    }

    /**
     * @brief Exclui um Profissional pelo ID.
     * @param id ID do Profissional a ser excluído.
     * @return ResponseEntity com status 204 No Content.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<BaseResponse<Void>> excluirProfissional(@PathVariable UUID id) {
        servicoProfissional.excluirProfissional(id); // Chamando o método original do serviço
        return ResponseEntity.status(HttpStatus.NO_CONTENT).body(
                BaseResponse.<Void>builder()
                        .message("Profissional excluído com sucesso.")
                        .status(StatusResponse.SUCESSO)
                        .build());
    }
}

```
```java
package br.com.legalconnect.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class AdministradorRequestDTO
 * @brief DTO para requisições de criação ou atualização de Administrador.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class AdministradorRequestDTO extends PessoaRequestDTO {
    private String status;
}
```
```java
package br.com.legalconnect.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class AdministradorResponseDTO
 * @brief DTO para respostas de Administrador.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class AdministradorResponseDTO extends PessoaResponseDTO {
    private String status;
}
```
```java
package br.com.legalconnect.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class ClienteRequestDTO
 * @brief DTO para requisições de criação ou atualização de Cliente.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class ClienteRequestDTO extends PessoaRequestDTO {
    private String status;
}
```
```java
package br.com.legalconnect.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class ClienteResponseDTO
 * @brief DTO para respostas de Cliente.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class ClienteResponseDTO extends PessoaResponseDTO {
    private String status;
    private String tipo;
}
```
```java
package br.com.legalconnect.dto;

import java.util.List;
import java.util.Set;
import java.util.UUID;

import jakarta.validation.Valid;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class EmpresaRequestDTO
 * @brief DTO para requisições de criação ou atualização de Empresa.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EmpresaRequestDTO {
    private UUID id; // Para atualizações, pode ser necessário o ID

    @NotBlank(message = "O nome fantasia não pode estar em branco.")
    @Size(max = 255, message = "O nome fantasia deve ter no máximo 255 caracteres.")
    private String nomeFantasia;

    @NotBlank(message = "A razão social não pode estar em branco.")
    @Size(max = 255, message = "A razão social deve ter no máximo 255 caracteres.")
    private String razaoSocial;

    @NotBlank(message = "O CNPJ não pode estar em branco.")
    @Pattern(regexp = "\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}", message = "Formato de CNPJ inválido. Use XX.XXX.XXX/XXXX-XX.")
    private String cnpj;

    @Email(message = "Formato de email de contato inválido.")
    @Size(max = 255, message = "O email de contato deve ter no máximo 255 caracteres.")
    private String emailContato;

    @Valid // Valida a lista de DTOs aninhados
    private List<EnderecoRequestDTO> enderecos;

    private Set<String> telefones; // Lista de números de telefone como strings
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class EmpresaResponseDTO
 * @brief DTO para respostas de Empresa.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EmpresaResponseDTO {
    private UUID id;
    private String nomeFantasia;
    private String razaoSocial;
    private String cnpj;
    private String emailContato;
    private List<EnderecoResponseDTO> enderecos;
    private Set<String> telefones;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
```
```java
package br.com.legalconnect.dto;

import java.util.UUID;

import br.com.legalconnect.entity.Endereco.TipoEndereco;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class EnderecoRequestDTO
 * @brief DTO para requisições de criação ou atualização de Endereco.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EnderecoRequestDTO {
    private UUID id; // Para atualizações, pode ser necessário o ID

    @NotBlank(message = "O logradouro não pode estar em branco.")
    @Size(max = 255, message = "O logradouro deve ter no máximo 255 caracteres.")
    private String logradouro;

    @NotBlank(message = "O número não pode estar em branco.")
    @Size(max = 20, message = "O número deve ter no máximo 20 caracteres.")
    private String numero;

    @Size(max = 255, message = "O complemento deve ter no máximo 255 caracteres.")
    private String complemento;

    @NotBlank(message = "O bairro não pode estar em branco.")
    @Size(max = 100, message = "O bairro deve ter no máximo 100 caracteres.")
    private String bairro;

    @NotBlank(message = "A cidade não pode estar em branco.")
    @Size(max = 100, message = "A cidade deve ter no máximo 100 caracteres.")
    private String cidade;

    @NotBlank(message = "O estado não pode estar em branco.")
    @Size(min = 2, max = 2, message = "O estado deve ter 2 caracteres (UF).")
    private String estado;

    @NotBlank(message = "O CEP não pode estar em branco.")
    @Pattern(regexp = "\\d{5}-\\d{3}", message = "Formato de CEP inválido. Use XXXXX-XXX.")
    private String cep;

    @NotBlank(message = "O país não pode estar em branco.")
    @Size(max = 50, message = "O país deve ter no máximo 50 caracteres.")
    private String pais;

    @NotNull(message = "O tipo de endereço não pode ser nulo.")
    private TipoEndereco tipoEndereco;
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDateTime;
import java.util.UUID;

import br.com.legalconnect.entity.Endereco.TipoEndereco;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class EnderecoResponseDTO
 * @brief DTO para respostas de Endereco.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EnderecoResponseDTO {
    private UUID id;
    private String logradouro;
    private String numero;
    private String complemento;
    private String bairro;
    private String cidade;
    private String estado;
    private String cep;
    private String pais;
    private TipoEndereco tipoEndereco;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDate;
import java.util.List; // Usar List para Enderecos para manter a ordem se necessário
import java.util.Set;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class PessoaRequestDTO
 * @brief DTO base para requisições de criação ou atualização de Pessoa.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class PessoaRequestDTO {
    // Não incluir o ID aqui, pois ele será definido pela entidade base (BaseEntity)
    // e retornado no ResponseDTO.

    @NotNull(message = "Os dados do usuário não podem ser nulos.")
    @Valid // Valida o DTO aninhado
    private UserRequestDTO usuario;

    @NotBlank(message = "O nome completo não pode estar em branco.")
    @Size(max = 255, message = "O nome completo deve ter no máximo 255 caracteres.")
    private String nomeCompleto;

    @NotBlank(message = "O CPF não pode estar em branco.")
    @Pattern(regexp = "\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}", message = "Formato de CPF inválido. Use XXX.XXX.XXX-XX.")
    private String cpf;

    @PastOrPresent(message = "A data de nascimento não pode ser futura.")
    private LocalDate dataNascimento;

    @Valid // Valida a lista de DTOs aninhados
    private List<EnderecoRequestDTO> enderecos; // Usar List para manter a ordem se necessário

    private Set<String> telefones; // Lista de números de telefone como strings
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class PessoaResponseDTO
 * @brief DTO base para respostas de Pessoa.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class PessoaResponseDTO {
    private UUID id;
    private UserResponseDTO usuario;
    private String nomeCompleto;
    private String cpf;
    private LocalDate dataNascimento;
    private List<EnderecoResponseDTO> enderecos;
    private Set<String> telefones;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
```
```java
package br.com.legalconnect.dto;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

import br.com.legalconnect.entity.Plano.VisibilidadeDestaque;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class PlanoResponseDTO
 * @brief DTO para respostas de Plano.
 *        Esta classe é um DTO simplificado para ser usado em outros
 *        microsserviços.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class PlanoResponseDTO {
    private UUID id;
    private String nome;
    private String descricao;
    private BigDecimal precoMensal;
    private BigDecimal precoAnual;
    private Integer limiteServicosAgendaveis;
    private VisibilidadeDestaque visibilidadeDestaque;
    private Boolean acessoRelatoriosAvancados;
    private Boolean permitePedidosOrcamento;
    private Integer periodoTesteDias;
    private Boolean isDefault;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
```
```java
package br.com.legalconnect.dto;

import java.util.UUID;

import br.com.legalconnect.entity.Profissional.StatusProfissional;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class ProfissionalRequestDTO
 * @brief DTO para requisições de criação ou atualização de Profissional.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class ProfissionalRequestDTO extends PessoaRequestDTO {
    @NotBlank(message = "O número da OAB não pode estar em branco.")
    @Size(max = 50, message = "O número da OAB deve ter no máximo 50 caracteres.")
    private String numeroOab;

    @NotNull(message = "O status profissional não pode ser nulo.")
    private StatusProfissional statusProfissional;

    @NotNull(message = "A indicação de uso do marketplace não pode ser nula.")
    private Boolean usaMarketplace;

    @NotNull(message = "A indicação de participação em plano não pode ser nula.")
    private Boolean fazParteDePlano;

    private UUID empresaId; // ID da empresa associada (opcional)

    @NotNull(message = "O ID do plano não pode ser nulo.")
    private UUID planoId; // ID do plano de assinatura
}
```
```java
package br.com.legalconnect.dto;

import br.com.legalconnect.entity.Profissional.StatusProfissional;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class ProfissionalResponseDTO
 * @brief DTO para respostas de Profissional.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class ProfissionalResponseDTO extends PessoaResponseDTO {
    private String numeroOab;
    private StatusProfissional statusProfissional;
    private Boolean usaMarketplace;
    private Boolean fazParteDePlano;
    private EmpresaResponseDTO empresa; // DTO da empresa associada (simplificado)
    private PlanoResponseDTO plano; // DTO do plano de assinatura
}
```
```java
package br.com.legalconnect.dto;

import java.util.UUID;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class UserRequestDTO
 * @brief DTO para requisições de criação ou atualização de User.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserRequestDTO {
    private UUID id;
    @NotBlank(message = "O email não pode estar em branco.")
    @Email(message = "Formato de email inválido.")
    private String email;

    // @NotBlank(message = "A senha não pode estar em branco.")
    // @Size(min = 8, message = "A senha deve ter no mínimo 8 caracteres.")
    // private String password;

    // O papel (Role) pode ser definido aqui ou inferido pelo serviço de
    // autenticação/usuário
    // dependendo da lógica de negócio. Para simplificar, pode ser incluído se for
    // um input direto.
    // private String role;
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDateTime;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class UserResponseDTO
 * @brief DTO para respostas de User.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserResponseDTO {
    private UUID id;
    private String email;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    // private String role; // Incluir se o papel for relevante na resposta
}
```
```java
package br.com.legalconnect.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.PrimaryKeyJoinColumn;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Administrador
 * @brief Entidade que representa um administrador da plataforma.
 *        Estende a entidade Pessoa. Atualmente não possui campos adicionais,
 *        mas pode ser expandido.
 *        Mapeado para a tabela 'tb_administrador' que se junta a 'tb_pessoa'
 *        pela chave primária.
 */
@Entity
@Table(name = "tb_administrador")
@PrimaryKeyJoinColumn(name = "id")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Administrador extends Pessoa {
    private String status;

    // Atualmente, não há campos adicionais específicos para Administrador além dos
    // herdados de Pessoa.
    // Pode ser expandido no futuro com, por exemplo, nível de acesso
    // administrativo, etc.
}
```
```java
package br.com.legalconnect.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.PrimaryKeyJoinColumn;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Cliente
 * @brief Entidade que representa um cliente.
 *        Estende a entidade Pessoa. Atualmente não possui campos adicionais,
 *        mas pode ser expandido.
 *        Mapeado para a tabela 'tb_cliente' que se junta a 'tb_pessoa' pela
 *        chave primária.
 */
@Entity
@Table(name = "tb_cliente")
@PrimaryKeyJoinColumn(name = "id")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Cliente extends Pessoa {
    private String status;
    private String tipo;

    // Atualmente, não há campos adicionais específicos para Cliente além dos
    // herdados de Pessoa.
    // Pode ser expandido no futuro com, por exemplo, histórico de preferências,
    // etc.
}
```
```java
package br.com.legalconnect.entity;

import java.util.HashSet;
import java.util.Set;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.CascadeType;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Empresa
 * @brief Entidade que representa uma empresa que pode contratar planos na
 *        plataforma.
 *        Esta entidade não estende Pessoa, pois representa uma pessoa jurídica.
 *        Mapeada para a tabela 'tb_empresa'.
 */
@Entity
@Table(name = "tb_empresa")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Empresa extends BaseEntity {

    @Column(name = "nome_fantasia", nullable = false, length = 255)
    private String nomeFantasia; // Nome fantasia da empresa

    @Column(name = "razao_social", nullable = false, length = 255)
    private String razaoSocial; // Razão social da empresa

    @Column(name = "cnpj", nullable = false, unique = true, length = 18) // CNPJ com máscara
    private String cnpj; // Número do Cadastro Nacional de Pessoas Jurídicas (CNPJ), único por empresa

    @Column(name = "email_contato", length = 255)
    private String emailContato; // E-mail de contato da empresa

    /**
     * @brief Relacionamento um-para-muitos com a entidade Endereco.
     *        Uma empresa pode ter múltiplos endereços (sede, filiais, etc.).
     *        CascadeType.ALL garante que operações nos Enderecos se propaguem para
     *        Empresa.
     *        mappedBy indica que o relacionamento é gerenciado pelo campo 'empresa'
     *        na entidade Endereco.
     */
    @OneToMany(mappedBy = "empresa", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Endereco> enderecos = new HashSet<>(); // Conjunto de endereços da empresa

    /**
     * @brief Coleção de strings para armazenar múltiplos números de telefone.
     *        Será mapeada para uma tabela separada 'tb_empresa_telefones'.
     */
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_empresa_telefones", joinColumns = @JoinColumn(name = "empresa_id"))
    @Column(name = "numero_telefone", length = 20)
    private Set<String> telefones = new HashSet<>(); // Conjunto de números de telefone da empresa

    @OneToMany(mappedBy = "empresa", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Profissional> profissionais = new HashSet<>();
}
```
```java
package br.com.legalconnect.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Endereco
 * @brief Entidade que representa um endereço detalhado.
 *        Pode ser associada a Pessoas ou Empresas.
 *        Mapeada para a tabela 'tb_endereco'.
 */
@Entity
@Table(name = "tb_endereco")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Endereco extends BaseEntity {

    @Column(name = "logradouro", nullable = false, length = 255)
    private String logradouro; // Nome da rua, avenida, etc.

    @Column(name = "numero", nullable = false, length = 20)
    private String numero; // Número do imóvel

    @Column(name = "complemento", length = 255)
    private String complemento; // Complemento (ex: apto, sala, bloco)

    @Column(name = "bairro", nullable = false, length = 100)
    private String bairro; // Bairro

    @Column(name = "cidade", nullable = false, length = 100)
    private String cidade; // Cidade

    @Column(name = "estado", nullable = false, length = 2)
    private String estado; // Estado (UF)

    @Column(name = "cep", nullable = false, length = 9) // CEP com máscara
    private String cep; // Código de Endereçamento Postal

    @Column(name = "pais", nullable = false, length = 50)
    private String pais = "Brasil"; // País (valor padrão "Brasil")

    @Enumerated(EnumType.STRING)
    @Column(name = "tipo_endereco", nullable = false, length = 50)
    private TipoEndereco tipoEndereco; // Tipo de endereço (ex: RESIDENCIAL, COMERCIAL, ESCRITORIO)

    /**
     * @brief Relacionamento muitos-para-um com a entidade Pessoa (opcional).
     *        Um endereço pode pertencer a uma pessoa.
     *        Somente um dos campos (pessoa ou empresa) deve ser preenchido.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "pessoa_id")
    private Pessoa pessoa;

    /**
     * @brief Relacionamento muitos-para-um com a entidade Empresa (opcional).
     *        Um endereço pode pertencer a uma empresa.
     *        Somente um dos campos (pessoa ou empresa) deve ser preenchido.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "empresa_id")
    private Empresa empresa;

    /**
     * @enum TipoEndereco
     * @brief Enumeração para representar o tipo de endereço.
     */
    public enum TipoEndereco {
        RESIDENCIAL,
        COMERCIAL,
        ESCRITORIO,
        COBRANCA,
        ENTREGA,
        OUTRO
    }
}
```
```java
package br.com.legalconnect.entity;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set; // Usaremos Set para evitar duplicatas e garantir unicidade

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.CascadeType;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.Inheritance;
import jakarta.persistence.InheritanceType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Pessoa
 * @brief Entidade base abstrata para todas as pessoas no sistema (Profissional,
 *        Cliente, Administrador).
 *        Contém dados comuns a todos os tipos de pessoas e um relacionamento
 *        OneToOne com a entidade User.
 *        Utiliza estratégia de herança JOINED para mapear subclasses em tabelas
 *        separadas.
 */
@Entity
@Table(name = "tb_pessoa")
@Inheritance(strategy = InheritanceType.JOINED)
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public abstract class Pessoa extends BaseEntity {

    /**
     * @brief Relacionamento um-para-um com a entidade User.
     *        Este lado é o dono do relacionamento, e a coluna 'user_id' será criada
     *        em 'tb_pessoa'.
     *        O CascadeType.ALL garante que operações no User (como deleção) se
     *        propaguem para Pessoa.
     */
    @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinColumn(name = "user_id", referencedColumnName = "id", nullable = false, unique = true)
    private User usuario; // O usuário associado a esta pessoa

    @Column(name = "nome_completo", nullable = false, length = 255)
    private String nomeCompleto; // Nome completo da pessoa

    @Column(name = "cpf", nullable = false, unique = true, length = 14)
    private String cpf; // Número do Cadastro de Pessoa Física (CPF), único por pessoa

    @Column(name = "data_nascimento")
    private LocalDate dataNascimento; // Data de nascimento da pessoa

    /**
     * @brief Relacionamento um-para-muitos com a entidade Endereco.
     *        Uma pessoa pode ter múltiplos endereços (residencial, comercial,
     *        etc.).
     *        CascadeType.ALL garante que operações nos Enderecos se propaguem para
     *        Pessoa.
     *        mappedBy indica que o relacionamento é gerenciado pelo campo 'pessoa'
     *        na entidade Endereco.
     */
    @OneToMany(mappedBy = "pessoa", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Endereco> enderecos = new HashSet<>(); // Conjunto de endereços da pessoa

    /**
     * @brief Coleção de strings para armazenar múltiplos números de telefone.
     *        Será mapeada para uma tabela separada 'tb_pessoa_telefones'.
     */
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_pessoa_telefones", joinColumns = @JoinColumn(name = "pessoa_id"))
    @Column(name = "numero_telefone", length = 20)
    private Set<String> telefones = new HashSet<>(); // Conjunto de números de telefone da pessoa
}
```
```java
package br.com.legalconnect.entity;

import java.math.BigDecimal;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Plano
 * @brief Entidade que representa um plano de assinatura oferecido na
 *        plataforma.
 *        Esta classe é um placeholder e deve ser definida em seu próprio
 *        microsserviço (marketplace).
 *        Mapeada para a tabela 'tb_plano'.
 */
@Entity
@Table(name = "tb_plano")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Plano extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 100)
    private String nome; // Nome do plano (ex: Free, Premium)

    @Column(name = "descricao", columnDefinition = "TEXT")
    private String descricao; // Descrição detalhada do plano

    @Column(name = "preco_mensal", nullable = false, precision = 10, scale = 2)
    private BigDecimal precoMensal; // Preço mensal do plano

    @Column(name = "preco_anual", nullable = false, precision = 10, scale = 2)
    private BigDecimal precoAnual; // Preço anual do plano

    @Column(name = "limite_servicos_agendaveis")
    private Integer limiteServicosAgendaveis; // Limite de serviços que podem ser agendados

    @Enumerated(EnumType.STRING)
    @Column(name = "visibilidade_destaque", nullable = false, length = 50)
    private VisibilidadeDestaque visibilidadeDestaque; // Nível de destaque no marketplace

    @Column(name = "acesso_relatorios_avancados", nullable = false)
    private Boolean acessoRelatoriosAvancados; // Indica se o plano dá acesso a relatórios avançados

    @Column(name = "permite_pedidos_orcamento", nullable = false)
    private Boolean permitePedidosOrcamento; // Indica se o plano permite pedidos de orçamento

    @Column(name = "periodo_teste_dias")
    private Integer periodoTesteDias; // Período de teste gratuito em dias

    @Column(name = "is_default", nullable = false)
    private Boolean isDefault; // Indica se é o plano padrão para novos cadastros

    /**
     * @enum VisibilidadeDestaque
     * @brief Enumeração para representar o nível de visibilidade/destaque de um
     *        plano no marketplace.
     */
    public enum VisibilidadeDestaque {
        PADRAO,
        PREMIUM,
        DESTAQUE_MAXIMO
    }
}
```
```java
package br.com.legalconnect.entity;

import java.util.HashSet;
import java.util.Set;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.PrimaryKeyJoinColumn;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Profissional
 * @brief Entidade que representa um profissional do direito.
 *        Estende a entidade Pessoa e adiciona campos específicos de um
 *        profissional.
 *        Mapeado para a tabela 'tb_profissional' que se junta a 'tb_pessoa'
 *        pela chave primária.
 */
@Entity
@Table(name = "tb_profissional")
@PrimaryKeyJoinColumn(name = "id")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Profissional extends Pessoa {

    @Column(name = "numero_oab", nullable = false, unique = true, length = 50)
    private String numeroOab; // Número de registro na OAB, único por profissional

    @Enumerated(EnumType.STRING)
    @Column(name = "status_profissional", nullable = false, length = 50)
    private StatusProfissional statusProfissional; // Status específico do profissional (ex: ATIVO, LICENCIADO)

    @Column(name = "usa_marketplace", nullable = false)
    private Boolean usaMarketplace = false; // Indica se o profissional deseja aparecer no marketplace

    @Column(name = "faz_parte_de_plano", nullable = false)
    private Boolean fazParteDePlano = false; // Indica se o profissional está associado a um plano pago

    /**
     * @brief Relacionamento muitos-para-um com a entidade Empresa (opcional).
     *        Um profissional pode pertencer a uma empresa.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "empresa_id") // Coluna de chave estrangeira para a empresa
    private Empresa empresa; // A empresa à qual o profissional está associado (se houver)

    /**
     * @brief Relacionamento muitos-para-um com a entidade Plano.
     *        Um profissional está associado a um plano de assinatura.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "plano_id", nullable = false) // Coluna de chave estrangeira para o plano
    private Plano plano; // O plano de assinatura do advogado
    @ManyToMany(fetch = FetchType.EAGER) // Relacionamento muitos-para-muitos com Role
    @JoinTable(name = "tb_user_profissionals_role", // Tabela de junção
            joinColumns = @JoinColumn(name = "profissional_profissionals_id"), // Coluna que referencia User
            inverseJoinColumns = @JoinColumn(name = "role_id") // Coluna que referencia Role
    )
    private Set<RoleProfissional> roleProfissionals = new HashSet<>(); // Papéis/perfil de acesso do usuário

    /**
     * @enum StatusProfissional
     * @brief Enumeração para representar o status específico de um Profissional.
     */
    public enum StatusProfissional {
        ATIVO, // Profissional ativo e em dia
        LICENCIADO, // Profissional com licença temporariamente suspensa
        SUSPENSO, // Profissional suspenso (ex: por infração)
        EM_ANALISE // Profissional aguardando aprovação/verificação
    }
}
```
```java
package br.com.legalconnect.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Role
 * @brief Entidade para definir os papéis de acesso do usuário no sistema.
 *
 *        Esta tabela de roles agora reside nos schemas de tenant, o que
 *        significa
 *        que cada tenant pode ter seus próprios conjuntos de roles ou roles com
 *        IDs diferentes.
 */
@Entity
@Table(name = "tb_role") // A tabela tb_role agora reside no schema do tenant
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class RoleProfissional extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 100)
    private String nome; // Nome descritivo e único do papel (ex: CLIENTE, ADVOGADO)

    @Column(name = "descricao", columnDefinition = "TEXT")
    private String descricao; // Uma descrição detalhada do papel
}
```
```java
package br.com.legalconnect.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class User
 * @brief Entidade base para todos os usuários (clientes, advogados,
 *        administradores de tenant, etc.).
 *
 *        Esta entidade representa um usuário na plataforma e está associada a
 *        um tenant
 *        específico. A tabela de usuário reside nos schemas de tenant.
 */
@Entity
@Table(name = "tb_user") // A tabela tb_user agora reside no schema do tenant
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class User extends BaseEntity { // Implementa UserDetails

    @Column(name = "nome_completo", nullable = false, length = 255)
    private String nomeCompleto; // Nome completo do usuário

    @Column(name = "email", nullable = false, unique = true, length = 255)
    private String email; // Endereço de e-mail principal do usuário (único por schema de tenant)

    @Column(name = "cpf", nullable = false, unique = true, length = 14)
    private String cpf; // Número do Cadastro de Pessoa Física do usuário (único por schema de tenant)

    @Column(name = "telefone", length = 20)
    private String telefone; // Número de telefone de contato do usuário

    @Column(name = "senha_hash", nullable = false, columnDefinition = "TEXT")
    private String senhaHash; // Representação criptografada (hashed) da senha do usuário

    @Column(name = "foto_url", columnDefinition = "TEXT")
    private String fotoUrl; // URL da foto de perfil do usuário no S3

    /**
     * @enum UserType
     * @brief Enumeração para categorizar o tipo principal de um usuário.
     *        Define se o usuário é um cliente, advogado ou administrador da
     *        plataforma.
     */
    public enum UserType {
        CLIENTE, // Usuário final que busca serviços jurídicos
        ADVOGADO, // Profissional do direito que oferece serviços
        PLATAFORMA_ADMIN, // Administrador da plataforma com privilégios totais
        SOCIO
    }

    /**
     * @enum UserStatus
     * @brief Enumeração para representar o status atual da conta de um usuário.
     *        Define o estado operacional da conta do usuário na plataforma.
     */
    public enum UserStatus {
        ACTIVE, INACTIVE, PENDING_APPROVAL, REJECTED, PENDING
    }

    // --- Implementação de UserDetails ---

}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.AdministradorRequestDTO;
import br.com.legalconnect.dto.AdministradorResponseDTO;
import br.com.legalconnect.entity.Administrador;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

/**
 * @interface AdministradorMapper
 * @brief Mapper MapStruct para conversão entre Administrador e seus DTOs.
 */
@Mapper(componentModel = "spring", uses = {PessoaMapper.class, EnderecoMapper.class, UserMapper.class})
public interface AdministradorMapper extends PessoaMapper {

    AdministradorMapper INSTANCE = Mappers.getMapper(AdministradorMapper.class);

    /**
     * @brief Mapeia um AdministradorRequestDTO para uma entidade Administrador.
     * @param dto O DTO de requisição do administrador.
     * @return A entidade Administrador.
     */
    Administrador toEntity(AdministradorRequestDTO dto);

    /**
     * @brief Mapeia uma entidade Administrador para um AdministradorResponseDTO.
     * @param entity A entidade Administrador.
     * @return O DTO de resposta do administrador.
     */
    @Mapping(source = "status", target = "status")
    AdministradorResponseDTO toResponseDTO(Administrador entity);
}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.ClienteRequestDTO;
import br.com.legalconnect.dto.ClienteResponseDTO;
import br.com.legalconnect.entity.Cliente;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

/**
 * @interface ClienteMapper
 * @brief Mapper MapStruct para conversão entre Cliente e seus DTOs.
 */
@Mapper(componentModel = "spring", uses = {PessoaMapper.class, EnderecoMapper.class, UserMapper.class})
public interface ClienteMapper extends PessoaMapper {

    ClienteMapper INSTANCE = Mappers.getMapper(ClienteMapper.class);

    /**
     * @brief Mapeia um ClienteRequestDTO para uma entidade Cliente.
     * @param dto O DTO de requisição do cliente.
     * @return A entidade Cliente.
     */
    Cliente toEntity(ClienteRequestDTO dto);

    /**
     * @brief Mapeia uma entidade Cliente para um ClienteResponseDTO.
     * @param entity A entidade Cliente.
     * @return O DTO de resposta do cliente.
     */
    @Mapping(source = "status", target = "status")
    @Mapping(target = "tipo", ignore = true) // O campo 'tipo' não existe na entidade Cliente, apenas no DTO de resposta
    ClienteResponseDTO toResponseDTO(Cliente entity);
}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.EmpresaRequestDTO;
import br.com.legalconnect.dto.EmpresaResponseDTO;
import br.com.legalconnect.entity.Empresa;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import java.util.List;
import java.util.Set;

/**
 * @interface EmpresaMapper
 * @brief Mapper MapStruct para conversão entre Empresa e seus DTOs.
 */
@Mapper(componentModel = "spring", uses = {EnderecoMapper.class})
public interface EmpresaMapper {

    EmpresaMapper INSTANCE = Mappers.getMapper(EmpresaMapper.class);

    /**
     * @brief Converte um EmpresaRequestDTO para uma entidade Empresa.
     * @param dto O DTO de requisição da empresa.
     * @return A entidade Empresa.
     */
    @Mapping(target = "id", ignore = true) // ID é gerado, não vem do DTO de requisição
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(source = "enderecos", target = "enderecos")
    @Mapping(source = "telefones", target = "telefones")
    Empresa toEntity(EmpresaRequestDTO dto);

    /**
     * @brief Converte uma entidade Empresa para um EmpresaResponseDTO.
     * @param entity A entidade Empresa.
     * @return O DTO de resposta da empresa.
     */
    @Mapping(source = "enderecos", target = "enderecos")
    @Mapping(source = "telefones", target = "telefones")
    EmpresaResponseDTO toResponseDTO(Empresa entity);
}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.EnderecoRequestDTO;
import br.com.legalconnect.dto.EnderecoResponseDTO;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.entity.Endereco.TipoEndereco; // Importa o enum correto
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import java.util.List;
import java.util.Set;

/**
 * @interface EnderecoMapper
 * @brief Mapper MapStruct para conversão entre Endereco e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface EnderecoMapper {

    EnderecoMapper INSTANCE = Mappers.getMapper(EnderecoMapper.class);

    /**
     * @brief Converte um EnderecoRequestDTO para uma entidade Endereco.
     * @param dto O DTO de requisição do endereço.
     * @return A entidade Endereco.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(target = "pessoa", ignore = true) // Será setado no serviço
    @Mapping(target = "empresa", ignore = true) // Será setado no serviço
    Endereco toEntity(EnderecoRequestDTO dto);

    /**
     * @brief Converte uma entidade Endereco para um EnderecoResponseDTO.
     * @param entity A entidade Endereco.
     * @return O DTO de resposta do endereço.
     */
    EnderecoResponseDTO toResponseDTO(Endereco entity);

    /**
     * @brief Converte uma lista de EnderecoRequestDTOs para um Set de entidades Endereco.
     * @param dtoList A lista de DTOs de requisição de endereços.
     * @return Um Set de entidades Endereco.
     */
    Set<Endereco> toEntitySet(List<EnderecoRequestDTO> dtoList);

    /**
     * @brief Converte um Set de entidades Endereco para uma lista de EnderecoResponseDTOs.
     * @param entitySet Um Set de entidades Endereco.
     * @return Uma lista de DTOs de resposta de endereços.
     */
    List<EnderecoResponseDTO> toResponseDTOList(Set<Endereco> entitySet);
}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.PessoaResponseDTO;
import br.com.legalconnect.entity.Pessoa;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.InheritInverseConfiguration; // Importar se for usar @InheritInverseConfiguration
import org.mapstruct.factory.Mappers;

/**
 * @interface PessoaMapper
 * @brief Mapper MapStruct para conversão entre Pessoa e seus DTOs.
 * Esta é uma interface base para ser estendida por mappers de subclasses de Pessoa.
 */
@Mapper(componentModel = "spring", uses = {UserMapper.class, EnderecoMapper.class})
public interface PessoaMapper {

    PessoaMapper INSTANCE = Mappers.getMapper(PessoaMapper.class);

    /**
     * @brief Mapeia uma entidade Pessoa para um PessoaResponseDTO.
     * @param entity A entidade Pessoa.
     * @return O DTO de resposta da pessoa.
     */
    @Mapping(source = "usuario", target = "usuario")
    @Mapping(source = "enderecos", target = "enderecos")
    @Mapping(source = "telefones", target = "telefones")
    PessoaResponseDTO toResponseDTO(Pessoa entity);
}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.PlanoResponseDTO;
import br.com.legalconnect.entity.Plano; // Importar Plano da entidade
import br.com.legalconnect.dto.EmpresaResponseDTO; // Importar EmpresaResponseDTO
import br.com.legalconnect.dto.ProfissionalRequestDTO;
import br.com.legalconnect.dto.ProfissionalResponseDTO;
import br.com.legalconnect.entity.Empresa; // Importar Empresa da entidade
import br.com.legalconnect.entity.Profissional;
import br.com.legalconnect.entity.Profissional.StatusProfissional; // Importar o enum correto
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

/**
 * @interface ProfissionalMapper
 * @brief Mapper MapStruct para conversão entre Profissional e seus DTOs.
 */
@Mapper(componentModel = "spring", uses = {PessoaMapper.class, EnderecoMapper.class, UserMapper.class, EmpresaMapper.class})
public interface ProfissionalMapper extends PessoaMapper {

    ProfissionalMapper INSTANCE = Mappers.getMapper(ProfissionalMapper.class);

    /**
     * @brief Mapeia um ProfissionalRequestDTO para uma entidade Profissional.
     * @param dto O DTO de requisição do profissional.
     * @return A entidade Profissional.
     */
    @Mapping(target = "empresa", ignore = true) // Empresa será setada no serviço
    @Mapping(target = "plano", ignore = true)   // Plano será setado no serviço
    @Mapping(target = "roleProfissionals", ignore = true) // Não presente no DTO
    Profissional toEntity(ProfissionalRequestDTO dto);

    /**
     * @brief Mapeia uma entidade Profissional para um ProfissionalResponseDTO.
     * @param entity A entidade Profissional.
     * @return O DTO de resposta do profissional.
     */
    @Mapping(source = "empresa", target = "empresa")
    @Mapping(source = "plano", target = "plano")
    ProfissionalResponseDTO toResponseDTO(Profissional entity);

    /**
     * @brief Mapeia uma entidade Plano para um PlanoResponseDTO.
     * @param plano A entidade Plano.
     * @return O DTO de resposta do Plano.
     */
    PlanoResponseDTO toPlanoResponseDTO(Plano plano);
}
```
```java
package br.com.legalconnect.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.dto.UserRequestDTO;
import br.com.legalconnect.dto.UserResponseDTO;
import br.com.legalconnect.entity.User;

/**
 * @interface UserMapper
 * @brief Mapper MapStruct para conversão entre User e seus DTOs.
 */
@Mapper(componentModel = "spring") // Integração com Spring para injeção de dependência
public interface UserMapper {

    UserMapper INSTANCE = Mappers.getMapper(UserMapper.class);

    /**
     * @brief Converte um UserRequestDTO para uma entidade User.
     *        Ignora campos da entidade User que não estão presentes no
     *        UserRequestDTO.
     * @param dto O DTO de requisição do usuário.
     * @return A entidade User.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(target = "nomeCompleto", ignore = true) // Não presente no DTO de requisição
    @Mapping(target = "cpf", ignore = true) // Não presente no DTO de requisição
    @Mapping(target = "telefone", ignore = true) // Não presente no DTO de requisição
    // @Mapping(target = "senhaHash", source = "password") // Mapeia password do DTO
    // para senhaHash da entidade
    @Mapping(target = "fotoUrl", ignore = true) // Não presente no DTO de requisição
    User toEntity(UserRequestDTO dto);

    /**
     * @brief Converte uma entidade User para um UserResponseDTO.
     *        Ignora campos da entidade User que não estão presentes no
     *        UserResponseDTO.
     * @param entity A entidade User.
     * @return O DTO de resposta do usuário.
     */
    @Mapping(target = "email", source = "email")
    UserResponseDTO toResponseDTO(User entity);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Administrador;

/**
 * @interface RepositorioAdministrador
 * @brief Repositório Spring Data JPA para a entidade Administrador.
 *        Fornece métodos CRUD e de busca personalizados para Administrador.
 */
@Repository
public interface RepositorioAdministrador extends JpaRepository<Administrador, UUID> {

    /**
     * @brief Busca um Administrador pelo CPF.
     * @param cpf O CPF do administrador.
     * @return Um Optional contendo o Administrador, se encontrado.
     */
    Optional<Administrador> findByCpf(String cpf);

    /**
     * @brief Lista todos os Administradores com paginação.
     * @param pageable Objeto Pageable para configuração de paginação.
     * @return Uma página de Administradores.
     */
    Page<Administrador> findAll(Pageable pageable);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Cliente;

/**
 * @interface RepositorioCliente
 * @brief Repositório Spring Data JPA para a entidade Cliente.
 *        Fornece métodos CRUD e de busca personalizados para Cliente.
 */
@Repository
public interface RepositorioCliente extends JpaRepository<Cliente, UUID> {

    /**
     * @brief Busca um Cliente pelo CPF.
     * @param cpf O CPF do cliente.
     * @return Um Optional contendo o Cliente, se encontrado.
     */
    Optional<Cliente> findByCpf(String cpf);

    /**
     * @brief Lista todos os Clientes com paginação.
     * @param pageable Objeto Pageable para configuração de paginação.
     * @return Uma página de Clientes.
     */
    Page<Cliente> findAll(Pageable pageable);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Empresa;

/**
 * @interface RepositorioEmpresa
 * @brief Repositório Spring Data JPA para a entidade Empresa.
 *        Fornece métodos CRUD e de busca personalizados para Empresa.
 */
@Repository
public interface RepositorioEmpresa extends JpaRepository<Empresa, UUID> {

    /**
     * @brief Busca uma Empresa pelo CNPJ.
     * @param cnpj O CNPJ da empresa.
     * @return Um Optional contendo a Empresa, se encontrada.
     */
    Optional<Empresa> findByCnpj(String cnpj);

    /**
     * @brief Lista todas as Empresas com paginação.
     * @param pageable Objeto Pageable para configuração de paginação.
     * @return Uma página de Empresas.
     */
    Page<Empresa> findAll(Pageable pageable);
}
```
```java
package br.com.legalconnect.repository;

import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Endereco;

/**
 * @interface RepositorioEndereco
 * @brief Repositório Spring Data JPA para a entidade Endereco.
 *        Fornece métodos CRUD básicos para Endereco.
 */
@Repository
public interface RepositorioEndereco extends JpaRepository<Endereco, UUID> {
    // Métodos de busca adicionais podem ser definidos aqui se necessário,
    // como findByPessoaId(UUID pessoaId) ou findByEmpresaId(UUID empresaId)
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Pessoa;

/**
 * @interface RepositorioPessoa
 * @brief Repositório Spring Data JPA para a entidade Pessoa (base).
 * Fornece métodos CRUD básicos para Pessoa e busca por CPF.
 * Como Pessoa é uma entidade base abstrata com estratégia JOINED, este
 * repositório
 * pode ser usado para operações polimórficas se necessário, mas
 * geralmente
 * repositórios específicos para subclasses (Profissional, Cliente,
 * Administrador)
 * são mais comuns para operações de negócio.
 */
@Repository
public interface RepositorioPessoa extends JpaRepository<Pessoa, UUID> {

    /**
     * @brief Busca uma Pessoa pelo CPF.
     * @param cpf O CPF da pessoa.
     * @return Um Optional contendo a Pessoa, se encontrada.
     */
    Optional<Pessoa> findByCpf(String cpf);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Plano;

/**
 * @interface RepositorioPlano
 * @brief Repositório Spring Data JPA para a entidade Plano.
 *        Fornece métodos CRUD e de busca personalizados para Plano.
 *        **Nota:** Em uma arquitetura de microsserviços ideal, esta entidade e
 *        seu
 *        repositório poderiam residir em um serviço de 'marketplace' ou
 *        'assinatura'.
 *        Aqui, é mantido para fins de completude do modelo de dados do
 *        user-service,
 *        mas a gestão real dos planos pode ser externa.
 */
@Repository
public interface RepositorioPlano extends JpaRepository<Plano, UUID> {

    /**
     * @brief Busca um Plano pelo nome.
     * @param nome O nome do plano.
     * @return Um Optional contendo o Plano, se encontrado.
     */
    Optional<Plano> findByNome(String nome);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Profissional;

/**
 * @interface RepositorioProfissional
 * @brief Repositório Spring Data JPA para a entidade Profissional.
 *        Fornece métodos CRUD e de busca personalizados para Profissional.
 */
@Repository
public interface RepositorioProfissional extends JpaRepository<Profissional, UUID> {

    /**
     * @brief Busca um Profissional pelo CPF.
     * @param cpf O CPF do profissional.
     * @return Um Optional contendo o Profissional, se encontrado.
     */
    Optional<Profissional> findByCpf(String cpf);

    /**
     * @brief Busca um Profissional pelo número da OAB.
     * @param numeroOab O número da OAB do profissional.
     * @return Um Optional contendo o Profissional, se encontrado.
     */
    Optional<Profissional> findByNumeroOab(String numeroOab);

    /**
     * @brief Lista todos os Profissionais com paginação.
     * @param pageable Objeto Pageable para configuração de paginação.
     * @return Uma página de Profissionais.
     */
    Page<Profissional> findAll(Pageable pageable);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.RoleProfissional;

/**
 * @interface RepositorioRoleProfissional
 * @brief Repositório Spring Data JPA para a entidade RoleProfissional.
 *        Fornece métodos CRUD e de busca personalizados para RoleProfissional.
 *        **Nota:** Em um ambiente multi-tenant, os papéis podem ser globais ou
 *        por tenant.
 *        Este repositório assume que a entidade RoleProfissional está no schema
 *        do tenant.
 */
@Repository
public interface RepositorioRoleProfissional extends JpaRepository<RoleProfissional, UUID> {

    /**
     * @brief Busca um RoleProfissional pelo nome.
     * @param nome O nome do papel.
     * @return Um Optional contendo o RoleProfissional, se encontrado.
     */
    Optional<RoleProfissional> findByNome(String nome);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.User;

/**
 * @interface RepositorioUser
 * @brief Repositório Spring Data JPA para a entidade User.
 *        Fornece métodos CRUD e de busca personalizados para User.
 *        **Nota:** Este repositório é crucial para o pré-requisito de
 *        associação de Pessoa a um User existente.
 *        As operações de criação/atualização de User em si são de
 *        responsabilidade de outro microsserviço (ex: auth-service).
 */
@Repository
public interface RepositorioUser extends JpaRepository<User, UUID> {

    /**
     * @brief Busca um User pelo email.
     * @param email O email do usuário.
     * @return Um Optional contendo o User, se encontrado.
     */
    Optional<User> findByEmail(String email);

    /**
     * @brief Busca um User pelo CPF.
     * @param cpf O CPF do usuário.
     * @return Um Optional contendo o User, se encontrado.
     */
    Optional<User> findByCpf(String cpf);
}
```
```java
package br.com.legalconnect.service;

import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException; // Importa da common-lib
import br.com.legalconnect.common.exception.ErrorCode; // Importa da common-lib
import br.com.legalconnect.dto.AdministradorRequestDTO;
import br.com.legalconnect.dto.AdministradorResponseDTO;
import br.com.legalconnect.entity.Administrador;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.entity.User;
import br.com.legalconnect.mapper.AdministradorMapper;
import br.com.legalconnect.mapper.EnderecoMapper;
import br.com.legalconnect.repository.RepositorioAdministrador;
import br.com.legalconnect.repository.RepositorioUser;
import lombok.RequiredArgsConstructor;

/**
 * @class ServicoAdministrador
 * @brief Serviço de domínio para gerenciar operações relacionadas a
 *        Administradores.
 *        Contém a lógica de negócio para criação, busca, atualização e exclusão
 *        de Administradores.
 */
@Service
@RequiredArgsConstructor
public class ServicoAdministrador {

    private final RepositorioAdministrador repositorioAdministrador;
    private final RepositorioUser repositorioUser;
    private final AdministradorMapper administradorMapper;
    private final EnderecoMapper enderecoMapper;

    /**
     * @brief Cadastra um novo Administrador no sistema.
     * @param requestDTO DTO com os dados do Administrador a ser cadastrado.
     * @return DTO com os dados do Administrador cadastrado.
     * @throws BusinessException Se o CPF já estiver cadastrado ou o User associado
     *                           não for encontrado.
     */
    @Transactional
    public AdministradorResponseDTO cadastrarAdministrador(AdministradorRequestDTO requestDTO) {
        // 1. Verificar pré-requisito: User associado deve existir
        UUID userId = requestDTO.getUsuario().getId(); // Presume que o ID do User vem no DTO
        User user = repositorioUser.findById(userId)
                .orElseThrow(() -> new BusinessException(ErrorCode.USER_NOT_FOUND,
                        "Usuário associado com ID " + userId + " não encontrado."));

        // 2. Validação de duplicidade de CPF
        if (repositorioAdministrador.findByCpf(requestDTO.getCpf()).isPresent()) {
            throw new BusinessException(ErrorCode.INVALID_CPF, "CPF já cadastrado para outro administrador.");
        }

        // 3. Mapear DTO para entidade
        Administrador administrador = administradorMapper.toEntity(requestDTO);
        administrador.setUsuario(user); // Associar o User encontrado

        // 4. Associar endereços à pessoa (Administrador)
        Set<Endereco> enderecos = requestDTO.getEnderecos().stream()
                .map(enderecoDTO -> {
                    Endereco endereco = enderecoMapper.toEntity(enderecoDTO);
                    endereco.setPessoa(administrador); // Garante a associação bidirecional
                    return endereco;
                })
                .collect(Collectors.toSet());
        administrador.setEnderecos(enderecos);

        // 5. Salvar a entidade
        Administrador savedAdministrador = repositorioAdministrador.save(administrador);

        // 6. Mapear entidade salva para DTO de resposta
        return administradorMapper.toResponseDTO(savedAdministrador);
    }

    /**
     * @brief Busca um Administrador pelo ID.
     * @param id ID do Administrador a ser buscado.
     * @return DTO com os dados do Administrador encontrado.
     * @throws BusinessException Se o Administrador não for encontrado.
     */
    @Transactional(readOnly = true)
    public AdministradorResponseDTO buscarAdministradorPorId(UUID id) {
        Administrador administrador = repositorioAdministrador.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Administrador com ID " + id + " não encontrado."));
        return administradorMapper.toResponseDTO(administrador);
    }

    /**
     * @brief Lista todos os Administradores com paginação.
     * @param pageable Objeto Pageable para configuração da paginação.
     * @return Página de DTOs de Administradores.
     */
    @Transactional(readOnly = true)
    public Page<AdministradorResponseDTO> listarAdministradores(Pageable pageable) {
        return repositorioAdministrador.findAll(pageable)
                .map(administradorMapper::toResponseDTO);
    }

    /**
     * @brief Atualiza os dados de um Administrador existente.
     * @param id         ID do Administrador a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Administrador.
     * @return DTO com os dados do Administrador atualizado.
     * @throws BusinessException Se o Administrador não for encontrado ou se houver
     *                           duplicidade de CPF.
     */
    @Transactional
    public AdministradorResponseDTO atualizarAdministrador(UUID id, AdministradorRequestDTO requestDTO) {
        Administrador existingAdministrador = repositorioAdministrador.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Administrador com ID " + id + " não encontrado para atualização."));

        // 1. Validação de duplicidade de CPF (se o CPF foi alterado)
        if (!existingAdministrador.getCpf().equals(requestDTO.getCpf())) {
            if (repositorioAdministrador.findByCpf(requestDTO.getCpf()).isPresent()) {
                throw new BusinessException(ErrorCode.INVALID_CPF, "Novo CPF já cadastrado para outro administrador.");
            }
        }

        // 2. Atualizar campos básicos da Pessoa e Administrador
        // O mapper precisa de um método de atualização, ou fazer manualmente
        existingAdministrador.setNomeCompleto(requestDTO.getNomeCompleto());
        existingAdministrador.setCpf(requestDTO.getCpf());
        existingAdministrador.setDataNascimento(requestDTO.getDataNascimento());
        existingAdministrador.setStatus(requestDTO.getStatus()); // Campo específico de Administrador

        // 3. Atualizar endereços (lógica de sincronização)
        existingAdministrador.getEnderecos().clear(); // Limpa os endereços existentes
        requestDTO.getEnderecos().forEach(enderecoDTO -> {
            // Reutiliza o mapper para converter DTO para Endereco
            Endereco newEndereco = enderecoMapper.toEntity(enderecoDTO);
            newEndereco.setPessoa(existingAdministrador); // Garante a associação bidirecional
            existingAdministrador.getEnderecos().add(newEndereco);
        });

        // 4. Atualizar telefones
        existingAdministrador.getTelefones().clear();
        if (requestDTO.getTelefones() != null) {
            existingAdministrador.getTelefones().addAll(requestDTO.getTelefones());
        }

        // 5. Salvar a entidade atualizada
        Administrador updatedAdministrador = repositorioAdministrador.save(existingAdministrador);

        return administradorMapper.toResponseDTO(updatedAdministrador);
    }

    /**
     * @brief Exclui um Administrador pelo ID.
     * @param id ID do Administrador a ser excluído.
     * @throws BusinessException Se o Administrador não for encontrado.
     */
    @Transactional
    public void excluirAdministrador(UUID id) {
        if (!repositorioAdministrador.existsById(id)) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                    "Administrador com ID " + id + " não encontrado para exclusão.");
        }
        // A exclusão em cascata do Endereco e User (se configurado no mapeamento) será
        // tratada pelo JPA
        repositorioAdministrador.deleteById(id);
    }
}
```
```java
package br.com.legalconnect.service;

import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException; // Importa da common-lib
import br.com.legalconnect.common.exception.ErrorCode; // Importa da common-lib
import br.com.legalconnect.dto.ClienteRequestDTO;
import br.com.legalconnect.dto.ClienteResponseDTO;
import br.com.legalconnect.entity.Cliente;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.entity.User;
import br.com.legalconnect.mapper.ClienteMapper;
import br.com.legalconnect.mapper.EnderecoMapper;
import br.com.legalconnect.repository.RepositorioCliente;
import br.com.legalconnect.repository.RepositorioUser;
import lombok.RequiredArgsConstructor;

/**
 * @class ServicoCliente
 * @brief Serviço de domínio para gerenciar operações relacionadas a Clientes.
 *        Contém a lógica de negócio para criação, busca, atualização e exclusão
 *        de Clientes.
 */
@Service
@RequiredArgsConstructor
public class ServicoCliente {

    private final RepositorioCliente repositorioCliente;
    private final RepositorioUser repositorioUser;
    private final ClienteMapper clienteMapper;
    private final EnderecoMapper enderecoMapper;

    /**
     * @brief Cadastra um novo Cliente no sistema.
     * @param requestDTO DTO com os dados do Cliente a ser cadastrado.
     * @return DTO com os dados do Cliente cadastrado.
     * @throws BusinessException Se o CPF já estiver cadastrado ou o User associado
     *                           não for encontrado.
     */
    @Transactional
    public ClienteResponseDTO cadastrarCliente(ClienteRequestDTO requestDTO) {
        // 1. Verificar pré-requisito: User associado deve existir
        UUID userId = requestDTO.getUsuario().getId(); // Presume que o ID do User vem no DTO
        User user = repositorioUser.findById(userId)
                .orElseThrow(() -> new BusinessException(ErrorCode.USER_NOT_FOUND,
                        "Usuário associado com ID " + userId + " não encontrado."));

        // 2. Validação de duplicidade de CPF
        if (repositorioCliente.findByCpf(requestDTO.getCpf()).isPresent()) {
            throw new BusinessException(ErrorCode.INVALID_CPF, "CPF já cadastrado para outro cliente.");
        }

        // 3. Mapear DTO para entidade
        Cliente cliente = clienteMapper.toEntity(requestDTO);
        cliente.setUsuario(user); // Associar o User encontrado

        // 4. Associar endereços à pessoa (Cliente)
        Set<Endereco> enderecos = requestDTO.getEnderecos().stream()
                .map(enderecoDTO -> {
                    Endereco endereco = enderecoMapper.toEntity(enderecoDTO);
                    endereco.setPessoa(cliente); // Garante a associação bidirecional
                    return endereco;
                })
                .collect(Collectors.toSet());
        cliente.setEnderecos(enderecos);

        // 5. Salvar a entidade
        Cliente savedCliente = repositorioCliente.save(cliente);

        // 6. Mapear entidade salva para DTO de resposta
        return clienteMapper.toResponseDTO(savedCliente);
    }

    /**
     * @brief Busca um Cliente pelo ID.
     * @param id ID do Cliente a ser buscado.
     * @return DTO com os dados do Cliente encontrado.
     * @throws BusinessException Se o Cliente não for encontrado.
     */
    @Transactional(readOnly = true)
    public ClienteResponseDTO buscarClientePorId(UUID id) {
        Cliente cliente = repositorioCliente.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Cliente com ID " + id + " não encontrado."));
        return clienteMapper.toResponseDTO(cliente);
    }

    /**
     * @brief Lista todos os Clientes com paginação.
     * @param pageable Objeto Pageable para configuração da paginação.
     * @return Página de DTOs de Clientes.
     */
    @Transactional(readOnly = true)
    public Page<ClienteResponseDTO> listarClientes(Pageable pageable) {
        return repositorioCliente.findAll(pageable)
                .map(clienteMapper::toResponseDTO);
    }

    /**
     * @brief Atualiza os dados de um Cliente existente.
     * @param id         ID do Cliente a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Cliente.
     * @return DTO com os dados do Cliente atualizado.
     * @throws BusinessException Se o Cliente não for encontrado ou se houver
     *                           duplicidade de CPF.
     */
    @Transactional
    public ClienteResponseDTO atualizarCliente(UUID id, ClienteRequestDTO requestDTO) {
        Cliente existingCliente = repositorioCliente.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Cliente com ID " + id + " não encontrado para atualização."));

        // 1. Validação de duplicidade de CPF (se o CPF foi alterado)
        if (!existingCliente.getCpf().equals(requestDTO.getCpf())) {
            if (repositorioCliente.findByCpf(requestDTO.getCpf()).isPresent()) {
                throw new BusinessException(ErrorCode.INVALID_CPF, "Novo CPF já cadastrado para outro cliente.");
            }
        }

        // 2. Atualizar campos básicos da Pessoa e Cliente
        existingCliente.setNomeCompleto(requestDTO.getNomeCompleto());
        existingCliente.setCpf(requestDTO.getCpf());
        existingCliente.setDataNascimento(requestDTO.getDataNascimento());
        existingCliente.setStatus(requestDTO.getStatus()); // Campo específico de Cliente
        // existingCliente.setTipo(requestDTO.getTipo()); // Campo específico de Cliente

        // 3. Atualizar endereços (lógica de sincronização)
        existingCliente.getEnderecos().clear(); // Limpa os endereços existentes
        requestDTO.getEnderecos().forEach(enderecoDTO -> {
            Endereco newEndereco = enderecoMapper.toEntity(enderecoDTO);
            newEndereco.setPessoa(existingCliente);
            existingCliente.getEnderecos().add(newEndereco);
        });

        // 4. Atualizar telefones
        existingCliente.getTelefones().clear();
        if (requestDTO.getTelefones() != null) {
            existingCliente.getTelefones().addAll(requestDTO.getTelefones());
        }

        // 5. Salvar a entidade atualizada
        Cliente updatedCliente = repositorioCliente.save(existingCliente);

        return clienteMapper.toResponseDTO(updatedCliente);
    }

    /**
     * @brief Exclui um Cliente pelo ID.
     * @param id ID do Cliente a ser excluído.
     * @throws BusinessException Se o Cliente não for encontrado.
     */
    @Transactional
    public void excluirCliente(UUID id) {
        if (!repositorioCliente.existsById(id)) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                    "Cliente com ID " + id + " não encontrado para exclusão.");
        }
        // A exclusão em cascata do Endereco e User (se configurado no mapeamento) será
        // tratada pelo JPA
        repositorioCliente.deleteById(id);
    }
}
```
```java
package br.com.legalconnect.service;

import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException; // Importa da common-lib
import br.com.legalconnect.common.exception.ErrorCode; // Importa da common-lib
import br.com.legalconnect.dto.EmpresaRequestDTO;
import br.com.legalconnect.dto.EmpresaResponseDTO;
import br.com.legalconnect.entity.Empresa;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.mapper.EmpresaMapper;
import br.com.legalconnect.mapper.EnderecoMapper;
import br.com.legalconnect.repository.RepositorioEmpresa;
import lombok.RequiredArgsConstructor;

/**
 * @class ServicoEmpresa
 * @brief Serviço de domínio para gerenciar operações relacionadas a Empresas.
 *        Contém a lógica de negócio para criação, busca, atualização e exclusão
 *        de Empresas.
 */
@Service
@RequiredArgsConstructor
public class ServicoEmpresa {

    private final RepositorioEmpresa repositorioEmpresa;
    private final EmpresaMapper empresaMapper;

    private final EnderecoMapper enderecoMapper;

    /**
     * @brief Cadastra uma nova Empresa no sistema.
     * @param requestDTO DTO com os dados da Empresa a ser cadastrada.
     * @return DTO com os dados da Empresa cadastrada.
     * @throws BusinessException Se o CNPJ já estiver cadastrado.
     */
    @Transactional
    public EmpresaResponseDTO cadastrarEmpresa(EmpresaRequestDTO requestDTO) {
        // 1. Validação de duplicidade de CNPJ
        if (repositorioEmpresa.findByCnpj(requestDTO.getCnpj()).isPresent()) {
            throw new BusinessException(ErrorCode.INVALID_CNPJ, "CNPJ já cadastrado para outra empresa.");
        }

        // 2. Mapear DTO para entidade
        Empresa empresa = empresaMapper.toEntity(requestDTO);

        // 3. Associar endereços à empresa
        Set<Endereco> enderecos = requestDTO.getEnderecos().stream()
                .map(enderecoDTO -> {
                    // Reutiliza o mapper para converter DTO para Endereco
                    Endereco endereco = enderecoMapper.toEntity(enderecoDTO);
                    endereco.setEmpresa(empresa); // Garante a associação bidirecional
                    return endereco;
                })
                .collect(Collectors.toSet());
        empresa.setEnderecos(enderecos);

        // 4. Salvar a entidade
        Empresa savedEmpresa = repositorioEmpresa.save(empresa);

        // 5. Mapear entidade salva para DTO de resposta
        return empresaMapper.toResponseDTO(savedEmpresa);
    }

    /**
     * @brief Busca uma Empresa pelo ID.
     * @param id ID da Empresa a ser buscada.
     * @return DTO com os dados da Empresa encontrada.
     * @throws BusinessException Se a Empresa não for encontrada.
     */
    @Transactional(readOnly = true)
    public EmpresaResponseDTO buscarEmpresaPorId(UUID id) {
        Empresa empresa = repositorioEmpresa.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Empresa com ID " + id + " não encontrada."));
        return empresaMapper.toResponseDTO(empresa);
    }

    /**
     * @brief Lista todas as Empresas com paginação.
     * @param pageable Objeto Pageable para configuração da paginação.
     * @return Página de DTOs de Empresas.
     */
    @Transactional(readOnly = true)
    public Page<EmpresaResponseDTO> listarEmpresas(Pageable pageable) {
        return repositorioEmpresa.findAll(pageable)
                .map(empresaMapper::toResponseDTO);
    }

    /**
     * @brief Atualiza os dados de uma Empresa existente.
     * @param id         ID da Empresa a ser atualizada.
     * @param requestDTO DTO com os dados atualizados da Empresa.
     * @return DTO com os dados da Empresa atualizada.
     * @throws BusinessException Se a Empresa não for encontrada ou se houver
     *                           duplicidade de CNPJ.
     */
    @Transactional
    public EmpresaResponseDTO atualizarEmpresa(UUID id, EmpresaRequestDTO requestDTO) {
        Empresa existingEmpresa = repositorioEmpresa.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Empresa com ID " + id + " não encontrada para atualização."));

        // 1. Validação de duplicidade de CNPJ (se o CNPJ foi alterado)
        if (!existingEmpresa.getCnpj().equals(requestDTO.getCnpj())) {
            if (repositorioEmpresa.findByCnpj(requestDTO.getCnpj()).isPresent()) {
                throw new BusinessException(ErrorCode.INVALID_CNPJ, "Novo CNPJ já cadastrado para outra empresa.");
            }
        }

        // 2. Atualizar campos básicos da Empresa
        existingEmpresa.setNomeFantasia(requestDTO.getNomeFantasia());
        existingEmpresa.setRazaoSocial(requestDTO.getRazaoSocial());
        existingEmpresa.setCnpj(requestDTO.getCnpj());
        existingEmpresa.setEmailContato(requestDTO.getEmailContato());

        // 3. Atualizar endereços (lógica de sincronização)
        existingEmpresa.getEnderecos().clear(); // Limpa os endereços existentes
        requestDTO.getEnderecos().forEach(enderecoDTO -> {
            Endereco newEndereco = enderecoMapper.toEntity(enderecoDTO);
            newEndereco.setEmpresa(existingEmpresa);
            existingEmpresa.getEnderecos().add(newEndereco);
        });

        // 4. Atualizar telefones
        existingEmpresa.getTelefones().clear();
        if (requestDTO.getTelefones() != null) {
            existingEmpresa.getTelefones().addAll(requestDTO.getTelefones());
        }

        // 5. Salvar a entidade atualizada
        Empresa updatedEmpresa = repositorioEmpresa.save(existingEmpresa);

        return empresaMapper.toResponseDTO(updatedEmpresa);
    }

    /**
     * @brief Exclui uma Empresa pelo ID.
     * @param id ID da Empresa a ser excluída.
     * @throws BusinessException Se a Empresa não for encontrada ou se possuir
     *                           profissionais associados.
     */
    @Transactional
    public void excluirEmpresa(UUID id) {
        Empresa empresa = repositorioEmpresa.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Empresa com ID " + id + " não encontrada para exclusão."));

        // Verificar se existem profissionais associados antes de excluir
        if (!empresa.getProfissionais().isEmpty()) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                    "Empresa não pode ser excluída pois possui profissionais associados.");
        }

        // A exclusão em cascata do Endereco será tratada pelo JPA
        repositorioEmpresa.delete(empresa);
    }
}
```
```java
package br.com.legalconnect.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException; // Importa da common-lib
import br.com.legalconnect.common.exception.ErrorCode; // Importa da common-lib
import br.com.legalconnect.dto.EnderecoRequestDTO;
import br.com.legalconnect.dto.EnderecoResponseDTO;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.mapper.EnderecoMapper;
import br.com.legalconnect.repository.RepositorioEndereco;
import lombok.RequiredArgsConstructor;

/**
 * @class ServicoEndereco
 * @brief Serviço de domínio para gerenciar operações relacionadas a Endereços.
 *        Este serviço pode ser usado para operações diretas em Endereços,
 *        embora na maioria dos casos eles sejam gerenciados em cascata por
 *        Pessoa ou Empresa.
 */
@Service
@RequiredArgsConstructor
public class ServicoEndereco {

    private final RepositorioEndereco repositorioEndereco;
    private final EnderecoMapper enderecoMapper;

    /**
     * @brief Cadastra um novo Endereco.
     * @param requestDTO DTO com os dados do Endereco a ser cadastrado.
     * @return DTO com os dados do Endereco cadastrado.
     */
    @Transactional
    public EnderecoResponseDTO cadastrarEndereco(EnderecoRequestDTO requestDTO) {
        Endereco endereco = enderecoMapper.toEntity(requestDTO);
        Endereco savedEndereco = repositorioEndereco.save(endereco);
        return enderecoMapper.toResponseDTO(savedEndereco);
    }

    /**
     * @brief Busca um Endereco pelo ID.
     * @param id ID do Endereco a ser buscado.
     * @return DTO com os dados do Endereco encontrado.
     * @throws BusinessException Se o Endereco não for encontrado.
     */
    @Transactional(readOnly = true)
    public EnderecoResponseDTO buscarEnderecoPorId(UUID id) {
        Endereco endereco = repositorioEndereco.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Endereço com ID " + id + " não encontrado."));
        return enderecoMapper.toResponseDTO(endereco);
    }

    /**
     * @brief Lista todos os Enderecos.
     * @return Lista de DTOs de Enderecos.
     */
    @Transactional(readOnly = true)
    public List<EnderecoResponseDTO> listarEnderecos() {
        return repositorioEndereco.findAll().stream()
                .map(enderecoMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    /**
     * @brief Atualiza os dados de um Endereco existente.
     * @param id         ID do Endereco a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Endereco.
     * @return DTO com os dados do Endereco atualizado.
     * @throws BusinessException Se o Endereco não for encontrado.
     */
    @Transactional
    public EnderecoResponseDTO atualizarEndereco(UUID id, EnderecoRequestDTO requestDTO) {
        Endereco existingEndereco = repositorioEndereco.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Endereço com ID " + id + " não encontrado para atualização."));

        // Atualizar campos básicos do Endereco
        existingEndereco.setLogradouro(requestDTO.getLogradouro());
        existingEndereco.setNumero(requestDTO.getNumero());
        existingEndereco.setComplemento(requestDTO.getComplemento());
        existingEndereco.setBairro(requestDTO.getBairro());
        existingEndereco.setCidade(requestDTO.getCidade());
        existingEndereco.setEstado(requestDTO.getEstado());
        existingEndereco.setCep(requestDTO.getCep());
        existingEndereco.setPais(requestDTO.getPais());
        existingEndereco.setTipoEndereco(requestDTO.getTipoEndereco());

        Endereco updatedEndereco = repositorioEndereco.save(existingEndereco);
        return enderecoMapper.toResponseDTO(updatedEndereco);
    }

    /**
     * @brief Exclui um Endereco pelo ID.
     * @param id ID do Endereco a ser excluído.
     * @throws BusinessException Se o Endereco não for encontrado.
     */
    @Transactional
    public void excluirEndereco(UUID id) {
        if (!repositorioEndereco.existsById(id)) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                    "Endereço com ID " + id + " não encontrado para exclusão.");
        }
        repositorioEndereco.deleteById(id);
    }
}
```
```java
// br/com/legalconnect/service/ServicoPessoa.java
package br.com.legalconnect.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier; // Importar Qualifier
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import br.com.legalconnect.dto.PessoaResponseDTO;
import br.com.legalconnect.entity.Pessoa;
import br.com.legalconnect.mapper.PessoaMapper;
import br.com.legalconnect.repository.RepositorioPessoa;

/**
 * @class ServicoPessoa
 * @brief Serviço de domínio para operações genéricas relacionadas a Pessoas.
 *        Como Pessoa é uma entidade base abstrata, este serviço lida com
 *        operações
 *        que podem ser comuns a todas as subclasses (Profissional, Cliente,
 *        Administrador).
 *        Operações de criação/atualização específicas devem ser tratadas nos
 *        serviços das subclasses.
 */
@Service
public class ServicoPessoa {

    private final RepositorioPessoa repositorioPessoa;
    private final PessoaMapper pessoaMapper;

    @Autowired
    public ServicoPessoa(RepositorioPessoa repositorioPessoa,
            @Qualifier("pessoaMapperImpl") PessoaMapper pessoaMapper) {
        this.repositorioPessoa = repositorioPessoa;
        this.pessoaMapper = pessoaMapper;
    }

    /**
     * @brief Busca uma Pessoa pelo ID.
     * @param id ID da Pessoa a ser buscada.
     * @return DTO com os dados da Pessoa encontrada.
     * @throws BusinessException Se a Pessoa não for encontrada.
     */
    @Transactional(readOnly = true)
    public PessoaResponseDTO buscarPessoaPorId(UUID id) {
        Pessoa pessoa = repositorioPessoa.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Pessoa com ID " + id + " não encontrada."));
        return pessoaMapper.toResponseDTO(pessoa);
    }

    /**
     * @brief Lista todas as Pessoas.
     * @return Lista de DTOs de Pessoas.
     */
    @Transactional(readOnly = true)
    public List<PessoaResponseDTO> listarTodasPessoas() {
        return repositorioPessoa.findAll().stream()
                .map(pessoaMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    /**
     * @brief Exclui uma Pessoa pelo ID.
     * @param id ID da Pessoa a ser excluída.
     * @throws BusinessException Se a Pessoa não for encontrada.
     *                           **Nota:** A exclusão de Pessoa deve ser feita com
     *                           cautela, pois pode
     *                           impactar subclasses (Profissional, Cliente,
     *                           Administrador) e o User associado.
     *                           Idealmente, a exclusão de subclasses deveria ser o
     *                           ponto de entrada.
     */
    @Transactional
    public void excluirPessoa(UUID id) {
        if (!repositorioPessoa.existsById(id)) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                    "Pessoa com ID " + id + " não encontrada para exclusão.");
        }
        repositorioPessoa.deleteById(id);
    }
}

```
```java
package br.com.legalconnect.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException; // Importa da common-lib
import br.com.legalconnect.common.exception.ErrorCode; // Importa da common-lib
import br.com.legalconnect.dto.PlanoResponseDTO;
import br.com.legalconnect.entity.Plano;
import br.com.legalconnect.mapper.ProfissionalMapper; // Reutilizando mapper de profissional para plano
import br.com.legalconnect.repository.RepositorioPlano;
import lombok.RequiredArgsConstructor;

/**
 * @class ServicoPlano
 * @brief Serviço de domínio para gerenciar operações relacionadas a Planos.
 *        **Nota:** Este serviço é um placeholder. Em uma arquitetura de
 *        microsserviços real,
 *        a gestão de planos seria feita em um microsserviço dedicado (ex:
 *        marketplace ou assinatura).
 *        Aqui, ele apenas fornece métodos de busca para que outros serviços
 *        possam referenciar planos.
 */
@Service
@RequiredArgsConstructor
public class ServicoPlano {

    private final RepositorioPlano repositorioPlano;
    private final ProfissionalMapper profissionalMapper;

    /**
     * @brief Busca um Plano pelo ID.
     * @param id ID do Plano a ser buscado.
     * @return DTO com os dados do Plano encontrado.
     * @throws BusinessException Se o Plano não for encontrado.
     */
    @Transactional(readOnly = true)
    public PlanoResponseDTO buscarPlanoPorId(UUID id) {
        Plano plano = repositorioPlano.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Plano com ID " + id + " não encontrado."));
        return profissionalMapper.toPlanoResponseDTO(plano);
    }

    /**
     * @brief Lista todos os Planos disponíveis.
     * @return Lista de DTOs de Planos.
     */
    @Transactional(readOnly = true)
    public List<PlanoResponseDTO> listarTodosPlanos() {
        return repositorioPlano.findAll().stream()
                .map(profissionalMapper::toPlanoResponseDTO)
                .collect(Collectors.toList());
    }

    // Métodos para cadastrar, atualizar e excluir planos não são implementados
    // aqui,
    // pois seriam responsabilidade do microsserviço de marketplace/assinatura.
}
```
```java
package br.com.legalconnect.service;

import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException; // Importa da common-lib
import br.com.legalconnect.common.exception.ErrorCode; // Importa da common-lib
import br.com.legalconnect.dto.ProfissionalRequestDTO;
import br.com.legalconnect.dto.ProfissionalResponseDTO;
import br.com.legalconnect.entity.Empresa;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.entity.Plano;
import br.com.legalconnect.entity.Profissional;
import br.com.legalconnect.entity.User;
import br.com.legalconnect.mapper.EnderecoMapper;
import br.com.legalconnect.mapper.ProfissionalMapper;
import br.com.legalconnect.repository.RepositorioEmpresa;
import br.com.legalconnect.repository.RepositorioPlano;
import br.com.legalconnect.repository.RepositorioProfissional;
import br.com.legalconnect.repository.RepositorioUser;
import lombok.RequiredArgsConstructor;

/**
 * @class ServicoProfissional
 * @brief Serviço de domínio para gerenciar operações relacionadas a
 *        Profissionais.
 *        Contém a lógica de negócio para criação, busca, atualização e exclusão
 *        de Profissionais.
 */
@Service
@RequiredArgsConstructor
public class ServicoProfissional {

    private final RepositorioProfissional repositorioProfissional;
    private final RepositorioUser repositorioUser;
    private final RepositorioPlano repositorioPlano;
    private final RepositorioEmpresa repositorioEmpresa;
    private final ProfissionalMapper profissionalMapper;

    private final EnderecoMapper enderecoMapper;

    /**
     * @brief Cadastra um novo Profissional no sistema.
     * @param requestDTO DTO com os dados do Profissional a ser cadastrado.
     * @return DTO com os dados do Profissional cadastrado.
     * @throws BusinessException Se o CPF ou OAB já estiverem cadastrados, ou se o
     *                           User/Plano/Empresa associado não for encontrado.
     */
    @Transactional
    public ProfissionalResponseDTO cadastrarProfissional(ProfissionalRequestDTO requestDTO) {
        // 1. Verificar pré-requisito: User associado deve existir
        UUID userId = requestDTO.getUsuario().getId(); // Presume que o ID do User vem no DTO
        User user = repositorioUser.findById(userId)
                .orElseThrow(() -> new BusinessException(ErrorCode.USER_NOT_FOUND,
                        "Usuário associado com ID " + userId + " não encontrado."));

        // 2. Validação de duplicidade de CPF e OAB
        if (repositorioProfissional.findByCpf(requestDTO.getCpf()).isPresent()) {
            throw new BusinessException(ErrorCode.INVALID_CPF, "CPF já cadastrado para outro profissional.");
        }
        if (repositorioProfissional.findByNumeroOab(requestDTO.getNumeroOab()).isPresent()) {
            throw new BusinessException(ErrorCode.INVALID_INPUT,
                    "Número da OAB já cadastrado para outro profissional.");
        }

        // 3. Buscar Plano e Empresa (se aplicável)
        Plano plano = repositorioPlano.findById(requestDTO.getPlanoId())
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Plano com ID " + requestDTO.getPlanoId() + " não encontrado."));

        Empresa empresa = null;
        if (requestDTO.getEmpresaId() != null) {
            empresa = repositorioEmpresa.findById(requestDTO.getEmpresaId())
                    .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                            "Empresa com ID " + requestDTO.getEmpresaId() + " não encontrada."));
        }

        // 4. Mapear DTO para entidade
        Profissional profissional = profissionalMapper.toEntity(requestDTO);
        profissional.setUsuario(user); // Associar o User encontrado
        profissional.setPlano(plano); // Associar o Plano encontrado
        profissional.setEmpresa(empresa); // Associar a Empresa (pode ser null)

        // 5. Associar endereços à pessoa (Profissional)
        Set<Endereco> enderecos = requestDTO.getEnderecos().stream()
                .map(enderecoDTO -> {
                    // Reutiliza o mapper para converter DTO para Endereco
                    Endereco endereco = enderecoMapper.toEntity(enderecoDTO);
                    endereco.setPessoa(profissional); // Garante a associação bidirecional
                    return endereco;
                })
                .collect(Collectors.toSet());
        profissional.setEnderecos(enderecos);

        // 6. Salvar a entidade
        Profissional savedProfissional = repositorioProfissional.save(profissional);

        // 7. Mapear entidade salva para DTO de resposta
        return profissionalMapper.toResponseDTO(savedProfissional);
    }

    /**
     * @brief Busca um Profissional pelo ID.
     * @param id ID do Profissional a ser buscado.
     * @return DTO com os dados do Profissional encontrado.
     * @throws BusinessException Se o Profissional não for encontrado.
     */
    @Transactional(readOnly = true)
    public ProfissionalResponseDTO buscarProfissionalPorId(UUID id) {
        Profissional profissional = repositorioProfissional.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Profissional com ID " + id + " não encontrado."));
        return profissionalMapper.toResponseDTO(profissional);
    }

    /**
     * @brief Lista todos os Profissionais com paginação.
     * @param pageable Objeto Pageable para configuração da paginação.
     * @return Página de DTOs de Profissionais.
     */
    @Transactional(readOnly = true)
    public Page<ProfissionalResponseDTO> listarProfissionais(Pageable pageable) {
        return repositorioProfissional.findAll(pageable)
                .map(profissionalMapper::toResponseDTO);
    }

    /**
     * @brief Atualiza os dados de um Profissional existente.
     * @param id         ID do Profissional a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Profissional.
     * @return DTO com os dados do Profissional atualizado.
     * @throws BusinessException Se o Profissional não for encontrado, ou se houver
     *                           duplicidade de CPF/OAB, ou se Plano/Empresa não for
     *                           encontrado.
     */
    @Transactional
    public ProfissionalResponseDTO atualizarProfissional(UUID id, ProfissionalRequestDTO requestDTO) {
        Profissional existingProfissional = repositorioProfissional.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Profissional com ID " + id + " não encontrado para atualização."));

        // 1. Validação de duplicidade de CPF (se o CPF foi alterado)
        if (!existingProfissional.getCpf().equals(requestDTO.getCpf())) {
            if (repositorioProfissional.findByCpf(requestDTO.getCpf()).isPresent()) {
                throw new BusinessException(ErrorCode.INVALID_CPF, "Novo CPF já cadastrado para outro profissional.");
            }
        }
        // 2. Validação de duplicidade de OAB (se a OAB foi alterada)
        if (!existingProfissional.getNumeroOab().equals(requestDTO.getNumeroOab())) {
            if (repositorioProfissional.findByNumeroOab(requestDTO.getNumeroOab()).isPresent()) {
                throw new BusinessException(ErrorCode.INVALID_INPUT,
                        "Novo número da OAB já cadastrado para outro profissional.");
            }
        }

        // 3. Buscar Plano e Empresa (se aplicável)
        Plano plano = repositorioPlano.findById(requestDTO.getPlanoId())
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Plano com ID " + requestDTO.getPlanoId() + " não encontrado."));

        Empresa empresa = null;
        if (requestDTO.getEmpresaId() != null) {
            empresa = repositorioEmpresa.findById(requestDTO.getEmpresaId())
                    .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                            "Empresa com ID " + requestDTO.getEmpresaId() + " não encontrada."));
        }

        // 4. Atualizar campos básicos da Pessoa e Profissional
        existingProfissional.setNomeCompleto(requestDTO.getNomeCompleto());
        existingProfissional.setCpf(requestDTO.getCpf());
        existingProfissional.setDataNascimento(requestDTO.getDataNascimento());
        existingProfissional.setNumeroOab(requestDTO.getNumeroOab());
        existingProfissional.setStatusProfissional(requestDTO.getStatusProfissional());
        existingProfissional.setUsaMarketplace(requestDTO.getUsaMarketplace());
        existingProfissional.setFazParteDePlano(requestDTO.getFazParteDePlano());
        existingProfissional.setPlano(plano);
        existingProfissional.setEmpresa(empresa);

        // 5. Atualizar endereços (lógica de sincronização)
        existingProfissional.getEnderecos().clear(); // Limpa os endereços existentes
        requestDTO.getEnderecos().forEach(enderecoDTO -> {
            Endereco newEndereco = enderecoMapper.toEntity(enderecoDTO);
            newEndereco.setPessoa(existingProfissional);
            existingProfissional.getEnderecos().add(newEndereco);
        });

        // 6. Atualizar telefones
        existingProfissional.getTelefones().clear();
        if (requestDTO.getTelefones() != null) {
            existingProfissional.getTelefones().addAll(requestDTO.getTelefones());
        }

        // 7. Salvar a entidade atualizada
        Profissional updatedProfissional = repositorioProfissional.save(existingProfissional);

        return profissionalMapper.toResponseDTO(updatedProfissional);
    }

    /**
     * @brief Exclui um Profissional pelo ID.
     * @param id ID do Profissional a ser excluído.
     * @throws BusinessException Se o Profissional não for encontrado.
     */
    @Transactional
    public void excluirProfissional(UUID id) {
        if (!repositorioProfissional.existsById(id)) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                    "Profissional com ID " + id + " não encontrado para exclusão.");
        }
        // A exclusão em cascata do Endereco e User (se configurado no mapeamento) será
        // tratada pelo JPA
        repositorioProfissional.deleteById(id);
    }
}
```
```java
package br.com.legalconnect.service;

import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException; // Importa da common-lib
import br.com.legalconnect.common.exception.ErrorCode; // Importa da common-lib
import br.com.legalconnect.dto.UserResponseDTO;
import br.com.legalconnect.entity.User;
import br.com.legalconnect.mapper.UserMapper;
import br.com.legalconnect.repository.RepositorioUser;
import lombok.RequiredArgsConstructor;

/**
 * @class ServicoUser
 * @brief Serviço de domínio para gerenciar operações relacionadas a Users.
 *        **Nota:** Este serviço é primariamente para busca e validação de Users
 *        existentes
 *        para associação com entidades Pessoa (Profissional, Cliente,
 *        Administrador).
 *        A criação e gestão principal de Users é responsabilidade de outro
 *        microsserviço (ex: auth-service).
 */
@Service
@RequiredArgsConstructor
public class ServicoUser {

    private final RepositorioUser repositorioUser;
    private final UserMapper userMapper;

    /**
     * @brief Busca um User pelo ID.
     * @param id ID do User a ser buscado.
     * @return DTO com os dados do User encontrado.
     * @throws BusinessException Se o User não for encontrado.
     */
    @Transactional(readOnly = true)
    public UserResponseDTO buscarUserPorId(UUID id) {
        User user = repositorioUser.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.USER_NOT_FOUND,
                        "Usuário com ID " + id + " não encontrado."));
        return userMapper.toResponseDTO(user);
    }

    /**
     * @brief Lista todos os Users.
     * @return Lista de DTOs de Users.
     */
    @Transactional(readOnly = true)
    public List<UserResponseDTO> listarTodosUsers() {
        return repositorioUser.findAll().stream()
                .map(userMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    /**
     * @brief Verifica se um User existe pelo ID.
     * @param id ID do User a ser verificado.
     * @return true se o User existe, false caso contrário.
     */
    @Transactional(readOnly = true)
    public boolean userExiste(UUID id) {
        return repositorioUser.existsById(id);
    }

    /**
     * @brief Busca um User pelo CPF.
     * @param cpf O CPF do usuário.
     * @return Um Optional contendo o DTO do User, se encontrado.
     */
    @Transactional(readOnly = true)
    public Optional<UserResponseDTO> buscarUserPorCpf(String cpf) {
        return repositorioUser.findByCpf(cpf)
                .map(userMapper::toResponseDTO);
    }
}
```
```java
# src/main/resources/application.properties
# ===================================================================
# Configurações Gerais da Aplicação Spring Boot
# ===================================================================

# Nome da aplicação (usado em logs e monitoramento)
spring.application.name=legalconnect-usuario-service
# Porta em que a aplicação será executada
server.port=8084
# Desabilita o management server caso esteja ativo e conflitando (opcional)
# management.endpoints.web.exposure.include=*

# Habilita o Eureka Client
eureka.client.enabled=true
# URL do servidor Eureka onde o auth-service irá se registrar
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/

# Configurações de instância para garantir identificação única no Eureka
eureka.instance.hostname=localhost
eureka.instance.instance-id=${spring.application.name}:${instanceId:${random.value}}
# Configurações do SpringDoc OpenAPI
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packagesToScan=br.com.legalconnect
springdoc.pathsToMatch=/api/v1/**
# ===================================================================
# Configurações do Banco de Dados PostgreSQL
# ===================================================================

# URL de conexão com o banco de dados PostgreSQL
# O microsserviço de autenticação se conecta ao banco de dados global (public)
spring.datasource.url=jdbc:postgresql://localhost:5432/jusplatform_db

# Nome de usuário do banco de dados
spring.datasource.username=jususer

# Senha do banco de dados
spring.datasource.password=juspassword

# Driver JDBC para PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# Configurações do pool de conexões (HikariCP é o padrão no Spring Boot)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# ===================================================================
# Configurações do JPA e Hibernate
# ===================================================================

# Dialeto do Hibernate para PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Exibir queries SQL no console (para desenvolvimento)
# Desabilita a geração automática de DDL pelo Hibernate na inicialização principal.
# A criação de DDL para os esquemas de tenant será feita programaticamente pelo TenantSchemaService.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
# Removido: spring.jpa.properties.hibernate.default_schema=public
# Esta configuração forçava o Hibernate a usar o schema 'public' para DDL, o que não é desejado para entidades multi-tenant.


# ===================================================================
# Configurações de Segurança (JWT)
# ===================================================================

# Chave secreta para assinar e verificar os JWTs.
# **IMPORTANTE**: Esta chave deve ser longa, complexa e armazenada de forma segura (ex: HashiCorp Vault, variáveis de ambiente).
# Nunca exponha esta chave em um repositório público!
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Tempo de expiração do JWT em milissegundos (ex: 3600000ms = 1 hora)
application.security.jwt.expiration=3600000

# Tempo de expiração do Refresh Token em milissegundos (ex: 7 dias = 604800000ms)
application.security.jwt.refresh-expiration=604800000

# Força do encoder de senha (cost factor para BCrypt, padrão é 10)
# Um valor maior aumenta a segurança, mas também o tempo de hash.
application.security.password-encoder.strength=12

# ===================================================================
# Configurações de Logging (Logback)
# ===================================================================

# Nível de log padrão para a aplicação
logging.level.br.com.legalconnect=INFO
# Nível de log para o Spring Framework
logging.level.org.springframework=WARN

# Nível de log para Hibernate (queries SQL) - Desabilite em produção
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicExtractor=WARN

# Nível de log para o processo de DDL do Hibernate (agora menos relevante com Flyway)
logging.level.org.hibernate.hbm2ddl=WARN

# Nível de log para as conexões JDBC do Hibernate
logging.level.org.hibernate.engine.jdbc.connections=WARN

# Nível de log para o Flyway (muito importante para depurar migrações)
logging.level.org.flywaydb=INFO

# Adicione logs específicos para a configuração do JPA e Multi-Tenancy
logging.level.org.hibernate.jpa=INFO
logging.level.org.springframework.orm.jpa=INFO
logging.level.org.springframework.data.jpa=INFO
logging.level.org.hibernate.engine.jdbc.connections.spi=INFO

# ===================================================================
# Configurações de Multitenancy Específicas do Aplicativo
# ===================================================================

# ID do tenant padrão para usuários que não estão associados a um tenant específico (ex: clientes gerais)
# Este UUID deve corresponder a um registro na tabela tb_tenant no schema global (public).
application.tenant.default-id=00000000-0000-0000-0000-000000000001

# ===================================================================
# Configurações do Spring Boot Actuator
# ===================================================================

# Habilita todos os endpoints do Actuator (para monitoramento)
management.endpoints.web.exposure.include=*
# Define o caminho base para os endpoints do Actuator
management.endpoints.web.base-path=/actuator

# ===================================================================
# Configurações de CORS (Cross-Origin Resource Sharing)
# ===================================================================

# Configuração de CORS global (pode ser mais específica nos controladores)
# Esta configuração é um exemplo e pode ser ajustada conforme a necessidade.
# Em produção, 'allowed-origins' deve ser restrito aos domínios do seu frontend.
# spring.web.cors.allowed-origins=*
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
# spring.web.cors.allowed-headers=*
# spring.web.cors.allow-credentials=false
# spring.web.cors.max-age=3600
# ===================================================================
# Configurações do Flyway
# ===================================================================
spring.flyway.enabled=false
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=1
# ===================================================================
# Configurações de Cache (Exemplo com Caffeine, adicione a dependência se usar)
# ===================================================================

# spring.cache.type=caffeine
# spring.cache.cache-names=users,refreshTokens
# spring.cache.caffeine.spec=expireAfterWrite=60m,maximumSize=500

# ===================================================================
# Propriedades de Aplicação Customizadas
# ===================================================================

# Exemplo de uma propriedade customizada
# app.feature.new-registration-enabled=true

# ===================================================================
# Configurações para Proxy Reverso (Nginx)
# ===================================================================

# Habilita o processamento dos cabeçalhos X-Forwarded-* enviados por proxies.
# Isso garante que a aplicação veja o IP real do cliente, o protocolo original (HTTP/HTTPS)
# e o host original, em vez dos detalhes do proxy (Nginx).
server.forward-headers-strategy=FRAMEWORK
spring.main.allow-bean-definition-overriding=true
# Configuração do Outlook SMTP
spring.mail.username=marcelo.llm@outlook.com
spring.mail.password=qlbzudmmytioxztj
spring.mail.from=marcelo.llm@outlook.com
spring.mail.protocol=smtp

# Propriedades avançadas

spring.mail.host=smtp.office365.com
spring.mail.port=587 
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=15000
spring.mail.properties.mail.smtp.timeout=15000
spring.mail.properties.mail.smtp.writetimeout=15000

# Propriedade para o Thymeleaf (se estiver usando)
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false
# (Opcional, mas útil para debug)
spring.mail.properties.mail.debug=true
app.frontend.url=http://localhost:4200

```
```java
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title th:text="${subject}">Bem-vindo!</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f4f4f4;
        margin: 0;
        padding: 20px;
      }
      .container {
        max-width: 600px;
        margin: 0 auto;
        background: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }
      .header {
        text-align: center;
        padding-bottom: 20px;
        border-bottom: 1px solid #eee;
      }
      .header h1 {
        color: #007bff;
      }
      .content {
        padding: 20px 0;
      }
      .footer {
        text-align: center;
        padding-top: 20px;
        border-top: 1px solid #eee;
        font-size: 0.9em;
        color: #777;
      }
      .button {
        display: inline-block;
        background-color: #007bff;
        color: #ffffff;
        padding: 10px 20px;
        text-decoration: none;
        border-radius: 5px;
        margin-top: 20px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1 th:text="${title}">Olá!</h1>
      </div>
      <div class="content">
        <p>
          Prezado(a) <strong th:text="${userName}">Nome do Usuário</strong>,
        </p>
        <p>
          É com grande prazer que confirmamos seu cadastro em nossa plataforma.
        </p>
        <p>
          Seu e-mail de acesso é:
          <strong th:text="${userEmail}">email@example.com</strong>
        </p>
        <p th:text="${message}">
          Aproveite todas as funcionalidades que oferecemos!
        </p>

        <p style="text-align: center">
          <a
            th:href="${callToActionLink}"
            class="button"
            th:text="${callToActionText}"
            >Acessar Plataforma</a
          >
        </p>
      </div>
      <div class="footer">
        <p>
          Este é um e-mail de notificação automático. Por favor, não responda.
        </p>
        <p>
          &copy; <span th:text="${currentYear}">2025</span> Sua Empresa. Todos
          os direitos reservados.
        </p>
      </div>
    </div>
  </body>
</html>

```
```java
package br.com.legalconnect.auth.auth_service;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class AuthServiceApplicationTests {

	@Test
	void contextLoads() {
	}

}

```
```
```java
package br.com.legalconnect;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;

@EnableDiscoveryClient
@SpringBootApplication(exclude = FlywayAutoConfiguration.class) // Remova o scanBasePackages aqui também, se já está no
                                                                // pacote raiz
@EntityScan(basePackages = {
        // "br.com.legalconnect.entity",
        "br.com.legalconnect.entity",
        "br.com.legalconnect.advogado.domain.modal.entity"
})
// @EnableJpaRepositories(basePackages = {
// "br.com.legalconnect.user.repository",
// "br.com.legalconnect.auth.repository"
// })
// REMOVA COMPLETAMENTE ESTE @ComponentScan, a menos que você tenha um motivo
// muito específico e saiba o que está fazendo
// @ComponentScan(basePackages = { "br.com.legalconnect.auth.service" })
public class LegalUsuarioApplication {

    private static final Logger log = LoggerFactory.getLogger(LegalUsuarioApplication.class);

    public static void main(String[] args) {
        SpringApplication.run(LegalUsuarioApplication.class, args);
        log.info("LegalUsuarioApplication iniciada com sucesso!");
    }
}
```
```java
package br.com.legalconnect.config;

import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class FilterAdvice implements HandlerInterceptor {
    @Override
    public boolean preHandle(HttpServletRequest request,
            HttpServletResponse response,
            Object handler) throws Exception {
        String userIdHeader = request.getHeader("X-Correlaton-ID");

        if (userIdHeader == null || userIdHeader.isEmpty()) {
            throw new BusinessException(ErrorCode.ACCOUNT_LOCKED, "Acesso inválido.");
        }

        return true; // retorne false para interromper a execução
    }
}

```
```java

package br.com.legalconnect.controller;

import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.common.dto.BaseResponse;
import br.com.legalconnect.dto.AdministradorRequestDTO;
import br.com.legalconnect.dto.AdministradorResponseDTO;
import br.com.legalconnect.enums.StatusResponse;
import br.com.legalconnect.service.ServicoAdministrador;
import jakarta.validation.Valid;

/**
 * @class ControladorAdministradorPlataforma
 * @brief Controlador REST para gerenciar operações relacionadas a
 *        Administradores da Plataforma.
 *        Expõe endpoints para CRUD de Administradores.
 */
@RestController
@RequestMapping("/api/v1/usuarios/administradores-plataforma")
public class ControladorAdministradorPlataforma {

        private final ServicoAdministrador servicoAdministrador;

        @Autowired
        public ControladorAdministradorPlataforma(ServicoAdministrador servicoAdministrador) {
                this.servicoAdministrador = servicoAdministrador;
        }

        /**
         * @brief Cadastra um novo Administrador da Plataforma.
         * @param requestDTO DTO com os dados do Administrador a ser cadastrado.
         * @return ResponseEntity com o DTO do Administrador cadastrado e status 201
         *         Created.
         */
        @PostMapping
        public ResponseEntity<BaseResponse<AdministradorResponseDTO>> cadastrarAdministrador(
                        @Valid @RequestBody AdministradorRequestDTO requestDTO) {
                AdministradorResponseDTO responseDTO = servicoAdministrador.cadastrarAdministrador(requestDTO); // Usar
                                                                                                                // o
                                                                                                                // método
                                                                                                                // 'cadastrar'
                // da classe base
                return ResponseEntity.status(HttpStatus.CREATED).body(
                                BaseResponse.<AdministradorResponseDTO>builder()
                                                .message("Administrador cadastrado com sucesso.")
                                                .status(StatusResponse.SUCESSO)
                                                .data(responseDTO)
                                                .build());
        }

        /**
         * @brief Busca um Administrador da Plataforma por ID.
         * @param id ID do Administrador a ser buscado.
         * @return ResponseEntity com o DTO do Administrador encontrado e status 200 OK.
         */
        @GetMapping("/{id}")
        public ResponseEntity<BaseResponse<AdministradorResponseDTO>> buscarAdministradorPorId(@PathVariable UUID id) {
                AdministradorResponseDTO responseDTO = servicoAdministrador.buscarAdministradorPorId(id); // Usar o
                                                                                                          // método
                                                                                                          // 'buscarPorId'
                                                                                                          // da
                // classe base
                return ResponseEntity.ok(
                                BaseResponse.<AdministradorResponseDTO>builder()
                                                .message("Administrador encontrado.")
                                                .status(StatusResponse.SUCESSO)
                                                .data(responseDTO)
                                                .build());
        }

        /**
         * @brief Lista todos os Administradores da Plataforma com paginação.
         * @param pageable Objeto Pageable para configuração da paginação (ex:
         *                 ?page=0&size=10&sort=nomeCompleto,asc).
         * @return ResponseEntity com uma página de DTOs de Administradores e status 200
         *         OK.
         */
        @GetMapping
        public ResponseEntity<BaseResponse<Page<AdministradorResponseDTO>>> listarAdministradores(
                        @PageableDefault(size = 10, page = 0, sort = "nomeCompleto") Pageable pageable) {
                Page<AdministradorResponseDTO> responsePage = servicoAdministrador.listarAdministradores(pageable); // Usar
                                                                                                                    // o
                                                                                                                    // método
                                                                                                                    // 'listar'
                // da classe base
                return ResponseEntity.ok(
                                BaseResponse.<Page<AdministradorResponseDTO>>builder()
                                                .message("Lista de administradores recuperada com sucesso.")
                                                .status(StatusResponse.SUCESSO)
                                                .data(responsePage)
                                                .build());
        }

        /**
         * @brief Atualiza os dados de um Administrador da Plataforma existente.
         * @param id         ID do Administrador a ser atualizado.
         * @param requestDTO DTO com os dados atualizados do Administrador.
         * @return ResponseEntity com o DTO do Administrador atualizado e status 200 OK.
         */
        @PutMapping("/{id}")
        public ResponseEntity<BaseResponse<AdministradorResponseDTO>> atualizarAdministrador(
                        @PathVariable UUID id,
                        @Valid @RequestBody AdministradorRequestDTO requestDTO) {
                AdministradorResponseDTO responseDTO = servicoAdministrador.atualizarAdministrador(id, requestDTO); // Usar
                                                                                                                    // o
                                                                                                                    // método
                // 'atualizar' da classe
                // base
                return ResponseEntity.ok(
                                BaseResponse.<AdministradorResponseDTO>builder()
                                                .message("Administrador atualizado com sucesso.")
                                                .status(StatusResponse.SUCESSO)
                                                .data(responseDTO)
                                                .build());
        }

        /**
         * @brief Exclui um Administrador da Plataforma pelo ID.
         * @param id ID do Administrador a ser excluído.
         * @return ResponseEntity com status 204 No Content.
         */
        @DeleteMapping("/{id}")
        public ResponseEntity<BaseResponse<Void>> excluirAdministrador(@PathVariable UUID id) {
                servicoAdministrador.excluirAdministrador(id); // Usar o método 'excluir' da classe base
                return ResponseEntity.status(HttpStatus.NO_CONTENT).body( // Retorna 204 No Content com um corpo de
                                                                          // sucesso
                                BaseResponse.<Void>builder()
                                                .message("Administrador excluído com sucesso.")
                                                .status(StatusResponse.SUCESSO)
                                                .build());
        }
}

```
```java
package br.com.legalconnect.controller;

import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.common.dto.BaseResponse;
import br.com.legalconnect.dto.ClienteRequestDTO;
import br.com.legalconnect.dto.ClienteResponseDTO;
import br.com.legalconnect.dto.UserRequestDTO;
import br.com.legalconnect.enums.StatusResponse;
import br.com.legalconnect.service.ServicoCliente;
import jakarta.validation.Valid;

/**
 * @class ControladorCliente
 * @brief Controlador REST para gerenciar operações relacionadas a Clientes.
 *        Expõe endpoints para CRUD de Clientes.
 */
@RestController
@RequestMapping("/api/v1/usuarios/clientes")
public class ControladorCliente {

        private final ServicoCliente servicoCliente;

        @Autowired
        public ControladorCliente(ServicoCliente servicoCliente) {
                this.servicoCliente = servicoCliente;
        }

        /**
         * @brief Cadastra um novo Cliente.
         * @param requestDTO DTO com os dados do Cliente a ser cadastrado.
         * @return ResponseEntity com o DTO do Cliente cadastrado e status 201 Created.
         */
        @PostMapping
        public ResponseEntity<BaseResponse<ClienteResponseDTO>> cadastrarCliente(
                        @Valid @RequestBody ClienteRequestDTO requestDTO,
                        @RequestHeader(value = "X-Correlation-Id", required = false) String userId) {
                requestDTO.setUsuario(Optional.ofNullable(requestDTO.getUsuario())
                                .orElseGet(() -> UserRequestDTO.builder().id(UUID.fromString(userId)).build()));

                ClienteResponseDTO responseDTO = servicoCliente.cadastrarCliente(requestDTO); // Chamando o método
                                                                                              // original do
                                                                                              // serviço
                return ResponseEntity.status(HttpStatus.CREATED).body(
                                BaseResponse.<ClienteResponseDTO>builder()
                                                .message("Cliente cadastrado com sucesso.")
                                                .status(StatusResponse.SUCESSO)
                                                .data(responseDTO)
                                                .build());
        }

        /**
         * @brief Busca um Cliente por ID.
         * @param id ID do Cliente a ser buscado.
         * @return ResponseEntity com o DTO do Cliente encontrado e status 200 OK.
         */
        @GetMapping("/{id}")
        public ResponseEntity<BaseResponse<ClienteResponseDTO>> buscarClientePorId(@PathVariable UUID id) {
                ClienteResponseDTO responseDTO = servicoCliente.buscarClientePorId(id); // Chamando o método original do
                                                                                        // serviço
                return ResponseEntity.ok(
                                BaseResponse.<ClienteResponseDTO>builder()
                                                .message("Cliente encontrado.")
                                                .status(StatusResponse.SUCESSO)
                                                .data(responseDTO)
                                                .build());
        }

        /**
         * @brief Lista todos os Clientes com paginação.
         * @param pageable Objeto Pageable para configuração da paginação (ex:
         *                 ?page=0&size=10&sort=nomeCompleto,asc).
         * @return ResponseEntity com uma página de DTOs de Clientes e status 200 OK.
         */
        @GetMapping
        public ResponseEntity<BaseResponse<Page<ClienteResponseDTO>>> listarClientes(
                        @PageableDefault(size = 10, page = 0, sort = "nomeCompleto") Pageable pageable) {
                Page<ClienteResponseDTO> responsePage = servicoCliente.listarClientes(pageable); // Chamando o método
                                                                                                 // original
                                                                                                 // do serviço
                return ResponseEntity.ok(
                                BaseResponse.<Page<ClienteResponseDTO>>builder()
                                                .message("Lista de clientes recuperada com sucesso.")
                                                .status(StatusResponse.SUCESSO)
                                                .data(responsePage)
                                                .build());
        }

        /**
         * @brief Atualiza os dados de um Cliente existente.
         * @param id         ID do Cliente a ser atualizado.
         * @param requestDTO DTO com os dados atualizados do Cliente.
         * @return ResponseEntity com o DTO do Cliente atualizado e status 200 OK.
         */
        @PutMapping("/{id}")
        public ResponseEntity<BaseResponse<ClienteResponseDTO>> atualizarCliente(
                        @PathVariable UUID id,
                        @Valid @RequestBody ClienteRequestDTO requestDTO) {
                ClienteResponseDTO responseDTO = servicoCliente.atualizarCliente(id, requestDTO); // Chamando o método
                                                                                                  // original
                                                                                                  // do serviço
                return ResponseEntity.ok(
                                BaseResponse.<ClienteResponseDTO>builder()
                                                .message("Cliente atualizado com sucesso.")
                                                .status(StatusResponse.SUCESSO)
                                                .data(responseDTO)
                                                .build());
        }

        /**
         * @brief Exclui um Cliente pelo ID.
         * @param id ID do Cliente a ser excluído.
         * @return ResponseEntity com status 204 No Content.
         */
        @DeleteMapping("/{id}")
        public ResponseEntity<BaseResponse<Void>> excluirCliente(@PathVariable UUID id) {
                servicoCliente.excluirCliente(id); // Chamando o método original do serviço
                return ResponseEntity.status(HttpStatus.NO_CONTENT).body(
                                BaseResponse.<Void>builder()
                                                .message("Cliente excluído com sucesso.")
                                                .status(StatusResponse.SUCESSO)
                                                .build());
        }
}

```
```java
package br.com.legalconnect.controller;

import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.legalconnect.common.dto.BaseResponse;
import br.com.legalconnect.dto.EmpresaRequestDTO;
import br.com.legalconnect.dto.EmpresaResponseDTO;
import br.com.legalconnect.enums.StatusResponse;
import br.com.legalconnect.service.ServicoEmpresa;
import jakarta.validation.Valid;

/**
 * @class ControladorEmpresa
 * @brief Controlador REST para gerenciar operações relacionadas a Empresas.
 *        Expõe endpoints para CRUD de Empresas.
 */
@RestController
@RequestMapping("/api/v1/usuarios/empresas")
public class ControladorEmpresa {

        private final ServicoEmpresa servicoEmpresa;

        @Autowired
        public ControladorEmpresa(ServicoEmpresa servicoEmpresa) {
                this.servicoEmpresa = servicoEmpresa;
        }

        /**
         * @brief Cadastra uma nova Empresa.
         * @param requestDTO DTO com os dados da Empresa a ser cadastrada.
         * @return ResponseEntity com o DTO da Empresa cadastrada e status 201 Created.
         */
        @PostMapping
        public ResponseEntity<BaseResponse<EmpresaResponseDTO>> cadastrarEmpresa(
                        @Valid @RequestBody EmpresaRequestDTO requestDTO) {
                EmpresaResponseDTO responseDTO = servicoEmpresa.cadastrarEmpresa(requestDTO); // Chamando o método
                                                                                              // original do
                                                                                              // serviço
                return ResponseEntity.status(HttpStatus.CREATED).body(
                                BaseResponse.<EmpresaResponseDTO>builder()
                                                .message("Empresa cadastrada com sucesso.")
                                                .status(StatusResponse.SUCESSO)
                                                .data(responseDTO)
                                                .build());
        }

        /**
         * @brief Busca uma Empresa por ID.
         * @param id ID da Empresa a ser buscada.
         * @return ResponseEntity com o DTO da Empresa encontrada e status 200 OK.
         */
        @GetMapping("/{id}")
        public ResponseEntity<BaseResponse<EmpresaResponseDTO>> buscarEmpresaPorId(@PathVariable UUID id) {
                EmpresaResponseDTO responseDTO = servicoEmpresa.buscarEmpresaPorId(id); // Chamando o método original do
                                                                                        // serviço
                return ResponseEntity.ok(
                                BaseResponse.<EmpresaResponseDTO>builder()
                                                .message("Empresa encontrada.")
                                                .status(StatusResponse.SUCESSO)
                                                .data(responseDTO)
                                                .build());
        }

        /**
         * @brief Lista todas as Empresas com paginação.
         * @param pageable Objeto Pageable para configuração da paginação (ex:
         *                 ?page=0&size=10&sort=nomeFantasia,asc).
         * @return ResponseEntity com uma página de DTOs de Empresas e status 200 OK.
         */
        @GetMapping
        public ResponseEntity<BaseResponse<Page<EmpresaResponseDTO>>> listarEmpresas(
                        @PageableDefault(size = 10, page = 0, sort = "nomeFantasia") Pageable pageable) {
                Page<EmpresaResponseDTO> responsePage = servicoEmpresa.listarEmpresas(pageable); // Chamando o método
                                                                                                 // original
                                                                                                 // do serviço
                return ResponseEntity.ok(
                                BaseResponse.<Page<EmpresaResponseDTO>>builder()
                                                .message("Lista de empresas recuperada com sucesso.")
                                                .status(StatusResponse.SUCESSO)
                                                .data(responsePage)
                                                .build());
        }

        /**
         * @brief Atualiza os dados de uma Empresa existente.
         * @param id         ID da Empresa a ser atualizada.
         * @param requestDTO DTO com os dados atualizados da Empresa.
         * @return ResponseEntity com o DTO da Empresa atualizada e status 200 OK.
         */
        @PutMapping("/{id}")
        public ResponseEntity<BaseResponse<EmpresaResponseDTO>> atualizarEmpresa(
                        @PathVariable UUID id,
                        @Valid @RequestBody EmpresaRequestDTO requestDTO) {
                EmpresaResponseDTO responseDTO = servicoEmpresa.atualizarEmpresa(id, requestDTO); // Chamando o método
                                                                                                  // original
                                                                                                  // do serviço
                return ResponseEntity.ok(
                                BaseResponse.<EmpresaResponseDTO>builder()
                                                .message("Empresa atualizada com sucesso.")
                                                .status(StatusResponse.SUCESSO)
                                                .data(responseDTO)
                                                .build());
        }

        /**
         * @brief Exclui uma Empresa pelo ID.
         * @param id ID da Empresa a ser excluída.
         * @return ResponseEntity com status 204 No Content.
         */
        @DeleteMapping("/{id}")
        public ResponseEntity<BaseResponse<Void>> excluirEmpresa(@PathVariable UUID id) {
                servicoEmpresa.excluirEmpresa(id); // Chamando o método original do serviço
                return ResponseEntity.status(HttpStatus.NO_CONTENT).body(
                                BaseResponse.<Void>builder()
                                                .message("Empresa excluída com sucesso.")
                                                .status(StatusResponse.SUCESSO)
                                                .build());
        }
}

```
```java
{
  "folders": [
    {
      "path": "../../../../../../.."
    },
    {
      "path": "../../../../../../../../auth-service"
    },
    {
      "path": "../../../../../../../../common-lib"
    },
    {
      "path": "../../../../../../../../infrastructure"
    },
    {
      "path": "../../../../../../../../legalconnect-eureka-server"
    },
    {
      "path": "../../../../../../../../legal-gaateway"
    },
    {
      "path": "../../../../../../../../legal-advogado"
    },
    {
      "path": "../../../../../../../../common-tenent"
    }
  ],
  "settings": {
    "java.configuration.updateBuildConfiguration": "interactive"
  }
}

```
```java
package br.com.legalconnect.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class AdministradorRequestDTO
 * @brief DTO para requisições de criação ou atualização de Administrador.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class AdministradorRequestDTO extends PessoaRequestDTO {
    private String status;
}
```
```java
package br.com.legalconnect.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class AdministradorResponseDTO
 * @brief DTO para respostas de Administrador.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class AdministradorResponseDTO extends PessoaResponseDTO {
    private String status;
}
```
```java
package br.com.legalconnect.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class ClienteRequestDTO
 * @brief DTO para requisições de criação ou atualização de Cliente.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class ClienteRequestDTO extends PessoaRequestDTO {
    private String status;
}
```
```java
package br.com.legalconnect.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class ClienteResponseDTO
 * @brief DTO para respostas de Cliente.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class ClienteResponseDTO extends PessoaResponseDTO {
    private String status;
    private String tipo;
}
```
```java
package br.com.legalconnect.dto;

import java.util.List;
import java.util.Set;
import java.util.UUID;

import jakarta.validation.Valid;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class EmpresaRequestDTO
 * @brief DTO para requisições de criação ou atualização de Empresa.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EmpresaRequestDTO {
    private UUID id; // Para atualizações, pode ser necessário o ID

    @NotBlank(message = "O nome fantasia não pode estar em branco.")
    @Size(max = 255, message = "O nome fantasia deve ter no máximo 255 caracteres.")
    private String nomeFantasia;

    @NotBlank(message = "A razão social não pode estar em branco.")
    @Size(max = 255, message = "A razão social deve ter no máximo 255 caracteres.")
    private String razaoSocial;

    @NotBlank(message = "O CNPJ não pode estar em branco.")
    @Pattern(regexp = "\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}", message = "Formato de CNPJ inválido. Use XX.XXX.XXX/XXXX-XX.")
    private String cnpj;

    @Email(message = "Formato de email de contato inválido.")
    @Size(max = 255, message = "O email de contato deve ter no máximo 255 caracteres.")
    private String emailContato;

    @Valid // Valida a lista de DTOs aninhados
    private List<EnderecoRequestDTO> enderecos;

    private Set<String> telefones; // Lista de números de telefone como strings
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class EmpresaResponseDTO
 * @brief DTO para respostas de Empresa.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EmpresaResponseDTO {
    private UUID id;
    private String nomeFantasia;
    private String razaoSocial;
    private String cnpj;
    private String emailContato;
    private List<EnderecoResponseDTO> enderecos;
    private Set<String> telefones;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
```
```java
package br.com.legalconnect.dto;

import java.util.UUID;

import br.com.legalconnect.entity.Endereco.TipoEndereco;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class EnderecoRequestDTO
 * @brief DTO para requisições de criação ou atualização de Endereco.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EnderecoRequestDTO {
    private UUID id; // Para atualizações, pode ser necessário o ID

    @NotBlank(message = "O logradouro não pode estar em branco.")
    @Size(max = 255, message = "O logradouro deve ter no máximo 255 caracteres.")
    private String logradouro;

    @NotBlank(message = "O número não pode estar em branco.")
    @Size(max = 20, message = "O número deve ter no máximo 20 caracteres.")
    private String numero;

    @Size(max = 255, message = "O complemento deve ter no máximo 255 caracteres.")
    private String complemento;

    @NotBlank(message = "O bairro não pode estar em branco.")
    @Size(max = 100, message = "O bairro deve ter no máximo 100 caracteres.")
    private String bairro;

    @NotBlank(message = "A cidade não pode estar em branco.")
    @Size(max = 100, message = "A cidade deve ter no máximo 100 caracteres.")
    private String cidade;

    @NotBlank(message = "O estado não pode estar em branco.")
    @Size(min = 2, max = 2, message = "O estado deve ter 2 caracteres (UF).")
    private String estado;

    @NotBlank(message = "O CEP não pode estar em branco.")
    @Pattern(regexp = "\\d{5}-\\d{3}", message = "Formato de CEP inválido. Use XXXXX-XXX.")
    private String cep;

    @NotBlank(message = "O país não pode estar em branco.")
    @Size(max = 50, message = "O país deve ter no máximo 50 caracteres.")
    private String pais;

    @NotNull(message = "O tipo de endereço não pode ser nulo.")
    private TipoEndereco tipoEndereco;
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDateTime;
import java.util.UUID;

import br.com.legalconnect.entity.Endereco.TipoEndereco;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class EnderecoResponseDTO
 * @brief DTO para respostas de Endereco.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class EnderecoResponseDTO {
    private UUID id;
    private String logradouro;
    private String numero;
    private String complemento;
    private String bairro;
    private String cidade;
    private String estado;
    private String cep;
    private String pais;
    private TipoEndereco tipoEndereco;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDate;
import java.util.List; // Usar List para Enderecos para manter a ordem se necessário
import java.util.Set;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class PessoaRequestDTO
 * @brief DTO base para requisições de criação ou atualização de Pessoa.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class PessoaRequestDTO {
    // Não incluir o ID aqui, pois ele será definido pela entidade base (BaseEntity)
    // e retornado no ResponseDTO.

    // @NotNull(message = "Os dados do usuário não podem ser nulos.")
    // @Valid // Valida o DTO aninhado
    private UserRequestDTO usuario;

    @NotBlank(message = "O nome completo não pode estar em branco.")
    @Size(max = 255, message = "O nome completo deve ter no máximo 255 caracteres.")
    private String nomeCompleto;

    @NotBlank(message = "O CPF não pode estar em branco.")
    @Pattern(regexp = "\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}", message = "Formato de CPF inválido. Use XXX.XXX.XXX-XX.")
    private String cpf;

    @PastOrPresent(message = "A data de nascimento não pode ser futura.")
    private LocalDate dataNascimento;

    @Valid // Valida a lista de DTOs aninhados
    private List<EnderecoRequestDTO> enderecos; // Usar List para manter a ordem se necessário

    private Set<String> telefones; // Lista de números de telefone como strings
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class PessoaResponseDTO
 * @brief DTO base para respostas de Pessoa.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class PessoaResponseDTO {
    private UUID id;
    private UserResponseDTO usuario;
    private String nomeCompleto;
    private String cpf;
    private LocalDate dataNascimento;
    private List<EnderecoResponseDTO> enderecos;
    private Set<String> telefones;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
```
```java
package br.com.legalconnect.dto;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

import br.com.legalconnect.entity.Plano.VisibilidadeDestaque;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class PlanoResponseDTO
 * @brief DTO para respostas de Plano.
 *        Esta classe é um DTO simplificado para ser usado em outros
 *        microsserviços.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class PlanoResponseDTO {
    private UUID id;
    private String nome;
    private String descricao;
    private BigDecimal precoMensal;
    private BigDecimal precoAnual;
    private Integer limiteServicosAgendaveis;
    private VisibilidadeDestaque visibilidadeDestaque;
    private Boolean acessoRelatoriosAvancados;
    private Boolean permitePedidosOrcamento;
    private Integer periodoTesteDias;
    private Boolean isDefault;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
```
```java
package br.com.legalconnect.dto;

import java.util.UUID;

import br.com.legalconnect.entity.Profissional.StatusProfissional;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class ProfissionalRequestDTO
 * @brief DTO para requisições de criação ou atualização de Profissional.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class ProfissionalRequestDTO extends PessoaRequestDTO {
    @NotBlank(message = "O número da OAB não pode estar em branco.")
    @Size(max = 50, message = "O número da OAB deve ter no máximo 50 caracteres.")
    private String numeroOab;

    @NotNull(message = "O status profissional não pode ser nulo.")
    private StatusProfissional statusProfissional;

    @NotNull(message = "A indicação de uso do marketplace não pode ser nula.")
    private Boolean usaMarketplace;

    @NotNull(message = "A indicação de participação em plano não pode ser nula.")
    private Boolean fazParteDePlano;

    private UUID empresaId; // ID da empresa associada (opcional)

    @NotNull(message = "O ID do plano não pode ser nulo.")
    private UUID planoId; // ID do plano de assinatura
}
```
```java
package br.com.legalconnect.dto;

import br.com.legalconnect.entity.Profissional.StatusProfissional;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**
 * @class ProfissionalResponseDTO
 * @brief DTO para respostas de Profissional.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class ProfissionalResponseDTO extends PessoaResponseDTO {
    private String numeroOab;
    private StatusProfissional statusProfissional;
    private Boolean usaMarketplace;
    private Boolean fazParteDePlano;
    private EmpresaResponseDTO empresa; // DTO da empresa associada (simplificado)
    private PlanoResponseDTO plano; // DTO do plano de assinatura
}
```
```java
package br.com.legalconnect.dto;

import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class UserRequestDTO
 * @brief DTO para requisições de criação ou atualização de User.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserRequestDTO {
    private UUID id;
    // @NotBlank(message = "O email não pode estar em branco.")
    // @Email(message = "Formato de email inválido.")
    private String email;

    // @NotBlank(message = "A senha não pode estar em branco.")
    // @Size(min = 8, message = "A senha deve ter no mínimo 8 caracteres.")
    // private String password;

    // O papel (Role) pode ser definido aqui ou inferido pelo serviço de
    // autenticação/usuário
    // dependendo da lógica de negócio. Para simplificar, pode ser incluído se for
    // um input direto.
    // private String role;
}
```
```java
package br.com.legalconnect.dto;

import java.time.LocalDateTime;
import java.util.UUID;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @class UserResponseDTO
 * @brief DTO para respostas de User.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserResponseDTO {
    private UUID id;
    private String email;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    // private String role; // Incluir se o papel for relevante na resposta
}
```
```java
package br.com.legalconnect.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.PrimaryKeyJoinColumn;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Administrador
 * @brief Entidade que representa um administrador da plataforma.
 *        Estende a entidade Pessoa. Atualmente não possui campos adicionais,
 *        mas pode ser expandido.
 *        Mapeado para a tabela 'tb_administrador' que se junta a 'tb_pessoa'
 *        pela chave primária.
 */
@Entity
@Table(name = "tb_administrador")
@PrimaryKeyJoinColumn(name = "id")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Administrador extends Pessoa {
    private String status;

    // Atualmente, não há campos adicionais específicos para Administrador além dos
    // herdados de Pessoa.
    // Pode ser expandido no futuro com, por exemplo, nível de acesso
    // administrativo, etc.
}
```
```java
package br.com.legalconnect.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.PrimaryKeyJoinColumn;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Cliente
 * @brief Entidade que representa um cliente.
 *        Estende a entidade Pessoa. Atualmente não possui campos adicionais,
 *        mas pode ser expandido.
 *        Mapeado para a tabela 'tb_cliente' que se junta a 'tb_pessoa' pela
 *        chave primária.
 */
@Entity
@Table(name = "tb_cliente")
@PrimaryKeyJoinColumn(name = "id")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Cliente extends Pessoa {
    private String status;
    private String tipo;

    // Atualmente, não há campos adicionais específicos para Cliente além dos
    // herdados de Pessoa.
    // Pode ser expandido no futuro com, por exemplo, histórico de preferências,
    // etc.
}
```
```java
package br.com.legalconnect.entity;

import java.util.HashSet;
import java.util.Set;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.CascadeType;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Empresa
 * @brief Entidade que representa uma empresa que pode contratar planos na
 *        plataforma.
 *        Esta entidade não estende Pessoa, pois representa uma pessoa jurídica.
 *        Mapeada para a tabela 'tb_empresa'.
 */
@Entity
@Table(name = "tb_empresa")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Empresa extends BaseEntity {

    @Column(name = "nome_fantasia", nullable = false, length = 255)
    private String nomeFantasia; // Nome fantasia da empresa

    @Column(name = "razao_social", nullable = false, length = 255)
    private String razaoSocial; // Razão social da empresa

    @Column(name = "cnpj", nullable = false, unique = true, length = 18) // CNPJ com máscara
    private String cnpj; // Número do Cadastro Nacional de Pessoas Jurídicas (CNPJ), único por empresa

    @Column(name = "email_contato", length = 255)
    private String emailContato; // E-mail de contato da empresa

    /**
     * @brief Relacionamento um-para-muitos com a entidade Endereco.
     *        Uma empresa pode ter múltiplos endereços (sede, filiais, etc.).
     *        CascadeType.ALL garante que operações nos Enderecos se propaguem para
     *        Empresa.
     *        mappedBy indica que o relacionamento é gerenciado pelo campo 'empresa'
     *        na entidade Endereco.
     */
    @OneToMany(mappedBy = "empresa", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Endereco> enderecos = new HashSet<>(); // Conjunto de endereços da empresa

    /**
     * @brief Coleção de strings para armazenar múltiplos números de telefone.
     *        Será mapeada para uma tabela separada 'tb_empresa_telefones'.
     */
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_empresa_telefones", joinColumns = @JoinColumn(name = "empresa_id"))
    @Column(name = "numero_telefone", length = 20)
    private Set<String> telefones = new HashSet<>(); // Conjunto de números de telefone da empresa

    @OneToMany(mappedBy = "empresa", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Profissional> profissionais = new HashSet<>();
}
```
```java
package br.com.legalconnect.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Endereco
 * @brief Entidade que representa um endereço detalhado.
 *        Pode ser associada a Pessoas ou Empresas.
 *        Mapeada para a tabela 'tb_endereco'.
 */
@Entity
@Table(name = "tb_endereco")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Endereco extends BaseEntity {

    @Column(name = "logradouro", nullable = false, length = 255)
    private String logradouro; // Nome da rua, avenida, etc.

    @Column(name = "numero", nullable = false, length = 20)
    private String numero; // Número do imóvel

    @Column(name = "complemento", length = 255)
    private String complemento; // Complemento (ex: apto, sala, bloco)

    @Column(name = "bairro", nullable = false, length = 100)
    private String bairro; // Bairro

    @Column(name = "cidade", nullable = false, length = 100)
    private String cidade; // Cidade

    @Column(name = "estado", nullable = false, length = 2)
    private String estado; // Estado (UF)

    @Column(name = "cep", nullable = false, length = 9) // CEP com máscara
    private String cep; // Código de Endereçamento Postal

    @Column(name = "pais", nullable = false, length = 50)
    private String pais = "Brasil"; // País (valor padrão "Brasil")

    @Enumerated(EnumType.STRING)
    @Column(name = "tipo_endereco", nullable = false, length = 50)
    private TipoEndereco tipoEndereco; // Tipo de endereço (ex: RESIDENCIAL, COMERCIAL, ESCRITORIO)

    /**
     * @brief Relacionamento muitos-para-um com a entidade Pessoa (opcional).
     *        Um endereço pode pertencer a uma pessoa.
     *        Somente um dos campos (pessoa ou empresa) deve ser preenchido.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "pessoa_id")
    private Pessoa pessoa;

    /**
     * @brief Relacionamento muitos-para-um com a entidade Empresa (opcional).
     *        Um endereço pode pertencer a uma empresa.
     *        Somente um dos campos (pessoa ou empresa) deve ser preenchido.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "empresa_id")
    private Empresa empresa;

    /**
     * @enum TipoEndereco
     * @brief Enumeração para representar o tipo de endereço.
     */
    public enum TipoEndereco {
        RESIDENCIAL,
        COMERCIAL,
        ESCRITORIO,
        COBRANCA,
        ENTREGA,
        OUTRO
    }
}
```
```java
package br.com.legalconnect.entity;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set; // Usaremos Set para evitar duplicatas e garantir unicidade

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.CascadeType;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.Inheritance;
import jakarta.persistence.InheritanceType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Pessoa
 * @brief Entidade base abstrata para todas as pessoas no sistema (Profissional,
 *        Cliente, Administrador).
 *        Contém dados comuns a todos os tipos de pessoas e um relacionamento
 *        OneToOne com a entidade User.
 *        Utiliza estratégia de herança JOINED para mapear subclasses em tabelas
 *        separadas.
 */
@Entity
@Table(name = "tb_pessoa")
@Inheritance(strategy = InheritanceType.JOINED)
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public abstract class Pessoa extends BaseEntity {

    /**
     * @brief Relacionamento um-para-um com a entidade User.
     *        Este lado é o dono do relacionamento, e a coluna 'user_id' será criada
     *        em 'tb_pessoa'.
     *        O CascadeType.ALL garante que operações no User (como deleção) se
     *        propaguem para Pessoa.
     */
    @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinColumn(name = "user_id", referencedColumnName = "id", nullable = false, unique = true)
    private User usuario; // O usuário associado a esta pessoa

    @Column(name = "nome_completo", nullable = false, length = 255)
    private String nomeCompleto; // Nome completo da pessoa

    @Column(name = "cpf", nullable = false, unique = true, length = 14)
    private String cpf; // Número do Cadastro de Pessoa Física (CPF), único por pessoa

    @Column(name = "data_nascimento")
    private LocalDate dataNascimento; // Data de nascimento da pessoa

    /**
     * @brief Relacionamento um-para-muitos com a entidade Endereco.
     *        Uma pessoa pode ter múltiplos endereços (residencial, comercial,
     *        etc.).
     *        CascadeType.ALL garante que operações nos Enderecos se propaguem para
     *        Pessoa.
     *        mappedBy indica que o relacionamento é gerenciado pelo campo 'pessoa'
     *        na entidade Endereco.
     */
    @OneToMany(mappedBy = "pessoa", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Endereco> enderecos = new HashSet<>(); // Conjunto de endereços da pessoa

    /**
     * @brief Coleção de strings para armazenar múltiplos números de telefone.
     *        Será mapeada para uma tabela separada 'tb_pessoa_telefones'.
     */
    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(name = "tb_pessoa_telefones", joinColumns = @JoinColumn(name = "pessoa_id"))
    @Column(name = "numero_telefone", length = 20)
    private Set<String> telefones = new HashSet<>();
}
```
```java
package br.com.legalconnect.entity;

import java.math.BigDecimal;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Plano
 * @brief Entidade que representa um plano de assinatura oferecido na
 *        plataforma.
 *        Esta classe é um placeholder e deve ser definida em seu próprio
 *        microsserviço (marketplace).
 *        Mapeada para a tabela 'tb_plano'.
 */
@Entity
@Table(name = "tb_plano")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Plano extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 100)
    private String nome; // Nome do plano (ex: Free, Premium)

    @Column(name = "descricao", columnDefinition = "TEXT")
    private String descricao; // Descrição detalhada do plano

    @Column(name = "preco_mensal", nullable = false, precision = 10, scale = 2)
    private BigDecimal precoMensal; // Preço mensal do plano

    @Column(name = "preco_anual", nullable = false, precision = 10, scale = 2)
    private BigDecimal precoAnual; // Preço anual do plano

    @Column(name = "limite_servicos_agendaveis")
    private Integer limiteServicosAgendaveis; // Limite de serviços que podem ser agendados

    @Enumerated(EnumType.STRING)
    @Column(name = "visibilidade_destaque", nullable = false, length = 50)
    private VisibilidadeDestaque visibilidadeDestaque; // Nível de destaque no marketplace

    @Column(name = "acesso_relatorios_avancados", nullable = false)
    private Boolean acessoRelatoriosAvancados; // Indica se o plano dá acesso a relatórios avançados

    @Column(name = "permite_pedidos_orcamento", nullable = false)
    private Boolean permitePedidosOrcamento; // Indica se o plano permite pedidos de orçamento

    @Column(name = "periodo_teste_dias")
    private Integer periodoTesteDias; // Período de teste gratuito em dias

    @Column(name = "is_default", nullable = false)
    private Boolean isDefault; // Indica se é o plano padrão para novos cadastros

    /**
     * @enum VisibilidadeDestaque
     * @brief Enumeração para representar o nível de visibilidade/destaque de um
     *        plano no marketplace.
     */
    public enum VisibilidadeDestaque {
        PADRAO,
        PREMIUM,
        DESTAQUE_MAXIMO
    }
}
```
```java
package br.com.legalconnect.entity;

import java.util.HashSet;
import java.util.Set;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.PrimaryKeyJoinColumn;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Profissional
 * @brief Entidade que representa um profissional do direito.
 *        Estende a entidade Pessoa e adiciona campos específicos de um
 *        profissional.
 *        Mapeado para a tabela 'tb_profissional' que se junta a 'tb_pessoa'
 *        pela chave primária.
 */
@Entity
@Table(name = "tb_profissional")
@PrimaryKeyJoinColumn(name = "id")
@Getter

@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
public class Profissional extends Pessoa {

    @Column(name = "numero_oab", nullable = false, unique = true, length = 50)
    private String numeroOab; // Número de registro na OAB, único por profissional

    @Enumerated(EnumType.STRING)
    @Column(name = "status_profissional", nullable = false, length = 50)
    private StatusProfissional statusProfissional; // Status específico do profissional (ex: ATIVO, LICENCIADO)

    @Column(name = "usa_marketplace", nullable = false)
    private Boolean usaMarketplace = false; // Indica se o profissional deseja aparecer no marketplace

    @Column(name = "faz_parte_de_plano", nullable = false)
    private Boolean fazParteDePlano = false; // Indica se o profissional está associado a um plano pago

    /**
     * @brief Relacionamento muitos-para-um com a entidade Empresa (opcional).
     *        Um profissional pode pertencer a uma empresa.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "empresa_id") // Coluna de chave estrangeira para a empresa
    private Empresa empresa; // A empresa à qual o profissional está associado (se houver)

    /**
     * @brief Relacionamento muitos-para-um com a entidade Plano.
     *        Um profissional está associado a um plano de assinatura.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "plano_id", nullable = false) // Coluna de chave estrangeira para o plano
    private Plano plano; // O plano de assinatura do advogado
    @ManyToMany(fetch = FetchType.EAGER) // Relacionamento muitos-para-muitos com Role
    @JoinTable(name = "tb_user_profissionals_role", // Tabela de junção
            joinColumns = @JoinColumn(name = "profissional_profissionals_id"), // Coluna que referencia User
            inverseJoinColumns = @JoinColumn(name = "role_id") // Coluna que referencia Role
    )
    private Set<RoleProfissional> roleProfissionals = new HashSet<>(); // Papéis/perfil de acesso do usuário

    /**
     * @enum StatusProfissional
     * @brief Enumeração para representar o status específico de um Profissional.
     */
    public enum StatusProfissional {
        ATIVO, // Profissional ativo e em dia
        LICENCIADO, // Profissional com licença temporariamente suspensa
        SUSPENSO, // Profissional suspenso (ex: por infração)
        EM_ANALISE // Profissional aguardando aprovação/verificação
    }
}
```
```java
package br.com.legalconnect.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class Role
 * @brief Entidade para definir os papéis de acesso do usuário no sistema.
 *
 *        Esta tabela de roles agora reside nos schemas de tenant, o que
 *        significa
 *        que cada tenant pode ter seus próprios conjuntos de roles ou roles com
 *        IDs diferentes.
 */
@Entity
@Table(name = "tb_role") // A tabela tb_role agora reside no schema do tenant
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class RoleProfissional extends BaseEntity {

    @Column(name = "nome", nullable = false, unique = true, length = 100)
    private String nome; // Nome descritivo e único do papel (ex: CLIENTE, ADVOGADO)

    @Column(name = "descricao", columnDefinition = "TEXT")
    private String descricao; // Uma descrição detalhada do papel
}
```
```java
package br.com.legalconnect.entity;

import br.com.legalconnect.common.dto.BaseEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.SuperBuilder;

/**
 * @class User
 * @brief Entidade base para todos os usuários (clientes, advogados,
 *        administradores de tenant, etc.).
 *
 *        Esta entidade representa um usuário na plataforma e está associada a
 *        um tenant
 *        específico. A tabela de usuário reside nos schemas de tenant.
 */
@Entity
@Table(name = "tb_user") // A tabela tb_user agora reside no schema do tenant
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@EqualsAndHashCode(callSuper = true)
public class User extends BaseEntity { // Implementa UserDetails

    @Column(name = "nome_completo", nullable = false, length = 255)
    private String nomeCompleto; // Nome completo do usuário

    @Column(name = "email", nullable = false, unique = true, length = 255)
    private String email; // Endereço de e-mail principal do usuário (único por schema de tenant)

    @Column(name = "cpf", nullable = false, unique = true, length = 14)
    private String cpf; // Número do Cadastro de Pessoa Física do usuário (único por schema de tenant)

    @Column(name = "telefone", length = 20)
    private String telefone; // Número de telefone de contato do usuário

    @Column(name = "senha_hash", nullable = false, columnDefinition = "TEXT")
    private String senhaHash; // Representação criptografada (hashed) da senha do usuário

    @Column(name = "foto_url", columnDefinition = "TEXT")
    private String fotoUrl; // URL da foto de perfil do usuário no S3

    /**
     * @enum UserType
     * @brief Enumeração para categorizar o tipo principal de um usuário.
     *        Define se o usuário é um cliente, advogado ou administrador da
     *        plataforma.
     */
    public enum UserType {
        CLIENTE, // Usuário final que busca serviços jurídicos
        ADVOGADO, // Profissional do direito que oferece serviços
        PLATAFORMA_ADMIN, // Administrador da plataforma com privilégios totais
        SOCIO
    }

    /**
     * @enum UserStatus
     * @brief Enumeração para representar o status atual da conta de um usuário.
     *        Define o estado operacional da conta do usuário na plataforma.
     */
    public enum UserStatus {
        ACTIVE, INACTIVE, PENDING_APPROVAL, REJECTED, PENDING
    }

    // --- Implementação de UserDetails ---

}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.AdministradorRequestDTO;
import br.com.legalconnect.dto.AdministradorResponseDTO;
import br.com.legalconnect.entity.Administrador;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

/**
 * @interface AdministradorMapper
 * @brief Mapper MapStruct para conversão entre Administrador e seus DTOs.
 */
@Mapper(componentModel = "spring", uses = {PessoaMapper.class, EnderecoMapper.class, UserMapper.class})
public interface AdministradorMapper extends PessoaMapper {

    AdministradorMapper INSTANCE = Mappers.getMapper(AdministradorMapper.class);

    /**
     * @brief Mapeia um AdministradorRequestDTO para uma entidade Administrador.
     * @param dto O DTO de requisição do administrador.
     * @return A entidade Administrador.
     */
    Administrador toEntity(AdministradorRequestDTO dto);

    /**
     * @brief Mapeia uma entidade Administrador para um AdministradorResponseDTO.
     * @param entity A entidade Administrador.
     * @return O DTO de resposta do administrador.
     */
    @Mapping(source = "status", target = "status")
    AdministradorResponseDTO toResponseDTO(Administrador entity);
}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.ClienteRequestDTO;
import br.com.legalconnect.dto.ClienteResponseDTO;
import br.com.legalconnect.entity.Cliente;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

/**
 * @interface ClienteMapper
 * @brief Mapper MapStruct para conversão entre Cliente e seus DTOs.
 */
@Mapper(componentModel = "spring", uses = {PessoaMapper.class, EnderecoMapper.class, UserMapper.class})
public interface ClienteMapper extends PessoaMapper {

    ClienteMapper INSTANCE = Mappers.getMapper(ClienteMapper.class);

    /**
     * @brief Mapeia um ClienteRequestDTO para uma entidade Cliente.
     * @param dto O DTO de requisição do cliente.
     * @return A entidade Cliente.
     */
    Cliente toEntity(ClienteRequestDTO dto);

    /**
     * @brief Mapeia uma entidade Cliente para um ClienteResponseDTO.
     * @param entity A entidade Cliente.
     * @return O DTO de resposta do cliente.
     */
    @Mapping(source = "status", target = "status")
    @Mapping(target = "tipo", ignore = true) // O campo 'tipo' não existe na entidade Cliente, apenas no DTO de resposta
    ClienteResponseDTO toResponseDTO(Cliente entity);
}
```
```java
package br.com.legalconnect.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.dto.EmpresaRequestDTO;
import br.com.legalconnect.dto.EmpresaResponseDTO;
import br.com.legalconnect.entity.Empresa;

/**
 * @interface EmpresaMapper
 * @brief Mapper MapStruct para conversão entre Empresa e seus DTOs.
 */
@Mapper(componentModel = "spring", uses = { EnderecoMapper.class })
public interface EmpresaMapper {

    EmpresaMapper INSTANCE = Mappers.getMapper(EmpresaMapper.class);

    /**
     * @brief Converte um EmpresaRequestDTO para uma entidade Empresa.
     * @param dto O DTO de requisição da empresa.
     * @return A entidade Empresa.
     */
    @Mapping(target = "id", ignore = true) // ID é gerado, não vem do DTO de requisição
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(source = "enderecos", target = "enderecos")
    @Mapping(source = "telefones", target = "telefones")
    Empresa toEntity(EmpresaRequestDTO dto);

    /**
     * @brief Converte uma entidade Empresa para um EmpresaResponseDTO.
     * @param entity A entidade Empresa.
     * @return O DTO de resposta da empresa.
     */
    @Mapping(source = "enderecos", target = "enderecos")
    @Mapping(source = "telefones", target = "telefones")
    EmpresaResponseDTO toResponseDTO(Empresa entity);
}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.EnderecoRequestDTO;
import br.com.legalconnect.dto.EnderecoResponseDTO;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.entity.Endereco.TipoEndereco; // Importa o enum correto
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import java.util.List;
import java.util.Set;

/**
 * @interface EnderecoMapper
 * @brief Mapper MapStruct para conversão entre Endereco e seus DTOs.
 */
@Mapper(componentModel = "spring")
public interface EnderecoMapper {

    EnderecoMapper INSTANCE = Mappers.getMapper(EnderecoMapper.class);

    /**
     * @brief Converte um EnderecoRequestDTO para uma entidade Endereco.
     * @param dto O DTO de requisição do endereço.
     * @return A entidade Endereco.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(target = "pessoa", ignore = true) // Será setado no serviço
    @Mapping(target = "empresa", ignore = true) // Será setado no serviço
    Endereco toEntity(EnderecoRequestDTO dto);

    /**
     * @brief Converte uma entidade Endereco para um EnderecoResponseDTO.
     * @param entity A entidade Endereco.
     * @return O DTO de resposta do endereço.
     */
    EnderecoResponseDTO toResponseDTO(Endereco entity);

    /**
     * @brief Converte uma lista de EnderecoRequestDTOs para um Set de entidades Endereco.
     * @param dtoList A lista de DTOs de requisição de endereços.
     * @return Um Set de entidades Endereco.
     */
    Set<Endereco> toEntitySet(List<EnderecoRequestDTO> dtoList);

    /**
     * @brief Converte um Set de entidades Endereco para uma lista de EnderecoResponseDTOs.
     * @param entitySet Um Set de entidades Endereco.
     * @return Uma lista de DTOs de resposta de endereços.
     */
    List<EnderecoResponseDTO> toResponseDTOList(Set<Endereco> entitySet);
}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.PessoaResponseDTO;
import br.com.legalconnect.entity.Pessoa;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.InheritInverseConfiguration; // Importar se for usar @InheritInverseConfiguration
import org.mapstruct.factory.Mappers;

/**
 * @interface PessoaMapper
 * @brief Mapper MapStruct para conversão entre Pessoa e seus DTOs.
 * Esta é uma interface base para ser estendida por mappers de subclasses de Pessoa.
 */
@Mapper(componentModel = "spring", uses = {UserMapper.class, EnderecoMapper.class})
public interface PessoaMapper {

    PessoaMapper INSTANCE = Mappers.getMapper(PessoaMapper.class);

    /**
     * @brief Mapeia uma entidade Pessoa para um PessoaResponseDTO.
     * @param entity A entidade Pessoa.
     * @return O DTO de resposta da pessoa.
     */
    @Mapping(source = "usuario", target = "usuario")
    @Mapping(source = "enderecos", target = "enderecos")
    @Mapping(source = "telefones", target = "telefones")
    PessoaResponseDTO toResponseDTO(Pessoa entity);
}
```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.PlanoResponseDTO;
import br.com.legalconnect.entity.Plano; // Importar Plano da entidade
import br.com.legalconnect.dto.EmpresaResponseDTO; // Importar EmpresaResponseDTO
import br.com.legalconnect.dto.ProfissionalRequestDTO;
import br.com.legalconnect.dto.ProfissionalResponseDTO;
import br.com.legalconnect.entity.Empresa; // Importar Empresa da entidade
import br.com.legalconnect.entity.Profissional;
import br.com.legalconnect.entity.Profissional.StatusProfissional; // Importar o enum correto
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

/**
 * @interface ProfissionalMapper
 * @brief Mapper MapStruct para conversão entre Profissional e seus DTOs.
 */
@Mapper(componentModel = "spring", uses = {PessoaMapper.class, EnderecoMapper.class, UserMapper.class, EmpresaMapper.class})
public interface ProfissionalMapper extends PessoaMapper {

    ProfissionalMapper INSTANCE = Mappers.getMapper(ProfissionalMapper.class);

    /**
     * @brief Mapeia um ProfissionalRequestDTO para uma entidade Profissional.
     * @param dto O DTO de requisição do profissional.
     * @return A entidade Profissional.
     */
    @Mapping(target = "empresa", ignore = true) // Empresa será setada no serviço
    @Mapping(target = "plano", ignore = true)   // Plano será setado no serviço
    @Mapping(target = "roleProfissionals", ignore = true) // Não presente no DTO
    Profissional toEntity(ProfissionalRequestDTO dto);

    /**
     * @brief Mapeia uma entidade Profissional para um ProfissionalResponseDTO.
     * @param entity A entidade Profissional.
     * @return O DTO de resposta do profissional.
     */
    @Mapping(source = "empresa", target = "empresa")
    @Mapping(source = "plano", target = "plano")
    ProfissionalResponseDTO toResponseDTO(Profissional entity);

    /**
     * @brief Mapeia uma entidade Plano para um PlanoResponseDTO.
     * @param plano A entidade Plano.
     * @return O DTO de resposta do Plano.
     */
    PlanoResponseDTO toPlanoResponseDTO(Plano plano);
}
```
```java
package br.com.legalconnect.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import br.com.legalconnect.dto.UserRequestDTO;
import br.com.legalconnect.dto.UserResponseDTO;
import br.com.legalconnect.entity.User;

/**
 * @interface UserMapper
 * @brief Mapper MapStruct para conversão entre User e seus DTOs.
 */
@Mapper(componentModel = "spring") // Integração com Spring para injeção de dependência
public interface UserMapper {

    UserMapper INSTANCE = Mappers.getMapper(UserMapper.class);

    /**
     * @brief Converte um UserRequestDTO para uma entidade User.
     *        Ignora campos da entidade User que não estão presentes no
     *        UserRequestDTO.
     * @param dto O DTO de requisição do usuário.
     * @return A entidade User.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(target = "nomeCompleto", ignore = true) // Não presente no DTO de requisição
    @Mapping(target = "cpf", ignore = true) // Não presente no DTO de requisição
    @Mapping(target = "telefone", ignore = true) // Não presente no DTO de requisição
    // @Mapping(target = "senhaHash", source = "password") // Mapeia password do DTO
    // para senhaHash da entidade
    @Mapping(target = "fotoUrl", ignore = true) // Não presente no DTO de requisição
    User toEntity(UserRequestDTO dto);

    /**
     * @brief Converte uma entidade User para um UserResponseDTO.
     *        Ignora campos da entidade User que não estão presentes no
     *        UserResponseDTO.
     * @param entity A entidade User.
     * @return O DTO de resposta do usuário.
     */
    @Mapping(target = "email", source = "email")
    UserResponseDTO toResponseDTO(User entity);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Administrador;

/**
 * @interface RepositorioAdministrador
 * @brief Repositório Spring Data JPA para a entidade Administrador.
 *        Fornece métodos CRUD e de busca personalizados para Administrador.
 */
@Repository
public interface RepositorioAdministrador extends JpaRepository<Administrador, UUID> {

    /**
     * @brief Busca um Administrador pelo CPF.
     * @param cpf O CPF do administrador.
     * @return Um Optional contendo o Administrador, se encontrado.
     */
    Optional<Administrador> findByCpf(String cpf);

    /**
     * @brief Lista todos os Administradores com paginação.
     * @param pageable Objeto Pageable para configuração de paginação.
     * @return Uma página de Administradores.
     */
    Page<Administrador> findAll(Pageable pageable);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Cliente;

/**
 * @interface RepositorioCliente
 * @brief Repositório Spring Data JPA para a entidade Cliente.
 *        Fornece métodos CRUD e de busca personalizados para Cliente.
 */
@Repository
public interface RepositorioCliente extends JpaRepository<Cliente, UUID> {

    /**
     * @brief Busca um Cliente pelo CPF.
     * @param cpf O CPF do cliente.
     * @return Um Optional contendo o Cliente, se encontrado.
     */
    Optional<Cliente> findByCpf(String cpf);

    /**
     * @brief Lista todos os Clientes com paginação.
     * @param pageable Objeto Pageable para configuração de paginação.
     * @return Uma página de Clientes.
     */
    Page<Cliente> findAll(Pageable pageable);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Empresa;

/**
 * @interface RepositorioEmpresa
 * @brief Repositório Spring Data JPA para a entidade Empresa.
 *        Fornece métodos CRUD e de busca personalizados para Empresa.
 */
@Repository
public interface RepositorioEmpresa extends JpaRepository<Empresa, UUID> {

    /**
     * @brief Busca uma Empresa pelo CNPJ.
     * @param cnpj O CNPJ da empresa.
     * @return Um Optional contendo a Empresa, se encontrada.
     */
    Optional<Empresa> findByCnpj(String cnpj);

    /**
     * @brief Lista todas as Empresas com paginação.
     * @param pageable Objeto Pageable para configuração de paginação.
     * @return Uma página de Empresas.
     */
    Page<Empresa> findAll(Pageable pageable);
}
```
```java
package br.com.legalconnect.repository;

import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Endereco;

/**
 * @interface RepositorioEndereco
 * @brief Repositório Spring Data JPA para a entidade Endereco.
 *        Fornece métodos CRUD básicos para Endereco.
 */
@Repository
public interface RepositorioEndereco extends JpaRepository<Endereco, UUID> {
    // Métodos de busca adicionais podem ser definidos aqui se necessário,
    // como findByPessoaId(UUID pessoaId) ou findByEmpresaId(UUID empresaId)
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Pessoa;

/**
 * @interface RepositorioPessoa
 * @brief Repositório Spring Data JPA para a entidade Pessoa (base).
 * Fornece métodos CRUD básicos para Pessoa e busca por CPF.
 * Como Pessoa é uma entidade base abstrata com estratégia JOINED, este
 * repositório
 * pode ser usado para operações polimórficas se necessário, mas
 * geralmente
 * repositórios específicos para subclasses (Profissional, Cliente,
 * Administrador)
 * são mais comuns para operações de negócio.
 */
@Repository
public interface RepositorioPessoa extends JpaRepository<Pessoa, UUID> {

    /**
     * @brief Busca uma Pessoa pelo CPF.
     * @param cpf O CPF da pessoa.
     * @return Um Optional contendo a Pessoa, se encontrada.
     */
    Optional<Pessoa> findByCpf(String cpf);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.Plano;

/**
 * @interface RepositorioPlano
 * @brief Repositório Spring Data JPA para a entidade Plano.
 *        Fornece métodos CRUD e de busca personalizados para Plano.
 *        **Nota:** Em uma arquitetura de microsserviços ideal, esta entidade e
 *        seu
 *        repositório poderiam residir em um serviço de 'marketplace' ou
 *        'assinatura'.
 *        Aqui, é mantido para fins de completude do modelo de dados do
 *        user-service,
 *        mas a gestão real dos planos pode ser externa.
 */
@Repository
public interface RepositorioPlano extends JpaRepository<Plano, UUID> {

    /**
     * @brief Busca um Plano pelo nome.
     * @param nome O nome do plano.
     * @return Um Optional contendo o Plano, se encontrado.
     */
    Optional<Plano> findByNome(String nome);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.RoleProfissional;

/**
 * @interface RepositorioRoleProfissional
 * @brief Repositório Spring Data JPA para a entidade RoleProfissional.
 *        Fornece métodos CRUD e de busca personalizados para RoleProfissional.
 *        **Nota:** Em um ambiente multi-tenant, os papéis podem ser globais ou
 *        por tenant.
 *        Este repositório assume que a entidade RoleProfissional está no schema
 *        do tenant.
 */
@Repository
public interface RepositorioRoleProfissional extends JpaRepository<RoleProfissional, UUID> {

    /**
     * @brief Busca um RoleProfissional pelo nome.
     * @param nome O nome do papel.
     * @return Um Optional contendo o RoleProfissional, se encontrado.
     */
    Optional<RoleProfissional> findByNome(String nome);
}
```
```java
package br.com.legalconnect.repository;

import java.util.Optional;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.com.legalconnect.entity.User;

/**
 * @interface RepositorioUser
 * @brief Repositório Spring Data JPA para a entidade User.
 *        Fornece métodos CRUD e de busca personalizados para User.
 *        **Nota:** Este repositório é crucial para o pré-requisito de
 *        associação de Pessoa a um User existente.
 *        As operações de criação/atualização de User em si são de
 *        responsabilidade de outro microsserviço (ex: auth-service).
 */
@Repository
public interface RepositorioUser extends JpaRepository<User, UUID> {

    /**
     * @brief Busca um User pelo email.
     * @param email O email do usuário.
     * @return Um Optional contendo o User, se encontrado.
     */
    Optional<User> findByEmail(String email);

    /**
     * @brief Busca um User pelo CPF.
     * @param cpf O CPF do usuário.
     * @return Um Optional contendo o User, se encontrado.
     */
    Optional<User> findByCpf(String cpf);
}
```
```java
package br.com.legalconnect.service;

import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException; // Importa da common-lib
import br.com.legalconnect.common.exception.ErrorCode; // Importa da common-lib
import br.com.legalconnect.dto.AdministradorRequestDTO;
import br.com.legalconnect.dto.AdministradorResponseDTO;
import br.com.legalconnect.entity.Administrador;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.entity.User;
import br.com.legalconnect.mapper.AdministradorMapper;
import br.com.legalconnect.mapper.EnderecoMapper;
import br.com.legalconnect.repository.RepositorioAdministrador;
import br.com.legalconnect.repository.RepositorioUser;
import lombok.RequiredArgsConstructor;

/**
 * @class ServicoAdministrador
 * @brief Serviço de domínio para gerenciar operações relacionadas a
 *        Administradores.
 *        Contém a lógica de negócio para criação, busca, atualização e exclusão
 *        de Administradores.
 */
@Service
@RequiredArgsConstructor
public class ServicoAdministrador {

    private final RepositorioAdministrador repositorioAdministrador;
    private final RepositorioUser repositorioUser;
    private final AdministradorMapper administradorMapper;
    private final EnderecoMapper enderecoMapper;

    /**
     * @brief Cadastra um novo Administrador no sistema.
     * @param requestDTO DTO com os dados do Administrador a ser cadastrado.
     * @return DTO com os dados do Administrador cadastrado.
     * @throws BusinessException Se o CPF já estiver cadastrado ou o User associado
     *                           não for encontrado.
     */
    @Transactional
    public AdministradorResponseDTO cadastrarAdministrador(AdministradorRequestDTO requestDTO) {
        // 1. Verificar pré-requisito: User associado deve existir
        UUID userId = requestDTO.getUsuario().getId(); // Presume que o ID do User vem no DTO
        User user = repositorioUser.findById(userId)
                .orElseThrow(() -> new BusinessException(ErrorCode.USER_NOT_FOUND,
                        "Usuário associado com ID " + userId + " não encontrado."));

        // 2. Validação de duplicidade de CPF
        if (repositorioAdministrador.findByCpf(requestDTO.getCpf()).isPresent()) {
            throw new BusinessException(ErrorCode.INVALID_CPF, "CPF já cadastrado para outro administrador.");
        }

        // 3. Mapear DTO para entidade
        Administrador administrador = administradorMapper.toEntity(requestDTO);
        administrador.setUsuario(user); // Associar o User encontrado

        // 4. Associar endereços à pessoa (Administrador)
        Set<Endereco> enderecos = requestDTO.getEnderecos().stream()
                .map(enderecoDTO -> {
                    Endereco endereco = enderecoMapper.toEntity(enderecoDTO);
                    endereco.setPessoa(administrador); // Garante a associação bidirecional
                    return endereco;
                })
                .collect(Collectors.toSet());
        administrador.setEnderecos(enderecos);

        // 5. Salvar a entidade
        Administrador savedAdministrador = repositorioAdministrador.save(administrador);

        // 6. Mapear entidade salva para DTO de resposta
        return administradorMapper.toResponseDTO(savedAdministrador);
    }

    /**
     * @brief Busca um Administrador pelo ID.
     * @param id ID do Administrador a ser buscado.
     * @return DTO com os dados do Administrador encontrado.
     * @throws BusinessException Se o Administrador não for encontrado.
     */
    @Transactional(readOnly = true)
    public AdministradorResponseDTO buscarAdministradorPorId(UUID id) {
        Administrador administrador = repositorioAdministrador.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Administrador com ID " + id + " não encontrado."));
        return administradorMapper.toResponseDTO(administrador);
    }

    /**
     * @brief Lista todos os Administradores com paginação.
     * @param pageable Objeto Pageable para configuração da paginação.
     * @return Página de DTOs de Administradores.
     */
    @Transactional(readOnly = true)
    public Page<AdministradorResponseDTO> listarAdministradores(Pageable pageable) {
        return repositorioAdministrador.findAll(pageable)
                .map(administradorMapper::toResponseDTO);
    }

    /**
     * @brief Atualiza os dados de um Administrador existente.
     * @param id         ID do Administrador a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Administrador.
     * @return DTO com os dados do Administrador atualizado.
     * @throws BusinessException Se o Administrador não for encontrado ou se houver
     *                           duplicidade de CPF.
     */
    @Transactional
    public AdministradorResponseDTO atualizarAdministrador(UUID id, AdministradorRequestDTO requestDTO) {
        Administrador existingAdministrador = repositorioAdministrador.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Administrador com ID " + id + " não encontrado para atualização."));

        // 1. Validação de duplicidade de CPF (se o CPF foi alterado)
        if (!existingAdministrador.getCpf().equals(requestDTO.getCpf())) {
            if (repositorioAdministrador.findByCpf(requestDTO.getCpf()).isPresent()) {
                throw new BusinessException(ErrorCode.INVALID_CPF, "Novo CPF já cadastrado para outro administrador.");
            }
        }

        // 2. Atualizar campos básicos da Pessoa e Administrador
        // O mapper precisa de um método de atualização, ou fazer manualmente
        existingAdministrador.setNomeCompleto(requestDTO.getNomeCompleto());
        existingAdministrador.setCpf(requestDTO.getCpf());
        existingAdministrador.setDataNascimento(requestDTO.getDataNascimento());
        existingAdministrador.setStatus(requestDTO.getStatus()); // Campo específico de Administrador

        // 3. Atualizar endereços (lógica de sincronização)
        existingAdministrador.getEnderecos().clear(); // Limpa os endereços existentes
        requestDTO.getEnderecos().forEach(enderecoDTO -> {
            // Reutiliza o mapper para converter DTO para Endereco
            Endereco newEndereco = enderecoMapper.toEntity(enderecoDTO);
            newEndereco.setPessoa(existingAdministrador); // Garante a associação bidirecional
            existingAdministrador.getEnderecos().add(newEndereco);
        });

        // 4. Atualizar telefones
        existingAdministrador.getTelefones().clear();
        if (requestDTO.getTelefones() != null) {
            existingAdministrador.getTelefones().addAll(requestDTO.getTelefones());
        }

        // 5. Salvar a entidade atualizada
        Administrador updatedAdministrador = repositorioAdministrador.save(existingAdministrador);

        return administradorMapper.toResponseDTO(updatedAdministrador);
    }

    /**
     * @brief Exclui um Administrador pelo ID.
     * @param id ID do Administrador a ser excluído.
     * @throws BusinessException Se o Administrador não for encontrado.
     */
    @Transactional
    public void excluirAdministrador(UUID id) {
        if (!repositorioAdministrador.existsById(id)) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                    "Administrador com ID " + id + " não encontrado para exclusão.");
        }
        // A exclusão em cascata do Endereco e User (se configurado no mapeamento) será
        // tratada pelo JPA
        repositorioAdministrador.deleteById(id);
    }
}
```
```java
package br.com.legalconnect.service;

import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException; // Importa da common-lib
import br.com.legalconnect.common.exception.ErrorCode; // Importa da common-lib
import br.com.legalconnect.dto.ClienteRequestDTO;
import br.com.legalconnect.dto.ClienteResponseDTO;
import br.com.legalconnect.entity.Cliente;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.entity.User;
import br.com.legalconnect.mapper.ClienteMapper;
import br.com.legalconnect.mapper.EnderecoMapper;
import br.com.legalconnect.repository.RepositorioCliente;
import br.com.legalconnect.repository.RepositorioUser;
import lombok.RequiredArgsConstructor;

/**
 * @class ServicoCliente
 * @brief Serviço de domínio para gerenciar operações relacionadas a Clientes.
 *        Contém a lógica de negócio para criação, busca, atualização e exclusão
 *        de Clientes.
 */
@Service
@RequiredArgsConstructor
public class ServicoCliente {

    private final RepositorioCliente repositorioCliente;
    private final RepositorioUser repositorioUser;
    private final ClienteMapper clienteMapper;
    private final EnderecoMapper enderecoMapper;

    /**
     * @brief Cadastra um novo Cliente no sistema.
     * @param requestDTO DTO com os dados do Cliente a ser cadastrado.
     * @return DTO com os dados do Cliente cadastrado.
     * @throws BusinessException Se o CPF já estiver cadastrado ou o User associado
     *                           não for encontrado.
     */
    @Transactional
    public ClienteResponseDTO cadastrarCliente(ClienteRequestDTO requestDTO) {
        // 1. Verificar pré-requisito: User associado deve existir
        UUID userId = requestDTO.getUsuario().getId(); // Presume que o ID do User vem no DTO
        User user = repositorioUser.findById(userId)
                .orElseThrow(() -> new BusinessException(ErrorCode.USER_NOT_FOUND,
                        "Usuário associado com ID " + userId + " não encontrado."));

        // 2. Validação de duplicidade de CPF

        if (repositorioCliente.findByCpf(requestDTO.getCpf()).isPresent()) {
            throw new BusinessException(ErrorCode.INVALID_CPF, "CPF já cadastrado para outro cliente.");
        }

        // 3. Mapear DTO para entidade
        Cliente cliente = clienteMapper.toEntity(requestDTO);
        cliente.setUsuario(user); // Associar o User encontrado

        // 4. Associar endereços à pessoa (Cliente)
        Set<Endereco> enderecos = requestDTO.getEnderecos().stream()
                .map(enderecoDTO -> {
                    Endereco endereco = enderecoMapper.toEntity(enderecoDTO);
                    endereco.setPessoa(cliente); // Garante a associação bidirecional
                    return endereco;
                })
                .collect(Collectors.toSet());
        cliente.setEnderecos(enderecos);

        // 5. Salvar a entidade
        Cliente savedCliente = repositorioCliente.save(cliente);

        // 6. Mapear entidade salva para DTO de resposta
        return clienteMapper.toResponseDTO(savedCliente);
    }

    /**
     * @brief Busca um Cliente pelo ID.
     * @param id ID do Cliente a ser buscado.
     * @return DTO com os dados do Cliente encontrado.
     * @throws BusinessException Se o Cliente não for encontrado.
     */
    @Transactional(readOnly = true)
    public ClienteResponseDTO buscarClientePorId(UUID id) {
        Cliente cliente = repositorioCliente.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Cliente com ID " + id + " não encontrado."));
        return clienteMapper.toResponseDTO(cliente);
    }

    /**
     * @brief Lista todos os Clientes com paginação.
     * @param pageable Objeto Pageable para configuração da paginação.
     * @return Página de DTOs de Clientes.
     */
    @Transactional(readOnly = true)
    public Page<ClienteResponseDTO> listarClientes(Pageable pageable) {
        return repositorioCliente.findAll(pageable)
                .map(clienteMapper::toResponseDTO);
    }

    /**
     * @brief Atualiza os dados de um Cliente existente.
     * @param id         ID do Cliente a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Cliente.
     * @return DTO com os dados do Cliente atualizado.
     * @throws BusinessException Se o Cliente não for encontrado ou se houver
     *                           duplicidade de CPF.
     */
    @Transactional
    public ClienteResponseDTO atualizarCliente(UUID id, ClienteRequestDTO requestDTO) {
        Cliente existingCliente = repositorioCliente.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Cliente com ID " + id + " não encontrado para atualização."));

        // 1. Validação de duplicidade de CPF (se o CPF foi alterado)
        if (!existingCliente.getCpf().equals(requestDTO.getCpf())) {
            if (repositorioCliente.findByCpf(requestDTO.getCpf()).isPresent()) {
                throw new BusinessException(ErrorCode.INVALID_CPF, "Novo CPF já cadastrado para outro cliente.");
            }
        }

        // 2. Atualizar campos básicos da Pessoa e Cliente
        existingCliente.setNomeCompleto(requestDTO.getNomeCompleto());
        existingCliente.setCpf(requestDTO.getCpf());
        existingCliente.setDataNascimento(requestDTO.getDataNascimento());
        existingCliente.setStatus(requestDTO.getStatus()); // Campo específico de Cliente
        // existingCliente.setTipo(requestDTO.getTipo()); // Campo específico de Cliente

        // 3. Atualizar endereços (lógica de sincronização)
        existingCliente.getEnderecos().clear(); // Limpa os endereços existentes
        requestDTO.getEnderecos().forEach(enderecoDTO -> {
            Endereco newEndereco = enderecoMapper.toEntity(enderecoDTO);
            newEndereco.setPessoa(existingCliente);
            existingCliente.getEnderecos().add(newEndereco);
        });

        // 4. Atualizar telefones
        existingCliente.getTelefones().clear();
        if (requestDTO.getTelefones() != null) {
            existingCliente.getTelefones().addAll(requestDTO.getTelefones());
        }

        // 5. Salvar a entidade atualizada
        Cliente updatedCliente = repositorioCliente.save(existingCliente);

        return clienteMapper.toResponseDTO(updatedCliente);
    }

    /**
     * @brief Exclui um Cliente pelo ID.
     * @param id ID do Cliente a ser excluído.
     * @throws BusinessException Se o Cliente não for encontrado.
     */
    @Transactional
    public void excluirCliente(UUID id) {
        if (!repositorioCliente.existsById(id)) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                    "Cliente com ID " + id + " não encontrado para exclusão.");
        }
        // A exclusão em cascata do Endereco e User (se configurado no mapeamento) será
        // tratada pelo JPA
        repositorioCliente.deleteById(id);
    }
}
```
```java
package br.com.legalconnect.service;

import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException; // Importa da common-lib
import br.com.legalconnect.common.exception.ErrorCode; // Importa da common-lib
import br.com.legalconnect.dto.EmpresaRequestDTO;
import br.com.legalconnect.dto.EmpresaResponseDTO;
import br.com.legalconnect.entity.Empresa;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.mapper.EmpresaMapper;
import br.com.legalconnect.mapper.EnderecoMapper;
import br.com.legalconnect.repository.RepositorioEmpresa;
import lombok.RequiredArgsConstructor;

/**
 * @class ServicoEmpresa
 * @brief Serviço de domínio para gerenciar operações relacionadas a Empresas.
 *        Contém a lógica de negócio para criação, busca, atualização e exclusão
 *        de Empresas.
 */
@Service
@RequiredArgsConstructor
public class ServicoEmpresa {

    private final RepositorioEmpresa repositorioEmpresa;
    private final EmpresaMapper empresaMapper;

    private final EnderecoMapper enderecoMapper;

    /**
     * @brief Cadastra uma nova Empresa no sistema.
     * @param requestDTO DTO com os dados da Empresa a ser cadastrada.
     * @return DTO com os dados da Empresa cadastrada.
     * @throws BusinessException Se o CNPJ já estiver cadastrado.
     */
    @Transactional
    public EmpresaResponseDTO cadastrarEmpresa(EmpresaRequestDTO requestDTO) {
        // 1. Validação de duplicidade de CNPJ
        if (repositorioEmpresa.findByCnpj(requestDTO.getCnpj()).isPresent()) {
            throw new BusinessException(ErrorCode.INVALID_CNPJ, "CNPJ já cadastrado para outra empresa.");
        }

        // 2. Mapear DTO para entidade
        Empresa empresa = empresaMapper.toEntity(requestDTO);

        // 3. Associar endereços à empresa
        Set<Endereco> enderecos = requestDTO.getEnderecos().stream()
                .map(enderecoDTO -> {
                    // Reutiliza o mapper para converter DTO para Endereco
                    Endereco endereco = enderecoMapper.toEntity(enderecoDTO);
                    endereco.setEmpresa(empresa); // Garante a associação bidirecional
                    return endereco;
                })
                .collect(Collectors.toSet());
        empresa.setEnderecos(enderecos);

        // 4. Salvar a entidade
        Empresa savedEmpresa = repositorioEmpresa.save(empresa);

        // 5. Mapear entidade salva para DTO de resposta
        return empresaMapper.toResponseDTO(savedEmpresa);
    }

    /**
     * @brief Busca uma Empresa pelo ID.
     * @param id ID da Empresa a ser buscada.
     * @return DTO com os dados da Empresa encontrada.
     * @throws BusinessException Se a Empresa não for encontrada.
     */
    @Transactional(readOnly = true)
    public EmpresaResponseDTO buscarEmpresaPorId(UUID id) {
        Empresa empresa = repositorioEmpresa.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Empresa com ID " + id + " não encontrada."));
        return empresaMapper.toResponseDTO(empresa);
    }

    /**
     * @brief Lista todas as Empresas com paginação.
     * @param pageable Objeto Pageable para configuração da paginação.
     * @return Página de DTOs de Empresas.
     */
    @Transactional(readOnly = true)
    public Page<EmpresaResponseDTO> listarEmpresas(Pageable pageable) {
        return repositorioEmpresa.findAll(pageable)
                .map(empresaMapper::toResponseDTO);
    }

    /**
     * @brief Atualiza os dados de uma Empresa existente.
     * @param id         ID da Empresa a ser atualizada.
     * @param requestDTO DTO com os dados atualizados da Empresa.
     * @return DTO com os dados da Empresa atualizada.
     * @throws BusinessException Se a Empresa não for encontrada ou se houver
     *                           duplicidade de CNPJ.
     */
    @Transactional
    public EmpresaResponseDTO atualizarEmpresa(UUID id, EmpresaRequestDTO requestDTO) {
        Empresa existingEmpresa = repositorioEmpresa.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Empresa com ID " + id + " não encontrada para atualização."));

        // 1. Validação de duplicidade de CNPJ (se o CNPJ foi alterado)
        if (!existingEmpresa.getCnpj().equals(requestDTO.getCnpj())) {
            if (repositorioEmpresa.findByCnpj(requestDTO.getCnpj()).isPresent()) {
                throw new BusinessException(ErrorCode.INVALID_CNPJ, "Novo CNPJ já cadastrado para outra empresa.");
            }
        }

        // 2. Atualizar campos básicos da Empresa
        existingEmpresa.setNomeFantasia(requestDTO.getNomeFantasia());
        existingEmpresa.setRazaoSocial(requestDTO.getRazaoSocial());
        existingEmpresa.setCnpj(requestDTO.getCnpj());
        existingEmpresa.setEmailContato(requestDTO.getEmailContato());

        // 3. Atualizar endereços (lógica de sincronização)
        existingEmpresa.getEnderecos().clear(); // Limpa os endereços existentes
        requestDTO.getEnderecos().forEach(enderecoDTO -> {
            Endereco newEndereco = enderecoMapper.toEntity(enderecoDTO);
            newEndereco.setEmpresa(existingEmpresa);
            existingEmpresa.getEnderecos().add(newEndereco);
        });

        // 4. Atualizar telefones
        existingEmpresa.getTelefones().clear();
        if (requestDTO.getTelefones() != null) {
            existingEmpresa.getTelefones().addAll(requestDTO.getTelefones());
        }

        // 5. Salvar a entidade atualizada
        Empresa updatedEmpresa = repositorioEmpresa.save(existingEmpresa);

        return empresaMapper.toResponseDTO(updatedEmpresa);
    }

    /**
     * @brief Exclui uma Empresa pelo ID.
     * @param id ID da Empresa a ser excluída.
     * @throws BusinessException Se a Empresa não for encontrada ou se possuir
     *                           profissionais associados.
     */
    @Transactional
    public void excluirEmpresa(UUID id) {
        Empresa empresa = repositorioEmpresa.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Empresa com ID " + id + " não encontrada para exclusão."));

        // Verificar se existem profissionais associados antes de excluir
        if (!empresa.getProfissionais().isEmpty()) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                    "Empresa não pode ser excluída pois possui profissionais associados.");
        }

        // A exclusão em cascata do Endereco será tratada pelo JPA
        repositorioEmpresa.delete(empresa);
    }
}
```
```java
package br.com.legalconnect.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException; // Importa da common-lib
import br.com.legalconnect.common.exception.ErrorCode; // Importa da common-lib
import br.com.legalconnect.dto.EnderecoRequestDTO;
import br.com.legalconnect.dto.EnderecoResponseDTO;
import br.com.legalconnect.entity.Endereco;
import br.com.legalconnect.mapper.EnderecoMapper;
import br.com.legalconnect.repository.RepositorioEndereco;
import lombok.RequiredArgsConstructor;

/**
 * @class ServicoEndereco
 * @brief Serviço de domínio para gerenciar operações relacionadas a Endereços.
 *        Este serviço pode ser usado para operações diretas em Endereços,
 *        embora na maioria dos casos eles sejam gerenciados em cascata por
 *        Pessoa ou Empresa.
 */
@Service
@RequiredArgsConstructor
public class ServicoEndereco {

    private final RepositorioEndereco repositorioEndereco;
    private final EnderecoMapper enderecoMapper;

    /**
     * @brief Cadastra um novo Endereco.
     * @param requestDTO DTO com os dados do Endereco a ser cadastrado.
     * @return DTO com os dados do Endereco cadastrado.
     */
    @Transactional
    public EnderecoResponseDTO cadastrarEndereco(EnderecoRequestDTO requestDTO) {
        Endereco endereco = enderecoMapper.toEntity(requestDTO);
        Endereco savedEndereco = repositorioEndereco.save(endereco);
        return enderecoMapper.toResponseDTO(savedEndereco);
    }

    /**
     * @brief Busca um Endereco pelo ID.
     * @param id ID do Endereco a ser buscado.
     * @return DTO com os dados do Endereco encontrado.
     * @throws BusinessException Se o Endereco não for encontrado.
     */
    @Transactional(readOnly = true)
    public EnderecoResponseDTO buscarEnderecoPorId(UUID id) {
        Endereco endereco = repositorioEndereco.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Endereço com ID " + id + " não encontrado."));
        return enderecoMapper.toResponseDTO(endereco);
    }

    /**
     * @brief Lista todos os Enderecos.
     * @return Lista de DTOs de Enderecos.
     */
    @Transactional(readOnly = true)
    public List<EnderecoResponseDTO> listarEnderecos() {
        return repositorioEndereco.findAll().stream()
                .map(enderecoMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    /**
     * @brief Atualiza os dados de um Endereco existente.
     * @param id         ID do Endereco a ser atualizado.
     * @param requestDTO DTO com os dados atualizados do Endereco.
     * @return DTO com os dados do Endereco atualizado.
     * @throws BusinessException Se o Endereco não for encontrado.
     */
    @Transactional
    public EnderecoResponseDTO atualizarEndereco(UUID id, EnderecoRequestDTO requestDTO) {
        Endereco existingEndereco = repositorioEndereco.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Endereço com ID " + id + " não encontrado para atualização."));

        // Atualizar campos básicos do Endereco
        existingEndereco.setLogradouro(requestDTO.getLogradouro());
        existingEndereco.setNumero(requestDTO.getNumero());
        existingEndereco.setComplemento(requestDTO.getComplemento());
        existingEndereco.setBairro(requestDTO.getBairro());
        existingEndereco.setCidade(requestDTO.getCidade());
        existingEndereco.setEstado(requestDTO.getEstado());
        existingEndereco.setCep(requestDTO.getCep());
        existingEndereco.setPais(requestDTO.getPais());
        existingEndereco.setTipoEndereco(requestDTO.getTipoEndereco());

        Endereco updatedEndereco = repositorioEndereco.save(existingEndereco);
        return enderecoMapper.toResponseDTO(updatedEndereco);
    }

    /**
     * @brief Exclui um Endereco pelo ID.
     * @param id ID do Endereco a ser excluído.
     * @throws BusinessException Se o Endereco não for encontrado.
     */
    @Transactional
    public void excluirEndereco(UUID id) {
        if (!repositorioEndereco.existsById(id)) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                    "Endereço com ID " + id + " não encontrado para exclusão.");
        }
        repositorioEndereco.deleteById(id);
    }
}
```
```java
// br/com/legalconnect/service/ServicoPessoa.java
package br.com.legalconnect.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier; // Importar Qualifier
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException;
import br.com.legalconnect.common.exception.ErrorCode;
import br.com.legalconnect.dto.PessoaResponseDTO;
import br.com.legalconnect.entity.Pessoa;
import br.com.legalconnect.mapper.PessoaMapper;
import br.com.legalconnect.repository.RepositorioPessoa;

/**
 * @class ServicoPessoa
 * @brief Serviço de domínio para operações genéricas relacionadas a Pessoas.
 *        Como Pessoa é uma entidade base abstrata, este serviço lida com
 *        operações
 *        que podem ser comuns a todas as subclasses (Profissional, Cliente,
 *        Administrador).
 *        Operações de criação/atualização específicas devem ser tratadas nos
 *        serviços das subclasses.
 */
@Service
public class ServicoPessoa {

    private final RepositorioPessoa repositorioPessoa;
    private final PessoaMapper pessoaMapper;

    @Autowired
    public ServicoPessoa(RepositorioPessoa repositorioPessoa,
            @Qualifier("pessoaMapperImpl") PessoaMapper pessoaMapper) {
        this.repositorioPessoa = repositorioPessoa;
        this.pessoaMapper = pessoaMapper;
    }

    /**
     * @brief Busca uma Pessoa pelo ID.
     * @param id ID da Pessoa a ser buscada.
     * @return DTO com os dados da Pessoa encontrada.
     * @throws BusinessException Se a Pessoa não for encontrada.
     */
    @Transactional(readOnly = true)
    public PessoaResponseDTO buscarPessoaPorId(UUID id) {
        Pessoa pessoa = repositorioPessoa.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Pessoa com ID " + id + " não encontrada."));
        return pessoaMapper.toResponseDTO(pessoa);
    }

    /**
     * @brief Lista todas as Pessoas.
     * @return Lista de DTOs de Pessoas.
     */
    @Transactional(readOnly = true)
    public List<PessoaResponseDTO> listarTodasPessoas() {
        return repositorioPessoa.findAll().stream()
                .map(pessoaMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    /**
     * @brief Exclui uma Pessoa pelo ID.
     * @param id ID da Pessoa a ser excluída.
     * @throws BusinessException Se a Pessoa não for encontrada.
     *                           **Nota:** A exclusão de Pessoa deve ser feita com
     *                           cautela, pois pode
     *                           impactar subclasses (Profissional, Cliente,
     *                           Administrador) e o User associado.
     *                           Idealmente, a exclusão de subclasses deveria ser o
     *                           ponto de entrada.
     */
    @Transactional
    public void excluirPessoa(UUID id) {
        if (!repositorioPessoa.existsById(id)) {
            throw new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                    "Pessoa com ID " + id + " não encontrada para exclusão.");
        }
        repositorioPessoa.deleteById(id);
    }
}

```
```java
package br.com.legalconnect.service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException; // Importa da common-lib
import br.com.legalconnect.common.exception.ErrorCode; // Importa da common-lib
import br.com.legalconnect.dto.PlanoResponseDTO;
import br.com.legalconnect.entity.Plano;
import br.com.legalconnect.mapper.ProfissionalMapper; // Reutilizando mapper de profissional para plano
import br.com.legalconnect.repository.RepositorioPlano;
import lombok.RequiredArgsConstructor;

/**
 * @class ServicoPlano
 * @brief Serviço de domínio para gerenciar operações relacionadas a Planos.
 *        **Nota:** Este serviço é um placeholder. Em uma arquitetura de
 *        microsserviços real,
 *        a gestão de planos seria feita em um microsserviço dedicado (ex:
 *        marketplace ou assinatura).
 *        Aqui, ele apenas fornece métodos de busca para que outros serviços
 *        possam referenciar planos.
 */
@Service
@RequiredArgsConstructor
public class ServicoPlano {

    private final RepositorioPlano repositorioPlano;
    private final ProfissionalMapper profissionalMapper;

    /**
     * @brief Busca um Plano pelo ID.
     * @param id ID do Plano a ser buscado.
     * @return DTO com os dados do Plano encontrado.
     * @throws BusinessException Se o Plano não for encontrado.
     */
    @Transactional(readOnly = true)
    public PlanoResponseDTO buscarPlanoPorId(UUID id) {
        Plano plano = repositorioPlano.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.RESOURCE_NOT_FOUND,
                        "Plano com ID " + id + " não encontrado."));
        return profissionalMapper.toPlanoResponseDTO(plano);
    }

    /**
     * @brief Lista todos os Planos disponíveis.
     * @return Lista de DTOs de Planos.
     */
    @Transactional(readOnly = true)
    public List<PlanoResponseDTO> listarTodosPlanos() {
        return repositorioPlano.findAll().stream()
                .map(profissionalMapper::toPlanoResponseDTO)
                .collect(Collectors.toList());
    }

    // Métodos para cadastrar, atualizar e excluir planos não são implementados
    // aqui,
    // pois seriam responsabilidade do microsserviço de marketplace/assinatura.
}
```
```java
package br.com.legalconnect.service;

import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.legalconnect.common.exception.BusinessException; // Importa da common-lib
import br.com.legalconnect.common.exception.ErrorCode; // Importa da common-lib
import br.com.legalconnect.dto.UserResponseDTO;
import br.com.legalconnect.entity.User;
import br.com.legalconnect.mapper.UserMapper;
import br.com.legalconnect.repository.RepositorioUser;
import lombok.RequiredArgsConstructor;

/**
 * @class ServicoUser
 * @brief Serviço de domínio para gerenciar operações relacionadas a Users.
 *        **Nota:** Este serviço é primariamente para busca e validação de Users
 *        existentes
 *        para associação com entidades Pessoa (Profissional, Cliente,
 *        Administrador).
 *        A criação e gestão principal de Users é responsabilidade de outro
 *        microsserviço (ex: auth-service).
 */
@Service
@RequiredArgsConstructor
public class ServicoUser {

    private final RepositorioUser repositorioUser;
    private final UserMapper userMapper;

    /**
     * @brief Busca um User pelo ID.
     * @param id ID do User a ser buscado.
     * @return DTO com os dados do User encontrado.
     * @throws BusinessException Se o User não for encontrado.
     */
    @Transactional(readOnly = true)
    public UserResponseDTO buscarUserPorId(UUID id) {
        User user = repositorioUser.findById(id)
                .orElseThrow(() -> new BusinessException(ErrorCode.USER_NOT_FOUND,
                        "Usuário com ID " + id + " não encontrado."));
        return userMapper.toResponseDTO(user);
    }

    /**
     * @brief Lista todos os Users.
     * @return Lista de DTOs de Users.
     */
    @Transactional(readOnly = true)
    public List<UserResponseDTO> listarTodosUsers() {
        return repositorioUser.findAll().stream()
                .map(userMapper::toResponseDTO)
                .collect(Collectors.toList());
    }

    /**
     * @brief Verifica se um User existe pelo ID.
     * @param id ID do User a ser verificado.
     * @return true se o User existe, false caso contrário.
     */
    @Transactional(readOnly = true)
    public boolean userExiste(UUID id) {
        return repositorioUser.existsById(id);
    }

    /**
     * @brief Busca um User pelo CPF.
     * @param cpf O CPF do usuário.
     * @return Um Optional contendo o DTO do User, se encontrado.
     */
    @Transactional(readOnly = true)
    public Optional<UserResponseDTO> buscarUserPorCpf(String cpf) {
        return repositorioUser.findByCpf(cpf)
                .map(userMapper::toResponseDTO);
    }
}
```
```java
# src/main/resources/application.properties
# ===================================================================
# Configurações Gerais da Aplicação Spring Boot
# ===================================================================

# Nome da aplicação (usado em logs e monitoramento)
spring.application.name=legalconnect-usuario-service
# Porta em que a aplicação será executada

# Desabilita o management server caso esteja ativo e conflitando (opcional)
# management.endpoints.web.exposure.include=*

 
server.port=${PORT:0}
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.instance.preferIpAddress=true
eureka.instance.lease-renewal-interval-in-seconds=30
# Configurações do SpringDoc OpenAPI
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packagesToScan=br.com.legalconnect
springdoc.pathsToMatch=/api/v1/**
springdoc.swagger-ui.url=/v3/api-docs
# Additional Swagger configuration
springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.swagger-ui.display-request-duration=true
# Swagger config
 

# ===================================================================
# Configurações do Banco de Dados PostgreSQL
# ===================================================================

# URL de conexão com o banco de dados PostgreSQL
# O microsserviço de autenticação se conecta ao banco de dados global (public)
spring.datasource.url=jdbc:postgresql://localhost:5432/jusplatform_db

# Nome de usuário do banco de dados
spring.datasource.username=jususer

# Senha do banco de dados
spring.datasource.password=juspassword

# Driver JDBC para PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# Configurações do pool de conexões (HikariCP é o padrão no Spring Boot)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# ===================================================================
# Configurações do JPA e Hibernate
# ===================================================================

# Dialeto do Hibernate para PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Exibir queries SQL no console (para desenvolvimento)
# Desabilita a geração automática de DDL pelo Hibernate na inicialização principal.
# A criação de DDL para os esquemas de tenant será feita programaticamente pelo TenantSchemaService.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
# Removido: spring.jpa.properties.hibernate.default_schema=public
# Esta configuração forçava o Hibernate a usar o schema 'public' para DDL, o que não é desejado para entidades multi-tenant.


# ===================================================================
# Configurações de Segurança (JWT)
# ===================================================================

# Chave secreta para assinar e verificar os JWTs.
# **IMPORTANTE**: Esta chave deve ser longa, complexa e armazenada de forma segura (ex: HashiCorp Vault, variáveis de ambiente).
# Nunca exponha esta chave em um repositório público!
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Tempo de expiração do JWT em milissegundos (ex: 3600000ms = 1 hora)
application.security.jwt.expiration=3600000

# Tempo de expiração do Refresh Token em milissegundos (ex: 7 dias = 604800000ms)
application.security.jwt.refresh-expiration=604800000

# Força do encoder de senha (cost factor para BCrypt, padrão é 10)
# Um valor maior aumenta a segurança, mas também o tempo de hash.
application.security.password-encoder.strength=12

# ===================================================================
# Configurações de Logging (Logback)
# ===================================================================

# Nível de log padrão para a aplicação
logging.level.br.com.legalconnect=INFO
# Nível de log para o Spring Framework
logging.level.org.springframework=WARN

# Nível de log para Hibernate (queries SQL) - Desabilite em produção
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicExtractor=WARN

# Nível de log para o processo de DDL do Hibernate (agora menos relevante com Flyway)
logging.level.org.hibernate.hbm2ddl=WARN

# Nível de log para as conexões JDBC do Hibernate
logging.level.org.hibernate.engine.jdbc.connections=WARN

# Nível de log para o Flyway (muito importante para depurar migrações)
logging.level.org.flywaydb=INFO

# Adicione logs específicos para a configuração do JPA e Multi-Tenancy
logging.level.org.hibernate.jpa=INFO
logging.level.org.springframework.orm.jpa=INFO
logging.level.org.springframework.data.jpa=INFO
logging.level.org.hibernate.engine.jdbc.connections.spi=INFO

# ===================================================================
# Configurações de Multitenancy Específicas do Aplicativo
# ===================================================================

# ID do tenant padrão para usuários que não estão associados a um tenant específico (ex: clientes gerais)
# Este UUID deve corresponder a um registro na tabela tb_tenant no schema global (public).
application.tenant.default-id=00000000-0000-0000-0000-000000000001

# ===================================================================
# Configurações do Spring Boot Actuator
# ===================================================================

# Habilita todos os endpoints do Actuator (para monitoramento)
management.endpoints.web.exposure.include=*
# Define o caminho base para os endpoints do Actuator
management.endpoints.web.base-path=/actuator

# ===================================================================
# Configurações de CORS (Cross-Origin Resource Sharing)
# ===================================================================

# Configuração de CORS global (pode ser mais específica nos controladores)
# Esta configuração é um exemplo e pode ser ajustada conforme a necessidade.
# Em produção, 'allowed-origins' deve ser restrito aos domínios do seu frontend.
# spring.web.cors.allowed-origins=*
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
# spring.web.cors.allowed-headers=*
# spring.web.cors.allow-credentials=false
# spring.web.cors.max-age=3600
# ===================================================================
# Configurações do Flyway
# ===================================================================
spring.flyway.enabled=false
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=1
# ===================================================================
# Configurações de Cache (Exemplo com Caffeine, adicione a dependência se usar)
# ===================================================================

# spring.cache.type=caffeine
# spring.cache.cache-names=users,refreshTokens
# spring.cache.caffeine.spec=expireAfterWrite=60m,maximumSize=500

# ===================================================================
# Propriedades de Aplicação Customizadas
# ===================================================================

# Exemplo de uma propriedade customizada
# app.feature.new-registration-enabled=true

# ===================================================================
# Configurações para Proxy Reverso (Nginx)
# ===================================================================

# Habilita o processamento dos cabeçalhos X-Forwarded-* enviados por proxies.
# Isso garante que a aplicação veja o IP real do cliente, o protocolo original (HTTP/HTTPS)
# e o host original, em vez dos detalhes do proxy (Nginx).
server.forward-headers-strategy=FRAMEWORK
spring.main.allow-bean-definition-overriding=true
# Configuração do Outlook SMTP
spring.mail.username=marcelo.llm@outlook.com
spring.mail.password=qlbzudmmytioxztj
spring.mail.from=marcelo.llm@outlook.com
spring.mail.protocol=smtp

# Propriedades avançadas

spring.mail.host=smtp.office365.com
spring.mail.port=587 
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=15000
spring.mail.properties.mail.smtp.timeout=15000
spring.mail.properties.mail.smtp.writetimeout=15000

# Propriedade para o Thymeleaf (se estiver usando)
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false
# (Opcional, mas útil para debug)
spring.mail.properties.mail.debug=true
app.frontend.url=http://localhost:4200

```
```java
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title th:text="${subject}">Bem-vindo!</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f4f4f4;
        margin: 0;
        padding: 20px;
      }
      .container {
        max-width: 600px;
        margin: 0 auto;
        background: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }
      .header {
        text-align: center;
        padding-bottom: 20px;
        border-bottom: 1px solid #eee;
      }
      .header h1 {
        color: #007bff;
      }
      .content {
        padding: 20px 0;
      }
      .footer {
        text-align: center;
        padding-top: 20px;
        border-top: 1px solid #eee;
        font-size: 0.9em;
        color: #777;
      }
      .button {
        display: inline-block;
        background-color: #007bff;
        color: #ffffff;
        padding: 10px 20px;
        text-decoration: none;
        border-radius: 5px;
        margin-top: 20px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1 th:text="${title}">Olá!</h1>
      </div>
      <div class="content">
        <p>
          Prezado(a) <strong th:text="${userName}">Nome do Usuário</strong>,
        </p>
        <p>
          É com grande prazer que confirmamos seu cadastro em nossa plataforma.
        </p>
        <p>
          Seu e-mail de acesso é:
          <strong th:text="${userEmail}">email@example.com</strong>
        </p>
        <p th:text="${message}">
          Aproveite todas as funcionalidades que oferecemos!
        </p>

        <p style="text-align: center">
          <a
            th:href="${callToActionLink}"
            class="button"
            th:text="${callToActionText}"
            >Acessar Plataforma</a
          >
        </p>
      </div>
      <div class="footer">
        <p>
          Este é um e-mail de notificação automático. Por favor, não responda.
        </p>
        <p>
          &copy; <span th:text="${currentYear}">2025</span> Sua Empresa. Todos
          os direitos reservados.
        </p>
      </div>
    </div>
  </body>
</html>

```
```java
package br.com.legalconnect.auth.auth_service;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class AuthServiceApplicationTests {

	@Test
	void contextLoads() {
	}

}

```
```java
# src/main/resources/application.properties
# ===================================================================
# Configurações Gerais da Aplicação Spring Boot
# ===================================================================

# Nome da aplicação (usado em logs e monitoramento)
spring.application.name=legalconnect-usuario-service
# Porta em que a aplicação será executada

# Desabilita o management server caso esteja ativo e conflitando (opcional)
# management.endpoints.web.exposure.include=*

 
server.port=${PORT:0}
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.instance.preferIpAddress=true
eureka.instance.lease-renewal-interval-in-seconds=30
# Configurações do SpringDoc OpenAPI
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packagesToScan=br.com.legalconnect
springdoc.pathsToMatch=/api/v1/**
springdoc.swagger-ui.url=/v3/api-docs
# Additional Swagger configuration
springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.swagger-ui.display-request-duration=true
# Swagger config
 

# ===================================================================
# Configurações do Banco de Dados PostgreSQL
# ===================================================================

# URL de conexão com o banco de dados PostgreSQL
# O microsserviço de autenticação se conecta ao banco de dados global (public)
spring.datasource.url=jdbc:postgresql://localhost:5432/jusplatform_db

# Nome de usuário do banco de dados
spring.datasource.username=jususer

# Senha do banco de dados
spring.datasource.password=juspassword

# Driver JDBC para PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# Configurações do pool de conexões (HikariCP é o padrão no Spring Boot)
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# ===================================================================
# Configurações do JPA e Hibernate
# ===================================================================

# Dialeto do Hibernate para PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Exibir queries SQL no console (para desenvolvimento)
# Desabilita a geração automática de DDL pelo Hibernate na inicialização principal.
# A criação de DDL para os esquemas de tenant será feita programaticamente pelo TenantSchemaService.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
# Removido: spring.jpa.properties.hibernate.default_schema=public
# Esta configuração forçava o Hibernate a usar o schema 'public' para DDL, o que não é desejado para entidades multi-tenant.


# ===================================================================
# Configurações de Segurança (JWT)
# ===================================================================

# Chave secreta para assinar e verificar os JWTs.
# **IMPORTANTE**: Esta chave deve ser longa, complexa e armazenada de forma segura (ex: HashiCorp Vault, variáveis de ambiente).
# Nunca exponha esta chave em um repositório público!
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Tempo de expiração do JWT em milissegundos (ex: 3600000ms = 1 hora)
application.security.jwt.expiration=3600000

# Tempo de expiração do Refresh Token em milissegundos (ex: 7 dias = 604800000ms)
application.security.jwt.refresh-expiration=604800000

# Força do encoder de senha (cost factor para BCrypt, padrão é 10)
# Um valor maior aumenta a segurança, mas também o tempo de hash.
application.security.password-encoder.strength=12

# ===================================================================
# Configurações de Logging (Logback)
# ===================================================================

# Nível de log padrão para a aplicação
logging.level.br.com.legalconnect=INFO
# Nível de log para o Spring Framework
logging.level.org.springframework=WARN

# Nível de log para Hibernate (queries SQL) - Desabilite em produção
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicExtractor=WARN

# Nível de log para o processo de DDL do Hibernate (agora menos relevante com Flyway)
logging.level.org.hibernate.hbm2ddl=WARN

# Nível de log para as conexões JDBC do Hibernate
logging.level.org.hibernate.engine.jdbc.connections=WARN

# Nível de log para o Flyway (muito importante para depurar migrações)
logging.level.org.flywaydb=INFO

# Adicione logs específicos para a configuração do JPA e Multi-Tenancy
logging.level.org.hibernate.jpa=INFO
logging.level.org.springframework.orm.jpa=INFO
logging.level.org.springframework.data.jpa=INFO
logging.level.org.hibernate.engine.jdbc.connections.spi=INFO

# ===================================================================
# Configurações de Multitenancy Específicas do Aplicativo
# ===================================================================

# ID do tenant padrão para usuários que não estão associados a um tenant específico (ex: clientes gerais)
# Este UUID deve corresponder a um registro na tabela tb_tenant no schema global (public).
application.tenant.default-id=00000000-0000-0000-0000-000000000001

# ===================================================================
# Configurações do Spring Boot Actuator
# ===================================================================

# Habilita todos os endpoints do Actuator (para monitoramento)
management.endpoints.web.exposure.include=*
# Define o caminho base para os endpoints do Actuator
management.endpoints.web.base-path=/actuator

# ===================================================================
# Configurações de CORS (Cross-Origin Resource Sharing)
# ===================================================================

# Configuração de CORS global (pode ser mais específica nos controladores)
# Esta configuração é um exemplo e pode ser ajustada conforme a necessidade.
# Em produção, 'allowed-origins' deve ser restrito aos domínios do seu frontend.
# spring.web.cors.allowed-origins=*
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
# spring.web.cors.allowed-headers=*
# spring.web.cors.allow-credentials=false
# spring.web.cors.max-age=3600
# ===================================================================
# Configurações do Flyway
# ===================================================================
spring.flyway.enabled=false
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=1
# ===================================================================
# Configurações de Cache (Exemplo com Caffeine, adicione a dependência se usar)
# ===================================================================

# spring.cache.type=caffeine
# spring.cache.cache-names=users,refreshTokens
# spring.cache.caffeine.spec=expireAfterWrite=60m,maximumSize=500

# ===================================================================
# Propriedades de Aplicação Customizadas
# ===================================================================

# Exemplo de uma propriedade customizada
# app.feature.new-registration-enabled=true

# ===================================================================
# Configurações para Proxy Reverso (Nginx)
# ===================================================================

# Habilita o processamento dos cabeçalhos X-Forwarded-* enviados por proxies.
# Isso garante que a aplicação veja o IP real do cliente, o protocolo original (HTTP/HTTPS)
# e o host original, em vez dos detalhes do proxy (Nginx).
server.forward-headers-strategy=FRAMEWORK
spring.main.allow-bean-definition-overriding=true
# Configuração do Outlook SMTP
spring.mail.username=marcelo.llm@outlook.com
spring.mail.password=qlbzudmmytioxztj
spring.mail.from=marcelo.llm@outlook.com
spring.mail.protocol=smtp

# Propriedades avançadas

spring.mail.host=smtp.office365.com
spring.mail.port=587 
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=15000
spring.mail.properties.mail.smtp.timeout=15000
spring.mail.properties.mail.smtp.writetimeout=15000

# Propriedade para o Thymeleaf (se estiver usando)
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false
# (Opcional, mas útil para debug)
spring.mail.properties.mail.debug=true
app.frontend.url=http://localhost:4200

```
```java
Êþº¾   = 7  +br/com/legalconnect/LegalUsuarioApplication  java/lang/Object log Lorg/slf4j/Logger; <clinit> ()V Code
  
  org/slf4j/LoggerFactory   	getLogger %(Ljava/lang/Class;)Lorg/slf4j/Logger;	     LineNumberTable LocalVariableTable <init>
     this -Lbr/com/legalconnect/LegalUsuarioApplication; main ([Ljava/lang/String;)V
    *org/springframework/boot/SpringApplication    run b(Ljava/lang/Class;[Ljava/lang/String;)Lorg/springframework/context/ConfigurableApplicationContext; " -LegalUsuarioApplication iniciada com sucesso! $ & % org/slf4j/Logger ' ( info (Ljava/lang/String;)V args [Ljava/lang/String; MethodParameters 
SourceFile LegalUsuarioApplication.java RuntimeVisibleAnnotations BLorg/springframework/cloud/client/discovery/EnableDiscoveryClient; >Lorg/springframework/boot/autoconfigure/SpringBootApplication; exclude GLorg/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration; :Lorg/springframework/boot/autoconfigure/domain/EntityScan; basePackages br.com.legalconnect.entity 0br.com.legalconnect.advogado.domain.modal.entity !                	   )      	¸ 
³ ±                      	   /     *· ±                        	    	   D     *¸ W² !¹ # ±                !         ) *   +    )    ,    - .   !  /   0  1[ c 2 3  4[ s 5s 6
```
```java
Êþº¾   = >  'br/com/legalconnect/config/FilterAdvice  java/lang/Object  2org/springframework/web/servlet/HandlerInterceptor <init> ()V Code
     LineNumberTable LocalVariableTable this )Lbr/com/legalconnect/config/FilterAdvice; 	preHandle h(Ljakarta/servlet/http/HttpServletRequest;Ljakarta/servlet/http/HttpServletResponse;Ljava/lang/Object;)Z 
Exceptions  java/lang/Exception  X-Correlaton-ID    'jakarta/servlet/http/HttpServletRequest   	getHeader &(Ljava/lang/String;)Ljava/lang/String;
     java/lang/String ! " isEmpty ()Z $ 6br/com/legalconnect/common/exception/BusinessException	 & ( ' .br/com/legalconnect/common/exception/ErrorCode ) * ACCOUNT_LOCKED 0Lbr/com/legalconnect/common/exception/ErrorCode; , Acesso invÃ¡lido.
 # .  / F(Lbr/com/legalconnect/common/exception/ErrorCode;[Ljava/lang/String;)V request )Ljakarta/servlet/http/HttpServletRequest; response *Ljakarta/servlet/http/HttpServletResponse; handler Ljava/lang/Object; userIdHeader Ljava/lang/String; 
StackMapTable MethodParameters 
SourceFile FilterAdvice.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; !            	   /     *· 
±            
                      	        -+¹  :Æ ¶  » #Y² %½ Y+S· -¿¬            
    +  
   4    -       - 0 1    - 2 3    - 4 5  
 # 6 7  8   	 ü   9   
 0   2   4    :    ; <     =  
```
```java
Êþº¾   =   Abr/com/legalconnect/controller/ControladorAdministradorPlataforma  java/lang/Object servicoAdministrador 2Lbr/com/legalconnect/service/ServicoAdministrador; <init> 5(Lbr/com/legalconnect/service/ServicoAdministrador;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
  
   ()V	     LineNumberTable LocalVariableTable this CLbr/com/legalconnect/controller/ControladorAdministradorPlataforma; MethodParameters cadastrarAdministrador \(Lbr/com/legalconnect/dto/AdministradorRequestDTO;)Lorg/springframework/http/ResponseEntity; 	Signature ¿(Lbr/com/legalconnect/dto/AdministradorRequestDTO;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/dto/AdministradorResponseDTO;>;>; 5Lorg/springframework/web/bind/annotation/PostMapping; "RuntimeVisibleParameterAnnotations Ljakarta/validation/Valid; 5Lorg/springframework/web/bind/annotation/RequestBody;
  !   0br/com/legalconnect/service/ServicoAdministrador  " e(Lbr/com/legalconnect/dto/AdministradorRequestDTO;)Lbr/com/legalconnect/dto/AdministradorResponseDTO;	 $ & % #org/springframework/http/HttpStatus ' ( CREATED %Lorg/springframework/http/HttpStatus;
 * , + 'org/springframework/http/ResponseEntity - . status `(Lorg/springframework/http/HttpStatusCode;)Lorg/springframework/http/ResponseEntity$BodyBuilder;
 0 2 1 +br/com/legalconnect/common/dto/BaseResponse 3 4 builder C()Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; 6 %Administrador cadastrado com sucesso.
 8 : 9 ?br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder ; < message U(Ljava/lang/String;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;	 > @ ? (br/com/legalconnect/enums/StatusResponse A B SUCESSO *Lbr/com/legalconnect/enums/StatusResponse;
 8 D - E m(Lbr/com/legalconnect/enums/StatusResponse;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 8 G H I data U(Ljava/lang/Object;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 8 K L M build /()Lbr/com/legalconnect/common/dto/BaseResponse; O Q P 3org/springframework/http/ResponseEntity$BodyBuilder R S body =(Ljava/lang/Object;)Lorg/springframework/http/ResponseEntity; 
requestDTO 1Lbr/com/legalconnect/dto/AdministradorRequestDTO; responseDTO 2Lbr/com/legalconnect/dto/AdministradorResponseDTO; RuntimeVisibleTypeAnnotations buscarAdministradorPorId ;(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity; (Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/dto/AdministradorResponseDTO;>;>; 4Lorg/springframework/web/bind/annotation/GetMapping; value /{id} 6Lorg/springframework/web/bind/annotation/PathVariable;
  a Y b D(Ljava/util/UUID;)Lbr/com/legalconnect/dto/AdministradorResponseDTO; d Administrador encontrado.
 * f g S ok id Ljava/util/UUID; listarAdministradores U(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/http/ResponseEntity; à(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lorg/springframework/data/domain/Page<Lbr/com/legalconnect/dto/AdministradorResponseDTO;>;>;>; .Lorg/springframework/data/web/PageableDefault; size   
 page     sort nomeCompleto
  u j v R(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page; x 0Lista de administradores recuperada com sucesso. pageable *Lorg/springframework/data/domain/Pageable; responsePage &Lorg/springframework/data/domain/Page; LocalVariableTypeTable ZLorg/springframework/data/domain/Page<Lbr/com/legalconnect/dto/AdministradorResponseDTO;>; atualizarAdministrador l(Ljava/util/UUID;Lbr/com/legalconnect/dto/AdministradorRequestDTO;)Lorg/springframework/http/ResponseEntity; Ï(Ljava/util/UUID;Lbr/com/legalconnect/dto/AdministradorRequestDTO;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/dto/AdministradorResponseDTO;>;>; 4Lorg/springframework/web/bind/annotation/PutMapping;
     u(Ljava/util/UUID;Lbr/com/legalconnect/dto/AdministradorRequestDTO;)Lbr/com/legalconnect/dto/AdministradorResponseDTO;  %Administrador atualizado com sucesso. excluirAdministrador |(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/lang/Void;>;>; 7Lorg/springframework/web/bind/annotation/DeleteMapping;
     (Ljava/util/UUID;)V	 $   ( 
NO_CONTENT  $Administrador excluÃ­do com sucesso. 
SourceFile 'ControladorAdministradorPlataforma.java 8Lorg/springframework/web/bind/annotation/RestController; 8Lorg/springframework/web/bind/annotation/RequestMapping; +/api/v1/usuarios/administradores-plataforma InnerClasses BaseResponseBuilder BodyBuilder !                	     
      F     
*· *+µ ±           )  * 	 +        
       
                    	                           **´ +¶ M² #¸ )¸ /5¶ 7² =¶ C,¶ F¶ J¹ N °       "    6 	 ;  <  =  >  ? ! @ $ ;         *       * T U  	 ! V W  X   	           T    Y Z      [ 	     \  ][ s ^      _      x     "*´ +¶ `M¸ /c¶ 7² =¶ C,¶ F¶ J¸ e°           J 	 P  Q  R  S  T  O         "       " h i  	  V W      h    j k      l 	     \        m  nI o pI q r[ s s         "*´ +¶ tM¸ /w¶ 7² =¶ C,¶ F¶ J¸ e°           a 	 g  h  i  j  k  f         "       " y z  	  { |  }     	  { ~      y            	       ][ s ^      _                  #*´ +,¶ N¸ /¶ 7² =¶ C-¶ F¶ J¸ e°           x 
 ~ 
         }    *    #       # h i    # T U  
  V W  X   	         	 h   T     Z       	       ][ s ^      _      q     %*´ +¶ ² ¸ )¸ /¶ 7² =¶ C¶ J¹ N °                               %       % h i      h         	          ][ s       8 0  	 O * 	
```
```java
Êþº¾   = à  1br/com/legalconnect/controller/ControladorCliente  java/lang/Object servicoCliente ,Lbr/com/legalconnect/service/ServicoCliente; <init> /(Lbr/com/legalconnect/service/ServicoCliente;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
  
   ()V	     LineNumberTable LocalVariableTable this 3Lbr/com/legalconnect/controller/ControladorCliente; MethodParameters cadastrarCliente h(Lbr/com/legalconnect/dto/ClienteRequestDTO;Ljava/lang/String;)Lorg/springframework/http/ResponseEntity; 	Signature Å(Lbr/com/legalconnect/dto/ClienteRequestDTO;Ljava/lang/String;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/dto/ClienteResponseDTO;>;>; 5Lorg/springframework/web/bind/annotation/PostMapping; "RuntimeVisibleParameterAnnotations Ljakarta/validation/Valid; 5Lorg/springframework/web/bind/annotation/RequestBody; 7Lorg/springframework/web/bind/annotation/RequestHeader; value X-Correlation-Id required    
 $ & % )br/com/legalconnect/dto/ClienteRequestDTO ' ( 
getUsuario *()Lbr/com/legalconnect/dto/UserRequestDTO;
 * , + java/util/Optional - . 
ofNullable ((Ljava/lang/Object;)Ljava/util/Optional;   0 1 2 get 1(Ljava/lang/String;)Ljava/util/function/Supplier;
 * 4 5 6 	orElseGet 1(Ljava/util/function/Supplier;)Ljava/lang/Object; 8 &br/com/legalconnect/dto/UserRequestDTO
 $ : ; < 
setUsuario +(Lbr/com/legalconnect/dto/UserRequestDTO;)V
 > @ ? *br/com/legalconnect/service/ServicoCliente  A Y(Lbr/com/legalconnect/dto/ClienteRequestDTO;)Lbr/com/legalconnect/dto/ClienteResponseDTO;	 C E D #org/springframework/http/HttpStatus F G CREATED %Lorg/springframework/http/HttpStatus;
 I K J 'org/springframework/http/ResponseEntity L M status `(Lorg/springframework/http/HttpStatusCode;)Lorg/springframework/http/ResponseEntity$BodyBuilder;
 O Q P +br/com/legalconnect/common/dto/BaseResponse R S builder C()Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; U Cliente cadastrado com sucesso.
 W Y X ?br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder Z [ message U(Ljava/lang/String;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;	 ] _ ^ (br/com/legalconnect/enums/StatusResponse ` a SUCESSO *Lbr/com/legalconnect/enums/StatusResponse;
 W c L d m(Lbr/com/legalconnect/enums/StatusResponse;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 W f g h data U(Ljava/lang/Object;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 W j k l build /()Lbr/com/legalconnect/common/dto/BaseResponse; n p o 3org/springframework/http/ResponseEntity$BodyBuilder q r body =(Ljava/lang/Object;)Lorg/springframework/http/ResponseEntity; 
requestDTO +Lbr/com/legalconnect/dto/ClienteRequestDTO; userId Ljava/lang/String; responseDTO ,Lbr/com/legalconnect/dto/ClienteResponseDTO; RuntimeVisibleTypeAnnotations buscarClientePorId ;(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity; (Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/dto/ClienteResponseDTO;>;>; 4Lorg/springframework/web/bind/annotation/GetMapping; /{id} 6Lorg/springframework/web/bind/annotation/PathVariable;
 >  z  >(Ljava/util/UUID;)Lbr/com/legalconnect/dto/ClienteResponseDTO;  Cliente encontrado.
 I   r ok id Ljava/util/UUID; listarClientes U(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/http/ResponseEntity; Ú(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lorg/springframework/data/domain/Page<Lbr/com/legalconnect/dto/ClienteResponseDTO;>;>;>; .Lorg/springframework/data/web/PageableDefault; size   
 page sort nomeCompleto
 >    R(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page;  )Lista de clientes recuperada com sucesso. pageable *Lorg/springframework/data/domain/Pageable; responsePage &Lorg/springframework/data/domain/Page; LocalVariableTypeTable TLorg/springframework/data/domain/Page<Lbr/com/legalconnect/dto/ClienteResponseDTO;>; atualizarCliente f(Ljava/util/UUID;Lbr/com/legalconnect/dto/ClienteRequestDTO;)Lorg/springframework/http/ResponseEntity; Ã(Ljava/util/UUID;Lbr/com/legalconnect/dto/ClienteRequestDTO;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/dto/ClienteResponseDTO;>;>; 4Lorg/springframework/web/bind/annotation/PutMapping;
 > £  ¤ i(Ljava/util/UUID;Lbr/com/legalconnect/dto/ClienteRequestDTO;)Lbr/com/legalconnect/dto/ClienteResponseDTO; ¦ Cliente atualizado com sucesso. excluirCliente |(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/lang/Void;>;>; 7Lorg/springframework/web/bind/annotation/DeleteMapping;
 > « § ¬ (Ljava/util/UUID;)V	 C ® ¯ G 
NO_CONTENT ± Cliente excluÃ­do com sucesso. lambda$0 <(Ljava/lang/String;)Lbr/com/legalconnect/dto/UserRequestDTO;
 7 µ R ¶ @()Lbr/com/legalconnect/dto/UserRequestDTO$UserRequestDTOBuilder;
 ¸ º ¹ java/util/UUID » ¼ 
fromString $(Ljava/lang/String;)Ljava/util/UUID;
 ¾ À ¿ <br/com/legalconnect/dto/UserRequestDTO$UserRequestDTOBuilder  Á P(Ljava/util/UUID;)Lbr/com/legalconnect/dto/UserRequestDTO$UserRequestDTOBuilder;
 ¾ Ã k ( 
SourceFile ControladorCliente.java 8Lorg/springframework/web/bind/annotation/RestController; 8Lorg/springframework/web/bind/annotation/RequestMapping; /api/v1/usuarios/clientes BootstrapMethods
 Ë Í Ì "java/lang/invoke/LambdaMetafactory Î Ï metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; Ê ()Ljava/lang/Object; Ñ
  Ô ² ³ Ó ( InnerClasses BaseResponseBuilder UserRequestDTOBuilder Û %java/lang/invoke/MethodHandles$Lookup Ý java/lang/invoke/MethodHandles Lookup BodyBuilder !                	     
      F     
*· *+µ ±           *  + 	 ,        
       
                    	                      s   !Z "    ±     A++¶ #¸ ),º /  ¶ 3À 7¶ 9*´ +¶ =N² B¸ H¸ NT¶ V² \¶ b-¶ e¶ i¹ m °       .    7  8  7  :   = & > ) ? . @ 4 A 8 B ; =    *    A       A s t    A u v    ! w x  y   	          	 s   u    z {      | 	     }  [ s ~            x     "*´ +¶ M¸ N¶ V² \¶ b,¶ e¶ i¸ °           L 	 O  P  Q  R  S  N         "       "    	  w x                  	     }          I  I " [ s          "*´ +¶ M¸ N¶ V² \¶ b,¶ e¶ i¸ °           _ 	 c  d  e  f  g  b         "       "    	          	                      	     ¡  [ s ~                        #*´ +,¶ ¢N¸ N¥¶ V² \¶ b-¶ e¶ i¸ °           t 
 x 
 y  z  {  |  w    *    #       #      # s t  
  w x  y   	         	    s    § {      ¨ 	     ©  [ s ~            q     %*´ +¶ ª² ­¸ H¸ N°¶ V² \¶ b¶ i¹ m °                               %       %          
 ² ³     .     ¸ ´*¸ ·¶ ½¶ Â°           8        Ä    Å 	     Æ   Ç  [ s È É     Ð  Ò Õ Ö ×   "  W O Ø 	 ¾ 7 Ù 	 Ú Ü Þ  n I ß	
```
```java
Êþº¾   =   1br/com/legalconnect/controller/ControladorEmpresa  java/lang/Object servicoEmpresa ,Lbr/com/legalconnect/service/ServicoEmpresa; <init> /(Lbr/com/legalconnect/service/ServicoEmpresa;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; Code
  
   ()V	     LineNumberTable LocalVariableTable this 3Lbr/com/legalconnect/controller/ControladorEmpresa; MethodParameters cadastrarEmpresa V(Lbr/com/legalconnect/dto/EmpresaRequestDTO;)Lorg/springframework/http/ResponseEntity; 	Signature ³(Lbr/com/legalconnect/dto/EmpresaRequestDTO;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/dto/EmpresaResponseDTO;>;>; 5Lorg/springframework/web/bind/annotation/PostMapping; "RuntimeVisibleParameterAnnotations Ljakarta/validation/Valid; 5Lorg/springframework/web/bind/annotation/RequestBody;
  !   *br/com/legalconnect/service/ServicoEmpresa  " Y(Lbr/com/legalconnect/dto/EmpresaRequestDTO;)Lbr/com/legalconnect/dto/EmpresaResponseDTO;	 $ & % #org/springframework/http/HttpStatus ' ( CREATED %Lorg/springframework/http/HttpStatus;
 * , + 'org/springframework/http/ResponseEntity - . status `(Lorg/springframework/http/HttpStatusCode;)Lorg/springframework/http/ResponseEntity$BodyBuilder;
 0 2 1 +br/com/legalconnect/common/dto/BaseResponse 3 4 builder C()Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder; 6 Empresa cadastrada com sucesso.
 8 : 9 ?br/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder ; < message U(Ljava/lang/String;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;	 > @ ? (br/com/legalconnect/enums/StatusResponse A B SUCESSO *Lbr/com/legalconnect/enums/StatusResponse;
 8 D - E m(Lbr/com/legalconnect/enums/StatusResponse;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 8 G H I data U(Ljava/lang/Object;)Lbr/com/legalconnect/common/dto/BaseResponse$BaseResponseBuilder;
 8 K L M build /()Lbr/com/legalconnect/common/dto/BaseResponse; O Q P 3org/springframework/http/ResponseEntity$BodyBuilder R S body =(Ljava/lang/Object;)Lorg/springframework/http/ResponseEntity; 
requestDTO +Lbr/com/legalconnect/dto/EmpresaRequestDTO; responseDTO ,Lbr/com/legalconnect/dto/EmpresaResponseDTO; RuntimeVisibleTypeAnnotations buscarEmpresaPorId ;(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity; (Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/dto/EmpresaResponseDTO;>;>; 4Lorg/springframework/web/bind/annotation/GetMapping; value /{id} 6Lorg/springframework/web/bind/annotation/PathVariable;
  a Y b >(Ljava/util/UUID;)Lbr/com/legalconnect/dto/EmpresaResponseDTO; d Empresa encontrada.
 * f g S ok id Ljava/util/UUID; listarEmpresas U(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/http/ResponseEntity; Ú(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lorg/springframework/data/domain/Page<Lbr/com/legalconnect/dto/EmpresaResponseDTO;>;>;>; .Lorg/springframework/data/web/PageableDefault; size   
 page     sort nomeFantasia
  u j v R(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page; x )Lista de empresas recuperada com sucesso. pageable *Lorg/springframework/data/domain/Pageable; responsePage &Lorg/springframework/data/domain/Page; LocalVariableTypeTable TLorg/springframework/data/domain/Page<Lbr/com/legalconnect/dto/EmpresaResponseDTO;>; atualizarEmpresa f(Ljava/util/UUID;Lbr/com/legalconnect/dto/EmpresaRequestDTO;)Lorg/springframework/http/ResponseEntity; Ã(Ljava/util/UUID;Lbr/com/legalconnect/dto/EmpresaRequestDTO;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Lbr/com/legalconnect/dto/EmpresaResponseDTO;>;>; 4Lorg/springframework/web/bind/annotation/PutMapping;
     i(Ljava/util/UUID;Lbr/com/legalconnect/dto/EmpresaRequestDTO;)Lbr/com/legalconnect/dto/EmpresaResponseDTO;  Empresa atualizada com sucesso. excluirEmpresa |(Ljava/util/UUID;)Lorg/springframework/http/ResponseEntity<Lbr/com/legalconnect/common/dto/BaseResponse<Ljava/lang/Void;>;>; 7Lorg/springframework/web/bind/annotation/DeleteMapping;
     (Ljava/util/UUID;)V	 $   ( 
NO_CONTENT  Empresa excluÃ­da com sucesso. 
SourceFile ControladorEmpresa.java 8Lorg/springframework/web/bind/annotation/RestController; 8Lorg/springframework/web/bind/annotation/RequestMapping; /api/v1/usuarios/empresas InnerClasses BaseResponseBuilder BodyBuilder !                	     
      F     
*· *+µ ±           '  ( 	 )        
       
                    	                           **´ +¶ M² #¸ )¸ /5¶ 7² =¶ C,¶ F¶ J¹ N °       "    3 	 6  7  8  9  : ! ; $ 6         *       * T U  	 ! V W  X   	           T    Y Z      [ 	     \  ][ s ^      _      x     "*´ +¶ `M¸ /c¶ 7² =¶ C,¶ F¶ J¸ e°           E 	 H  I  J  K  L  G         "       " h i  	  V W      h    j k      l 	     \        m  nI o pI q r[ s s         "*´ +¶ tM¸ /w¶ 7² =¶ C,¶ F¶ J¸ e°           X 	 \  ]  ^  _  `  [         "       " y z  	  { |  }     	  { ~      y            	       ][ s ^      _                  #*´ +,¶ N¸ /¶ 7² =¶ C-¶ F¶ J¸ e°           m 
 q 
 r  s  t  u  p    *    #       # h i    # T U  
  V W  X   	         	 h   T     Z       	       ][ s ^      _      q     %*´ +¶ ² ¸ )¸ /¶ 7² =¶ C¶ J¹ N °                               %       % h i      h         	          ][ s       8 0  	 O * 	
```
```java
{
  "folders": [
    {
      "path": "../../../../../../.."
    },
    {
      "path": "../../../../../../../../auth-service"
    },
    {
      "path": "../../../../../../../../common-lib"
    },
    {
      "path": "../../../../../../../../infrastructure"
    },
    {
      "path": "../../../../../../../../legalconnect-eureka-server"
    },
    {
      "path": "../../../../../../../../legal-gaateway"
    },
    {
      "path": "../../../../../../../../legal-advogado"
    },
    {
      "path": "../../../../../../../../common-tenent"
    }
  ],
  "settings": {
    "java.configuration.updateBuildConfiguration": "interactive"
  }
}

```
```java
Êþº¾   = G  Nbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder  @br/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder status Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; <init> ()V Code
  
 	 
 LineNumberTable LocalVariableTable this PLbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder; LocalVariableTypeTable XLbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder<TC;TB;>; d(Ljava/lang/String;)Lbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder; 	Signature (Ljava/lang/String;)TB;	    
     self R()Lbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder; MethodParameters ()TB; build 3()Lbr/com/legalconnect/dto/AdministradorRequestDTO; ()TC; toString ()Ljava/lang/String;
  % " #   ' ( ) makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; D()Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder; ,()Lbr/com/legalconnect/dto/PessoaRequestDTO;
  -    
SourceFile AdministradorRequestDTO.java Ù<C:Lbr/com/legalconnect/dto/AdministradorRequestDTO;B:Lbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder<TC;TB;>;>Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder<TC;TB;>; BootstrapMethods
 3 5 4 $java/lang/invoke/StringConcatFactory ( 6 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 2 9 IAdministradorRequestDTO.AdministradorRequestDTOBuilder(super=, status=) InnerClasses < /br/com/legalconnect/dto/AdministradorRequestDTO AdministradorRequestDTOBuilder ? (br/com/legalconnect/dto/PessoaRequestDTO PessoaRequestDTOBuilder B %java/lang/invoke/MethodHandles$Lookup D java/lang/invoke/MethodHandles Lookup NestHost!                    	 
     A     *· ±                                                        P     
*+µ *¶ °                   
       
           
                                   !          " #             J     *· $*´ º &  °                                   D  *             %     *¶ °                 A  +             %     *¶ ,°                   .    /     0         1     7  8 :      ; =	  > @	 A C E  F    ;
```
```java
Êþº¾   = $  Rbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilderImpl  Nbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this TLbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilderImpl; self V()Lbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build 3()Lbr/com/legalconnect/dto/AdministradorRequestDTO;  /br/com/legalconnect/dto/AdministradorRequestDTO
     S(Lbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder;)V R()Lbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder;
     
SourceFile AdministradorRequestDTO.java 	Signature ×Lbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder<Lbr/com/legalconnect/dto/AdministradorRequestDTO;Lbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilderImpl;>; InnerClasses AdministradorRequestDTOBuilder "AdministradorRequestDTOBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = a  /br/com/legalconnect/dto/AdministradorRequestDTO  (br/com/legalconnect/dto/PessoaRequestDTO status Ljava/lang/String; <init> S(Lbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder;)V 	Signature W(Lbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     E(Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder;)V	    Nbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder  	   LineNumberTable LocalVariableTable this 1Lbr/com/legalconnect/dto/AdministradorRequestDTO; b PLbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder; LocalVariableTypeTable TLbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder<**>; MethodParameters builder R()Lbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder; V()Lbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilder<**>; # Rbr/com/legalconnect/dto/AdministradorRequestDTO$AdministradorRequestDTOBuilderImpl
 " %  & ()V 	getStatus ()Ljava/lang/String; 	setStatus (Ljava/lang/String;)V equals (Ljava/lang/Object;)Z
  . / , canEqual
  1 ' (
 3 5 4 java/lang/Object + , o Ljava/lang/Object; other this$status other$status 
StackMapTable hashCode ()I
 3 ? < = PRIME I result $status toString   F G H makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String;
  % 
SourceFile AdministradorRequestDTO.java BootstrapMethods
 N P O $java/lang/invoke/StringConcatFactory G Q (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; M T !AdministradorRequestDTO(status=) InnerClasses AdministradorRequestDTOBuilder "AdministradorRequestDTOBuilderImpl Y @br/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder PessoaRequestDTOBuilder \ %java/lang/invoke/MethodHandles$Lookup ^ java/lang/invoke/MethodHandles Lookup NestMembers !           
     	    
         
   T     *+· *+´ µ ±                                               	     	    !         
   (      » "Y· $°                   ' (          
   /     *´ °                         ) *          
   :     *+µ ±                                     + ,          
   °     C+*¦ ¬+Á  ¬+À M,*¶ - ¬*¶ 0N,¶ 0:-Ç Æ § -¶ 2 ¬¬               4    C       C 6 7   . 8   $  9 7  *  : 7  ;    ü  ý  3 3     6   / ,          
   9     +Á ¬                           8 7      8   < =          
        ;<=*¶ 0N;h-Ç +§ -¶ >`=¬               *           @ A    B A  
  C 7  ;   # ÿ    3 ÿ    3   D (          
   4     
*¶ 0º E  °                   
       &          
   /     *· I±           
               *          
   >     
*· I*+µ ±                   
       
           J    K L     R  S U   "    V	 "  W  X  Z	 [ ] _  `      "
```
```java
Êþº¾   = G  Pbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder  Bbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder status Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; <init> ()V Code
  
 	 
 LineNumberTable LocalVariableTable this RLbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder; LocalVariableTypeTable ZLbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder<TC;TB;>; f(Ljava/lang/String;)Lbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder; 	Signature (Ljava/lang/String;)TB;	    
     self T()Lbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder; MethodParameters ()TB; build 4()Lbr/com/legalconnect/dto/AdministradorResponseDTO; ()TC; toString ()Ljava/lang/String;
  % " #   ' ( ) makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; F()Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; -()Lbr/com/legalconnect/dto/PessoaResponseDTO;
  -    
SourceFile AdministradorResponseDTO.java Þ<C:Lbr/com/legalconnect/dto/AdministradorResponseDTO;B:Lbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder<TC;TB;>;>Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder<TC;TB;>; BootstrapMethods
 3 5 4 $java/lang/invoke/StringConcatFactory ( 6 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 2 9 KAdministradorResponseDTO.AdministradorResponseDTOBuilder(super=, status=) InnerClasses < 0br/com/legalconnect/dto/AdministradorResponseDTO AdministradorResponseDTOBuilder ? )br/com/legalconnect/dto/PessoaResponseDTO PessoaResponseDTOBuilder B %java/lang/invoke/MethodHandles$Lookup D java/lang/invoke/MethodHandles Lookup NestHost!                    	 
     A     *· ±                                                        P     
*+µ *¶ °                   
       
           
                                   !          " #             J     *· $*´ º &  °                                   D  *             %     *¶ °                 A  +             %     *¶ ,°                   .    /     0         1     7  8 :      ; =	  > @	 A C E  F    ;
```
```java
Êþº¾   = $  Tbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilderImpl  Pbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this VLbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilderImpl; self X()Lbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build 4()Lbr/com/legalconnect/dto/AdministradorResponseDTO;  0br/com/legalconnect/dto/AdministradorResponseDTO
     U(Lbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder;)V T()Lbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder;
     
SourceFile AdministradorResponseDTO.java 	Signature ÜLbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder<Lbr/com/legalconnect/dto/AdministradorResponseDTO;Lbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilderImpl;>; InnerClasses AdministradorResponseDTOBuilder #AdministradorResponseDTOBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = a  0br/com/legalconnect/dto/AdministradorResponseDTO  )br/com/legalconnect/dto/PessoaResponseDTO status Ljava/lang/String; <init> U(Lbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder;)V 	Signature Y(Lbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     G(Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;)V	    Pbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder  	   LineNumberTable LocalVariableTable this 2Lbr/com/legalconnect/dto/AdministradorResponseDTO; b RLbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder; LocalVariableTypeTable VLbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder<**>; MethodParameters builder T()Lbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder; X()Lbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder<**>; # Tbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilderImpl
 " %  & ()V 	getStatus ()Ljava/lang/String; 	setStatus (Ljava/lang/String;)V equals (Ljava/lang/Object;)Z
  . / , canEqual
  1 ' (
 3 5 4 java/lang/Object + , o Ljava/lang/Object; other this$status other$status 
StackMapTable hashCode ()I
 3 ? < = PRIME I result $status toString   F G H makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String;
  % 
SourceFile AdministradorResponseDTO.java BootstrapMethods
 N P O $java/lang/invoke/StringConcatFactory G Q (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; M T "AdministradorResponseDTO(status=) InnerClasses AdministradorResponseDTOBuilder #AdministradorResponseDTOBuilderImpl Y Bbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder PessoaResponseDTOBuilder \ %java/lang/invoke/MethodHandles$Lookup ^ java/lang/invoke/MethodHandles Lookup NestMembers !           
     	    
         
   T     *+· *+´ µ ±                                               	     	    !         
   (      » "Y· $°                   ' (          
   /     *´ °                         ) *          
   :     *+µ ±                                     + ,          
   °     C+*¦ ¬+Á  ¬+À M,*¶ - ¬*¶ 0N,¶ 0:-Ç Æ § -¶ 2 ¬¬               4    C       C 6 7   . 8   $  9 7  *  : 7  ;    ü  ý  3 3     6   / ,          
   9     +Á ¬                           8 7      8   < =          
        ;<=*¶ 0N;h-Ç +§ -¶ >`=¬               *           @ A    B A  
  C 7  ;   # ÿ    3 ÿ    3   D (          
   4     
*¶ 0º E  °                   
       &          
   /     *· I±           
               *          
   >     
*· I*+µ ±                   
       
           J    K L     R  S U   "    V	 "  W  X  Z	 [ ] _  `      "
```
```java
Êþº¾   = G  Bbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder  @br/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder status Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; <init> ()V Code
  
 	 
 LineNumberTable LocalVariableTable this DLbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder; LocalVariableTypeTable LLbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder<TC;TB;>; X(Ljava/lang/String;)Lbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder; 	Signature (Ljava/lang/String;)TB;	    
     self F()Lbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder; MethodParameters ()TB; build -()Lbr/com/legalconnect/dto/ClienteRequestDTO; ()TC; toString ()Ljava/lang/String;
  % " #   ' ( ) makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; D()Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder; ,()Lbr/com/legalconnect/dto/PessoaRequestDTO;
  -    
SourceFile ClienteRequestDTO.java Ç<C:Lbr/com/legalconnect/dto/ClienteRequestDTO;B:Lbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder<TC;TB;>;>Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder<TC;TB;>; BootstrapMethods
 3 5 4 $java/lang/invoke/StringConcatFactory ( 6 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 2 9 =ClienteRequestDTO.ClienteRequestDTOBuilder(super=, status=) InnerClasses < )br/com/legalconnect/dto/ClienteRequestDTO ClienteRequestDTOBuilder ? (br/com/legalconnect/dto/PessoaRequestDTO PessoaRequestDTOBuilder B %java/lang/invoke/MethodHandles$Lookup D java/lang/invoke/MethodHandles Lookup NestHost!                    	 
     A     *· ±                                                        P     
*+µ *¶ °                   
       
           
                                   !          " #             J     *· $*´ º &  °                                   D  *             %     *¶ °                 A  +             %     *¶ ,°                   .    /     0         1     7  8 :      ; =	  > @	 A C E  F    ;
```
```java
Êþº¾   = $  Fbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilderImpl  Bbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this HLbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilderImpl; self J()Lbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build -()Lbr/com/legalconnect/dto/ClienteRequestDTO;  )br/com/legalconnect/dto/ClienteRequestDTO
     G(Lbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder;)V F()Lbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder;
     
SourceFile ClienteRequestDTO.java 	Signature ¹Lbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder<Lbr/com/legalconnect/dto/ClienteRequestDTO;Lbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilderImpl;>; InnerClasses ClienteRequestDTOBuilder ClienteRequestDTOBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = a  )br/com/legalconnect/dto/ClienteRequestDTO  (br/com/legalconnect/dto/PessoaRequestDTO status Ljava/lang/String; <init> G(Lbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder;)V 	Signature K(Lbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     E(Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder;)V	    Bbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder  	   LineNumberTable LocalVariableTable this +Lbr/com/legalconnect/dto/ClienteRequestDTO; b DLbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder; LocalVariableTypeTable HLbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder<**>; MethodParameters builder F()Lbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder; J()Lbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilder<**>; # Fbr/com/legalconnect/dto/ClienteRequestDTO$ClienteRequestDTOBuilderImpl
 " %  & ()V 	getStatus ()Ljava/lang/String; 	setStatus (Ljava/lang/String;)V equals (Ljava/lang/Object;)Z
  . / , canEqual
  1 ' (
 3 5 4 java/lang/Object + , o Ljava/lang/Object; other this$status other$status 
StackMapTable hashCode ()I
 3 ? < = PRIME I result $status toString   F G H makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String;
  % 
SourceFile ClienteRequestDTO.java BootstrapMethods
 N P O $java/lang/invoke/StringConcatFactory G Q (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; M T ClienteRequestDTO(status=) InnerClasses ClienteRequestDTOBuilder ClienteRequestDTOBuilderImpl Y @br/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder PessoaRequestDTOBuilder \ %java/lang/invoke/MethodHandles$Lookup ^ java/lang/invoke/MethodHandles Lookup NestMembers !           
     	    
         
   T     *+· *+´ µ ±                                               	     	    !         
   (      » "Y· $°                   ' (          
   /     *´ °                         ) *          
   :     *+µ ±                                     + ,          
   °     C+*¦ ¬+Á  ¬+À M,*¶ - ¬*¶ 0N,¶ 0:-Ç Æ § -¶ 2 ¬¬               4    C       C 6 7   . 8   $  9 7  *  : 7  ;    ü  ý  3 3     6   / ,          
   9     +Á ¬                           8 7      8   < =          
        ;<=*¶ 0N;h-Ç +§ -¶ >`=¬               *           @ A    B A  
  C 7  ;   # ÿ    3 ÿ    3   D (          
   4     
*¶ 0º E  °                   
       &          
   /     *· I±           
               *          
   >     
*· I*+µ ±                   
       
           J    K L     R  S U   "    V	 "  W  X  Z	 [ ] _  `      "
```
```java
Êþº¾   = J  Dbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder  Bbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder status Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; tipo <init> ()V Code
   
  LineNumberTable LocalVariableTable this FLbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder; LocalVariableTypeTable NLbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder<TC;TB;>; Z(Ljava/lang/String;)Lbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder; 	Signature (Ljava/lang/String;)TB;	    
     self H()Lbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder; MethodParameters	    	  ()TB; build .()Lbr/com/legalconnect/dto/ClienteResponseDTO; ()TC; toString ()Ljava/lang/String;
  ( % &   * + , makeConcatWithConstants J(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; F()Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; -()Lbr/com/legalconnect/dto/PessoaResponseDTO;
  0 " # 
SourceFile ClienteResponseDTO.java Ì<C:Lbr/com/legalconnect/dto/ClienteResponseDTO;B:Lbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder<TC;TB;>;>Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder<TC;TB;>; BootstrapMethods
 6 8 7 $java/lang/invoke/StringConcatFactory + 9 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 5 < GClienteResponseDTO.ClienteResponseDTOBuilder(super=, status=, tipo=) InnerClasses ? *br/com/legalconnect/dto/ClienteResponseDTO ClienteResponseDTOBuilder B )br/com/legalconnect/dto/PessoaResponseDTO PessoaResponseDTOBuilder E %java/lang/invoke/MethodHandles$Lookup G java/lang/invoke/MethodHandles Lookup NestHost!                   	             
      A     *· 
±                                                        P     
*+µ *¶ °                   
       
           
            	                   P     
*+µ *¶ °                   
       
 	          
         	         !         " #      $          % &             N     *· '*´ *´ º )  °                                   D  -             %     *¶ °                 A " .             %     *¶ /°                   1    2     3         4     :  ; =      > @	  A C	 D F H  I    >
```
```java
Êþº¾   = $  Hbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilderImpl  Dbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this JLbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilderImpl; self L()Lbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build .()Lbr/com/legalconnect/dto/ClienteResponseDTO;  *br/com/legalconnect/dto/ClienteResponseDTO
     I(Lbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder;)V H()Lbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder;
     
SourceFile ClienteResponseDTO.java 	Signature ¾Lbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder<Lbr/com/legalconnect/dto/ClienteResponseDTO;Lbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilderImpl;>; InnerClasses ClienteResponseDTOBuilder ClienteResponseDTOBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = m  *br/com/legalconnect/dto/ClienteResponseDTO  )br/com/legalconnect/dto/PessoaResponseDTO status Ljava/lang/String; tipo <init> I(Lbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder;)V 	Signature M(Lbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     G(Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;)V	    Dbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder  	  	    	   LineNumberTable LocalVariableTable this ,Lbr/com/legalconnect/dto/ClienteResponseDTO; b FLbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder; LocalVariableTypeTable JLbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder<**>; MethodParameters builder H()Lbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder; L()Lbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder<**>; ' Hbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilderImpl
 & )  * ()V 	getStatus ()Ljava/lang/String; getTipo 	setStatus (Ljava/lang/String;)V setTipo equals (Ljava/lang/Object;)Z
  4 5 2 canEqual
  7 + ,
 9 ; : java/lang/Object 1 2
  = - , o Ljava/lang/Object; other this$status other$status 	this$tipo 
other$tipo 
StackMapTable hashCode ()I
 9 I F G PRIME I result $status $tipo toString   Q R S makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
  ) '(Ljava/lang/String;Ljava/lang/String;)V 
SourceFile ClienteResponseDTO.java BootstrapMethods
 Z \ [ $java/lang/invoke/StringConcatFactory R ] (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; Y ` $ClienteResponseDTO(status=, tipo=) InnerClasses ClienteResponseDTOBuilder ClienteResponseDTOBuilderImpl e Bbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder PessoaResponseDTOBuilder h %java/lang/invoke/MethodHandles$Lookup j java/lang/invoke/MethodHandles Lookup NestMembers !                   	  
          
      \     *+· *+´ µ *+´ µ ±                                        !  "      	 # $  
    %      
      (      » &Y· (°                   + ,       
      /     *´ °                         - ,       
      /     *´ °                         . /       
      :     *+µ ±                              "       0 /       
      :     *+µ ±                              "       1 2       
      ô     h+*¦ ¬+Á  ¬+À M,*¶ 3 ¬*¶ 6N,¶ 6:-Ç Æ § -¶ 8 ¬*¶ <:,¶ <:Ç Æ § 
¶ 8 ¬¬               H    h       h > ?   S @   $ D A ?  * > B ?  G ! C ?  M  D ?  E     	ü  ý  9 9ý  9 9	 "    >   5 2       
      9     +Á ¬                           @ ?  "    @   F G       
      Ü     :;<=*¶ 6N;h-Ç +§ -¶ H`=*¶ <:;hÇ +§ ¶ H`=¬               4    :      7 J K   5 L K  
 0 M ?  #  N ?  E   J ÿ    9 ÿ    9 ÿ    9 9 ÿ    9 9   O ,       
      8     *¶ 6*¶ <º P  °                          *       
      /     *· T±           
               U       
      M     *· T*+µ *,µ ±                                     "   	      V    W X     ^  _ a   "    b	 &  c  d  f	 g i k  l      &
```
```java
Êþº¾   = Z  Bbr/com/legalconnect/dto/EmpresaRequestDTO$EmpresaRequestDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; nomeFantasia Ljava/lang/String; razaoSocial cnpj emailContato 	enderecos Ljava/util/List; 	Signature >Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>; 	telefones Ljava/util/Set; #Ljava/util/Set<Ljava/lang/String;>; <init> ()V Code
     LineNumberTable LocalVariableTable this DLbr/com/legalconnect/dto/EmpresaRequestDTO$EmpresaRequestDTOBuilder; V(Ljava/util/UUID;)Lbr/com/legalconnect/dto/EmpresaRequestDTO$EmpresaRequestDTOBuilder;	      MethodParameters X(Ljava/lang/String;)Lbr/com/legalconnect/dto/EmpresaRequestDTO$EmpresaRequestDTOBuilder;	  $ 	 
	  &  
	  (  
	  * 
 
 V(Ljava/util/List;)Lbr/com/legalconnect/dto/EmpresaRequestDTO$EmpresaRequestDTOBuilder; (Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>;)Lbr/com/legalconnect/dto/EmpresaRequestDTO$EmpresaRequestDTOBuilder;	  .   LocalVariableTypeTable U(Ljava/util/Set;)Lbr/com/legalconnect/dto/EmpresaRequestDTO$EmpresaRequestDTOBuilder; i(Ljava/util/Set<Ljava/lang/String;>;)Lbr/com/legalconnect/dto/EmpresaRequestDTO$EmpresaRequestDTOBuilder;	  3   build -()Lbr/com/legalconnect/dto/EmpresaRequestDTO; 7 )br/com/legalconnect/dto/EmpresaRequestDTO
 6 9  : z(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/Set;)V toString ()Ljava/lang/String;
 > @ ? java/lang/String A B valueOf &(Ljava/lang/Object;)Ljava/lang/String;   D E F makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile EmpresaRequestDTO.java BootstrapMethods
 K M L $java/lang/invoke/StringConcatFactory E N (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; J Q EmpresaRequestDTO.EmpresaRequestDTOBuilder(id=, nomeFantasia=, razaoSocial=, cnpj=, emailContato=, enderecos=, telefones=) InnerClasses EmpresaRequestDTOBuilder U %java/lang/invoke/MethodHandles$Lookup W java/lang/invoke/MethodHandles Lookup NestHost !                   	 
            
            
           
 
                                            
                 /     *· ±                                       ;     *+µ *°                              !       	 "             ;     *+µ #*°                           	 
  !    	    "             ;     *+µ %*°                            
  !        "             ;     *+µ '*°                            
  !       
 "             ;     *+µ )*°                           
 
  !    
    +      ,            M     *+µ -*°                              /           !        0      1            M     *+µ 2*°                              /           !       4 5             N 	    $» 6Y*´ *´ #*´ %*´ '*´ )*´ -*´ 2· 8°                   $      ; <             U     +*´ ¸ =*´ #*´ %*´ '*´ )*´ -¸ =*´ 2¸ =º C  °                   +      G    H         I     O  P R      6 S 	 T V X  Y    6
```
```java
Êþº¾   = ¶  )br/com/legalconnect/dto/EmpresaRequestDTO  java/lang/Object id Ljava/util/UUID; nomeFantasia Ljava/lang/String; RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message *O nome fantasia nÃ£o pode estar em branco. %Ljakarta/validation/constraints/Size; max   ÿ 3O nome fantasia deve ter no mÃ¡ximo 255 caracteres. RuntimeVisibleTypeAnnotations razaoSocial *A razÃ£o social nÃ£o pode estar em branco. 3A razÃ£o social deve ter no mÃ¡ximo 255 caracteres. cnpj !O CNPJ nÃ£o pode estar em branco. (Ljakarta/validation/constraints/Pattern; regexp \d{2}\.\d{3}\.\d{3}/\d{4}-\d{2} 2Formato de CNPJ invÃ¡lido. Use XX.XXX.XXX/XXXX-XX. emailContato &Ljakarta/validation/constraints/Email; &Formato de email de contato invÃ¡lido. 6O email de contato deve ter no mÃ¡ximo 255 caracteres. 	enderecos Ljava/util/List; 	Signature >Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>; Ljakarta/validation/Valid; 	telefones Ljava/util/Set; #Ljava/util/Set<Ljava/lang/String;>; builder F()Lbr/com/legalconnect/dto/EmpresaRequestDTO$EmpresaRequestDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code - Bbr/com/legalconnect/dto/EmpresaRequestDTO$EmpresaRequestDTOBuilder
 , / 0 1 <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	  7   this +Lbr/com/legalconnect/dto/EmpresaRequestDTO; getNomeFantasia ()Ljava/lang/String;	  =   getRazaoSocial	  @   getCnpj	  C   getEmailContato	  F   getEnderecos ()Ljava/util/List; @()Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>;	  K    getTelefones ()Ljava/util/Set; %()Ljava/util/Set<Ljava/lang/String;>;	  P $ % setId (Ljava/util/UUID;)V MethodParameters setNomeFantasia (Ljava/lang/String;)V setRazaoSocial setCnpj setEmailContato setEnderecos (Ljava/util/List;)V A(Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>;)V LocalVariableTypeTable setTelefones (Ljava/util/Set;)V &(Ljava/util/Set<Ljava/lang/String;>;)V equals (Ljava/lang/Object;)Z
  c d a canEqual
  f 4 5
  h ` a
  j : ;
  l > ;
  n A ;
  p D ;
  r G H
  t L M o Ljava/lang/Object; other this$id other$id this$nomeFantasia other$nomeFantasia this$razaoSocial other$razaoSocial 	this$cnpj 
other$cnpj this$emailContato other$emailContato this$enderecos other$enderecos this$telefones other$telefones 
StackMapTable hashCode ()I
     PRIME I result $id 
$nomeFantasia $razaoSocial $cnpj 
$emailContato 
$enderecos 
$telefones toString
    java/lang/String   valueOf &(Ljava/lang/Object;)Ljava/lang/String;      makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
  / z(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/Set;)V ¼(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>;Ljava/util/Set<Ljava/lang/String;>;)V 
SourceFile EmpresaRequestDTO.java BootstrapMethods
 § © ¨ $java/lang/invoke/StringConcatFactory  ª (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; ¦ ­ hEmpresaRequestDTO(id=, nomeFantasia=, razaoSocial=, cnpj=, emailContato=, enderecos=, telefones=) InnerClasses EmpresaRequestDTOBuilder ± %java/lang/invoke/MethodHandles$Lookup ³ java/lang/invoke/MethodHandles Lookup NestMembers !               	     
  s  
  I  s        
  s   
  I  s      	     
  s  
  I  s        
  s   
  I  s      	     
  s    s  s        
  s     s  s      	       s  
  I  s          s   
  I  s       !    " 	     #         #    $ %  !    &  	 ' (  )     *   +   (      » ,Y· .°    2        3       4 5  )     *   +   /     *´ 6°    2        3        8 9    : ;  )     *   +   /     *´ <°    2        3        8 9    > ;  )     *   +   /     *´ ?°    2        3        8 9    A ;  )     *   +   /     *´ B°    2        3        8 9    D ;  )     *   +   /     *´ E°    2        3        8 9    G H  !    I )     *   +   /     *´ J°    2        3        8 9    L M  !    N )     *   +   /     *´ O°    2        3        8 9    Q R  )     *   +   :     *+µ 6±    2        3        8 9         S       T U  )     *   +   :     *+µ <±    2        3        8 9         S       V U  )     *   +   :     *+µ ?±    2        3        8 9         S       W U  )     *   +   :     *+µ B±    2        3        8 9         S       X U  )     *   +   :     *+µ E±    2        3        8 9         S       Y Z  !    [ )     *   +   L     *+µ J±    2        3        8 9          \         "  S       ] ^  !    _ )     *   +   L     *+µ O±    2        3        8 9      $ %  \        $ &  S    $   ` a  )     *   +  H    !+*¦ ¬+Á  ¬+À M,*¶ b ¬*¶ eN,¶ e:-Ç Æ § -¶ g ¬*¶ i:,¶ i:Ç Æ § 
¶ g ¬*¶ k:,¶ k:Ç Æ § 
¶ g ¬*¶ m:	,¶ m:
	Ç 
Æ § 
	
¶ g ¬*¶ o:,¶ o:Ç Æ § 
¶ g ¬*¶ q:
,¶ q:
Ç Æ § 

¶ g ¬*¶ s:,¶ s:Ç Æ § 
¶ g ¬¬    2        3   ¬   ! 8 9    ! u v   w 9  $ ý x v  * ÷ y v  G Ú z v  M Ô { v  l µ | v  r ¯ } v    ~ v 	    v 
 ¶ k  v  ¼ e  v  Û F  v 
 á @  v   !  v    v     W ü  ý   ý   	ý   	ý   	ý   	ý   	ý   	 S    u   d a  )     *   +   9     +Á ¬    2        3        8 9      w v  S    w      )     *   +  ²  
   Á;<=*¶ eN;h-Ç +§ -¶ `=*¶ i:;hÇ +§ ¶ `=*¶ k:;hÇ +§ ¶ `=*¶ m:;hÇ +§ ¶ `=*¶ o:;hÇ +§ ¶ `=*¶ q:;hÇ +§ ¶ `=*¶ s:	;h	Ç +§ 	¶ `=¬    2        3   f 
   Á 8 9    ¾     ¼    
 ·  v  #   v  >   v  Y h  v  t M  v   2  v  ª   v 	   g ÿ     ÿ     ÿ      ÿ      ÿ       ÿ       ÿ        ÿ        ÿ         ÿ         ÿ  	        ÿ  	        ÿ  
         ÿ  
            ;  )     *   +   U     +*¶ e¸ *¶ i*¶ k*¶ m*¶ o*¶ q¸ *¶ s¸ º   °    2        3       + 8 9    0 1  )     *   +   /     *·  ±    2        3        8 9    0 ¡  !    ¢ )     *   +   ¸     ,*·  *+µ 6*,µ <*-µ ?*µ B*µ E*µ J*µ O±    2        3   R    , 8 9     ,      ,      ,      ,      ,      ,       , $ %  \       ,  "    , $ &  S                $   £    ¤ ¥     «  ¬ ®     ,  ¯ 	 ° ² ´  µ     ,
```
```java
Êþº¾   = b  Dbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; nomeFantasia Ljava/lang/String; razaoSocial cnpj emailContato 	enderecos Ljava/util/List; 	Signature ?Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>; 	telefones Ljava/util/Set; #Ljava/util/Set<Ljava/lang/String;>; 	createdAt Ljava/time/LocalDateTime; 	updatedAt <init> ()V Code
     LineNumberTable LocalVariableTable this FLbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder; X(Ljava/util/UUID;)Lbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder;	  #   MethodParameters Z(Ljava/lang/String;)Lbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder;	  ' 	 
	  )  
	  +  
	  - 
 
 X(Ljava/util/List;)Lbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder; (Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>;)Lbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder;	  1   LocalVariableTypeTable W(Ljava/util/Set;)Lbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder; k(Ljava/util/Set<Ljava/lang/String;>;)Lbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder;	  6   a(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder;	  9  	  ;   build .()Lbr/com/legalconnect/dto/EmpresaResponseDTO; ? *br/com/legalconnect/dto/EmpresaResponseDTO
 > A  B ¬(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/Set;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)V toString ()Ljava/lang/String;
 F H G java/lang/String I J valueOf &(Ljava/lang/Object;)Ljava/lang/String;   L M N makeConcatWithConstants ¶(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile EmpresaResponseDTO.java BootstrapMethods
 S U T $java/lang/invoke/StringConcatFactory M V (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; R Y EmpresaResponseDTO.EmpresaResponseDTOBuilder(id=, nomeFantasia=, razaoSocial=, cnpj=, emailContato=, enderecos=, telefones=, createdAt=, updatedAt=) InnerClasses EmpresaResponseDTOBuilder ] %java/lang/invoke/MethodHandles$Lookup _ java/lang/invoke/MethodHandles Lookup NestHost !     	              	 
            
            
           
 
                                                                                     /     *· ±                           !             ;     *+µ "*°                               $       	 %             ;     *+µ &*°                            	 
  $    	    %             ;     *+µ (*°                             
  $        %             ;     *+µ **°                             
  $       
 %             ;     *+µ ,*°                            
 
  $    
    .      /            M     *+µ 0*°                               2           $        3      4            M     *+µ 5*°                               2           $        7             ;     *+µ 8*°                               $        7             ;     *+µ :*°                               $       < =             V     ,» >Y*´ "*´ &*´ (*´ **´ ,*´ 0*´ 5*´ 8*´ :· @°                   ,       C D             c 	    9*´ "¸ E*´ &*´ (*´ **´ ,*´ 0¸ E*´ 5¸ E*´ 8¸ E*´ :¸ Eº K  °                   9       O    P         Q     W  X Z      > [ 	 \ ^ `  a    >
```
```java
Êþº¾   = ¹  *br/com/legalconnect/dto/EmpresaResponseDTO  java/lang/Object id Ljava/util/UUID; nomeFantasia Ljava/lang/String; razaoSocial cnpj emailContato 	enderecos Ljava/util/List; 	Signature ?Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>; 	telefones Ljava/util/Set; #Ljava/util/Set<Ljava/lang/String;>; 	createdAt Ljava/time/LocalDateTime; 	updatedAt builder H()Lbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  Dbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder
      <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	  &   this ,Lbr/com/legalconnect/dto/EmpresaResponseDTO; getNomeFantasia ()Ljava/lang/String;	  ,   getRazaoSocial	  / 	  getCnpj	  2 
  getEmailContato	  5   getEnderecos ()Ljava/util/List; A()Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>;	  :  
 getTelefones ()Ljava/util/Set; %()Ljava/util/Set<Ljava/lang/String;>;	  ?   getCreatedAt ()Ljava/time/LocalDateTime;	  C   getUpdatedAt	  F   setId (Ljava/util/UUID;)V MethodParameters setNomeFantasia (Ljava/lang/String;)V setRazaoSocial setCnpj setEmailContato setEnderecos (Ljava/util/List;)V B(Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>;)V LocalVariableTypeTable setTelefones (Ljava/util/Set;)V &(Ljava/util/Set<Ljava/lang/String;>;)V setCreatedAt (Ljava/time/LocalDateTime;)V setUpdatedAt equals (Ljava/lang/Object;)Z
  \ ] Z canEqual
  _ # $
  a Y Z
  c ) *
  e - *
  g 0 *
  i 3 *
  k 6 7
  m ; <
  o @ A
  q D A o Ljava/lang/Object; other this$id other$id this$nomeFantasia other$nomeFantasia this$razaoSocial other$razaoSocial 	this$cnpj 
other$cnpj this$emailContato other$emailContato this$enderecos other$enderecos this$telefones other$telefones this$createdAt other$createdAt this$updatedAt other$updatedAt 
StackMapTable hashCode ()I
     PRIME I result $id 
$nomeFantasia $razaoSocial $cnpj 
$emailContato 
$enderecos 
$telefones 
$createdAt 
$updatedAt toString
    java/lang/String   valueOf &(Ljava/lang/Object;)Ljava/lang/String;     ¡ ¢ makeConcatWithConstants ¶(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
   ¬(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/Set;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)V ï(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>;Ljava/util/Set<Ljava/lang/String;>;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)V 
SourceFile EmpresaResponseDTO.java BootstrapMethods
 ª ¬ « $java/lang/invoke/StringConcatFactory ¡ ­ (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; © ° EmpresaResponseDTO(id=, nomeFantasia=, razaoSocial=, cnpj=, emailContato=, enderecos=, telefones=, createdAt=, updatedAt=) InnerClasses EmpresaResponseDTOBuilder ´ %java/lang/invoke/MethodHandles$Lookup ¶ java/lang/invoke/MethodHandles Lookup NestMembers !     	            	     
           
                           	               (      » Y· °    !        "       # $             /     *´ %°    !        "        ' (    ) *             /     *´ +°    !        "        ' (    - *             /     *´ .°    !        "        ' (    0 *             /     *´ 1°    !        "        ' (    3 *             /     *´ 4°    !        "        ' (    6 7      8            /     *´ 9°    !        "        ' (    ; <      =            /     *´ >°    !        "        ' (    @ A             /     *´ B°    !        "        ' (    D A             /     *´ E°    !        "        ' (    G H             :     *+µ %±    !        "        ' (         I       J K             :     *+µ +±    !        "        ' (         I       L K             :     *+µ .±    !        "        ' (      	   I    	   M K             :     *+µ 1±    !        "        ' (      
   I    
   N K             :     *+µ 4±    !        "        ' (         I       O P      Q            L     *+µ 9±    !        "        ' (       
  R           I       S T      U            L     *+µ >±    !        "        ' (         R           I       V W             :     *+µ B±    !        "        ' (         I       X W             :     *+µ E±    !        "        ' (         I       Y Z            Ð    k+*¦ ¬+Á  ¬+À M,*¶ [ ¬*¶ ^N,¶ ^:-Ç Æ § -¶ ` ¬*¶ b:,¶ b:Ç Æ § 
¶ ` ¬*¶ d:,¶ d:Ç Æ § 
¶ ` ¬*¶ f:	,¶ f:
	Ç 
Æ § 
	
¶ ` ¬*¶ h:,¶ h:Ç Æ § 
¶ ` ¬*¶ j:
,¶ j:
Ç Æ § 

¶ ` ¬*¶ l:,¶ l:Ç Æ § 
¶ ` ¬*¶ n:,¶ n:Ç Æ § 
¶ ` ¬*¶ p:,¶ p:Ç Æ § 
¶ ` ¬¬    !        "   Ô   k ' (    k r s  V t (  $G u s  *A v s  G$ w s  M x s  l ÿ y s  r ù z s   Ú { s 	  Ô | s 
 ¶ µ } s  ¼ ¯ ~ s  Û   s 
 á   s   k  s  e  s % F  s + @  s J !  s P   s     m ü  ý   ý   	ý   	ý   	ý   	ý   	ý   	ý   	ý   	 I    r   ] Z             9     +Á ¬    !        "        ' (      t s  I    t                     ÷;<=*¶ ^N;h-Ç +§ -¶ `=*¶ b:;hÇ +§ ¶ `=*¶ d:;hÇ +§ ¶ `=*¶ f:;hÇ +§ ¶ `=*¶ h:;hÇ +§ ¶ `=*¶ j:;hÇ +§ ¶ `=*¶ l:	;h	Ç +§ 	¶ `=*¶ n:
;h
Ç +§ 
¶ `=*¶ p:;hÇ +§ ¶ `=¬    !        "   z    ÷ ' (    ô     ò    
 í  s  # Ô  s  > ¹  s  Y   s  t   s   h  s  ª M  s 	 Å 2  s 
 à   s     ÿ     ÿ     ÿ      ÿ      ÿ       ÿ       ÿ        ÿ        ÿ         ÿ         ÿ  	        ÿ  	        ÿ  
         ÿ  
         ÿ            ÿ            ÿ             ÿ                *             c 	    9*¶ ^¸ *¶ b*¶ d*¶ f*¶ h*¶ j¸ *¶ l¸ *¶ n¸ *¶ p¸ º   °    !        "       9 ' (                   /     *· £±    !        "        ' (     ¤      ¥            Ø  
   8*· £*+µ %*,µ +*-µ .*µ 1*µ 4*µ 9*µ >*µ B*	µ E±    !        "   f 
   8 ' (     8      8      8 	     8 
     8      8  
    8      8      8   	 R       8      8    I   %	     	  
             ¦    § ¨     ®  ¯ ±       ² 	 ³ µ ·  ¸     
```
```java
Êþº¾   = `  Dbr/com/legalconnect/dto/EnderecoRequestDTO$EnderecoRequestDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; 
logradouro Ljava/lang/String; numero complemento bairro cidade estado cep pais tipoEndereco 2Lbr/com/legalconnect/entity/Endereco$TipoEndereco; <init> ()V Code
     LineNumberTable LocalVariableTable this FLbr/com/legalconnect/dto/EnderecoRequestDTO$EnderecoRequestDTOBuilder; X(Ljava/util/UUID;)Lbr/com/legalconnect/dto/EnderecoRequestDTO$EnderecoRequestDTOBuilder;	     MethodParameters Z(Ljava/lang/String;)Lbr/com/legalconnect/dto/EnderecoRequestDTO$EnderecoRequestDTOBuilder;	  # 	 
	  %  
	  '  
	  ) 
 
	  +  
	  -  
	  /  
	  1  
 z(Lbr/com/legalconnect/entity/Endereco$TipoEndereco;)Lbr/com/legalconnect/dto/EnderecoRequestDTO$EnderecoRequestDTOBuilder;	  4   build .()Lbr/com/legalconnect/dto/EnderecoRequestDTO; 8 *br/com/legalconnect/dto/EnderecoRequestDTO
 7 :  ; Õ(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/entity/Endereco$TipoEndereco;)V toString ()Ljava/lang/String;
 ? A @ java/lang/String B C valueOf &(Ljava/lang/Object;)Ljava/lang/String;   E F G makeConcatWithConstants È(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile EnderecoRequestDTO.java BootstrapMethods
 L N M $java/lang/invoke/StringConcatFactory F O (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; K R EnderecoRequestDTO.EnderecoRequestDTOBuilder(id=, logradouro=, numero=, complemento=, bairro=, cidade=, estado=, cep=, pais=, tipoEndereco=) InnerClasses EnderecoRequestDTOBuilder V 0br/com/legalconnect/entity/Endereco$TipoEndereco X #br/com/legalconnect/entity/Endereco TipoEndereco [ %java/lang/invoke/MethodHandles$Lookup ] java/lang/invoke/MethodHandles Lookup NestHost !     
              	 
            
            
           
 
            
            
            
            
                      
                 /     *· ±                                       ;     *+µ *°                                      	 !             ;     *+µ "*°                           	 
       	    !             ;     *+µ $*°                            
           !             ;     *+µ &*°                            
          
 !             ;     *+µ (*°                           
 
       
    !             ;     *+µ **°                            
           !             ;     *+µ ,*°                            
           !             ;     *+µ .*°                            
           !             ;     *+µ 0*°                            
           2             ;     *+µ 3*°                                      5 6             Z     0» 7Y*´ *´ "*´ $*´ &*´ (*´ **´ ,*´ .*´ 0*´ 3· 9°                   0      < =             ^ 
    4*´ ¸ >*´ "*´ $*´ &*´ (*´ **´ ,*´ .*´ 0*´ 3¸ >º D  °                   4      H    I         J     P  Q S      7 T 	 U W Y@ Z \ ^  _    7
```
```java
Êþº¾   = Ù  *br/com/legalconnect/dto/EnderecoRequestDTO  java/lang/Object id Ljava/util/UUID; 
logradouro Ljava/lang/String; RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message 'O logradouro nÃ£o pode estar em branco. %Ljakarta/validation/constraints/Size; max   ÿ 0O logradouro deve ter no mÃ¡ximo 255 caracteres. RuntimeVisibleTypeAnnotations numero $O nÃºmero nÃ£o pode estar em branco.    ,O nÃºmero deve ter no mÃ¡ximo 20 caracteres. complemento 1O complemento deve ter no mÃ¡ximo 255 caracteres. bairro #O bairro nÃ£o pode estar em branco.   d ,O bairro deve ter no mÃ¡ximo 100 caracteres. cidade #A cidade nÃ£o pode estar em branco. ,A cidade deve ter no mÃ¡ximo 100 caracteres. estado #O estado nÃ£o pode estar em branco. min    $O estado deve ter 2 caracteres (UF). cep  O CEP nÃ£o pode estar em branco. (Ljakarta/validation/constraints/Pattern; regexp \d{5}-\d{3} (Formato de CEP invÃ¡lido. Use XXXXX-XXX. pais "O paÃ­s nÃ£o pode estar em branco.   2 *O paÃ­s deve ter no mÃ¡ximo 50 caracteres. tipoEndereco 2Lbr/com/legalconnect/entity/Endereco$TipoEndereco; (Ljakarta/validation/constraints/NotNull; 'O tipo de endereÃ§o nÃ£o pode ser nulo. builder H()Lbr/com/legalconnect/dto/EnderecoRequestDTO$EnderecoRequestDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code 8 Dbr/com/legalconnect/dto/EnderecoRequestDTO$EnderecoRequestDTOBuilder
 7 : ; < <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	  B   this ,Lbr/com/legalconnect/dto/EnderecoRequestDTO; 
getLogradouro ()Ljava/lang/String;	  H   	getNumero	  K   getComplemento	  N   	getBairro	  Q   	getCidade	  T   	getEstado	  W   getCep	  Z $  getPais	  ] *  getTipoEndereco 4()Lbr/com/legalconnect/entity/Endereco$TipoEndereco;	  a . / setId (Ljava/util/UUID;)V MethodParameters 
setLogradouro (Ljava/lang/String;)V 	setNumero setComplemento 	setBairro 	setCidade 	setEstado setCep setPais setTipoEndereco 5(Lbr/com/legalconnect/entity/Endereco$TipoEndereco;)V equals (Ljava/lang/Object;)Z
  s t q canEqual
  v ? @
  x p q
  z E F
  | I F
  ~ L F
   O F
   R F
   U F
   X F
   [ F
   ^ _ o Ljava/lang/Object; other this$id other$id this$logradouro other$logradouro this$numero other$numero this$complemento other$complemento this$bairro other$bairro this$cidade other$cidade this$estado other$estado this$cep 	other$cep 	this$pais 
other$pais this$tipoEndereco other$tipoEndereco 
StackMapTable hashCode ()I
  ¦ £ ¤ PRIME I result $id $logradouro $numero $complemento $bairro $cidade $estado $cep $pais 
$tipoEndereco toString
 ¶ ¸ · java/lang/String ¹ º valueOf &(Ljava/lang/Object;)Ljava/lang/String;   ¼ ½ ¾ makeConcatWithConstants È(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
  : Õ(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/entity/Endereco$TipoEndereco;)V 
SourceFile EnderecoRequestDTO.java BootstrapMethods
 Å Ç Æ $java/lang/invoke/StringConcatFactory ½ È (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; Ä Ë |EnderecoRequestDTO(id=, logradouro=, numero=, complemento=, bairro=, cidade=, estado=, cep=, pais=, tipoEndereco=) InnerClasses EnderecoRequestDTOBuilder Ï 0br/com/legalconnect/entity/Endereco$TipoEndereco Ñ #br/com/legalconnect/entity/Endereco TipoEndereco Ô %java/lang/invoke/MethodHandles$Lookup Ö java/lang/invoke/MethodHandles Lookup NestMembers !     
          	     
  s  
  I  s        
  s   
  I  s      	     
  s  
  I  s        
  s   
  I  s      	     
  I  s        
  I  s      	     
  s  
  I  s        
  s   
  I  s      	     
  s  
  I  s        
  s   
  I  s      	     
  s   
  !I " I " s #    "   
  s    
  !I " I " s #  $   	     
  s % &  's ( s )       
  s %  &  's ( s )  *   	     
  s + 
  I , s -       
  s +  
  I , s -  . /  	     0  s 1    
   0  s 1  	 2 3  4     5   6   (      » 7Y· 9°    =        >       ? @  4     5   6   /     *´ A°    =        >        C D    E F  4     5   6   /     *´ G°    =        >        C D    I F  4     5   6   /     *´ J°    =        >        C D    L F  4     5   6   /     *´ M°    =        >        C D    O F  4     5   6   /     *´ P°    =        >        C D    R F  4     5   6   /     *´ S°    =        >        C D    U F  4     5   6   /     *´ V°    =        >        C D    X F  4     5   6   /     *´ Y°    =        >        C D    [ F  4     5   6   /     *´ \°    =        >        C D    ^ _  4     5   6   /     *´ `°    =        >        C D    b c  4     5   6   :     *+µ A±    =        >        C D         d       e f  4     5   6   :     *+µ G±    =        >        C D         d       g f  4     5   6   :     *+µ J±    =        >        C D         d       h f  4     5   6   :     *+µ M±    =        >        C D         d       i f  4     5   6   :     *+µ P±    =        >        C D         d       j f  4     5   6   :     *+µ S±    =        >        C D         d       k f  4     5   6   :     *+µ V±    =        >        C D         d       l f  4     5   6   :     *+µ Y±    =        >        C D      $   d    $   m f  4     5   6   :     *+µ \±    =        >        C D      *   d    *   n o  4     5   6   :     *+µ `±    =        >        C D      . /  d    .   p q  4     5   6      +*¦ ¬+Á  ¬+À M,*¶ r ¬*¶ uN,¶ u:-Ç Æ § -¶ w ¬*¶ y:,¶ y:Ç Æ § 
¶ w ¬*¶ {:,¶ {:Ç Æ § 
¶ w ¬*¶ }:	,¶ }:
	Ç 
Æ § 
	
¶ w ¬*¶ :,¶ :Ç Æ § 
¶ w ¬*¶ :
,¶ :
Ç Æ § 

¶ w ¬*¶ :,¶ :Ç Æ § 
¶ w ¬*¶ :,¶ :Ç Æ § 
¶ w ¬*¶ :,¶ :Ç Æ § 
¶ w ¬*¶ :,¶ :Ç Æ § 
¶ w ¬¬    =        >   è    C D        {  D  $l    *f    GI    MC    l$    r     ÿ   	  ù   
 ¶ Ú    ¼ Ô    Û µ   
 á ¯            % k   + e   J F   P @   o !    u  ¡   ¢   x !ü  ý   ý   	ý   	ý   	ý   	ý   	ý   	ý   	ý   	ý   	 d       t q  4     5   6   9     +Á ¬    =        >        C D         d       £ ¤  4     5   6    
  ;<=*¶ uN;h-Ç +§ -¶ ¥`=*¶ y:;hÇ +§ ¶ ¥`=*¶ {:;hÇ +§ ¶ ¥`=*¶ }:;hÇ +§ ¶ ¥`=*¶ :;hÇ +§ ¶ ¥`=*¶ :;hÇ +§ ¶ ¥`=*¶ :	;h	Ç +§ 	¶ ¥`=*¶ :
;h
Ç +§ 
¶ ¥`=*¶ :;hÇ +§ ¶ ¥`=*¶ :;hÇ +§ ¶ ¥`=¬    =        >    
   C D    § ¨  
 © ¨  
 ª   # ï «   > Ô ¬   Y ¹ ­   t  ®     ¯   ª h °  	 Å M ±  
 à 2 ²   û  ³   ¢  Z ÿ     ÿ     ÿ      ÿ      ÿ       ÿ       ÿ        ÿ        ÿ         ÿ         ÿ  	        ÿ  	        ÿ  
         ÿ  
         ÿ            ÿ            ÿ             ÿ             ÿ  
            ÿ  
              ´ F  4     5   6   ^ 
    4*¶ u¸ µ*¶ y*¶ {*¶ }*¶ *¶ *¶ *¶ *¶ *¶ ¸ µº »  °    =        >       4 C D    ; <  4     5   6   /     *· ¿±    =        >        C D    ; À  4     5   6   Ì     >*· ¿*+µ A*,µ G*-µ J*µ M*µ P*µ S*µ V*µ Y*	µ \*
µ `±    =        >   p    > C D     >      >      >      >      >      >      >      > $     > *  	   > . / 
 d   )
               $  *  .   Á    Â Ã     É  Ê Ì     7  Í 	 Î Ð Ò@ Ó Õ ×  Ø     7
```
```java
Êþº¾   = h  Fbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; 
logradouro Ljava/lang/String; numero complemento bairro cidade estado cep pais tipoEndereco 2Lbr/com/legalconnect/entity/Endereco$TipoEndereco; 	createdAt Ljava/time/LocalDateTime; 	updatedAt <init> ()V Code
     LineNumberTable LocalVariableTable this HLbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder; Z(Ljava/util/UUID;)Lbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder;	  "   MethodParameters \(Ljava/lang/String;)Lbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder;	  & 	 
	  (  
	  *  
	  , 
 
	  .  
	  0  
	  2  
	  4  
 |(Lbr/com/legalconnect/entity/Endereco$TipoEndereco;)Lbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder;	  7   c(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder;	  :  	  <   build /()Lbr/com/legalconnect/dto/EnderecoResponseDTO; @ +br/com/legalconnect/dto/EnderecoResponseDTO
 ? B  C(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/entity/Endereco$TipoEndereco;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)V toString ()Ljava/lang/String;
 G I H java/lang/String J K valueOf &(Ljava/lang/Object;)Ljava/lang/String;   M N O makeConcatWithConstants ì(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile EnderecoResponseDTO.java BootstrapMethods
 T V U $java/lang/invoke/StringConcatFactory N W (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; S Z ²EnderecoResponseDTO.EnderecoResponseDTOBuilder(id=, logradouro=, numero=, complemento=, bairro=, cidade=, estado=, cep=, pais=, tipoEndereco=, createdAt=, updatedAt=) InnerClasses EnderecoResponseDTOBuilder ^ 0br/com/legalconnect/entity/Endereco$TipoEndereco ` #br/com/legalconnect/entity/Endereco TipoEndereco c %java/lang/invoke/MethodHandles$Lookup e java/lang/invoke/MethodHandles Lookup NestHost !                   	 
            
            
           
 
            
            
            
            
                                                               /     *· ±                                        ;     *+µ !*°                              #       	 $             ;     *+µ %*°                           	 
  #    	    $             ;     *+µ '*°                            
  #        $             ;     *+µ )*°                            
  #       
 $             ;     *+µ +*°                           
 
  #    
    $             ;     *+µ -*°                            
  #        $             ;     *+µ /*°                            
  #        $             ;     *+µ 1*°                            
  #        $             ;     *+µ 3*°                            
  #        5             ;     *+µ 6*°                              #        8             ;     *+µ 9*°                              #        8             ;     *+µ ;*°                              #       = >             b     8» ?Y*´ !*´ %*´ '*´ )*´ +*´ -*´ /*´ 1*´ 3*´ 6*´ 9*´ ;· A°                   8      D E             l     B*´ !¸ F*´ %*´ '*´ )*´ +*´ -*´ /*´ 1*´ 3*´ 6¸ F*´ 9¸ F*´ ;¸ Fº L  °                   B      P    Q         R     X  Y [      ? \ 	 ] _ a@ b d f  g    ?
```
```java
Êþº¾   = Ð  +br/com/legalconnect/dto/EnderecoResponseDTO  java/lang/Object id Ljava/util/UUID; 
logradouro Ljava/lang/String; numero complemento bairro cidade estado cep pais tipoEndereco 2Lbr/com/legalconnect/entity/Endereco$TipoEndereco; 	createdAt Ljava/time/LocalDateTime; 	updatedAt builder J()Lbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  Fbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	  %   this -Lbr/com/legalconnect/dto/EnderecoResponseDTO; 
getLogradouro ()Ljava/lang/String;	  +   	getNumero	  . 	  getComplemento	  1 
  	getBairro	  4   	getCidade	  7   	getEstado	  : 
  getCep	  =   getPais	  @   getTipoEndereco 4()Lbr/com/legalconnect/entity/Endereco$TipoEndereco;	  D   getCreatedAt ()Ljava/time/LocalDateTime;	  H   getUpdatedAt	  K   setId (Ljava/util/UUID;)V MethodParameters 
setLogradouro (Ljava/lang/String;)V 	setNumero setComplemento 	setBairro 	setCidade 	setEstado setCep setPais setTipoEndereco 5(Lbr/com/legalconnect/entity/Endereco$TipoEndereco;)V setCreatedAt (Ljava/time/LocalDateTime;)V setUpdatedAt equals (Ljava/lang/Object;)Z
  ` a ^ canEqual
  c " #
  e ] ^
  g ( )
  i , )
  k / )
  m 2 )
  o 5 )
  q 8 )
  s ; )
  u > )
  w A B
  y E F
  { I F o Ljava/lang/Object; other this$id other$id this$logradouro other$logradouro this$numero other$numero this$complemento other$complemento this$bairro other$bairro this$cidade other$cidade this$estado other$estado this$cep 	other$cep 	this$pais 
other$pais this$tipoEndereco other$tipoEndereco this$createdAt other$createdAt this$updatedAt other$updatedAt 
StackMapTable hashCode ()I
     PRIME I result $id $logradouro $numero $complemento $bairro $cidade $estado $cep $pais 
$tipoEndereco 
$createdAt 
$updatedAt toString
 ­ ¯ ® java/lang/String ° ± valueOf &(Ljava/lang/Object;)Ljava/lang/String;   ³ ´ µ makeConcatWithConstants ì(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
  (Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/entity/Endereco$TipoEndereco;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)V 
SourceFile EnderecoResponseDTO.java BootstrapMethods
 ¼ ¾ ½ $java/lang/invoke/StringConcatFactory ´ ¿ (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; » Â EnderecoResponseDTO(id=, logradouro=, numero=, complemento=, bairro=, cidade=, estado=, cep=, pais=, tipoEndereco=, createdAt=, updatedAt=) InnerClasses EnderecoResponseDTOBuilder Æ 0br/com/legalconnect/entity/Endereco$TipoEndereco È #br/com/legalconnect/entity/Endereco TipoEndereco Ë %java/lang/invoke/MethodHandles$Lookup Í java/lang/invoke/MethodHandles Lookup NestMembers !                 	     
               
                              	               (      » Y· °             !       " #             /     *´ $°             !        & '    ( )             /     *´ *°             !        & '    , )             /     *´ -°             !        & '    / )             /     *´ 0°             !        & '    2 )             /     *´ 3°             !        & '    5 )             /     *´ 6°             !        & '    8 )             /     *´ 9°             !        & '    ; )             /     *´ <°             !        & '    > )             /     *´ ?°             !        & '    A B             /     *´ C°             !        & '    E F             /     *´ G°             !        & '    I F             /     *´ J°             !        & '    L M             :     *+µ $±             !        & '         N       O P             :     *+µ *±             !        & '         N       Q P             :     *+µ -±             !        & '      	   N    	   R P             :     *+µ 0±             !        & '      
   N    
   S P             :     *+µ 3±             !        & '         N       T P             :     *+µ 6±             !        & '         N       U P             :     *+µ 9±             !        & '      
   N    
   V P             :     *+µ <±             !        & '         N       W P             :     *+µ ?±             !        & '         N       X Y             :     *+µ C±             !        & '         N       Z [             :     *+µ G±             !        & '         N       \ [             :     *+µ J±             !        & '         N       ] ^                Ú+*¦ ¬+Á  ¬+À M,*¶ _ ¬*¶ bN,¶ b:-Ç Æ § -¶ d ¬*¶ f:,¶ f:Ç Æ § 
¶ d ¬*¶ h:,¶ h:Ç Æ § 
¶ d ¬*¶ j:	,¶ j:
	Ç 
Æ § 
	
¶ d ¬*¶ l:,¶ l:Ç Æ § 
¶ d ¬*¶ n:
,¶ n:
Ç Æ § 

¶ d ¬*¶ p:,¶ p:Ç Æ § 
¶ d ¬*¶ r:,¶ r:Ç Æ § 
¶ d ¬*¶ t:,¶ t:Ç Æ § 
¶ d ¬*¶ v:,¶ v:Ç Æ § 
¶ d ¬*¶ x:,¶ x:Ç Æ § 
¶ d ¬*¶ z:,¶ z:Ç Æ § 
¶ d ¬¬             !     Ú & '    Ú | }  Å ~ '  $¶  }  *°  }  G  }  M  }  ln  }  rh  }  I  } 	 C  } 
 ¶$  }  ¼  }  Û ÿ  } 
 á ù  }   Ú  }  Ô  } % µ  } + ¯  } J   } P   } o k  } u e  }  F  }  @  } ¹ !  } ¿   }      'ü  ý   ý   	ý   	ý   	ý   	ý   	ý   	ý   	ý   	ý   	ý   	ý   	 N    |   a ^             9     +Á ¬             !        & '      ~ }  N    ~                    H;<=*¶ bN;h-Ç +§ -¶ `=*¶ f:;hÇ +§ ¶ `=*¶ h:;hÇ +§ ¶ `=*¶ j:;hÇ +§ ¶ `=*¶ l:;hÇ +§ ¶ `=*¶ n:;hÇ +§ ¶ `=*¶ p:	;h	Ç +§ 	¶ `=*¶ r:
;h
Ç +§ 
¶ `=*¶ t:;hÇ +§ ¶ `=*¶ v:;hÇ +§ ¶ `=*¶ x:
;h
Ç +§ 
¶ `=*¶ z:;hÇ +§ ¶ `=¬             !      H & '   E    C    
>  }  #%   }  >
 ¡ }  Y ï ¢ }  t Ô £ }   ¹ ¤ }  ª  ¥ } 	 Å  ¦ } 
 à h § }  û M ¨ }  2 © } 
1  ª }     ÿ     ÿ     ÿ      ÿ      ÿ       ÿ       ÿ        ÿ        ÿ         ÿ         ÿ  	        ÿ  	        ÿ  
         ÿ  
         ÿ            ÿ            ÿ             ÿ             ÿ  
            ÿ  
            ÿ               ÿ               ÿ                ÿ                  « )             l     B*¶ b¸ ¬*¶ f*¶ h*¶ j*¶ l*¶ n*¶ p*¶ r*¶ t*¶ v¸ ¬*¶ x¸ ¬*¶ z¸ ¬º ²  °             !       B & '                  /     *· ¶±             !        & '     ·             ì  
   J*· ¶*+µ $*,µ **-µ -*µ 0*µ 3*µ 6*µ 9*µ <*	µ ?*
µ C*µ G*µ J±             !    
   J & '     J      J      J 	     J 
     J      J      J 
     J      J   	   J   
   J      J    N   1     	  
      
             ¸    ¹ º     À  Á Ã       Ä 	 Å Ç É@ Ê Ì Î  Ï     
```
```java
Êþº¾   = a  @br/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder  java/lang/Object usuario (Lbr/com/legalconnect/dto/UserRequestDTO; RuntimeInvisibleAnnotations Llombok/Generated; nomeCompleto Ljava/lang/String; cpf dataNascimento Ljava/time/LocalDate; 	enderecos Ljava/util/List; 	Signature >Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>; 	telefones Ljava/util/Set; #Ljava/util/Set<Ljava/lang/String;>; <init> ()V Code
     LineNumberTable LocalVariableTable this BLbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder; LocalVariableTypeTable JLbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder<TC;TB;>; l(Lbr/com/legalconnect/dto/UserRequestDTO;)Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder; -(Lbr/com/legalconnect/dto/UserRequestDTO;)TB;	  #  
  % & ' self D()Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder; MethodParameters V(Ljava/lang/String;)Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder; (Ljava/lang/String;)TB;	  , 	 
	  .  
 Y(Ljava/time/LocalDate;)Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder; (Ljava/time/LocalDate;)TB;	  2  
 T(Ljava/util/List;)Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder; C(Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>;)TB;	  6   S(Ljava/util/Set;)Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder; ((Ljava/util/Set<Ljava/lang/String;>;)TB;	  :   ()TB; build ,()Lbr/com/legalconnect/dto/PessoaRequestDTO; ()TC; toString ()Ljava/lang/String;
 B D C java/lang/String E F valueOf &(Ljava/lang/Object;)Ljava/lang/String;   H I J makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile PessoaRequestDTO.java <C:Lbr/com/legalconnect/dto/PessoaRequestDTO;B:Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder<TC;TB;>;>Ljava/lang/Object; BootstrapMethods
 P R Q $java/lang/invoke/StringConcatFactory I S (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; O V vPessoaRequestDTO.PessoaRequestDTOBuilder(usuario=, nomeCompleto=, cpf=, dataNascimento=, enderecos=, telefones=) InnerClasses Y (br/com/legalconnect/dto/PessoaRequestDTO PessoaRequestDTOBuilder \ %java/lang/invoke/MethodHandles$Lookup ^ java/lang/invoke/MethodHandles Lookup NestHost!                   	 
            
            
                                            
        A     *· ±                                             !            P     
*+µ "*¶ $°                   
       
           
     (       	 )      *            P     
*+µ +*¶ $°                   
       
 	 
         
     (    	    )      *            P     
*+µ -*¶ $°                   
       
  
         
     (        /      0            P     
*+µ 1*¶ $°                   
       
  
         
     (        3      4            Z     
*+µ 5*¶ $°                   
       
           
       
    (        7      8            Z     
*+µ 9*¶ $°                   
       
           
       
    (      & '      ;         < =      >          ? @             f     **´ "¸ A*´ +*´ -*´ 1¸ A*´ 5¸ A*´ 9¸ Aº G  °                   *            *      K    L     M         N     T  U W      X Z	 [ ] _  `    X
```
```java
Êþº¾   = $  Dbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilderImpl  @br/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this FLbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilderImpl; self H()Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build ,()Lbr/com/legalconnect/dto/PessoaRequestDTO;  (br/com/legalconnect/dto/PessoaRequestDTO
     E(Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder;)V D()Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder;
     
SourceFile PessoaRequestDTO.java 	Signature ´Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder<Lbr/com/legalconnect/dto/PessoaRequestDTO;Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilderImpl;>; InnerClasses PessoaRequestDTOBuilder PessoaRequestDTOBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = »  (br/com/legalconnect/dto/PessoaRequestDTO  java/lang/Object usuario (Lbr/com/legalconnect/dto/UserRequestDTO; nomeCompleto Ljava/lang/String; RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message *O nome completo nÃ£o pode estar em branco. %Ljakarta/validation/constraints/Size; max   ÿ 3O nome completo deve ter no mÃ¡ximo 255 caracteres. RuntimeVisibleTypeAnnotations cpf  O CPF nÃ£o pode estar em branco. (Ljakarta/validation/constraints/Pattern; regexp \d{3}\.\d{3}\.\d{3}-\d{2} -Formato de CPF invÃ¡lido. Use XXX.XXX.XXX-XX. dataNascimento Ljava/time/LocalDate; .Ljakarta/validation/constraints/PastOrPresent; *A data de nascimento nÃ£o pode ser futura. 	enderecos Ljava/util/List; 	Signature >Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>; Ljakarta/validation/Valid; 	telefones Ljava/util/Set; #Ljava/util/Set<Ljava/lang/String;>; <init> E(Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder;)V I(Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  + $ , ()V	 . 0 / @br/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder  	  0	 . 3  	  3	 . 6  	  6	 . 9  	  9	 . <  	  <	 . ? ! "	  ? LineNumberTable LocalVariableTable this *Lbr/com/legalconnect/dto/PessoaRequestDTO; b BLbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder; LocalVariableTypeTable FLbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder<**>; MethodParameters builder D()Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder; H()Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder<**>; N Dbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilderImpl
 M + 
getUsuario *()Lbr/com/legalconnect/dto/UserRequestDTO; getNomeCompleto ()Ljava/lang/String; getCpf getDataNascimento ()Ljava/time/LocalDate; getEnderecos ()Ljava/util/List; @()Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>; getTelefones ()Ljava/util/Set; %()Ljava/util/Set<Ljava/lang/String;>; 
setUsuario +(Lbr/com/legalconnect/dto/UserRequestDTO;)V setNomeCompleto (Ljava/lang/String;)V setCpf setDataNascimento (Ljava/time/LocalDate;)V setEnderecos (Ljava/util/List;)V A(Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>;)V setTelefones (Ljava/util/Set;)V &(Ljava/util/Set<Ljava/lang/String;>;)V equals (Ljava/lang/Object;)Z
  m n k canEqual
  p P Q
  r j k
  t R S
  v T S
  x U V
  z W X
  | Z [ o Ljava/lang/Object; other this$usuario 
other$usuario this$nomeCompleto other$nomeCompleto this$cpf 	other$cpf this$dataNascimento other$dataNascimento this$enderecos other$enderecos this$telefones other$telefones 
StackMapTable hashCode ()I
     PRIME I result $usuario 
$nomeCompleto $cpf $dataNascimento 
$enderecos 
$telefones toString
    java/lang/String    valueOf &(Ljava/lang/Object;)Ljava/lang/String;   ¢ £ ¤ makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; (Lbr/com/legalconnect/dto/UserRequestDTO;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/util/List;Ljava/util/Set;)V Å(Lbr/com/legalconnect/dto/UserRequestDTO;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>;Ljava/util/Set<Ljava/lang/String;>;)V 
SourceFile PessoaRequestDTO.java BootstrapMethods
 « ­ ¬ $java/lang/invoke/StringConcatFactory £ ® (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; ª ± ^PessoaRequestDTO(usuario=, nomeCompleto=, cpf=, dataNascimento=, enderecos=, telefones=) InnerClasses PessoaRequestDTOBuilder PessoaRequestDTOBuilderImpl ¶ %java/lang/invoke/MethodHandles$Lookup ¸ java/lang/invoke/MethodHandles Lookup NestMembers !               	     
  s  
  I  s        
  s   
  I  s      	     
  s    s  s        
  s     s  s      	       s     
     s           	                    ! "      #   $ %      & '     (   )   {     5*· **+´ -µ 1*+´ 2µ 4*+´ 5µ 7*+´ 8µ :*+´ ;µ =*+´ >µ @±    A        B       5 C D     5 E F  G       5 E H  I    E  	 J K      L '     (   )   (      » MY· O°    A        B       P Q  '     (   )   /     *´ 1°    A        B        C D    R S  '     (   )   /     *´ 4°    A        B        C D    T S  '     (   )   /     *´ 7°    A        B        C D    U V  '     (   )   /     *´ :°    A        B        C D    W X      Y '     (   )   /     *´ =°    A        B        C D    Z [      \ '     (   )   /     *´ @°    A        B        C D    ] ^  '     (   )   :     *+µ 1±    A        B        C D         I       _ `  '     (   )   :     *+µ 4±    A        B        C D         I       a `  '     (   )   :     *+µ 7±    A        B        C D         I       b c  '     (   )   :     *+µ :±    A        B        C D         I       d e      f '     (   )   L     *+µ =±    A        B        C D         G           I       g h      i '     (   )   L     *+µ @±    A        B        C D      ! "  G        ! #  I    !   j k  '     (   )       ü+*¦ ¬+Á  ¬+À M,*¶ l ¬*¶ oN,¶ o:-Ç Æ § -¶ q ¬*¶ s:,¶ s:Ç Æ § 
¶ q ¬*¶ u:,¶ u:Ç Æ § 
¶ q ¬*¶ w:	,¶ w:
	Ç 
Æ § 
	
¶ q ¬*¶ y:,¶ y:Ç Æ § 
¶ q ¬*¶ {:
,¶ {:
Ç Æ § 

¶ q ¬¬    A        B       ü C D     ü } ~   ç  D  $ Ø  ~  * Ò  ~  G µ  ~  M ¯  ~  l   ~  r   ~   k  ~ 	  e  ~ 
 ¶ F  ~  ¼ @  ~  Û !  ~ 
 á   ~     L ü  ý   ý   	ý   	ý   	ý   	ý   	 I    }   n k  '     (   )   9     +Á ¬    A        B        C D       ~  I          '     (   )  H  	   ¦;<=*¶ oN;h-Ç +§ -¶ `=*¶ s:;hÇ +§ ¶ `=*¶ u:;hÇ +§ ¶ `=*¶ w:;hÇ +§ ¶ `=*¶ y:;hÇ +§ ¶ `=*¶ {:;hÇ +§ ¶ `=¬    A        B   \ 	   ¦ C D    £     ¡    
   ~  #   ~  > h  ~  Y M  ~  t 2  ~     ~    " ÿ     ÿ     ÿ      ÿ      ÿ       ÿ       ÿ        ÿ        ÿ         ÿ         ÿ  	        ÿ  	           S  '     (   )   T     **¶ o¸ *¶ s*¶ u*¶ w¸ *¶ y¸ *¶ {¸ º ¡  °    A        B       * C D    $ ,  '     (   )   /     *· *±    A        B        C D    $ ¥      ¦ '     (   )   ¨     &*· **+µ 1*,µ 4*-µ 7*µ :*µ =*µ @±    A        B   H    & C D     &      &      &      &      &      & ! "  G       &      & ! #  I              !   §    ¨ ©     ¯  ° ²     .  ³	 M  ´  µ · ¹  º     . M
```
```java
Êþº¾   = p  Bbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; usuario )Lbr/com/legalconnect/dto/UserResponseDTO; nomeCompleto Ljava/lang/String; cpf dataNascimento Ljava/time/LocalDate; 	enderecos Ljava/util/List; 	Signature ?Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>; 	telefones Ljava/util/Set; #Ljava/util/Set<Ljava/lang/String;>; 	createdAt Ljava/time/LocalDateTime; 	updatedAt <init> ()V Code
     LineNumberTable LocalVariableTable this DLbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; LocalVariableTypeTable LLbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder<TC;TB;>; V(Ljava/util/UUID;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; (Ljava/util/UUID;)TB;	  (  
  * + , self F()Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; MethodParameters o(Lbr/com/legalconnect/dto/UserResponseDTO;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; .(Lbr/com/legalconnect/dto/UserResponseDTO;)TB;	  1 	 
 X(Ljava/lang/String;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; (Ljava/lang/String;)TB;	  5  	  7 
  [(Ljava/time/LocalDate;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; (Ljava/time/LocalDate;)TB;	  ;   V(Ljava/util/List;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; D(Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>;)TB;	  ?   U(Ljava/util/Set;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; ((Ljava/util/Set<Ljava/lang/String;>;)TB;	  C   _(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; (Ljava/time/LocalDateTime;)TB;	  G  	  I   ()TB; build -()Lbr/com/legalconnect/dto/PessoaResponseDTO; ()TC; toString ()Ljava/lang/String;
 Q S R java/lang/String T U valueOf &(Ljava/lang/Object;)Ljava/lang/String;   W X Y makeConcatWithConstants ¶(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile PessoaResponseDTO.java <C:Lbr/com/legalconnect/dto/PessoaResponseDTO;B:Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder<TC;TB;>;>Ljava/lang/Object; BootstrapMethods
 _ a ` $java/lang/invoke/StringConcatFactory X b (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; ^ e PessoaResponseDTO.PessoaResponseDTOBuilder(id=, usuario=, nomeCompleto=, cpf=, dataNascimento=, enderecos=, telefones=, createdAt=, updatedAt=) InnerClasses h )br/com/legalconnect/dto/PessoaResponseDTO PessoaResponseDTOBuilder k %java/lang/invoke/MethodHandles$Lookup m java/lang/invoke/MethodHandles Lookup NestHost!     	              	 
                       
                                                                                 
        A     *· ±                     ! "   #        ! $     %      &            P     
*+µ '*¶ )°                    
 ! "     
    #       
 ! $   -       	 .      /            P     
*+µ 0*¶ )°                    
 ! "     
 	 
  #       
 ! $   -    	    2      3            P     
*+µ 4*¶ )°                    
 ! "     
    #       
 ! $   -       
 2      3            P     
*+µ 6*¶ )°                    
 ! "     
 
   #       
 ! $   -    
    8      9            P     
*+µ :*¶ )°                    
 ! "     
    #       
 ! $   -        <      =            Z     
*+µ >*¶ )°                    
 ! "     
    #       
 ! $     
    -        @      A            Z     
*+µ B*¶ )°                    
 ! "     
    #       
 ! $     
    -        D      E            P     
*+µ F*¶ )°                    
 ! "     
    #       
 ! $   -        D      E            P     
*+µ H*¶ )°                    
 ! "     
    #       
 ! $   -      + ,      J         K L      M          N O             { 	    ?*´ '¸ P*´ 0¸ P*´ 4*´ 6*´ :¸ P*´ >¸ P*´ B¸ P*´ F¸ P*´ H¸ Pº V  °                    ? ! "   #       ? ! $    Z    [     \         ]     c  d f      g i	 j l n  o    g
```
```java
Êþº¾   = $  Fbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilderImpl  Bbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this HLbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilderImpl; self J()Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build -()Lbr/com/legalconnect/dto/PessoaResponseDTO;  )br/com/legalconnect/dto/PessoaResponseDTO
     G(Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;)V F()Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
     
SourceFile PessoaResponseDTO.java 	Signature ¹Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder<Lbr/com/legalconnect/dto/PessoaResponseDTO;Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilderImpl;>; InnerClasses PessoaResponseDTOBuilder PessoaResponseDTOBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = Ñ  )br/com/legalconnect/dto/PessoaResponseDTO  java/lang/Object id Ljava/util/UUID; usuario )Lbr/com/legalconnect/dto/UserResponseDTO; nomeCompleto Ljava/lang/String; cpf dataNascimento Ljava/time/LocalDate; 	enderecos Ljava/util/List; 	Signature ?Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>; 	telefones Ljava/util/Set; #Ljava/util/Set<Ljava/lang/String;>; 	createdAt Ljava/time/LocalDateTime; 	updatedAt <init> G(Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;)V K(Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
      ()V	 " $ # Bbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder  	  $	 " '  	  '	 " * 	 
	  *	 " -  
	  -	 " 0  
	  0	 " 3  	  3	 " 6  	  6	 " 9  	  9	 " <  	  < LineNumberTable LocalVariableTable this +Lbr/com/legalconnect/dto/PessoaResponseDTO; b DLbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; LocalVariableTypeTable HLbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder<**>; MethodParameters builder F()Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; J()Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder<**>; K Fbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilderImpl
 J  getId ()Ljava/util/UUID; 
getUsuario +()Lbr/com/legalconnect/dto/UserResponseDTO; getNomeCompleto ()Ljava/lang/String; getCpf getDataNascimento ()Ljava/time/LocalDate; getEnderecos ()Ljava/util/List; A()Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>; getTelefones ()Ljava/util/Set; %()Ljava/util/Set<Ljava/lang/String;>; getCreatedAt ()Ljava/time/LocalDateTime; getUpdatedAt setId (Ljava/util/UUID;)V 
setUsuario ,(Lbr/com/legalconnect/dto/UserResponseDTO;)V setNomeCompleto (Ljava/lang/String;)V setCpf setDataNascimento (Ljava/time/LocalDate;)V setEnderecos (Ljava/util/List;)V B(Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>;)V setTelefones (Ljava/util/Set;)V &(Ljava/util/Set<Ljava/lang/String;>;)V setCreatedAt (Ljava/time/LocalDateTime;)V setUpdatedAt equals (Ljava/lang/Object;)Z
  t u r canEqual
  w M N
  y q r
  { O P
  } Q R
   S R
   T U
   V W
   Y Z
   \ ]
   ^ ] o Ljava/lang/Object; other this$id other$id this$usuario 
other$usuario this$nomeCompleto other$nomeCompleto this$cpf 	other$cpf this$dataNascimento other$dataNascimento this$enderecos other$enderecos this$telefones other$telefones this$createdAt other$createdAt this$updatedAt other$updatedAt 
StackMapTable hashCode ()I
  £   ¡ PRIME I result $id $usuario 
$nomeCompleto $cpf $dataNascimento 
$enderecos 
$telefones 
$createdAt 
$updatedAt toString
 ² ´ ³ java/lang/String µ ¶ valueOf &(Ljava/lang/Object;)Ljava/lang/String;   ¸ ¹ º makeConcatWithConstants ¶(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; Æ(Ljava/util/UUID;Lbr/com/legalconnect/dto/UserResponseDTO;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/util/List;Ljava/util/Set;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)V	(Ljava/util/UUID;Lbr/com/legalconnect/dto/UserResponseDTO;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>;Ljava/util/Set<Ljava/lang/String;>;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)V 
SourceFile PessoaResponseDTO.java BootstrapMethods
 Á Ã Â $java/lang/invoke/StringConcatFactory ¹ Ä (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; À Ç PessoaResponseDTO(id=, usuario=, nomeCompleto=, cpf=, dataNascimento=, enderecos=, telefones=, createdAt=, updatedAt=) InnerClasses PessoaResponseDTOBuilder PessoaResponseDTOBuilderImpl Ì %java/lang/invoke/MethodHandles$Lookup Î java/lang/invoke/MethodHandles Lookup NestMembers !     	            	 
     
     
                                                         M*· *+´ !µ %*+´ &µ (*+´ )µ +*+´ ,µ .*+´ /µ 1*+´ 2µ 4*+´ 5µ 7*+´ 8µ :*+´ ;µ =±    >        ?       M @ A     M B C  D       M B E  F    B  	 G H      I            (      » JY· L°    >        ?       M N             /     *´ %°    >        ?        @ A    O P             /     *´ (°    >        ?        @ A    Q R             /     *´ +°    >        ?        @ A    S R             /     *´ .°    >        ?        @ A    T U             /     *´ 1°    >        ?        @ A    V W      X            /     *´ 4°    >        ?        @ A    Y Z      [            /     *´ 7°    >        ?        @ A    \ ]             /     *´ :°    >        ?        @ A    ^ ]             /     *´ =°    >        ?        @ A    _ `             :     *+µ %±    >        ?        @ A         F       a b             :     *+µ (±    >        ?        @ A         F       c d             :     *+µ +±    >        ?        @ A      	 
  F    	   e d             :     *+µ .±    >        ?        @ A       
  F       f g             :     *+µ 1±    >        ?        @ A       
  F       h i      j            L     *+µ 4±    >        ?        @ A         D           F       k l      m            L     *+µ 7±    >        ?        @ A         D           F       n o             :     *+µ :±    >        ?        @ A         F       p o             :     *+µ =±    >        ?        @ A         F       q r            Ð    k+*¦ ¬+Á  ¬+À M,*¶ s ¬*¶ vN,¶ v:-Ç Æ § -¶ x ¬*¶ z:,¶ z:Ç Æ § 
¶ x ¬*¶ |:,¶ |:Ç Æ § 
¶ x ¬*¶ ~:	,¶ ~:
	Ç 
Æ § 
	
¶ x ¬*¶ :,¶ :Ç Æ § 
¶ x ¬*¶ :
,¶ :
Ç Æ § 

¶ x ¬*¶ :,¶ :Ç Æ § 
¶ x ¬*¶ :,¶ :Ç Æ § 
¶ x ¬*¶ :,¶ :Ç Æ § 
¶ x ¬¬    >        ?   Ô   k @ A    k    V  A  $G    *A    G$    M    l ÿ    r ù     Ú   	  Ô   
 ¶ µ    ¼ ¯    Û    
 á      k    e   % F   + @   J !   P        m ü  ý   ý   	ý   	ý   	ý   	ý   	ý   	ý   	ý   	 F       u r             9     +Á ¬    >        ?        @ A         F         ¡                 ÷;<=*¶ vN;h-Ç +§ -¶ ¢`=*¶ z:;hÇ +§ ¶ ¢`=*¶ |:;hÇ +§ ¶ ¢`=*¶ ~:;hÇ +§ ¶ ¢`=*¶ :;hÇ +§ ¶ ¢`=*¶ :;hÇ +§ ¶ ¢`=*¶ :	;h	Ç +§ 	¶ ¢`=*¶ :
;h
Ç +§ 
¶ ¢`=*¶ :;hÇ +§ ¶ ¢`=¬    >        ?   z    ÷ @ A    ô ¤ ¥   ò ¦ ¥  
 í §   # Ô ¨   > ¹ ©   Y  ª   t  «    h ¬   ª M ­  	 Å 2 ®  
 à  ¯      ÿ     ÿ     ÿ      ÿ      ÿ       ÿ       ÿ        ÿ        ÿ         ÿ         ÿ  	        ÿ  	        ÿ  
         ÿ  
         ÿ            ÿ            ÿ             ÿ               ° R             i 	    ?*¶ v¸ ±*¶ z¸ ±*¶ |*¶ ~*¶ ¸ ±*¶ ¸ ±*¶ ¸ ±*¶ ¸ ±*¶ ¸ ±º ·  °    >        ?       ? @ A                   /     *· ±    >        ?        @ A     »      ¼            Ø  
   8*· *+µ %*,µ (*-µ +*µ .*µ 1*µ 4*µ 7*µ :*	µ =±    >        ?   f 
   8 @ A     8      8      8 	 
    8  
    8  
    8      8      8      8   	 D       8      8    F   %	     	               ½    ¾ ¿     Å  Æ È     "  É	 J  Ê  Ë Í Ï  Ð     " J
```
```java
Êþº¾   = q  @br/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; nome Ljava/lang/String; 	descricao precoMensal Ljava/math/BigDecimal; 
precoAnual limiteServicosAgendaveis Ljava/lang/Integer; visibilidadeDestaque 7Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque; acessoRelatoriosAvancados Ljava/lang/Boolean; permitePedidosOrcamento periodoTesteDias 	isDefault 	createdAt Ljava/time/LocalDateTime; 	updatedAt <init> ()V Code
     LineNumberTable LocalVariableTable this BLbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder; T(Ljava/util/UUID;)Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;	  &   MethodParameters V(Ljava/lang/String;)Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;	  * 	 
	  ,  
 Z(Ljava/math/BigDecimal;)Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;	  /  
	  1  
 W(Ljava/lang/Integer;)Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;	  4   {(Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;)Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;	  7   W(Ljava/lang/Boolean;)Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;	  :  	  <  	  >  	  @   ](Ljava/time/LocalDateTime;)Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;	  C  	  E   build ,()Lbr/com/legalconnect/dto/PlanoResponseDTO; I (br/com/legalconnect/dto/PlanoResponseDTO
 H K  L+(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/math/BigDecimal;Ljava/math/BigDecimal;Ljava/lang/Integer;Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)V toString ()Ljava/lang/String;
 P R Q java/lang/String S T valueOf &(Ljava/lang/Object;)Ljava/lang/String;   V W X makeConcatWithConstants þ(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile PlanoResponseDTO.java BootstrapMethods
 ] _ ^ $java/lang/invoke/StringConcatFactory W ` (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; \ cPlanoResponseDTO.PlanoResponseDTOBuilder(id=, nome=, descricao=, precoMensal=, precoAnual=, limiteServicosAgendaveis=, visibilidadeDestaque=, acessoRelatoriosAvancados=, permitePedidosOrcamento=, periodoTesteDias=, isDefault=, createdAt=, updatedAt=) InnerClasses PlanoResponseDTOBuilder g 5br/com/legalconnect/entity/Plano$VisibilidadeDestaque i  br/com/legalconnect/entity/Plano VisibilidadeDestaque l %java/lang/invoke/MethodHandles$Lookup n java/lang/invoke/MethodHandles Lookup NestHost !     
              	 
            
            
            
                                                                                                                           /     *· ±             !        " #     $             ;     *+µ %*°             !        " #         '       	 (             ;     *+µ )*°             !        " #      	 
  '    	    (             ;     *+µ +*°             !        " #       
  '        -             ;     *+µ .*°             !        " #       
  '        -             ;     *+µ 0*°             !        " #       
  '        2             ;     *+µ 3*°             !        " #         '        5             ;     *+µ 6*°             !        " #         '        8             ;     *+µ 9*°             !        " #         '        8             ;     *+µ ;*°             !        " #         '        2             ;     *+µ =*°             !        " #         '        8             ;     *+µ ?*°             !        " #         '        A             ;     *+µ B*°             !        " #         '        A             ;     *+µ D*°             !        " #         '       F G             f     <» HY*´ %*´ )*´ +*´ .*´ 0*´ 3*´ 6*´ 9*´ ;*´ =*´ ?*´ B*´ D· J°             !       < " #    M N              
    [*´ %¸ O*´ )*´ +*´ .¸ O*´ 0¸ O*´ 3¸ O*´ 6¸ O*´ 9¸ O*´ ;¸ O*´ =¸ O*´ ?¸ O*´ B¸ O*´ D¸ Oº U  °             !       [ " #    Y    Z         [     a  b d      H e 	 f h j@ k m o  p    H
```
```java
Êþº¾   = ã  (br/com/legalconnect/dto/PlanoResponseDTO  java/lang/Object id Ljava/util/UUID; nome Ljava/lang/String; 	descricao precoMensal Ljava/math/BigDecimal; 
precoAnual limiteServicosAgendaveis Ljava/lang/Integer; visibilidadeDestaque 7Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque; acessoRelatoriosAvancados Ljava/lang/Boolean; permitePedidosOrcamento periodoTesteDias 	isDefault 	createdAt Ljava/time/LocalDateTime; 	updatedAt builder D()Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  @br/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder
  ! " # <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	  )   this *Lbr/com/legalconnect/dto/PlanoResponseDTO; getNome ()Ljava/lang/String;	  /   getDescricao	  2 	  getPrecoMensal ()Ljava/math/BigDecimal;	  6 
  
getPrecoAnual	  9   getLimiteServicosAgendaveis ()Ljava/lang/Integer;	  = 
  getVisibilidadeDestaque 9()Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;	  A   getAcessoRelatoriosAvancados ()Ljava/lang/Boolean;	  E   getPermitePedidosOrcamento	  H   getPeriodoTesteDias	  K   getIsDefault	  N   getCreatedAt ()Ljava/time/LocalDateTime;	  R   getUpdatedAt	  U   setId (Ljava/util/UUID;)V MethodParameters setNome (Ljava/lang/String;)V setDescricao setPrecoMensal (Ljava/math/BigDecimal;)V 
setPrecoAnual setLimiteServicosAgendaveis (Ljava/lang/Integer;)V setVisibilidadeDestaque :(Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;)V setAcessoRelatoriosAvancados (Ljava/lang/Boolean;)V setPermitePedidosOrcamento setPeriodoTesteDias setIsDefault setCreatedAt (Ljava/time/LocalDateTime;)V setUpdatedAt equals (Ljava/lang/Object;)Z
  n o l canEqual
  q : ;
  s k l
  u B C
  w F C
  y I ;
  { L C
  } & '
   , -
   0 -
   3 4
   7 4
   > ?
   O P
   S P o Ljava/lang/Object; other this$limiteServicosAgendaveis other$limiteServicosAgendaveis this$acessoRelatoriosAvancados other$acessoRelatoriosAvancados this$permitePedidosOrcamento other$permitePedidosOrcamento this$periodoTesteDias other$periodoTesteDias this$isDefault other$isDefault this$id other$id 	this$nome 
other$nome this$descricao other$descricao this$precoMensal other$precoMensal this$precoAnual other$precoAnual this$visibilidadeDestaque other$visibilidadeDestaque this$createdAt other$createdAt this$updatedAt other$updatedAt 
StackMapTable hashCode ()I
  ­ ª « PRIME I result $limiteServicosAgendaveis $acessoRelatoriosAvancados $permitePedidosOrcamento $periodoTesteDias 
$isDefault $id $nome 
$descricao $precoMensal $precoAnual $visibilidadeDestaque 
$createdAt 
$updatedAt toString
 À Â Á java/lang/String Ã Ä valueOf &(Ljava/lang/Object;)Ljava/lang/String;   Æ Ç È makeConcatWithConstants þ(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
  !+(Ljava/util/UUID;Ljava/lang/String;Ljava/lang/String;Ljava/math/BigDecimal;Ljava/math/BigDecimal;Ljava/lang/Integer;Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Boolean;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)V 
SourceFile PlanoResponseDTO.java BootstrapMethods
 Ï Ñ Ð $java/lang/invoke/StringConcatFactory Ç Ò (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; Î Õ ïPlanoResponseDTO(id=, nome=, descricao=, precoMensal=, precoAnual=, limiteServicosAgendaveis=, visibilidadeDestaque=, acessoRelatoriosAvancados=, permitePedidosOrcamento=, periodoTesteDias=, isDefault=, createdAt=, updatedAt=) InnerClasses PlanoResponseDTOBuilder Ù 5br/com/legalconnect/entity/Plano$VisibilidadeDestaque Û  br/com/legalconnect/entity/Plano VisibilidadeDestaque Þ %java/lang/invoke/MethodHandles$Lookup à java/lang/invoke/MethodHandles Lookup NestMembers !     
            	     
          
                                       ! 	               (      » Y·  °    $        %       & '             /     *´ (°    $        %        * +    , -             /     *´ .°    $        %        * +    0 -             /     *´ 1°    $        %        * +    3 4             /     *´ 5°    $        %        * +    7 4             /     *´ 8°    $        %        * +    : ;             /     *´ <°    $        %        * +    > ?             /     *´ @°    $        %        * +    B C             /     *´ D°    $        %        * +    F C             /     *´ G°    $        %        * +    I ;             /     *´ J°    $        %        * +    L C             /     *´ M°    $        %        * +    O P             /     *´ Q°    $        %        * +    S P             /     *´ T°    $        %        * +    V W             :     *+µ (±    $        %        * +         X       Y Z             :     *+µ .±    $        %        * +         X       [ Z             :     *+µ 1±    $        %        * +      	   X    	   \ ]             :     *+µ 5±    $        %        * +      
   X    
   ^ ]             :     *+µ 8±    $        %        * +         X       _ `             :     *+µ <±    $        %        * +      
   X    
   a b             :     *+µ @±    $        %        * +         X       c d             :     *+µ D±    $        %        * +         X       e d             :     *+µ G±    $        %        * +         X       f `             :     *+µ J±    $        %        * +         X       g d             :     *+µ M±    $        %        * +         X       h i             :     *+µ Q±    $        %        * +         X       j i             :     *+µ T±    $        %        * +         X       k l            à    ÿ+*¦ ¬+Á  ¬+À M,*¶ m ¬*¶ pN,¶ p:-Ç Æ § -¶ r ¬*¶ t:,¶ t:Ç Æ § 
¶ r ¬*¶ v:,¶ v:Ç Æ § 
¶ r ¬*¶ x:	,¶ x:
	Ç 
Æ § 
	
¶ r ¬*¶ z:,¶ z:Ç Æ § 
¶ r ¬*¶ |:
,¶ |:
Ç Æ § 

¶ r ¬*¶ ~:,¶ ~:Ç Æ § 
¶ r ¬*¶ :,¶ :Ç Æ § 
¶ r ¬*¶ :,¶ :Ç Æ § 
¶ r ¬*¶ :,¶ :Ç Æ § 
¶ r ¬*¶ :,¶ :Ç Æ § 
¶ r ¬*¶ :,¶ :Ç Æ § 
¶ r ¬*¶ :,¶ :Ç Æ § 
¶ r ¬¬    $        %  $   ÿ * +    ÿ    ê  +  $Û    *Õ    G¸    M²    l    r    n   	 h   
 ¶I    ¼C    Û$   
 á     ÿ    ù   % Ú   + Ô   J µ   P ¯    o  ¡  u  ¢   k £   e ¤  ¹ F ¥  ¿ @ ¦  Þ ! §  ä  ¨   ©    *ü  ý   ý   	ý   	ý   	ý   	ý   	ý   	ý   	ý   	ý   	ý   	ý   	ý   	 X       o l             9     +Á ¬    $        %        * +         X       ª «            ¬    c;<=*¶ pN;h-Ç +§ -¶ ¬`=*¶ t:;hÇ +§ ¶ ¬`=*¶ v:;hÇ +§ ¶ ¬`=*¶ x:;hÇ +§ ¶ ¬`=*¶ z:;hÇ +§ ¶ ¬`=*¶ |:;hÇ +§ ¶ ¬`=*¶ ~:	;h	Ç +§ 	¶ ¬`=*¶ :
;h
Ç +§ 
¶ ¬`=*¶ :;hÇ +§ ¶ ¬`=*¶ :;hÇ +§ ¶ ¬`=*¶ :
;h
Ç +§ 
¶ ¬`=*¶ :;hÇ +§ ¶ ¬`=*¶ :;hÇ +§ ¶ ¬`=¬    $        %   ¢   c * +   ` ® ¯  ^ ° ¯  
Y ±   #@ ²   >% ³   Y
 ´   t ï µ    Ô ¶   ª ¹ ·  	 Å  ¸  
 à  ¹   û h º   M »  
1 2 ¼  L  ½   ©   ÿ     ÿ     ÿ      ÿ      ÿ       ÿ       ÿ        ÿ        ÿ         ÿ         ÿ  	        ÿ  	        ÿ  
         ÿ  
         ÿ            ÿ            ÿ             ÿ             ÿ  
            ÿ  
            ÿ               ÿ               ÿ                ÿ                ÿ                 ÿ                   ¾ -              
    [*¶ |¸ ¿*¶ ~*¶ *¶ ¸ ¿*¶ ¸ ¿*¶ p¸ ¿*¶ ¸ ¿*¶ t¸ ¿*¶ v¸ ¿*¶ x¸ ¿*¶ z¸ ¿*¶ ¸ ¿*¶ ¸ ¿º Å  °    $        %       [ * +    " #             /     *· É±    $        %        * +    " Ê             ü     P*· É*+µ (*,µ .*-µ 1*µ 5*µ 8*µ <*µ @*µ D*	µ G*
µ J*µ M*µ Q*
µ T±    $        %       P * +     P      P      P 	     P 
     P      P 
     P      P      P   	   P   
   P      P      P   
 X   5
     	  
    
                 Ë    Ì Í     Ó  Ô Ö       × 	 Ø Ú Ü@ Ý ß á  â     
```
```java
Êþº¾   = j  Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder  @br/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder 	numeroOab Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; statusProfissional <Lbr/com/legalconnect/entity/Profissional$StatusProfissional; usaMarketplace Ljava/lang/Boolean; fazParteDePlano 	empresaId Ljava/util/UUID; planoId <init> ()V Code
     LineNumberTable LocalVariableTable this NLbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder; LocalVariableTypeTable VLbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder<TC;TB;>; b(Ljava/lang/String;)Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder; 	Signature (Ljava/lang/String;)TB;	     
  " # $ self P()Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder; MethodParameters (Lbr/com/legalconnect/entity/Profissional$StatusProfissional;)Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder; A(Lbr/com/legalconnect/entity/Profissional$StatusProfissional;)TB;	  ) 	 
 c(Ljava/lang/Boolean;)Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder; (Ljava/lang/Boolean;)TB;	  -  	  / 
  `(Ljava/util/UUID;)Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder; (Ljava/util/UUID;)TB;	  3  	  5   ()TB; build 2()Lbr/com/legalconnect/dto/ProfissionalRequestDTO; ()TC; toString ()Ljava/lang/String;
  = : ;
 ? A @ java/lang/String B C valueOf &(Ljava/lang/Object;)Ljava/lang/String;   E F G makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; D()Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder; ,()Lbr/com/legalconnect/dto/PessoaRequestDTO;
  K 7 8 
SourceFile ProfissionalRequestDTO.java Ö<C:Lbr/com/legalconnect/dto/ProfissionalRequestDTO;B:Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder<TC;TB;>;>Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder<TC;TB;>; BootstrapMethods
 Q S R $java/lang/invoke/StringConcatFactory F T (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; P W ProfissionalRequestDTO.ProfissionalRequestDTOBuilder(super=, numeroOab=, statusProfissional=, usaMarketplace=, fazParteDePlano=, empresaId=, planoId=) InnerClasses Z (br/com/legalconnect/dto/PessoaRequestDTO PessoaRequestDTOBuilder ] .br/com/legalconnect/dto/ProfissionalRequestDTO ProfissionalRequestDTOBuilder ` :br/com/legalconnect/entity/Profissional$StatusProfissional b 'br/com/legalconnect/entity/Profissional StatusProfissional e %java/lang/invoke/MethodHandles$Lookup g java/lang/invoke/MethodHandles Lookup NestHost!                   	 
                       
                                           A     *· ±                                                        P     
*+µ *¶ !°                   
       
           
     %       	 &      '            P     
*+µ (*¶ !°                   
       
 	 
         
     %    	    *      +            P     
*+µ ,*¶ !°                   
       
           
     %       
 *      +            P     
*+µ .*¶ !°                   
       
 
          
     %    
    0      1            P     
*+µ 2*¶ !°                   
       
           
     %        0      1            P     
*+µ 4*¶ !°                   
       
           
     %      # $      6         7 8      9          : ;             m     1*· <*´ *´ (¸ >*´ ,¸ >*´ .¸ >*´ 2¸ >*´ 4¸ >º D  °                   1            1    D # H             %     *¶ !°                 A 7 I             %     *¶ J°                   L    M     N         O     U  V X   "   Y [	  \ ^	 _ a c@ d f h  i    \
```
```java
Êþº¾   = $  Pbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilderImpl  Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this RLbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilderImpl; self T()Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build 2()Lbr/com/legalconnect/dto/ProfissionalRequestDTO;  .br/com/legalconnect/dto/ProfissionalRequestDTO
     Q(Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder;)V P()Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder;
     
SourceFile ProfissionalRequestDTO.java 	Signature ÒLbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder<Lbr/com/legalconnect/dto/ProfissionalRequestDTO;Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilderImpl;>; InnerClasses ProfissionalRequestDTOBuilder !ProfissionalRequestDTOBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = »  .br/com/legalconnect/dto/ProfissionalRequestDTO  (br/com/legalconnect/dto/PessoaRequestDTO 	numeroOab Ljava/lang/String; RuntimeVisibleAnnotations )Ljakarta/validation/constraints/NotBlank; message +O nÃºmero da OAB nÃ£o pode estar em branco. %Ljakarta/validation/constraints/Size; max   2 3O nÃºmero da OAB deve ter no mÃ¡ximo 50 caracteres. RuntimeVisibleTypeAnnotations statusProfissional <Lbr/com/legalconnect/entity/Profissional$StatusProfissional; (Ljakarta/validation/constraints/NotNull; )O status profissional nÃ£o pode ser nulo. usaMarketplace Ljava/lang/Boolean; 7A indicaÃ§Ã£o de uso do marketplace nÃ£o pode ser nula. fazParteDePlano <A indicaÃ§Ã£o de participaÃ§Ã£o em plano nÃ£o pode ser nula. 	empresaId Ljava/util/UUID; planoId !O ID do plano nÃ£o pode ser nulo. <init> Q(Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder;)V 	Signature U(Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  %  & E(Lbr/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder;)V	 ( * ) Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder  	  *	 ( -  	  -	 ( 0  	  0	 ( 3  	  3	 ( 6  	  6	 ( 9  	  9 LineNumberTable LocalVariableTable this 0Lbr/com/legalconnect/dto/ProfissionalRequestDTO; b NLbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder; LocalVariableTypeTable RLbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder<**>; MethodParameters builder P()Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder; T()Lbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilder<**>; H Pbr/com/legalconnect/dto/ProfissionalRequestDTO$ProfissionalRequestDTOBuilderImpl
 G J  K ()V getNumeroOab ()Ljava/lang/String; getStatusProfissional >()Lbr/com/legalconnect/entity/Profissional$StatusProfissional; getUsaMarketplace ()Ljava/lang/Boolean; getFazParteDePlano getEmpresaId ()Ljava/util/UUID; 
getPlanoId setNumeroOab (Ljava/lang/String;)V setStatusProfissional ?(Lbr/com/legalconnect/entity/Profissional$StatusProfissional;)V setUsaMarketplace (Ljava/lang/Boolean;)V setFazParteDePlano setEmpresaId (Ljava/util/UUID;)V 
setPlanoId equals (Ljava/lang/Object;)Z
  c d a canEqual
  f P Q
 h j i java/lang/Object ` a
  l R Q
  n L M
  p N O
  r S T
  t U T o Ljava/lang/Object; other this$usaMarketplace other$usaMarketplace this$fazParteDePlano other$fazParteDePlano this$numeroOab other$numeroOab this$statusProfissional other$statusProfissional this$empresaId other$empresaId this$planoId 
other$planoId 
StackMapTable hashCode ()I
 h    PRIME I result $usaMarketplace $fazParteDePlano 
$numeroOab $statusProfissional 
$empresaId $planoId toString
    java/lang/String   valueOf &(Ljava/lang/Object;)Ljava/lang/String;      makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
  J (Ljava/lang/String;Lbr/com/legalconnect/entity/Profissional$StatusProfissional;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/util/UUID;Ljava/util/UUID;)V 
SourceFile ProfissionalRequestDTO.java BootstrapMethods
 £ ¥ ¤ $java/lang/invoke/StringConcatFactory  ¦ (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; ¢ © vProfissionalRequestDTO(numeroOab=, statusProfissional=, usaMarketplace=, fazParteDePlano=, empresaId=, planoId=) InnerClasses ¬ @br/com/legalconnect/dto/PessoaRequestDTO$PessoaRequestDTOBuilder PessoaRequestDTOBuilder ProfissionalRequestDTOBuilder !ProfissionalRequestDTOBuilderImpl ± :br/com/legalconnect/entity/Profissional$StatusProfissional ³ 'br/com/legalconnect/entity/Profissional StatusProfissional ¶ %java/lang/invoke/MethodHandles$Lookup ¸ java/lang/invoke/MethodHandles Lookup NestMembers !                 	s 
   I 
 	s          	s 
    I 
 	s             	s     
     	s             	s     
     	s             	s     
     	s                  	s     
     	s             !     "   #   |     6*+· $*+´ 'µ +*+´ ,µ .*+´ /µ 1*+´ 2µ 4*+´ 5µ 7*+´ 8µ :±    ;        <       6 = >     6 ? @  A       6 ? B  C    ?  	 D E      F !     "   #   (      » GY· I°    ;        <       L M  !     "   #   /     *´ +°    ;        <        = >    N O  !     "   #   /     *´ .°    ;        <        = >    P Q  !     "   #   /     *´ 1°    ;        <        = >    R Q  !     "   #   /     *´ 4°    ;        <        = >    S T  !     "   #   /     *´ 7°    ;        <        = >    U T  !     "   #   /     *´ :°    ;        <        = >    V W  !     "   #   :     *+µ +±    ;        <        = >         C       X Y  !     "   #   :     *+µ .±    ;        <        = >         C       Z [  !     "   #   :     *+µ 1±    ;        <        = >         C       \ [  !     "   #   :     *+µ 4±    ;        <        = >         C       ] ^  !     "   #   :     *+µ 7±    ;        <        = >         C       _ ^  !     "   #   :     *+µ :±    ;        <        = >         C       ` a  !     "   #       ü+*¦ ¬+Á  ¬+À M,*¶ b ¬*¶ eN,¶ e:-Ç Æ § -¶ g ¬*¶ k:,¶ k:Ç Æ § 
¶ g ¬*¶ m:,¶ m:Ç Æ § 
¶ g ¬*¶ o:	,¶ o:
	Ç 
Æ § 
	
¶ g ¬*¶ q:,¶ q:Ç Æ § 
¶ g ¬*¶ s:
,¶ s:
Ç Æ § 

¶ g ¬¬    ;        <       ü = >     ü u v   ç w >  $ Ø x v  * Ò y v  G µ z v  M ¯ { v  l  | v  r  } v   k ~ v 	  e  v 
 ¶ F  v  ¼ @  v  Û !  v 
 á   v     L ü  ý  h hý  h h	ý  h h	ý  h h	ý  h h	ý  h h	 C    u   d a  !     "   #   9     +Á ¬    ;        <        = >      w v  C    w      !     "   #  H  	   ¦;<=*¶ eN;h-Ç +§ -¶ `=*¶ k:;hÇ +§ ¶ `=*¶ m:;hÇ +§ ¶ `=*¶ o:;hÇ +§ ¶ `=*¶ q:;hÇ +§ ¶ `=*¶ s:;hÇ +§ ¶ `=¬    ;        <   \ 	   ¦ = >    £     ¡    
   v  #   v  > h  v  Y M  v  t 2  v     v    " ÿ    h ÿ    h ÿ    h h ÿ    h h ÿ    h h h ÿ    h h h ÿ    h h h h ÿ    h h h h ÿ    h h h h h ÿ    h h h h h ÿ  	  h h h h h h ÿ  	  h h h h h h    M  !     "   #   W     -*¶ m*¶ o¸ *¶ e¸ *¶ k¸ *¶ q¸ *¶ s¸ º   °    ;        <       - = >     K  !     "   #   /     *· ±    ;        <        = >       !     "   #        &*· *+µ +*,µ .*-µ 1*µ 4*µ 7*µ :±    ;        <   H    & = >     &      &      &      &      &      &    C                       ¡     §  ¨ ª   *  «  ­	 (  ®	 G  ¯  ° ² ´@ µ · ¹  º     ( G
```
```java
Êþº¾   = m  Nbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder  Bbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder 	numeroOab Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; statusProfissional <Lbr/com/legalconnect/entity/Profissional$StatusProfissional; usaMarketplace Ljava/lang/Boolean; fazParteDePlano empresa ,Lbr/com/legalconnect/dto/EmpresaResponseDTO; plano *Lbr/com/legalconnect/dto/PlanoResponseDTO; <init> ()V Code
     LineNumberTable LocalVariableTable this PLbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder; LocalVariableTypeTable XLbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder<TC;TB;>; d(Ljava/lang/String;)Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder; 	Signature (Ljava/lang/String;)TB;	  !  
  # $ % self R()Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder; MethodParameters (Lbr/com/legalconnect/entity/Profissional$StatusProfissional;)Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder; A(Lbr/com/legalconnect/entity/Profissional$StatusProfissional;)TB;	  * 	 
 e(Ljava/lang/Boolean;)Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder; (Ljava/lang/Boolean;)TB;	  .  	  0 
  ~(Lbr/com/legalconnect/dto/EmpresaResponseDTO;)Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder; 1(Lbr/com/legalconnect/dto/EmpresaResponseDTO;)TB;	  4   |(Lbr/com/legalconnect/dto/PlanoResponseDTO;)Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder; /(Lbr/com/legalconnect/dto/PlanoResponseDTO;)TB;	  8   ()TB; build 3()Lbr/com/legalconnect/dto/ProfissionalResponseDTO; ()TC; toString ()Ljava/lang/String;
  @ = >
 B D C java/lang/String E F valueOf &(Ljava/lang/Object;)Ljava/lang/String;   H I J makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; F()Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; -()Lbr/com/legalconnect/dto/PessoaResponseDTO;
  N : ; 
SourceFile ProfissionalResponseDTO.java Û<C:Lbr/com/legalconnect/dto/ProfissionalResponseDTO;B:Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder<TC;TB;>;>Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder<TC;TB;>; BootstrapMethods
 T V U $java/lang/invoke/StringConcatFactory I W (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; S Z ProfissionalResponseDTO.ProfissionalResponseDTOBuilder(super=, numeroOab=, statusProfissional=, usaMarketplace=, fazParteDePlano=, empresa=, plano=) InnerClasses ] )br/com/legalconnect/dto/PessoaResponseDTO PessoaResponseDTOBuilder ` /br/com/legalconnect/dto/ProfissionalResponseDTO ProfissionalResponseDTOBuilder c :br/com/legalconnect/entity/Profissional$StatusProfissional e 'br/com/legalconnect/entity/Profissional StatusProfissional h %java/lang/invoke/MethodHandles$Lookup j java/lang/invoke/MethodHandles Lookup NestHost!                   	 
                       
                                           A     *· ±                                                        P     
*+µ  *¶ "°                   
       
           
     &       	 '      (            P     
*+µ )*¶ "°                   
       
 	 
         
     &    	    +      ,            P     
*+µ -*¶ "°                   
       
           
     &       
 +      ,            P     
*+µ /*¶ "°                   
       
 
          
     &    
    1      2            P     
*+µ 3*¶ "°                   
       
           
     &        5      6            P     
*+µ 7*¶ "°                   
       
           
     &      $ %      9         : ;      <          = >             m     1*· ?*´  *´ )¸ A*´ -¸ A*´ /¸ A*´ 3¸ A*´ 7¸ Aº G  °                   1            1    D $ K             %     *¶ "°                 A : L             %     *¶ M°                   O    P     Q         R     X  Y [   "   \ ^	  _ a	 b d f@ g i k  l    _
```
```java
Êþº¾   = $  Rbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilderImpl  Nbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this TLbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilderImpl; self V()Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build 3()Lbr/com/legalconnect/dto/ProfissionalResponseDTO;  /br/com/legalconnect/dto/ProfissionalResponseDTO
     S(Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;)V R()Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;
     
SourceFile ProfissionalResponseDTO.java 	Signature ×Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder<Lbr/com/legalconnect/dto/ProfissionalResponseDTO;Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilderImpl;>; InnerClasses ProfissionalResponseDTOBuilder "ProfissionalResponseDTOBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = °  /br/com/legalconnect/dto/ProfissionalResponseDTO  )br/com/legalconnect/dto/PessoaResponseDTO 	numeroOab Ljava/lang/String; statusProfissional <Lbr/com/legalconnect/entity/Profissional$StatusProfissional; usaMarketplace Ljava/lang/Boolean; fazParteDePlano empresa ,Lbr/com/legalconnect/dto/EmpresaResponseDTO; plano *Lbr/com/legalconnect/dto/PlanoResponseDTO; <init> S(Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;)V 	Signature W(Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     G(Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;)V	    Nbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder  	  	     	   	  # 	 
	  #	  &  
	  &	  )  
	  )	  ,  	  , LineNumberTable LocalVariableTable this 1Lbr/com/legalconnect/dto/ProfissionalResponseDTO; b PLbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder; LocalVariableTypeTable TLbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder<**>; MethodParameters builder R()Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder; V()Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder<**>; ; Rbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilderImpl
 : =  > ()V getNumeroOab ()Ljava/lang/String; getStatusProfissional >()Lbr/com/legalconnect/entity/Profissional$StatusProfissional; getUsaMarketplace ()Ljava/lang/Boolean; getFazParteDePlano 
getEmpresa .()Lbr/com/legalconnect/dto/EmpresaResponseDTO; getPlano ,()Lbr/com/legalconnect/dto/PlanoResponseDTO; setNumeroOab (Ljava/lang/String;)V setStatusProfissional ?(Lbr/com/legalconnect/entity/Profissional$StatusProfissional;)V setUsaMarketplace (Ljava/lang/Boolean;)V setFazParteDePlano 
setEmpresa /(Lbr/com/legalconnect/dto/EmpresaResponseDTO;)V setPlano -(Lbr/com/legalconnect/dto/PlanoResponseDTO;)V equals (Ljava/lang/Object;)Z
  X Y V canEqual
  [ C D
 ] _ ^ java/lang/Object U V
  a E D
  c ? @
  e A B
  g F G
  i H I o Ljava/lang/Object; other this$usaMarketplace other$usaMarketplace this$fazParteDePlano other$fazParteDePlano this$numeroOab other$numeroOab this$statusProfissional other$statusProfissional this$empresa 
other$empresa 
this$plano other$plano 
StackMapTable hashCode ()I
 ] } z { PRIME I result $usaMarketplace $fazParteDePlano 
$numeroOab $statusProfissional $empresa $plano toString
    java/lang/String   valueOf &(Ljava/lang/Object;)Ljava/lang/String;      makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
  = Í(Ljava/lang/String;Lbr/com/legalconnect/entity/Profissional$StatusProfissional;Ljava/lang/Boolean;Ljava/lang/Boolean;Lbr/com/legalconnect/dto/EmpresaResponseDTO;Lbr/com/legalconnect/dto/PlanoResponseDTO;)V 
SourceFile ProfissionalResponseDTO.java BootstrapMethods
    $java/lang/invoke/StringConcatFactory   (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;   sProfissionalResponseDTO(numeroOab=, statusProfissional=, usaMarketplace=, fazParteDePlano=, empresa=, plano=) InnerClasses ¡ Bbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder PessoaResponseDTOBuilder ProfissionalResponseDTOBuilder "ProfissionalResponseDTOBuilderImpl ¦ :br/com/legalconnect/entity/Profissional$StatusProfissional ¨ 'br/com/legalconnect/entity/Profissional StatusProfissional « %java/lang/invoke/MethodHandles$Lookup ­ java/lang/invoke/MethodHandles Lookup NestMembers !                 	 
     
     
                             |     6*+· *+´ µ *+´ µ !*+´ "µ $*+´ %µ '*+´ (µ **+´ +µ -±    .        /       6 0 1     6 2 3  4       6 2 5  6    2  	 7 8      9            (      » :Y· <°    .        /       ? @             /     *´ °    .       
 /        0 1    A B             /     *´ !°    .       
 /        0 1    C D             /     *´ $°    .       
 /        0 1    E D             /     *´ '°    .       
 /        0 1    F G             /     *´ *°    .       
 /        0 1    H I             /     *´ -°    .       
 /        0 1    J K             :     *+µ ±    .       
 /        0 1         6       L M             :     *+µ !±    .       
 /        0 1         6       N O             :     *+µ $±    .       
 /        0 1      	 
  6    	   P O             :     *+µ '±    .       
 /        0 1       
  6       Q R             :     *+µ *±    .       
 /        0 1       
  6       S T             :     *+µ -±    .       
 /        0 1         6       U V                 ü+*¦ ¬+Á  ¬+À M,*¶ W ¬*¶ ZN,¶ Z:-Ç Æ § -¶ \ ¬*¶ `:,¶ `:Ç Æ § 
¶ \ ¬*¶ b:,¶ b:Ç Æ § 
¶ \ ¬*¶ d:	,¶ d:
	Ç 
Æ § 
	
¶ \ ¬*¶ f:,¶ f:Ç Æ § 
¶ \ ¬*¶ h:
,¶ h:
Ç Æ § 

¶ \ ¬¬    .       
 /       ü 0 1     ü j k   ç l 1  $ Ø m k  * Ò n k  G µ o k  M ¯ p k  l  q k  r  r k   k s k 	  e t k 
 ¶ F u k  ¼ @ v k  Û ! w k 
 á  x k  y   L ü  ý  ] ]ý  ] ]	ý  ] ]	ý  ] ]	ý  ] ]	ý  ] ]	 6    j   Y V             9     +Á ¬    .       
 /        0 1      l k  6    l   z {            H  	   ¦;<=*¶ ZN;h-Ç +§ -¶ |`=*¶ `:;hÇ +§ ¶ |`=*¶ b:;hÇ +§ ¶ |`=*¶ d:;hÇ +§ ¶ |`=*¶ f:;hÇ +§ ¶ |`=*¶ h:;hÇ +§ ¶ |`=¬    .       
 /   \ 	   ¦ 0 1    £ ~    ¡    
   k  #   k  > h  k  Y M  k  t 2  k     k  y  " ÿ    ] ÿ    ] ÿ    ] ] ÿ    ] ] ÿ    ] ] ] ÿ    ] ] ] ÿ    ] ] ] ] ÿ    ] ] ] ] ÿ    ] ] ] ] ] ÿ    ] ] ] ] ] ÿ  	  ] ] ] ] ] ] ÿ  	  ] ] ] ] ] ]    @             W     -*¶ b*¶ d¸ *¶ Z¸ *¶ `¸ *¶ f¸ *¶ h¸ º   °    .       
 /       - 0 1     >             /     *· ±    .        /        0 1                       &*· *+µ *,µ !*-µ $*µ '*µ **µ -±    .        /   H    & 0 1     &      &      & 	 
    &  
    &  
    &    6        	                         *     ¢	   £	 :  ¤  ¥ § ©@ ª ¬ ®  ¯      :
```
```java
Êþº¾   = A  <br/com/legalconnect/dto/UserRequestDTO$UserRequestDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; email Ljava/lang/String; <init> ()V Code
     LineNumberTable LocalVariableTable this >Lbr/com/legalconnect/dto/UserRequestDTO$UserRequestDTOBuilder; P(Ljava/util/UUID;)Lbr/com/legalconnect/dto/UserRequestDTO$UserRequestDTOBuilder;	     MethodParameters R(Ljava/lang/String;)Lbr/com/legalconnect/dto/UserRequestDTO$UserRequestDTOBuilder;	   	 
 build *()Lbr/com/legalconnect/dto/UserRequestDTO;  &br/com/legalconnect/dto/UserRequestDTO
     ! %(Ljava/util/UUID;Ljava/lang/String;)V toString ()Ljava/lang/String;
 % ' & java/lang/String ( ) valueOf &(Ljava/lang/Object;)Ljava/lang/String;   + , - makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile UserRequestDTO.java BootstrapMethods
 2 4 3 $java/lang/invoke/StringConcatFactory , 5 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 1 8 3UserRequestDTO.UserRequestDTOBuilder(id=, email=) InnerClasses UserRequestDTOBuilder < %java/lang/invoke/MethodHandles$Lookup > java/lang/invoke/MethodHandles Lookup NestHost !                   	 
                        
   /     *· ±                                    
   ;     *+µ *°                                     	           
   ;     *+µ *°                           	 
      	              
   :     » Y*´ *´ · °                         " #          
   ;     *´ ¸ $*´ º *  °                         .    /         0     6  7 9       : 	 ; = ?  @    
```
```java
Êþº¾   = a  &br/com/legalconnect/dto/UserRequestDTO  java/lang/Object id Ljava/util/UUID; email Ljava/lang/String; builder @()Lbr/com/legalconnect/dto/UserRequestDTO$UserRequestDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  <br/com/legalconnect/dto/UserRequestDTO$UserRequestDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	     this (Lbr/com/legalconnect/dto/UserRequestDTO; getEmail ()Ljava/lang/String;	     setId (Ljava/util/UUID;)V MethodParameters setEmail (Ljava/lang/String;)V equals (Ljava/lang/Object;)Z
  ( ) & canEqual
  +  
  - % &
  /   o Ljava/lang/Object; other this$id other$id 
this$email other$email 
StackMapTable hashCode ()I
  ; 8 9 PRIME I result $id $email toString
 C E D java/lang/String F G valueOf &(Ljava/lang/Object;)Ljava/lang/String;   I J K makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
   %(Ljava/util/UUID;Ljava/lang/String;)V 
SourceFile UserRequestDTO.java BootstrapMethods
 R T S $java/lang/invoke/StringConcatFactory J U (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; Q X UserRequestDTO(id=, email=) InnerClasses UserRequestDTOBuilder \ %java/lang/invoke/MethodHandles$Lookup ^ java/lang/invoke/MethodHandles Lookup NestMembers !                 	 	 
          
   (      » Y· °                              
   /     *´ °                                    
   /     *´ °                           !          
   :     *+µ ±                              "       # $          
   :     *+µ ±                              "       % &          
   ô     h+*¦ ¬+Á  ¬+À M,*¶ ' ¬*¶ *N,¶ *:-Ç Æ § -¶ , ¬*¶ .:,¶ .:Ç Æ § 
¶ , ¬¬               H    h       h 0 1   S 2   $ D 3 1  * > 4 1  G ! 5 1  M  6 1  7     	ü  ý   ý   	 "    0   ) &          
   9     +Á ¬                           2 1  "    2   8 9          
   Ü     :;<=*¶ *N;h-Ç +§ -¶ :`=*¶ .:;hÇ +§ ¶ :`=¬               4    :      7 < =   5 > =  
 0 ? 1  #  @ 1  7   J ÿ     ÿ     ÿ      ÿ        A           
   ;     *¶ *¸ B*¶ .º H  °                                    
   /     *· L±                          M          
   M     *· L*+µ *,µ ±                                     "   	      N    O P     V  W Y       Z 	 [ ] _  `     
```
```java
Êþº¾   = I  >br/com/legalconnect/dto/UserResponseDTO$UserResponseDTOBuilder  java/lang/Object id Ljava/util/UUID; RuntimeInvisibleAnnotations Llombok/Generated; email Ljava/lang/String; 	createdAt Ljava/time/LocalDateTime; 	updatedAt <init> ()V Code
     LineNumberTable LocalVariableTable this @Lbr/com/legalconnect/dto/UserResponseDTO$UserResponseDTOBuilder; R(Ljava/util/UUID;)Lbr/com/legalconnect/dto/UserResponseDTO$UserResponseDTOBuilder;	     MethodParameters T(Ljava/lang/String;)Lbr/com/legalconnect/dto/UserResponseDTO$UserResponseDTOBuilder;	   	 
 [(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/dto/UserResponseDTO$UserResponseDTOBuilder;	     	  " 
  build +()Lbr/com/legalconnect/dto/UserResponseDTO; & 'br/com/legalconnect/dto/UserResponseDTO
 % (  ) W(Ljava/util/UUID;Ljava/lang/String;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)V toString ()Ljava/lang/String;
 - / . java/lang/String 0 1 valueOf &(Ljava/lang/Object;)Ljava/lang/String;   3 4 5 makeConcatWithConstants \(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 
SourceFile UserResponseDTO.java BootstrapMethods
 : < ; $java/lang/invoke/StringConcatFactory 4 = (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 9 @ OUserResponseDTO.UserResponseDTOBuilder(id=, email=, createdAt=, updatedAt=) InnerClasses UserResponseDTOBuilder D %java/lang/invoke/MethodHandles$Lookup F java/lang/invoke/MethodHandles Lookup NestHost !                   	 
                       
                            /     *· ±                                       ;     *+µ *°                                     	              ;     *+µ *°                           	 
      	                 ;     *+µ *°                                     
              ;     *+µ !*°                           
       
   # $             B     » %Y*´ *´ *´ *´ !· '°                         * +             I     *´ ¸ ,*´ *´ ¸ ,*´ !¸ ,º 2  °                         6    7         8     >  ? A      % B 	 C E G  H    %
```
```java
Êþº¾   = x  'br/com/legalconnect/dto/UserResponseDTO  java/lang/Object id Ljava/util/UUID; email Ljava/lang/String; 	createdAt Ljava/time/LocalDateTime; 	updatedAt builder B()Lbr/com/legalconnect/dto/UserResponseDTO$UserResponseDTOBuilder; RuntimeInvisibleAnnotations Llombok/Generated; Code  >br/com/legalconnect/dto/UserResponseDTO$UserResponseDTOBuilder
     <init> ()V LineNumberTable LocalVariableTable getId ()Ljava/util/UUID;	     this )Lbr/com/legalconnect/dto/UserResponseDTO; getEmail ()Ljava/lang/String;	  "   getCreatedAt ()Ljava/time/LocalDateTime;	  & 	 
 getUpdatedAt	  )  
 setId (Ljava/util/UUID;)V MethodParameters setEmail (Ljava/lang/String;)V setCreatedAt (Ljava/time/LocalDateTime;)V setUpdatedAt equals (Ljava/lang/Object;)Z
  5 6 3 canEqual
  8  
  : 2 3
  <   
  > # $
  @ ' $ o Ljava/lang/Object; other this$id other$id 
this$email other$email this$createdAt other$createdAt this$updatedAt other$updatedAt 
StackMapTable hashCode ()I
  P M N PRIME I result $id $email 
$createdAt 
$updatedAt toString
 Z \ [ java/lang/String ] ^ valueOf &(Ljava/lang/Object;)Ljava/lang/String;   ` a b makeConcatWithConstants \(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
   W(Ljava/util/UUID;Ljava/lang/String;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)V 
SourceFile UserResponseDTO.java BootstrapMethods
 i k j $java/lang/invoke/StringConcatFactory a l (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; h o 8UserResponseDTO(id=, email=, createdAt=, updatedAt=) InnerClasses UserResponseDTOBuilder s %java/lang/invoke/MethodHandles$Lookup u java/lang/invoke/MethodHandles Lookup NestMembers !                 	 
     
    	  
             (      » Y· °                                 /     *´ °                                        /     *´ !°                         # $             /     *´ %°                         ' $             /     *´ (°                         * +             :     *+µ ±                              ,       - .             :     *+µ !±                              ,       / 0             :     *+µ %±                           	 
  ,    	   1 0             :     *+µ (±                            
  ,       2 3            |     ²+*¦ ¬+Á  ¬+À M,*¶ 4 ¬*¶ 7N,¶ 7:-Ç Æ § -¶ 9 ¬*¶ ;:,¶ ;:Ç Æ § 
¶ 9 ¬*¶ =:,¶ =:Ç Æ § 
¶ 9 ¬*¶ ?:	,¶ ?:
	Ç 
Æ § 
	
¶ 9 ¬¬               p    ²       ² A B    C   $  D B  *  E B  G k F B  M e G B  l F H B  r @ I B   ! J B 	   K B 
 L   6 ü  ý   ý   	ý   	ý   	 ,    A   6 3             9     +Á ¬                           C B  ,    C   M N                 p;<=*¶ 7N;h-Ç +§ -¶ O`=*¶ ;:;hÇ +§ ¶ O`=*¶ =:;hÇ +§ ¶ O`=*¶ ?:;hÇ +§ ¶ O`=¬               H    p      m Q R   k S R  
 f T B  # M U B  > 2 V B  Y  W B  L   ª ÿ     ÿ     ÿ      ÿ      ÿ       ÿ       ÿ        ÿ          X               I     *¶ 7¸ Y*¶ ;*¶ =¸ Y*¶ ?¸ Yº _  °                                       /     *· c±                          d             l     *· c*+µ *,µ !*-µ %*µ (±               4                        	 
      
  ,        	     e    f g     m  n p       q 	 r t v  w     
```
```java
Êþº¾   = G  =br/com/legalconnect/entity/Administrador$AdministradorBuilder  /br/com/legalconnect/entity/Pessoa$PessoaBuilder status Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; <init> ()V Code
  
 	 
 LineNumberTable LocalVariableTable this ?Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder; LocalVariableTypeTable GLbr/com/legalconnect/entity/Administrador$AdministradorBuilder<TC;TB;>; S(Ljava/lang/String;)Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder; 	Signature (Ljava/lang/String;)TB;	    
     self A()Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder; MethodParameters ()TB; build ,()Lbr/com/legalconnect/entity/Administrador; ()TC; toString ()Ljava/lang/String;
  % " #   ' ( ) makeConcatWithConstants 8(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 3()Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder; %()Lbr/com/legalconnect/entity/Pessoa;
  -    
SourceFile Administrador.java °<C:Lbr/com/legalconnect/entity/Administrador;B:Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder<TC;TB;>;>Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder<TC;TB;>; BootstrapMethods
 3 5 4 $java/lang/invoke/StringConcatFactory ( 6 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 2 9 5Administrador.AdministradorBuilder(super=, status=) InnerClasses < (br/com/legalconnect/entity/Administrador AdministradorBuilder ? !br/com/legalconnect/entity/Pessoa 
PessoaBuilder B %java/lang/invoke/MethodHandles$Lookup D java/lang/invoke/MethodHandles Lookup NestHost!                    	 
     A     *· ±                                                        P     
*+µ *¶ °                   
       
           
                                   !          " #             J     *· $*´ º &  °                                   D  *             %     *¶ °                 A  +             %     *¶ ,°                   .    /     0         1     7  8 :      ; =	  > @	 A C E  F    ;
```
```java
Êþº¾   = $  Abr/com/legalconnect/entity/Administrador$AdministradorBuilderImpl  =br/com/legalconnect/entity/Administrador$AdministradorBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this CLbr/com/legalconnect/entity/Administrador$AdministradorBuilderImpl; self E()Lbr/com/legalconnect/entity/Administrador$AdministradorBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build ,()Lbr/com/legalconnect/entity/Administrador;  (br/com/legalconnect/entity/Administrador
     B(Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder;)V A()Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder;
     
SourceFile Administrador.java 	Signature ®Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder<Lbr/com/legalconnect/entity/Administrador;Lbr/com/legalconnect/entity/Administrador$AdministradorBuilderImpl;>; InnerClasses AdministradorBuilder AdministradorBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = <  (br/com/legalconnect/entity/Administrador  !br/com/legalconnect/entity/Pessoa status Ljava/lang/String; <init> B(Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder;)V 	Signature F(Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     4(Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;)V	    =br/com/legalconnect/entity/Administrador$AdministradorBuilder  	   LineNumberTable LocalVariableTable this *Lbr/com/legalconnect/entity/Administrador; b ?Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder; LocalVariableTypeTable CLbr/com/legalconnect/entity/Administrador$AdministradorBuilder<**>; MethodParameters builder A()Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder; E()Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder<**>; # Abr/com/legalconnect/entity/Administrador$AdministradorBuilderImpl
 " %  & ()V 	getStatus ()Ljava/lang/String; 	setStatus (Ljava/lang/String;)V
  % 
SourceFile Administrador.java RuntimeVisibleAnnotations Ljakarta/persistence/Entity; Ljakarta/persistence/Table; name tb_administrador *Ljakarta/persistence/PrimaryKeyJoinColumn; id InnerClasses AdministradorBuilder AdministradorBuilderImpl 9 /br/com/legalconnect/entity/Pessoa$PessoaBuilder 
PessoaBuilder NestMembers !                	    
         
   T     *+· *+´ µ ±                                               	     	    !         
   (      » "Y· $°                   ' (          
   /     *´ °                         ) *          
   :     *+µ ±                                      &          
   /     *· +±                          *          
   >     
*· +*+µ ±                   
       
           ,    - .     /   0  1s 2 3  1s 4 5       6	 "  7  8  :	 ;      "
```
```java
Êþº¾   = J  1br/com/legalconnect/entity/Cliente$ClienteBuilder  /br/com/legalconnect/entity/Pessoa$PessoaBuilder status Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; tipo <init> ()V Code
   
  LineNumberTable LocalVariableTable this 3Lbr/com/legalconnect/entity/Cliente$ClienteBuilder; LocalVariableTypeTable ;Lbr/com/legalconnect/entity/Cliente$ClienteBuilder<TC;TB;>; G(Ljava/lang/String;)Lbr/com/legalconnect/entity/Cliente$ClienteBuilder; 	Signature (Ljava/lang/String;)TB;	    
     self 5()Lbr/com/legalconnect/entity/Cliente$ClienteBuilder; MethodParameters	    	  ()TB; build &()Lbr/com/legalconnect/entity/Cliente; ()TC; toString ()Ljava/lang/String;
  ( % &   * + , makeConcatWithConstants J(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 3()Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder; %()Lbr/com/legalconnect/entity/Pessoa;
  0 " # 
SourceFile Cliente.java <C:Lbr/com/legalconnect/entity/Cliente;B:Lbr/com/legalconnect/entity/Cliente$ClienteBuilder<TC;TB;>;>Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder<TC;TB;>; BootstrapMethods
 6 8 7 $java/lang/invoke/StringConcatFactory + 9 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 5 < 1Cliente.ClienteBuilder(super=, status=, tipo=) InnerClasses ? "br/com/legalconnect/entity/Cliente ClienteBuilder B !br/com/legalconnect/entity/Pessoa 
PessoaBuilder E %java/lang/invoke/MethodHandles$Lookup G java/lang/invoke/MethodHandles Lookup NestHost!                   	             
      A     *· 
±                                                        P     
*+µ *¶ °                   
       
           
            	                   P     
*+µ *¶ °                   
       
 	          
         	         !         " #      $          % &             N     *· '*´ *´ º )  °                                   D  -             %     *¶ °                 A " .             %     *¶ /°                   1    2     3         4     :  ; =      > @	  A C	 D F H  I    >
```
```java
Êþº¾   = $  5br/com/legalconnect/entity/Cliente$ClienteBuilderImpl  1br/com/legalconnect/entity/Cliente$ClienteBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this 7Lbr/com/legalconnect/entity/Cliente$ClienteBuilderImpl; self 9()Lbr/com/legalconnect/entity/Cliente$ClienteBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build &()Lbr/com/legalconnect/entity/Cliente;  "br/com/legalconnect/entity/Cliente
     6(Lbr/com/legalconnect/entity/Cliente$ClienteBuilder;)V 5()Lbr/com/legalconnect/entity/Cliente$ClienteBuilder;
     
SourceFile Cliente.java 	Signature Lbr/com/legalconnect/entity/Cliente$ClienteBuilder<Lbr/com/legalconnect/entity/Cliente;Lbr/com/legalconnect/entity/Cliente$ClienteBuilderImpl;>; InnerClasses ClienteBuilder ClienteBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = C  "br/com/legalconnect/entity/Cliente  !br/com/legalconnect/entity/Pessoa status Ljava/lang/String; tipo <init> 6(Lbr/com/legalconnect/entity/Cliente$ClienteBuilder;)V 	Signature :(Lbr/com/legalconnect/entity/Cliente$ClienteBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     4(Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;)V	    1br/com/legalconnect/entity/Cliente$ClienteBuilder  	  	    	   LineNumberTable LocalVariableTable this $Lbr/com/legalconnect/entity/Cliente; b 3Lbr/com/legalconnect/entity/Cliente$ClienteBuilder; LocalVariableTypeTable 7Lbr/com/legalconnect/entity/Cliente$ClienteBuilder<**>; MethodParameters builder 5()Lbr/com/legalconnect/entity/Cliente$ClienteBuilder; 9()Lbr/com/legalconnect/entity/Cliente$ClienteBuilder<**>; ' 5br/com/legalconnect/entity/Cliente$ClienteBuilderImpl
 & )  * ()V 	getStatus ()Ljava/lang/String; getTipo 	setStatus (Ljava/lang/String;)V setTipo
  ) '(Ljava/lang/String;Ljava/lang/String;)V 
SourceFile Cliente.java RuntimeVisibleAnnotations Ljakarta/persistence/Entity; Ljakarta/persistence/Table; name 
tb_cliente *Ljakarta/persistence/PrimaryKeyJoinColumn; id InnerClasses ClienteBuilder ClienteBuilderImpl @ /br/com/legalconnect/entity/Pessoa$PessoaBuilder 
PessoaBuilder NestMembers !                   	  
          
      \     *+· *+´ µ *+´ µ ±                                        !  "      	 # $  
    %      
      (      » &Y· (°                   + ,       
      /     *´ °                         - ,       
      /     *´ °                         . /       
      :     *+µ ±                              "       0 /       
      :     *+µ ±                              "        *       
      /     *· 1±                          2       
      M     *· 1*+µ *,µ ±                                     "   	      3    4 5     6   7  8s 9 :  8s ; <       =	 &  >  ?  A	 B      &
```
```java
Êþº¾   = g  1br/com/legalconnect/entity/Empresa$EmpresaBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder nomeFantasia Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; razaoSocial cnpj emailContato 	enderecos Ljava/util/Set; 	Signature 6Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>; 	telefones #Ljava/util/Set<Ljava/lang/String;>; 
profissionais :Ljava/util/Set<Lbr/com/legalconnect/entity/Profissional;>; <init> ()V Code
     LineNumberTable LocalVariableTable this 3Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder; LocalVariableTypeTable ;Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder<TC;TB;>; G(Ljava/lang/String;)Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder; (Ljava/lang/String;)TB;	  "  
  $ % & self 5()Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder; MethodParameters	  ) 	 	  + 
 	  -   D(Ljava/util/Set;)Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder; ;(Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>;)TB;	  1  
 ((Ljava/util/Set<Ljava/lang/String;>;)TB;	  4  
 ?(Ljava/util/Set<Lbr/com/legalconnect/entity/Profissional;>;)TB;	  7  
 ()TB; build &()Lbr/com/legalconnect/entity/Empresa; ()TC; toString ()Ljava/lang/String;
  ? < =
 A C B java/lang/String D E valueOf &(Ljava/lang/Object;)Ljava/lang/String;   G H I makeConcatWithConstants ¤(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  M 9 : 
SourceFile Empresa.java ª<C:Lbr/com/legalconnect/entity/Empresa;B:Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 S U T $java/lang/invoke/StringConcatFactory H V (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; R Y Empresa.EmpresaBuilder(super=, nomeFantasia=, razaoSocial=, cnpj=, emailContato=, enderecos=, telefones=, profissionais=) InnerClasses \ )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder _ "br/com/legalconnect/entity/Empresa EmpresaBuilder b %java/lang/invoke/MethodHandles$Lookup d java/lang/invoke/MethodHandles Lookup NestHost!                   	            
                         
                 
                 
               
        A     *· ±           #                                              P     
*+µ !*¶ #°           #        
       
           
     '       	                    P     
*+µ (*¶ #°           #        
       
 	          
     '    	   
                    P     
*+µ **¶ #°           #        
       
 
          
     '    
                       P     
*+µ ,*¶ #°           #        
       
           
     '        .      /            Z     
*+µ 0*¶ #°           #        
       
  
         
       
    '        .      2            Z     
*+µ 3*¶ #°           #        
       
  
         
       
    '        .      5            Z     
*+µ 6*¶ #°           #        
       
  
         
       
    '      % &      8         9 :      ;          < =             k     /*· >*´ !*´ (*´ **´ ,*´ 0¸ @*´ 3¸ @*´ 6¸ @º F  °           #        /            /    D % J             %     *¶ #°                 A 9 K             %     *¶ L°                   N    O     P         Q     W  X Z      [ ]	  ^ `	 a c e  f    ^
```
```java
Êþº¾   = $  5br/com/legalconnect/entity/Empresa$EmpresaBuilderImpl  1br/com/legalconnect/entity/Empresa$EmpresaBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this 7Lbr/com/legalconnect/entity/Empresa$EmpresaBuilderImpl; self 9()Lbr/com/legalconnect/entity/Empresa$EmpresaBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build &()Lbr/com/legalconnect/entity/Empresa;  "br/com/legalconnect/entity/Empresa
     6(Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder;)V 5()Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder;
     
SourceFile Empresa.java 	Signature Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder<Lbr/com/legalconnect/entity/Empresa;Lbr/com/legalconnect/entity/Empresa$EmpresaBuilderImpl;>; InnerClasses EmpresaBuilder EmpresaBuilderImpl NestHost 0               /     *· ±    
       #          
                        *°             
                  3     	» Y*· °    
       #        	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   =   "br/com/legalconnect/entity/Empresa  )br/com/legalconnect/common/dto/BaseEntity nomeFantasia Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name 
nome_fantasia nullable     length   ÿ razaoSocial razao_social cnpj unique       emailContato 
email_contato 	enderecos Ljava/util/Set; 	Signature 6Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>; Ljakarta/persistence/OneToMany; mappedBy empresa cascade !Ljakarta/persistence/CascadeType; ALL 
orphanRemoval fetch Ljakarta/persistence/FetchType; LAZY 	telefones #Ljava/util/Set<Ljava/lang/String;>; 'Ljakarta/persistence/ElementCollection; %Ljakarta/persistence/CollectionTable; tb_empresa_telefones joinColumns  Ljakarta/persistence/JoinColumn; 
empresa_id numero_telefone    
profissionais :Ljava/util/Set<Lbr/com/legalconnect/entity/Profissional;>; <init> 6(Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder;)V :(Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  8 1 9 @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V ; java/util/HashSet
 : = 1 > ()V	  @  	  B % 	  D / 	 F H G 1br/com/legalconnect/entity/Empresa$EmpresaBuilder  	  H	 F K  	  K	 F N  	  N	 F Q  	  Q	 F @	 F B	 F D LineNumberTable LocalVariableTable this $Lbr/com/legalconnect/entity/Empresa; b 3Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder; LocalVariableTypeTable 7Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder<**>; MethodParameters builder 5()Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder; 9()Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder<**>; c 5br/com/legalconnect/entity/Empresa$EmpresaBuilderImpl
 b = getNomeFantasia ()Ljava/lang/String; getRazaoSocial getCnpj getEmailContato getEnderecos ()Ljava/util/Set; 8()Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>; getTelefones %()Ljava/util/Set<Ljava/lang/String;>; getProfissionais <()Ljava/util/Set<Lbr/com/legalconnect/entity/Profissional;>; setNomeFantasia (Ljava/lang/String;)V setRazaoSocial setCnpj setEmailContato setEnderecos (Ljava/util/Set;)V 9(Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>;)V setTelefones &(Ljava/util/Set<Ljava/lang/String;>;)V setProfissionais =(Ljava/util/Set<Lbr/com/legalconnect/entity/Profissional;>;)V
  = x(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;Ljava/util/Set;)V Þ(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>;Ljava/util/Set<Ljava/lang/String;>;Ljava/util/Set<Lbr/com/legalconnect/entity/Profissional;>;)V 
SourceFile Empresa.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; 
tb_empresa InnerClasses  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder EmpresaBuilder EmpresaBuilderImpl NestMembers !                 	s 
 Z  
I             	s  Z  
I             	s  Z  Z  
I             	s  
I              !    s  [ e    !Z  "e # $  %       &    3  '  "e # $ (  	s ) *[ @ +  	s ,   	s - 
I .  /       0    !    s  [ e    !Z  "e # $   1 2      3 4     5   6   µ     _*+· 7*» :Y· <µ ?*» :Y· <µ A*» :Y· <µ C*+´ Eµ I*+´ Jµ L*+´ Mµ O*+´ Pµ R*+´ Sµ ?*+´ Tµ A*+´ Uµ C±    V       #  ;  D  G & # W       _ X Y     _ Z [  \       _ Z ]  ^    Z  	 _ `      a 4     5   6   (      » bY· d°    V       # W       e f  4     5   6   /     *´ I°    V        W        X Y    g f  4     5   6   /     *´ L°    V        W        X Y    h f  4     5   6   /     *´ O°    V        W        X Y    i f  4     5   6   /     *´ R°    V        W        X Y    j k      l 4     5   6   /     *´ ?°    V        W        X Y    m k      n 4     5   6   /     *´ A°    V        W        X Y    o k      p 4     5   6   /     *´ C°    V        W        X Y    q r  4     5   6   :     *+µ I±    V         W        X Y         ^       s r  4     5   6   :     *+µ L±    V         W        X Y         ^       t r  4     5   6   :     *+µ O±    V         W        X Y         ^       u r  4     5   6   :     *+µ R±    V         W        X Y         ^       v w      x 4     5   6   L     *+µ ?±    V         W        X Y         \           ^       y w      z 4     5   6   L     *+µ A±    V         W        X Y      %   \        % &  ^    %   { w      | 4     5   6   L     *+µ C±    V         W        X Y      /   \        / 0  ^    /   1 >  4     5   6   `     &*· }*» :Y· <µ ?*» :Y· <µ A*» :Y· <µ C±    V       !  ;  D  G % ! W       & X Y    1 ~       4     5   6   ó     M*· }*» :Y· <µ ?*» :Y· <µ A*» :Y· <µ C*+µ I*,µ L*-µ O*µ R*µ ?*µ A*µ C±    V       "  ;  D  G % " W   R    M X Y     M      M      M      M      M      M %     M /   \        M      M % &    M / 0  ^              %  /                  	s         	 F  	 b         F b
```
```java
Êþº¾   = w  3br/com/legalconnect/entity/Endereco$EnderecoBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder 
logradouro Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; numero complemento bairro cidade estado cep pais tipoEndereco 2Lbr/com/legalconnect/entity/Endereco$TipoEndereco; pessoa #Lbr/com/legalconnect/entity/Pessoa; empresa $Lbr/com/legalconnect/entity/Empresa; <init> ()V Code
     LineNumberTable LocalVariableTable this 5Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder; LocalVariableTypeTable =Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder<TC;TB;>; I(Ljava/lang/String;)Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder; 	Signature (Ljava/lang/String;)TB;	  %  
  ' ( ) self 7()Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder; MethodParameters	  , 	 	  . 
 	  0  	  2  	  4 
 	  6  	  8   i(Lbr/com/legalconnect/entity/Endereco$TipoEndereco;)Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder; 7(Lbr/com/legalconnect/entity/Endereco$TipoEndereco;)TB;	  <   Z(Lbr/com/legalconnect/entity/Pessoa;)Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder; ((Lbr/com/legalconnect/entity/Pessoa;)TB;	  @   [(Lbr/com/legalconnect/entity/Empresa;)Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder; )(Lbr/com/legalconnect/entity/Empresa;)TB;	  D   ()TB; build '()Lbr/com/legalconnect/entity/Endereco; ()TC; toString ()Ljava/lang/String;
  L I J
 N P O java/lang/String Q R valueOf &(Ljava/lang/Object;)Ljava/lang/String;   T U V makeConcatWithConstants ì(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  Z F G 
SourceFile 
Endereco.java ­<C:Lbr/com/legalconnect/entity/Endereco;B:Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 ` b a $java/lang/invoke/StringConcatFactory U c (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; _ f Endereco.EnderecoBuilder(super=, logradouro=, numero=, complemento=, bairro=, cidade=, estado=, cep=, pais=, tipoEndereco=, pessoa=, empresa=) InnerClasses i )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder l #br/com/legalconnect/entity/Endereco EnderecoBuilder o 0br/com/legalconnect/entity/Endereco$TipoEndereco TipoEndereco r %java/lang/invoke/MethodHandles$Lookup t java/lang/invoke/MethodHandles Lookup NestHost!                   	            
                                    
                                                                               A     *· ±                                       !  "    #            P     
*+µ $*¶ &°                   
       
           
      *       	 !  "    #            P     
*+µ +*¶ &°                   
       
 	          
      *    	   
 !  "    #            P     
*+µ -*¶ &°                   
       
 
          
      *    
    !  "    #            P     
*+µ /*¶ &°                   
       
           
      *        !  "    #            P     
*+µ 1*¶ &°                   
       
           
      *       
 !  "    #            P     
*+µ 3*¶ &°                   
       
 
          
      *    
    !  "    #            P     
*+µ 5*¶ &°                   
       
           
      *        !  "    #            P     
*+µ 7*¶ &°                   
       
           
      *        9  "    :            P     
*+µ ;*¶ &°                   
       
           
      *        =  "    >            P     
*+µ ?*¶ &°                   
       
           
      *        A  "    B            P     
*+µ C*¶ &°                   
       
           
      *      ( )  "    E         F G  "    H          I J             {     ?*· K*´ $*´ +*´ -*´ /*´ 1*´ 3*´ 5*´ 7*´ ;¸ M*´ ?¸ M*´ C¸ Mº S  °                   ?            ?     D ( W             %     *¶ &°                 A F X             %     *¶ Y°                   [    \ "    ]         ^     d  e g   "   h j	  k m	 n k p@ q s u  v    k
```
```java
Êþº¾   = $  7br/com/legalconnect/entity/Endereco$EnderecoBuilderImpl  3br/com/legalconnect/entity/Endereco$EnderecoBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this 9Lbr/com/legalconnect/entity/Endereco$EnderecoBuilderImpl; self ;()Lbr/com/legalconnect/entity/Endereco$EnderecoBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build '()Lbr/com/legalconnect/entity/Endereco;  #br/com/legalconnect/entity/Endereco
     8(Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder;)V 7()Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder;
     
SourceFile 
Endereco.java 	Signature Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder<Lbr/com/legalconnect/entity/Endereco;Lbr/com/legalconnect/entity/Endereco$EnderecoBuilderImpl;>; InnerClasses EnderecoBuilder EnderecoBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = G  0br/com/legalconnect/entity/Endereco$TipoEndereco  java/lang/Enum RESIDENCIAL 2Lbr/com/legalconnect/entity/Endereco$TipoEndereco; 	COMERCIAL 
ESCRITORIO COBRANCA ENTREGA OUTRO ENUM$VALUES 3[Lbr/com/legalconnect/entity/Endereco$TipoEndereco; <clinit> ()V Code 
     <init> (Ljava/lang/String;I)V	     	     	     		    	  
	  # 
  	  &  	  (  
 LineNumberTable LocalVariableTable
   this 
$enum$name 
$enum$ordinal MethodParameters values 5()[Lbr/com/legalconnect/entity/Endereco$TipoEndereco;
 3 5 4 java/lang/System 6 7 	arraycopy *(Ljava/lang/Object;ILjava/lang/Object;II)V valueOf F(Ljava/lang/String;)Lbr/com/legalconnect/entity/Endereco$TipoEndereco;
  ; 8 < 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; name 
SourceFile 
Endereco.java 	Signature DLjava/lang/Enum<Lbr/com/legalconnect/entity/Endereco$TipoEndereco;>; InnerClasses D #br/com/legalconnect/entity/Endereco TipoEndereco NestHost@1     @    @    @    @ 	   @ 
   @      
           ³      {» Y· ³ » Y· ³ » Y· ³ » Y· ³ » Y!· ³ "» Y$· ³ %½ Y² SY² SY² SY² SY² "SY² %S³ '±    )       T 
 U  V ' W 4 X A Y N S *             1     *+· +±    )       S *        ,    /   	 -  .  	 0 1     6     ² 'YK*¾Y<½ YM¸ 2,°    )        *      	 8 9     *     
*¸ :À °    )        *      /    =   >    ? @    A B   
   C E@ F    C
```
```java
Êþº¾   =   #br/com/legalconnect/entity/Endereco  )br/com/legalconnect/common/dto/BaseEntity 
logradouro Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nullable     length   ÿ numero    complemento bairro   d cidade estado    cep   	 pais   2 tipoEndereco 2Lbr/com/legalconnect/entity/Endereco$TipoEndereco;  Ljakarta/persistence/Enumerated; value Ljakarta/persistence/EnumType; STRING 
tipo_endereco pessoa #Lbr/com/legalconnect/entity/Pessoa; Ljakarta/persistence/ManyToOne; fetch Ljakarta/persistence/FetchType; LAZY  Ljakarta/persistence/JoinColumn; 	pessoa_id empresa $Lbr/com/legalconnect/entity/Empresa; 
empresa_id <init> 8(Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder;)V 	Signature <(Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  4 , 5 @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V 7 Brasil	  9  	 ; = < 3br/com/legalconnect/entity/Endereco$EnderecoBuilder  	  =	 ; @  	  @	 ; C  	  C	 ; F  	  F	 ; I  	  I	 ; L  	  L	 ; O  	  O	 ; 9	 ; S  	  S	 ; V ! "	  V	 ; Y ) *	  Y LineNumberTable LocalVariableTable this %Lbr/com/legalconnect/entity/Endereco; b 5Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder; LocalVariableTypeTable 9Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder<**>; MethodParameters builder 7()Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder; ;()Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder<**>; h 7br/com/legalconnect/entity/Endereco$EnderecoBuilderImpl
 g j , k ()V 
getLogradouro ()Ljava/lang/String; 	getNumero getComplemento 	getBairro 	getCidade 	getEstado getCep getPais getTipoEndereco 4()Lbr/com/legalconnect/entity/Endereco$TipoEndereco; 	getPessoa %()Lbr/com/legalconnect/entity/Pessoa; 
getEmpresa &()Lbr/com/legalconnect/entity/Empresa; 
setLogradouro (Ljava/lang/String;)V 	setNumero setComplemento 	setBairro 	setCidade 	setEstado setCep setPais setTipoEndereco 5(Lbr/com/legalconnect/entity/Endereco$TipoEndereco;)V 	setPessoa &(Lbr/com/legalconnect/entity/Pessoa;)V 
setEmpresa '(Lbr/com/legalconnect/entity/Empresa;)V
  j(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lbr/com/legalconnect/entity/Endereco$TipoEndereco;Lbr/com/legalconnect/entity/Pessoa;Lbr/com/legalconnect/entity/Empresa;)V 
SourceFile 
Endereco.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_endereco InnerClasses  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder EnderecoBuilder EnderecoBuilderImpl  0br/com/legalconnect/entity/Endereco$TipoEndereco TipoEndereco NestMembers !                 	s  
Z  I 
            	s  
Z  I             	s  I 
            	s  
Z  I             	s  
Z  I             	s  
Z  I             	s  
Z  I             	s  
Z  I              e     	s   
Z  I   ! "       #  $e % & '  	s (  ) *       #  $e % & '  	s +   , -  .    / 0     1   2   ²     d*+· 3*6µ 8*+´ :µ >*+´ ?µ A*+´ Bµ D*+´ Eµ G*+´ Hµ J*+´ Kµ M*+´ Nµ P*+´ Qµ 8*+´ Rµ T*+´ Uµ W*+´ Xµ Z±    [         7   \       d ] ^     d _ `  a       d _ b  c    _  	 d e  .    f 0     1   2   (      » gY· i°    [        \       l m  0     1   2   /     *´ >°    [        \        ] ^    n m  0     1   2   /     *´ A°    [        \        ] ^    o m  0     1   2   /     *´ D°    [        \        ] ^    p m  0     1   2   /     *´ G°    [        \        ] ^    q m  0     1   2   /     *´ J°    [        \        ] ^    r m  0     1   2   /     *´ M°    [        \        ] ^    s m  0     1   2   /     *´ P°    [        \        ] ^    t m  0     1   2   /     *´ 8°    [        \        ] ^    u v  0     1   2   /     *´ T°    [        \        ] ^    w x  0     1   2   /     *´ W°    [        \        ] ^    y z  0     1   2   /     *´ Z°    [        \        ] ^    { |  0     1   2   :     *+µ >±    [        \        ] ^         c       } |  0     1   2   :     *+µ A±    [        \        ] ^         c       ~ |  0     1   2   :     *+µ D±    [        \        ] ^         c        |  0     1   2   :     *+µ G±    [        \        ] ^         c        |  0     1   2   :     *+µ J±    [        \        ] ^         c        |  0     1   2   :     *+µ M±    [        \        ] ^         c        |  0     1   2   :     *+µ P±    [        \        ] ^         c        |  0     1   2   :     *+µ 8±    [        \        ] ^         c          0     1   2   :     *+µ T±    [        \        ] ^         c          0     1   2   :     *+µ W±    [        \        ] ^      ! "  c    !      0     1   2   :     *+µ Z±    [        \        ] ^      ) *  c    )   , k  0     1   2   =     *· *6µ 8±    [         7 
  \        ] ^    ,   0     1   2   ê     J*· *6µ 8*+µ >*,µ A*-µ D*µ G*µ J*µ M*µ P*µ 8*	µ T*
µ W*µ Z±    [         7 
  \   z    J ] ^     J      J      J      J      J      J      J      J      J   	   J ! " 
   J ) *  c   -                   !  )                  	s     "    	 ;  	 g      @      ; g 
```
```java
Êþº¾   = h  /br/com/legalconnect/entity/Pessoa$PessoaBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder usuario !Lbr/com/legalconnect/entity/User; RuntimeInvisibleAnnotations Llombok/Generated; nomeCompleto Ljava/lang/String; cpf dataNascimento Ljava/time/LocalDate; 	enderecos Ljava/util/Set; 	Signature 6Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>; 	telefones #Ljava/util/Set<Ljava/lang/String;>; <init> ()V Code
     LineNumberTable LocalVariableTable this 1Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder; LocalVariableTypeTable 9Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder<TC;TB;>; T(Lbr/com/legalconnect/entity/User;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder; &(Lbr/com/legalconnect/entity/User;)TB;	  "  
  $ % & self 3()Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder; MethodParameters E(Ljava/lang/String;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder; (Ljava/lang/String;)TB;	  + 	 
	  -  
 H(Ljava/time/LocalDate;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder; (Ljava/time/LocalDate;)TB;	  1  
 B(Ljava/util/Set;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder; ;(Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>;)TB;	  5   ((Ljava/util/Set<Ljava/lang/String;>;)TB;	  8   ()TB; build %()Lbr/com/legalconnect/entity/Pessoa; ()TC; toString ()Ljava/lang/String;
  @ = >
 B D C java/lang/String E F valueOf &(Ljava/lang/Object;)Ljava/lang/String;   H I J makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  N : ; 
SourceFile Pessoa.java §<C:Lbr/com/legalconnect/entity/Pessoa;B:Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 T V U $java/lang/invoke/StringConcatFactory I W (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; S Z kPessoa.PessoaBuilder(super=, usuario=, nomeCompleto=, cpf=, dataNascimento=, enderecos=, telefones=) InnerClasses ] )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder ` !br/com/legalconnect/entity/Pessoa 
PessoaBuilder c %java/lang/invoke/MethodHandles$Lookup e java/lang/invoke/MethodHandles Lookup NestHost!                   	 
            
            
                                                    A     *· ±           *                                              P     
*+µ !*¶ #°           *        
       
           
     '       	 (      )            P     
*+µ **¶ #°           *        
       
 	 
         
     '    	    (      )            P     
*+µ ,*¶ #°           *        
       
  
         
     '        .      /            P     
*+µ 0*¶ #°           *        
       
  
         
     '        2      3            Z     
*+µ 4*¶ #°           *        
       
           
       
    '        2      6            Z     
*+µ 7*¶ #°           *        
       
           
       
    '      % &      9         : ;      <          = >             j     .*· ?*´ !¸ A*´ **´ ,*´ 0¸ A*´ 4¸ A*´ 7¸ Aº G  °           *        .            .    D % K             %     *¶ #°                 A : L             %     *¶ M°                   O    P     Q         R     X  Y [      \ ^	  _ a	 b d f  g    _
```
```java
Êþº¾   =   !br/com/legalconnect/entity/Pessoa  )br/com/legalconnect/common/dto/BaseEntity usuario !Lbr/com/legalconnect/entity/User; RuntimeVisibleAnnotations Ljakarta/persistence/OneToOne; fetch Ljakarta/persistence/FetchType; LAZY cascade !Ljakarta/persistence/CascadeType; ALL  Ljakarta/persistence/JoinColumn; name user_id referencedColumnName id nullable     unique    nomeCompleto Ljava/lang/String; Ljakarta/persistence/Column; 
nome_completo length   ÿ cpf    dataNascimento Ljava/time/LocalDate; data_nascimento 	enderecos Ljava/util/Set; 	Signature 6Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>; Ljakarta/persistence/OneToMany; mappedBy pessoa 
orphanRemoval 	telefones #Ljava/util/Set<Ljava/lang/String;>; 'Ljakarta/persistence/ElementCollection; %Ljakarta/persistence/CollectionTable; tb_pessoa_telefones joinColumns 	pessoa_id numero_telefone    <init> 4(Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;)V 8(Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  ; 4 < @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V > java/util/HashSet
 = @ 4 A ()V	  C # $	  E + $	 G I H /br/com/legalconnect/entity/Pessoa$PessoaBuilder  	  I	 G L  	  L	 G O  	  O	 G R   !	  R	 G C	 G E LineNumberTable LocalVariableTable this #Lbr/com/legalconnect/entity/Pessoa; b 1Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder; LocalVariableTypeTable 5Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder<**>; MethodParameters 
getUsuario #()Lbr/com/legalconnect/entity/User; getNomeCompleto ()Ljava/lang/String; getCpf getDataNascimento ()Ljava/time/LocalDate; getEnderecos ()Ljava/util/Set; 8()Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>; getTelefones %()Ljava/util/Set<Ljava/lang/String;>; 
setUsuario $(Lbr/com/legalconnect/entity/User;)V setNomeCompleto (Ljava/lang/String;)V setCpf setDataNascimento (Ljava/time/LocalDate;)V setEnderecos (Ljava/util/Set;)V 9(Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>;)V setTelefones &(Ljava/util/Set<Ljava/lang/String;>;)V
  @ {(Lbr/com/legalconnect/entity/User;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/util/Set;Ljava/util/Set;)V ¶(Lbr/com/legalconnect/entity/User;Ljava/lang/String;Ljava/lang/String;Ljava/time/LocalDate;Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>;Ljava/util/Set<Ljava/lang/String;>;)V 
SourceFile Pessoa.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; 	tb_pessoa !Ljakarta/persistence/Inheritance; strategy %Ljakarta/persistence/InheritanceType; JOINED InnerClasses  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder 
PessoaBuilder NestMembers!             /    	e 
  [ e 
    s  s  Z  Z             s  Z  I             s  Z  Z  I     !         s "  # $  %    &    !  '  (s ) [ e 
  *Z  	e 
   + $  %    ,    3  -  	e 
  .  s / 0[ @   s 1   s 2 I 3   4 5  %    6 7     8   9        L*+· :*» =Y· ?µ B*» =Y· ?µ D*+´ Fµ J*+´ Kµ M*+´ Nµ P*+´ Qµ S*+´ Tµ B*+´ Uµ D±    V       *  K  T  * W       L X Y     L Z [  \       L Z ]  ^    Z   _ `  7     8   9   /     *´ J°    V       & W        X Y    a b  7     8   9   /     *´ M°    V       & W        X Y    c b  7     8   9   /     *´ P°    V       & W        X Y    d e  7     8   9   /     *´ S°    V       & W        X Y    f g  %    h 7     8   9   /     *´ B°    V       & W        X Y    i g  %    j 7     8   9   /     *´ D°    V       & W        X Y    k l  7     8   9   :     *+µ J±    V       ' W        X Y         ^       m n  7     8   9   :     *+µ M±    V       ' W        X Y         ^       o n  7     8   9   :     *+µ P±    V       ' W        X Y         ^       p q  7     8   9   :     *+µ S±    V       ' W        X Y        !  ^        r s  %    t 7     8   9   L     *+µ B±    V       ' W        X Y      # $  \        # &  ^    #   u s  %    v 7     8   9   L     *+µ D±    V       ' W        X Y      + $  \        + ,  ^    +   4 A  7     8   9   Q     *· w*» =Y· ?µ B*» =Y· ?µ D±    V       (  K  T  ( W        X Y    4 x  %    y 7     8   9   Ê     <*· w*» =Y· ?µ B*» =Y· ?µ D*+µ J*,µ M*-µ P*µ S*µ B*µ D±    V       )  K  T  ) W   H    < X Y     <      <      <      <   !    < # $    < + $  \       < # &    < + ,  ^             #  +   z    {      |   }  s ~   e          	 G  	      G
```
```java
Êþº¾   = w  -br/com/legalconnect/entity/Plano$PlanoBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder nome Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; 	descricao precoMensal Ljava/math/BigDecimal; 
precoAnual limiteServicosAgendaveis Ljava/lang/Integer; visibilidadeDestaque 7Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque; acessoRelatoriosAvancados Ljava/lang/Boolean; permitePedidosOrcamento periodoTesteDias 	isDefault <init> ()V Code
     LineNumberTable LocalVariableTable this /Lbr/com/legalconnect/entity/Plano$PlanoBuilder; LocalVariableTypeTable 7Lbr/com/legalconnect/entity/Plano$PlanoBuilder<TC;TB;>; C(Ljava/lang/String;)Lbr/com/legalconnect/entity/Plano$PlanoBuilder; 	Signature (Ljava/lang/String;)TB;	  %  
  ' ( ) self 1()Lbr/com/legalconnect/entity/Plano$PlanoBuilder; MethodParameters	  , 	  G(Ljava/math/BigDecimal;)Lbr/com/legalconnect/entity/Plano$PlanoBuilder; (Ljava/math/BigDecimal;)TB;	  0 
 	  2   D(Ljava/lang/Integer;)Lbr/com/legalconnect/entity/Plano$PlanoBuilder; (Ljava/lang/Integer;)TB;	  6 
  h(Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;)Lbr/com/legalconnect/entity/Plano$PlanoBuilder; <(Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;)TB;	  :   D(Ljava/lang/Boolean;)Lbr/com/legalconnect/entity/Plano$PlanoBuilder; (Ljava/lang/Boolean;)TB;	  >  	  @  	  B  	  D   ()TB; build $()Lbr/com/legalconnect/entity/Plano; ()TC; toString ()Ljava/lang/String;
  L I J
 N P O java/lang/String Q R valueOf &(Ljava/lang/Object;)Ljava/lang/String;   T U V makeConcatWithConstants Ú(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  Z F G 
SourceFile 
Plano.java ¤<C:Lbr/com/legalconnect/entity/Plano;B:Lbr/com/legalconnect/entity/Plano$PlanoBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 ` b a $java/lang/invoke/StringConcatFactory U c (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; _ f ÚPlano.PlanoBuilder(super=, nome=, descricao=, precoMensal=, precoAnual=, limiteServicosAgendaveis=, visibilidadeDestaque=, acessoRelatoriosAvancados=, permitePedidosOrcamento=, periodoTesteDias=, isDefault=) InnerClasses i )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder l  br/com/legalconnect/entity/Plano PlanoBuilder o 5br/com/legalconnect/entity/Plano$VisibilidadeDestaque VisibilidadeDestaque r %java/lang/invoke/MethodHandles$Lookup t java/lang/invoke/MethodHandles Lookup NestHost!     
              	            
                        
                                                                               A     *· ±                                       !  "    #            P     
*+µ $*¶ &°                   
       
           
      *       	 !  "    #            P     
*+µ +*¶ &°                   
       
 	          
      *    	   
 -  "    .            P     
*+µ /*¶ &°                   
       
 
          
      *    
    -  "    .            P     
*+µ 1*¶ &°                   
       
           
      *       
 3  "    4            P     
*+µ 5*¶ &°                   
       
 
          
      *    
    7  "    8            P     
*+µ 9*¶ &°                   
       
           
      *        ;  "    <            P     
*+µ =*¶ &°                   
       
           
      *        ;  "    <            P     
*+µ ?*¶ &°                   
       
           
      *        3  "    4            P     
*+µ A*¶ &°                   
       
           
      *        ;  "    <            P     
*+µ C*¶ &°                   
       
           
      *      ( )  "    E         F G  "    H          I J                  J*· K*´ $*´ +*´ /¸ M*´ 1¸ M*´ 5¸ M*´ 9¸ M*´ =¸ M*´ ?¸ M*´ A¸ M*´ C¸ Mº S  °                   J            J     D ( W             %     *¶ &°                 A F X             %     *¶ Y°                   [    \ "    ]         ^     d  e g   "   h j	  k m	 n k p@ q s u  v    k
```
```java
Êþº¾   = $  1br/com/legalconnect/entity/Plano$PlanoBuilderImpl  -br/com/legalconnect/entity/Plano$PlanoBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this 3Lbr/com/legalconnect/entity/Plano$PlanoBuilderImpl; self 5()Lbr/com/legalconnect/entity/Plano$PlanoBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build $()Lbr/com/legalconnect/entity/Plano;   br/com/legalconnect/entity/Plano
     2(Lbr/com/legalconnect/entity/Plano$PlanoBuilder;)V 1()Lbr/com/legalconnect/entity/Plano$PlanoBuilder;
     
SourceFile 
Plano.java 	Signature Lbr/com/legalconnect/entity/Plano$PlanoBuilder<Lbr/com/legalconnect/entity/Plano;Lbr/com/legalconnect/entity/Plano$PlanoBuilderImpl;>; InnerClasses PlanoBuilder PlanoBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = ;  5br/com/legalconnect/entity/Plano$VisibilidadeDestaque  java/lang/Enum PADRAO 7Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque; PREMIUM DESTAQUE_MAXIMO ENUM$VALUES 8[Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque; <clinit> ()V Code 
     <init> (Ljava/lang/String;I)V	     	     	    	   	 
 LineNumberTable LocalVariableTable
   this 
$enum$name 
$enum$ordinal MethodParameters values :()[Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;
 ' ) ( java/lang/System * + 	arraycopy *(Ljava/lang/Object;ILjava/lang/Object;II)V valueOf K(Ljava/lang/String;)Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;
  / , 0 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; name 
SourceFile 
Plano.java 	Signature ILjava/lang/Enum<Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;>; InnerClasses 8  br/com/legalconnect/entity/Plano VisibilidadeDestaque NestHost@1     @    @    @     	 
        
   m      A» Y· ³ » Y· ³ » Y· ³ ½ Y² SY² SY² S³ ±           G 
 H  I ' F           
   1     *+· ±           F              #   	 !  "  	 $ %  
   6     ² YK*¾Y<½ YM¸ &,°                  	 , -  
   *     
*¸ .À °                  #    1   2    3 4    5 6   
   7 9@ :    7
```
```java
Êþº¾   =    br/com/legalconnect/entity/Plano  )br/com/legalconnect/common/dto/BaseEntity nome Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nullable     unique    length   d 	descricao columnDefinition TEXT precoMensal Ljava/math/BigDecimal; preco_mensal 	precision   
 scale    
precoAnual preco_anual limiteServicosAgendaveis Ljava/lang/Integer; limite_servicos_agendaveis visibilidadeDestaque 7Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;  Ljakarta/persistence/Enumerated; value Ljakarta/persistence/EnumType; STRING visibilidade_destaque   2 acessoRelatoriosAvancados Ljava/lang/Boolean; acesso_relatorios_avancados permitePedidosOrcamento permite_pedidos_orcamento periodoTesteDias periodo_teste_dias 	isDefault 
is_default <init> 2(Lbr/com/legalconnect/entity/Plano$PlanoBuilder;)V 	Signature 6(Lbr/com/legalconnect/entity/Plano$PlanoBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  8 0 9 @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	 ; = < -br/com/legalconnect/entity/Plano$PlanoBuilder  	  =	 ; @  	  @	 ; C  	  C	 ; F  	  F	 ; I  	  I	 ; L   	  L	 ; O ' (	  O	 ; R * (	  R	 ; U , 	  U	 ; X . (	  X LineNumberTable LocalVariableTable this "Lbr/com/legalconnect/entity/Plano; b /Lbr/com/legalconnect/entity/Plano$PlanoBuilder; LocalVariableTypeTable 3Lbr/com/legalconnect/entity/Plano$PlanoBuilder<**>; MethodParameters builder 1()Lbr/com/legalconnect/entity/Plano$PlanoBuilder; 5()Lbr/com/legalconnect/entity/Plano$PlanoBuilder<**>; g 1br/com/legalconnect/entity/Plano$PlanoBuilderImpl
 f i 0 j ()V getNome ()Ljava/lang/String; getDescricao getPrecoMensal ()Ljava/math/BigDecimal; 
getPrecoAnual getLimiteServicosAgendaveis ()Ljava/lang/Integer; getVisibilidadeDestaque 9()Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque; getAcessoRelatoriosAvancados ()Ljava/lang/Boolean; getPermitePedidosOrcamento getPeriodoTesteDias getIsDefault setNome (Ljava/lang/String;)V setDescricao setPrecoMensal (Ljava/math/BigDecimal;)V 
setPrecoAnual setLimiteServicosAgendaveis (Ljava/lang/Integer;)V setVisibilidadeDestaque :(Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;)V setAcessoRelatoriosAvancados (Ljava/lang/Boolean;)V setPermitePedidosOrcamento setPeriodoTesteDias setIsDefault
  i é(Ljava/lang/String;Ljava/lang/String;Ljava/math/BigDecimal;Ljava/math/BigDecimal;Ljava/lang/Integer;Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Boolean;)V 
SourceFile 
Plano.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_plano InnerClasses  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder PlanoBuilder PlanoBuilderImpl  5br/com/legalconnect/entity/Plano$VisibilidadeDestaque VisibilidadeDestaque NestMembers !     
            	s  
Z  Z 
 I             	s  s             	s  
Z  I  I             	s  
Z  I  I             	s             !  "e # $   	s % 
Z  I &  ' (         	s ) 
Z   * (         	s + 
Z   ,          	s -  . (         	s / 
Z    0 1  2    3 4     5   6        V*+· 7*+´ :µ >*+´ ?µ A*+´ Bµ D*+´ Eµ G*+´ Hµ J*+´ Kµ M*+´ Nµ P*+´ Qµ S*+´ Tµ V*+´ Wµ Y±    Z        [       V \ ]     V ^ _  `       V ^ a  b    ^  	 c d  2    e 4     5   6   (      » fY· h°    Z        [       k l  4     5   6   /     *´ >°    Z        [        \ ]    m l  4     5   6   /     *´ A°    Z        [        \ ]    n o  4     5   6   /     *´ D°    Z        [        \ ]    p o  4     5   6   /     *´ G°    Z        [        \ ]    q r  4     5   6   /     *´ J°    Z        [        \ ]    s t  4     5   6   /     *´ M°    Z        [        \ ]    u v  4     5   6   /     *´ P°    Z        [        \ ]    w v  4     5   6   /     *´ S°    Z        [        \ ]    x r  4     5   6   /     *´ V°    Z        [        \ ]    y v  4     5   6   /     *´ Y°    Z        [        \ ]    z {  4     5   6   :     *+µ >±    Z        [        \ ]         b       | {  4     5   6   :     *+µ A±    Z        [        \ ]         b       } ~  4     5   6   :     *+µ D±    Z        [        \ ]         b        ~  4     5   6   :     *+µ G±    Z        [        \ ]         b          4     5   6   :     *+µ J±    Z        [        \ ]         b          4     5   6   :     *+µ M±    Z        [        \ ]          b          4     5   6   :     *+µ P±    Z        [        \ ]      ' (  b    '      4     5   6   :     *+µ S±    Z        [        \ ]      * (  b    *      4     5   6   :     *+µ V±    Z        [        \ ]      ,   b    ,      4     5   6   :     *+µ Y±    Z        [        \ ]      . (  b    .   0 j  4     5   6   /     *· ±    Z        [        \ ]    0   4     5   6   Ì     >*· *+µ >*,µ A*-µ D*µ G*µ J*µ M*µ P*µ S*	µ V*
µ Y±    Z        [   p    > \ ]     >      >      >      >      >      >       > ' (    > * (    > ,  	   > . ( 
 b   )
             '  *  ,  .                  	s     "    	 ;  	 f      @      ; f 
```
```java
Êþº¾   = r  ;br/com/legalconnect/entity/Profissional$ProfissionalBuilder  /br/com/legalconnect/entity/Pessoa$PessoaBuilder 	numeroOab Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; statusProfissional <Lbr/com/legalconnect/entity/Profissional$StatusProfissional; usaMarketplace Ljava/lang/Boolean; fazParteDePlano empresa $Lbr/com/legalconnect/entity/Empresa; plano "Lbr/com/legalconnect/entity/Plano; roleProfissionals Ljava/util/Set; 	Signature >Ljava/util/Set<Lbr/com/legalconnect/entity/RoleProfissional;>; <init> ()V Code
     LineNumberTable LocalVariableTable this =Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder; LocalVariableTypeTable ELbr/com/legalconnect/entity/Profissional$ProfissionalBuilder<TC;TB;>; Q(Ljava/lang/String;)Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder; (Ljava/lang/String;)TB;	  $  
  & ' ( self ?()Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder; MethodParameters {(Lbr/com/legalconnect/entity/Profissional$StatusProfissional;)Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder; A(Lbr/com/legalconnect/entity/Profissional$StatusProfissional;)TB;	  - 	 
 R(Ljava/lang/Boolean;)Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder; (Ljava/lang/Boolean;)TB;	  1  	  3 
  c(Lbr/com/legalconnect/entity/Empresa;)Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder; )(Lbr/com/legalconnect/entity/Empresa;)TB;	  7   a(Lbr/com/legalconnect/entity/Plano;)Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder; '(Lbr/com/legalconnect/entity/Plano;)TB;	  ;   N(Ljava/util/Set;)Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder; C(Ljava/util/Set<Lbr/com/legalconnect/entity/RoleProfissional;>;)TB;	  ?   ()TB; build +()Lbr/com/legalconnect/entity/Profissional; ()TC; toString ()Ljava/lang/String;
  G D E
 I K J java/lang/String L M valueOf &(Ljava/lang/Object;)Ljava/lang/String;   O P Q makeConcatWithConstants ¤(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; 3()Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder; %()Lbr/com/legalconnect/entity/Pessoa;
  U A B 
SourceFile Profissional.java ­<C:Lbr/com/legalconnect/entity/Profissional;B:Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder<TC;TB;>;>Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder<TC;TB;>; BootstrapMethods
 [ ] \ $java/lang/invoke/StringConcatFactory P ^ (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; Z a Profissional.ProfissionalBuilder(super=, numeroOab=, statusProfissional=, usaMarketplace=, fazParteDePlano=, empresa=, plano=, roleProfissionals=) InnerClasses d !br/com/legalconnect/entity/Pessoa 
PessoaBuilder g 'br/com/legalconnect/entity/Profissional ProfissionalBuilder j :br/com/legalconnect/entity/Profissional$StatusProfissional StatusProfissional m %java/lang/invoke/MethodHandles$Lookup o java/lang/invoke/MethodHandles Lookup NestHost!                   	 
                       
                                                    
        A     *· ±           '                            !      "            P     
*+µ #*¶ %°           '        
       
           
      )       	 *      +            P     
*+µ ,*¶ %°           '        
       
 	 
         
      )    	    .      /            P     
*+µ 0*¶ %°           '        
       
           
      )       
 .      /            P     
*+µ 2*¶ %°           '        
       
 
          
      )    
    4      5            P     
*+µ 6*¶ %°           '        
       
           
      )        8      9            P     
*+µ :*¶ %°           '        
       
           
      )        <      =            Z     
*+µ >*¶ %°           '        
       
           
        
    )      ' (      @         A B      C          D E             t     8*· F*´ #*´ ,¸ H*´ 0¸ H*´ 2¸ H*´ 6¸ H*´ :¸ H*´ >¸ Hº N  °           '        8            8     D ' R             %     *¶ %°                 A A S             %     *¶ T°                   V    W     X         Y     _  ` b   "   c e	  f h	 i f k@ l n p  q    f
```
```java
Êþº¾   = $  ?br/com/legalconnect/entity/Profissional$ProfissionalBuilderImpl  ;br/com/legalconnect/entity/Profissional$ProfissionalBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this ALbr/com/legalconnect/entity/Profissional$ProfissionalBuilderImpl; self C()Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build +()Lbr/com/legalconnect/entity/Profissional;  'br/com/legalconnect/entity/Profissional
     @(Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder;)V ?()Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder;
     
SourceFile Profissional.java 	Signature ©Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder<Lbr/com/legalconnect/entity/Profissional;Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilderImpl;>; InnerClasses ProfissionalBuilder ProfissionalBuilderImpl NestHost 0               /     *· ±    
       '          
                        *°             
                  3     	» Y*· °    
       '        	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = ?  :br/com/legalconnect/entity/Profissional$StatusProfissional  java/lang/Enum ATIVO <Lbr/com/legalconnect/entity/Profissional$StatusProfissional; 
LICENCIADO SUSPENSO 
EM_ANALISE ENUM$VALUES =[Lbr/com/legalconnect/entity/Profissional$StatusProfissional; <clinit> ()V Code 
     <init> (Ljava/lang/String;I)V	     	     	     		   	 	    
  LineNumberTable LocalVariableTable
   this 
$enum$name 
$enum$ordinal MethodParameters values ?()[Lbr/com/legalconnect/entity/Profissional$StatusProfissional;
 + - , java/lang/System . / 	arraycopy *(Ljava/lang/Object;ILjava/lang/Object;II)V valueOf P(Ljava/lang/String;)Lbr/com/legalconnect/entity/Profissional$StatusProfissional;
  3 0 4 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; name 
SourceFile Profissional.java 	Signature NLjava/lang/Enum<Lbr/com/legalconnect/entity/Profissional$StatusProfissional;>; InnerClasses < 'br/com/legalconnect/entity/Profissional StatusProfissional NestHost@1     @    @    @    @ 	    
       
           T» Y· ³ » Y· ³ » Y· ³ » Y· ³ ½ Y² SY² SY² SY² S³ ±    !       R 
 S  T ' U 4 Q "             1     *+· #±    !       Q "        $    '   	 %  &  	 ( )     6     ² YK*¾Y<½ YM¸ *,°    !        "      	 0 1     *     
*¸ 2À °    !        "      '    5   6    7 8    9 :   
   ; =@ >    ;
```
```java
Êþº¾   =   'br/com/legalconnect/entity/Profissional  !br/com/legalconnect/entity/Pessoa 	numeroOab Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name 
numero_oab nullable     unique    length   2 statusProfissional <Lbr/com/legalconnect/entity/Profissional$StatusProfissional;  Ljakarta/persistence/Enumerated; value Ljakarta/persistence/EnumType; STRING status_profissional usaMarketplace Ljava/lang/Boolean; usa_marketplace fazParteDePlano faz_parte_de_plano empresa $Lbr/com/legalconnect/entity/Empresa; Ljakarta/persistence/ManyToOne; fetch Ljakarta/persistence/FetchType; LAZY  Ljakarta/persistence/JoinColumn; 
empresa_id plano "Lbr/com/legalconnect/entity/Plano; plano_id roleProfissionals Ljava/util/Set; 	Signature >Ljava/util/Set<Lbr/com/legalconnect/entity/RoleProfissional;>;  Ljakarta/persistence/ManyToMany; EAGER Ljakarta/persistence/JoinTable; tb_user_profissionals_role joinColumns profissional_profissionals_id inverseJoinColumns role_id <init> @(Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder;)V D(Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  ; 4 < 4(Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;)V
 > @ ? java/lang/Boolean A B valueOf (Z)Ljava/lang/Boolean;	  D  	  F   H java/util/HashSet
 G J 4 K ()V	  M ( )	 O Q P ;br/com/legalconnect/entity/Profissional$ProfissionalBuilder  	  Q	 O T  	  T	 O D	 O F	 O Y  	  Y	 O \ % &	  \	 O M LineNumberTable LocalVariableTable this )Lbr/com/legalconnect/entity/Profissional; b =Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder; LocalVariableTypeTable ALbr/com/legalconnect/entity/Profissional$ProfissionalBuilder<**>; MethodParameters builder ?()Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder; C()Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder<**>; l ?br/com/legalconnect/entity/Profissional$ProfissionalBuilderImpl
 k J getNumeroOab ()Ljava/lang/String; getStatusProfissional >()Lbr/com/legalconnect/entity/Profissional$StatusProfissional; getUsaMarketplace ()Ljava/lang/Boolean; getFazParteDePlano 
getEmpresa &()Lbr/com/legalconnect/entity/Empresa; getPlano $()Lbr/com/legalconnect/entity/Plano; getRoleProfissionals ()Ljava/util/Set; @()Ljava/util/Set<Lbr/com/legalconnect/entity/RoleProfissional;>; setNumeroOab (Ljava/lang/String;)V setStatusProfissional ?(Lbr/com/legalconnect/entity/Profissional$StatusProfissional;)V setUsaMarketplace (Ljava/lang/Boolean;)V setFazParteDePlano 
setEmpresa '(Lbr/com/legalconnect/entity/Empresa;)V setPlano %(Lbr/com/legalconnect/entity/Plano;)V setRoleProfissionals (Ljava/util/Set;)V A(Ljava/util/Set<Lbr/com/legalconnect/entity/RoleProfissional;>;)V
  J Ì(Ljava/lang/String;Lbr/com/legalconnect/entity/Profissional$StatusProfissional;Ljava/lang/Boolean;Ljava/lang/Boolean;Lbr/com/legalconnect/entity/Empresa;Lbr/com/legalconnect/entity/Plano;Ljava/util/Set;)V û(Ljava/lang/String;Lbr/com/legalconnect/entity/Profissional$StatusProfissional;Ljava/lang/Boolean;Ljava/lang/Boolean;Lbr/com/legalconnect/entity/Empresa;Lbr/com/legalconnect/entity/Plano;Ljava/util/Set<Lbr/com/legalconnect/entity/RoleProfissional;>;)V 
SourceFile Profissional.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_profissional *Ljakarta/persistence/PrimaryKeyJoinColumn; id InnerClasses  /br/com/legalconnect/entity/Pessoa$PessoaBuilder 
PessoaBuilder ProfissionalBuilder ProfissionalBuilderImpl  :br/com/legalconnect/entity/Profissional$StatusProfissional StatusProfissional NestMembers !                 	s 
 Z  
Z  I              e     	s  Z  I             	s  Z             	s  Z              e ! " #  	s $  % &          e ! " #  	s ' Z   ( )  *    +    4  ,   e ! - .  	s / 0[ @ #  	s 1 2[ @ #  	s 3   4 5  *    6 7     8   9   ¯     Y*+· :*¸ =µ C*¸ =µ E*» GY· Iµ L*+´ Nµ R*+´ Sµ U*+´ Vµ C*+´ Wµ E*+´ Xµ Z*+´ [µ ]*+´ ^µ L±    _       '  2 
 5  K   ' `       Y a b     Y c d  e       Y c f  g    c  	 h i  *    j 7     8   9   (      » kY· m°    _       ' `       n o  7     8   9   /     *´ R°    _       " `        a b    p q  7     8   9   /     *´ U°    _       " `        a b    r s  7     8   9   /     *´ C°    _       " `        a b    t s  7     8   9   /     *´ E°    _       " `        a b    u v  7     8   9   /     *´ Z°    _       " `        a b    w x  7     8   9   /     *´ ]°    _       " `        a b    y z  *    { 7     8   9   /     *´ L°    _       " `        a b    | }  7     8   9   :     *+µ R±    _       $ `        a b         g       ~   7     8   9   :     *+µ U±    _       $ `        a b         g          7     8   9   :     *+µ C±    _       $ `        a b         g          7     8   9   :     *+µ E±    _       $ `        a b         g          7     8   9   :     *+µ Z±    _       $ `        a b         g          7     8   9   :     *+µ ]±    _       $ `        a b      % &  g    %      *     7     8   9   L     *+µ L±    _       $ `        a b      ( )  e        ( +  g    (   4 K  7     8   9   Z      *· *¸ =µ C*¸ =µ E*» GY· Iµ L±    _       %  2  5  K  % `         a b    4   *     7     8   9   Ù     G*· *¸ =µ C*¸ =µ E*» GY· Iµ L*+µ R*,µ U*-µ C*µ E*µ Z*µ ]*µ L±    _       &  2  5  K  & `   R    G a b     G      G      G      G      G      G % &    G ( )  e       G ( +  g              %  (                  	s    	s     "    	 O  	 k      @      O k 
```
```java
Êþº¾   = J  Cbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder nome Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; 	descricao <init> ()V Code
   
  LineNumberTable LocalVariableTable this ELbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder; LocalVariableTypeTable MLbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder<TC;TB;>; Y(Ljava/lang/String;)Lbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder; 	Signature (Ljava/lang/String;)TB;	    
     self G()Lbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder; MethodParameters	    	  ()TB; build /()Lbr/com/legalconnect/entity/RoleProfissional; ()TC; toString ()Ljava/lang/String;
  ( % &   * + , makeConcatWithConstants J(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  0 " # 
SourceFile RoleProfissional.java Å<C:Lbr/com/legalconnect/entity/RoleProfissional;B:Lbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 6 8 7 $java/lang/invoke/StringConcatFactory + 9 (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; 5 < FRoleProfissional.RoleProfissionalBuilder(super=, nome=, descricao=) InnerClasses ? )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder B +br/com/legalconnect/entity/RoleProfissional RoleProfissionalBuilder E %java/lang/invoke/MethodHandles$Lookup G java/lang/invoke/MethodHandles Lookup NestHost!                   	             
      A     *· 
±                                                        P     
*+µ *¶ °                   
       
           
            	                   P     
*+µ *¶ °                   
       
 	          
         	         !         " #      $          % &             N     *· '*´ *´ º )  °                                   D  -             %     *¶ °                 A " .             %     *¶ /°                   1    2     3         4     :  ; =      > @	  A C	 D F H  I    A
```
```java
Êþº¾   = $  Gbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilderImpl  Cbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this ILbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilderImpl; self K()Lbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build /()Lbr/com/legalconnect/entity/RoleProfissional;  +br/com/legalconnect/entity/RoleProfissional
     H(Lbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder;)V G()Lbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder;
     
SourceFile RoleProfissional.java 	Signature ½Lbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder<Lbr/com/legalconnect/entity/RoleProfissional;Lbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilderImpl;>; InnerClasses RoleProfissionalBuilder RoleProfissionalBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = h  +br/com/legalconnect/entity/RoleProfissional  )br/com/legalconnect/common/dto/BaseEntity nome Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name nullable     unique    length   d 	descricao columnDefinition TEXT <init> H(Lbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder;)V 	Signature L(Lbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
     @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	     Cbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder  	   	  #  	  # LineNumberTable LocalVariableTable this -Lbr/com/legalconnect/entity/RoleProfissional; b ELbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder; LocalVariableTypeTable ILbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder<**>; MethodParameters builder G()Lbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder; K()Lbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilder<**>; 2 Gbr/com/legalconnect/entity/RoleProfissional$RoleProfissionalBuilderImpl
 1 4  5 ()V getNome ()Ljava/lang/String; getDescricao setNome (Ljava/lang/String;)V setDescricao
  4 '(Ljava/lang/String;Ljava/lang/String;)V equals (Ljava/lang/Object;)Z
  A B ? canEqual
 D F E java/lang/Object > ?
  H 6 7
  J 8 7 o Ljava/lang/Object; other 	this$nome 
other$nome this$descricao other$descricao 
StackMapTable hashCode ()I
 D V S T PRIME I result $nome 
$descricao 
SourceFile RoleProfissional.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_role InnerClasses c ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder RoleProfissionalBuilder RoleProfissionalBuilderImpl NestMembers !                 	s  
Z  Z 
 I             	s  s                       \     *+· *+´ µ !*+´ "µ $±    %        &        ' (      ) *  +        ) ,  -    )  	 . /      0            (      » 1Y· 3°    %        &       6 7             /     *´ !°    %        &        ' (    8 7             /     *´ $°    %        &        ' (    9 :             :     *+µ !±    %        &        ' (         -       ; :             :     *+µ $±    %        &        ' (         -        5             /     *· <±    %        &        ' (     =             M     *· <*+µ !*,µ $±    %        &         ' (               -   	      > ?             ÿ     r+*¦ ¬+Á  ¬+À M,*¶ @ ¬*+· C ¬*¶ GN,¶ G:-Ç Æ § -¶ C ¬*¶ I:,¶ I:Ç Æ § 
¶ C ¬¬    %        &   H    r ' (     r K L   ] M (  . D N L  4 > O L  Q ! P L  W  Q L  R   ! 
ü  	ý  D Dý  D D	 -    K   B ?             9     +Á ¬    %        &        ' (      M L  -    M   S T             ß     =;<*· U=*¶ GN;h-Ç +§ -¶ U`=*¶ I:;hÇ +§ ¶ U`=¬    %        &   4    = ' (    : W X   5 Y X  
 0 Z L  &  [ L  R   J ÿ    D ÿ    D ÿ    D D ÿ    D D   \    ]      ^   _  	s ` a     b  d	   e	 1  f  g      1
```
```java
Êþº¾   = V  +br/com/legalconnect/entity/User$UserBuilder  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder nomeCompleto Ljava/lang/String; RuntimeInvisibleAnnotations Llombok/Generated; email cpf telefone 	senhaHash fotoUrl <init> ()V Code
     LineNumberTable LocalVariableTable this -Lbr/com/legalconnect/entity/User$UserBuilder; LocalVariableTypeTable 5Lbr/com/legalconnect/entity/User$UserBuilder<TC;TB;>; A(Ljava/lang/String;)Lbr/com/legalconnect/entity/User$UserBuilder; 	Signature (Ljava/lang/String;)TB;	    
     ! self /()Lbr/com/legalconnect/entity/User$UserBuilder; MethodParameters	  $ 	 	  & 
 	  (  	  *  	  , 
  ()TB; build #()Lbr/com/legalconnect/entity/User; ()TC; toString ()Ljava/lang/String;
  4 1 2   6 7 8 makeConcatWithConstants (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; ?()Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder; -()Lbr/com/legalconnect/common/dto/BaseEntity;
  < . / 
SourceFile 	User.java ¡<C:Lbr/com/legalconnect/entity/User;B:Lbr/com/legalconnect/entity/User$UserBuilder<TC;TB;>;>Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder<TC;TB;>; BootstrapMethods
 B D C $java/lang/invoke/StringConcatFactory 7 E (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; A H ]User.UserBuilder(super=, nomeCompleto=, email=, cpf=, telefone=, senhaHash=, fotoUrl=) InnerClasses K )br/com/legalconnect/common/dto/BaseEntity BaseEntityBuilder N br/com/legalconnect/entity/User UserBuilder Q %java/lang/invoke/MethodHandles$Lookup S java/lang/invoke/MethodHandles Lookup NestHost!                   	            
                                    
                   A     *· ±                                                        P     
*+µ *¶ °                   
       
           
     "       	                   P     
*+µ #*¶ °                   
       
 	          
     "    	   
                   P     
*+µ %*¶ °                   
       
 
          
     "    
                      P     
*+µ '*¶ °                   
       
           
     "                          P     
*+µ )*¶ °                   
       
           
     "       
                   P     
*+µ +*¶ °                   
       
 
          
     "    
    !      -         . /      0          1 2             ^     "*· 3*´ *´ #*´ %*´ '*´ )*´ +º 5  °                   "            "    D   9             %     *¶ °                 A . :             %     *¶ ;°                   =    >     ?         @     F  G I      J L	  M O	 P R T  U    M
```
```java
Êþº¾   = $  /br/com/legalconnect/entity/User$UserBuilderImpl  +br/com/legalconnect/entity/User$UserBuilder <init> ()V Code
  	   LineNumberTable LocalVariableTable this 1Lbr/com/legalconnect/entity/User$UserBuilderImpl; self 3()Lbr/com/legalconnect/entity/User$UserBuilderImpl; RuntimeInvisibleAnnotations Llombok/Generated; build #()Lbr/com/legalconnect/entity/User;  br/com/legalconnect/entity/User
     0(Lbr/com/legalconnect/entity/User$UserBuilder;)V /()Lbr/com/legalconnect/entity/User$UserBuilder;
     
SourceFile 	User.java 	Signature Lbr/com/legalconnect/entity/User$UserBuilder<Lbr/com/legalconnect/entity/User;Lbr/com/legalconnect/entity/User$UserBuilderImpl;>; InnerClasses UserBuilder UserBuilderImpl NestHost 0               /     *· ±    
                 
                        *°             
                  3     	» Y*· °    
               	  
  D               %     *¶ °    
                                         !	   "  #    
```
```java
Êþº¾   = C  *br/com/legalconnect/entity/User$UserStatus  java/lang/Enum ACTIVE ,Lbr/com/legalconnect/entity/User$UserStatus; INACTIVE PENDING_APPROVAL REJECTED PENDING ENUM$VALUES -[Lbr/com/legalconnect/entity/User$UserStatus; <clinit> ()V Code 
     <init> (Ljava/lang/String;I)V	     	     	     		   	  
	  " 
 	  $   LineNumberTable LocalVariableTable
   this 
$enum$name 
$enum$ordinal MethodParameters values /()[Lbr/com/legalconnect/entity/User$UserStatus;
 / 1 0 java/lang/System 2 3 	arraycopy *(Ljava/lang/Object;ILjava/lang/Object;II)V valueOf @(Ljava/lang/String;)Lbr/com/legalconnect/entity/User$UserStatus;
  7 4 8 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; name 
SourceFile 	User.java 	Signature >Ljava/lang/Enum<Lbr/com/legalconnect/entity/User$UserStatus;>; InnerClasses @ br/com/legalconnect/entity/User 
UserStatus NestHost@1     @    @    @    @ 	   @ 
          
            g» Y· ³ » Y· ³ » Y· ³ » Y· ³ » Y · ³ !½ Y² SY² SY² SY² SY² !S³ #±    %   
    F A E &             1     *+· '±    %       E &        (    +   	 )  *  	 , -     6     ² #YK*¾Y<½ YM¸ .,°    %        &      	 4 5     *     
*¸ 6À °    %        &      +    9   :    ; <    = >   
   ? A@ B    ?
```
```java
Êþº¾   = ?  (br/com/legalconnect/entity/User$UserType  java/lang/Enum CLIENTE *Lbr/com/legalconnect/entity/User$UserType; ADVOGADO PLATAFORMA_ADMIN SOCIO ENUM$VALUES +[Lbr/com/legalconnect/entity/User$UserType; <clinit> ()V Code 
     <init> (Ljava/lang/String;I)V	     	     	     		   	 	    
  LineNumberTable LocalVariableTable
   this 
$enum$name 
$enum$ordinal MethodParameters values -()[Lbr/com/legalconnect/entity/User$UserType;
 + - , java/lang/System . / 	arraycopy *(Ljava/lang/Object;ILjava/lang/Object;II)V valueOf >(Ljava/lang/String;)Lbr/com/legalconnect/entity/User$UserType;
  3 0 4 5(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum; name 
SourceFile 	User.java 	Signature <Ljava/lang/Enum<Lbr/com/legalconnect/entity/User$UserType;>; InnerClasses < br/com/legalconnect/entity/User UserType NestHost@1     @    @    @    @ 	    
       
           T» Y· ³ » Y· ³ » Y· ³ » Y· ³ ½ Y² SY² SY² SY² S³ ±    !       : 
 ;  < ' = 4 9 "             1     *+· #±    !       9 "        $    '   	 %  &  	 ( )     6     ² YK*¾Y<½ YM¸ *,°    !        "      	 0 1     *     
*¸ 2À °    !        "      '    5   6    7 8    9 :   
   ; =@ >    ;
```
```java
Êþº¾   =   br/com/legalconnect/entity/User  )br/com/legalconnect/common/dto/BaseEntity nomeCompleto Ljava/lang/String; RuntimeVisibleAnnotations Ljakarta/persistence/Column; name 
nome_completo nullable     length   ÿ email unique    cpf    telefone    	senhaHash 
senha_hash columnDefinition TEXT fotoUrl foto_url <init> 0(Lbr/com/legalconnect/entity/User$UserBuilder;)V 	Signature 4(Lbr/com/legalconnect/entity/User$UserBuilder<**>;)V RuntimeInvisibleAnnotations Llombok/Generated; Code
  $  % @(Lbr/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder;)V	 ' ) ( +br/com/legalconnect/entity/User$UserBuilder  	  )	 ' ,  	  ,	 ' /  	  /	 ' 2  	  2	 ' 5  	  5	 ' 8  	  8 LineNumberTable LocalVariableTable this !Lbr/com/legalconnect/entity/User; b -Lbr/com/legalconnect/entity/User$UserBuilder; LocalVariableTypeTable 1Lbr/com/legalconnect/entity/User$UserBuilder<**>; MethodParameters builder /()Lbr/com/legalconnect/entity/User$UserBuilder; 3()Lbr/com/legalconnect/entity/User$UserBuilder<**>; G /br/com/legalconnect/entity/User$UserBuilderImpl
 F I  J ()V getNomeCompleto ()Ljava/lang/String; getEmail getCpf getTelefone getSenhaHash 
getFotoUrl setNomeCompleto (Ljava/lang/String;)V setEmail setCpf setTelefone setSenhaHash 
setFotoUrl
  I o(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V equals (Ljava/lang/Object;)Z
  ^ _ \ canEqual
 a c b java/lang/Object [ \
  e K L
  g M L
  i N L
  k O L
  m P L
  o Q L o Ljava/lang/Object; other this$nomeCompleto other$nomeCompleto 
this$email other$email this$cpf 	other$cpf 
this$telefone other$telefone this$senhaHash other$senhaHash this$fotoUrl 
other$fotoUrl 
StackMapTable hashCode ()I
 a    PRIME I result 
$nomeCompleto $email $cpf 	$telefone 
$senhaHash $fotoUrl 
SourceFile 	User.java Ljakarta/persistence/Entity; Ljakarta/persistence/Table; tb_user InnerClasses  ;br/com/legalconnect/common/dto/BaseEntity$BaseEntityBuilder BaseEntityBuilder UserBuilder UserBuilderImpl  *br/com/legalconnect/entity/User$UserStatus 
UserStatus  (br/com/legalconnect/entity/User$UserType UserType NestMembers !                 	s 
 Z  
I             	s  Z  Z  
I             	s  Z  Z  
I             	s  
I             	s  Z  s             	s  s                  !   "   |     6*+· #*+´ &µ **+´ +µ -*+´ .µ 0*+´ 1µ 3*+´ 4µ 6*+´ 7µ 9±    :        ;       6 < =     6 > ?  @       6 > A  B    >  	 C D      E       !   "   (      » FY· H°    :        ;       K L        !   "   /     *´ *°    :        ;        < =    M L        !   "   /     *´ -°    :        ;        < =    N L        !   "   /     *´ 0°    :        ;        < =    O L        !   "   /     *´ 3°    :        ;        < =    P L        !   "   /     *´ 6°    :        ;        < =    Q L        !   "   /     *´ 9°    :        ;        < =    R S        !   "   :     *+µ *±    :        ;        < =         B       T S        !   "   :     *+µ -±    :        ;        < =         B       U S        !   "   :     *+µ 0±    :        ;        < =         B       V S        !   "   :     *+µ 3±    :        ;        < =         B       W S        !   "   :     *+µ 6±    :        ;        < =         B       X S        !   "   :     *+µ 9±    :        ;        < =         B        J        !   "   /     *· Y±    :        ;        < =     Z        !   "        &*· Y*+µ **,µ -*-µ 0*µ 3*µ 6*µ 9±    :        ;   H    & < =     &      &      &      &      &      &    B                 [ \        !   "      +*¦ ¬+Á  ¬+À M,*¶ ] ¬*+· ` ¬*¶ dN,¶ d:-Ç Æ § -¶ ` ¬*¶ f:,¶ f:Ç Æ § 
¶ ` ¬*¶ h:,¶ h:Ç Æ § 
¶ ` ¬*¶ j:	,¶ j:
	Ç 
Æ § 
	
¶ ` ¬*¶ l:,¶ l:Ç Æ § 
¶ ` ¬*¶ n:
,¶ n:
Ç Æ § 

¶ ` ¬¬    :        ;       < =     p q   ñ r =  . Ø s q  4 Ò t q  Q µ u q  W ¯ v q  v  w q  |  x q   k y q 	 ¡ e z q 
 À F { q  Æ @ | q  å ! } q 
 ë  ~ q     M ü  	ý  a aý  a a	ý  a a	ý  a a	ý  a a	ý  a a	 B    p   _ \        !   "   9     +Á ¬    :        ;        < =      r q  B    r            !   "  K  	   ©;<*· =*¶ dN;h-Ç +§ -¶ `=*¶ f:;hÇ +§ ¶ `=*¶ h:;hÇ +§ ¶ `=*¶ j:;hÇ +§ ¶ `=*¶ l:;hÇ +§ ¶ `=*¶ n:;hÇ +§ ¶ `=¬    :        ;   \ 	   © < =    ¦     ¡    
   q  &   q  A h  q  \ M  q  w 2  q     q    " ÿ    a ÿ    a ÿ    a a ÿ    a a ÿ    a a a ÿ    a a a ÿ    a a a a ÿ    a a a a ÿ    a a a a a ÿ    a a a a a ÿ  	  a a a a a a ÿ  	  a a a a a a                  	s     *    	 '  	 F      @   @    
  ' F  
```
```java
Êþº¾   = +  .br/com/legalconnect/mapper/AdministradorMapper  java/lang/Object  'br/com/legalconnect/mapper/PessoaMapper INSTANCE 0Lbr/com/legalconnect/mapper/AdministradorMapper; <clinit> ()V Code
 
   org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable toEntity ](Lbr/com/legalconnect/dto/AdministradorRequestDTO;)Lbr/com/legalconnect/entity/Administrador; dto MethodParameters 
toResponseDTO ^(Lbr/com/legalconnect/entity/Administrador;)Lbr/com/legalconnect/dto/AdministradorResponseDTO; RuntimeInvisibleAnnotations Lorg/mapstruct/Mapping; source status target entity 
SourceFile AdministradorMapper.java Lorg/mapstruct/Mapper; componentModel spring uses )Lbr/com/legalconnect/mapper/PessoaMapper; +Lbr/com/legalconnect/mapper/EnderecoMapper; 'Lbr/com/legalconnect/mapper/UserMapper;             	 
     ,      ¸ À ³ ±                                      s   s      !    "    #      $  %s & '[ c (c )c *
```
```java
Êþº¾   = õ  2br/com/legalconnect/mapper/AdministradorMapperImpl  java/lang/Object  .br/com/legalconnect/mapper/AdministradorMapper enderecoMapper +Lbr/com/legalconnect/mapper/EnderecoMapper; RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; 
userMapper 'Lbr/com/legalconnect/mapper/UserMapper; <init> ()V Code
   
  LineNumberTable LocalVariableTable this 4Lbr/com/legalconnect/mapper/AdministradorMapperImpl; 
toResponseDTO P(Lbr/com/legalconnect/entity/Pessoa;)Lbr/com/legalconnect/dto/PessoaResponseDTO;
    )br/com/legalconnect/dto/PessoaResponseDTO   builder F()Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;	    
 ! # " !br/com/legalconnect/entity/Pessoa $ % 
getUsuario #()Lbr/com/legalconnect/entity/User; ' ) ( %br/com/legalconnect/mapper/UserMapper  * L(Lbr/com/legalconnect/entity/User;)Lbr/com/legalconnect/dto/UserResponseDTO;
 , . - Bbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder / 0 usuario o(Lbr/com/legalconnect/dto/UserResponseDTO;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;	  2  
 ! 4 5 6 getEnderecos ()Ljava/util/Set; 8 : 9 )br/com/legalconnect/mapper/EnderecoMapper ; < toResponseDTOList !(Ljava/util/Set;)Ljava/util/List;
 , > ? @ 	enderecos V(Ljava/util/List;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! B C 6 getTelefones E java/util/LinkedHashSet
 D G 
 H (Ljava/util/Collection;)V
 , J K L 	telefones U(Ljava/util/Set;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! N O P getCpf ()Ljava/lang/String;
 , R S T cpf X(Ljava/lang/String;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! V W X getCreatedAt ()Ljava/time/LocalDateTime;
 , Z [ \ 	createdAt _(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! ^ _ ` getDataNascimento ()Ljava/time/LocalDate;
 , b c d dataNascimento [(Ljava/time/LocalDate;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! f g h getId ()Ljava/util/UUID;
 , j k l id V(Ljava/util/UUID;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! n o P getNomeCompleto
 , q r T nomeCompleto
 ! t u X getUpdatedAt
 , w x \ 	updatedAt
 , z { | build -()Lbr/com/legalconnect/dto/PessoaResponseDTO; entity #Lbr/com/legalconnect/entity/Pessoa; pessoaResponseDTO DLbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; set Ljava/util/Set; LocalVariableTypeTable HLbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder<**>; #Ljava/util/Set<Ljava/lang/String;>; 
StackMapTable  
java/util/Set MethodParameters toEntity ](Lbr/com/legalconnect/dto/AdministradorRequestDTO;)Lbr/com/legalconnect/entity/Administrador;
    (br/com/legalconnect/entity/Administrador   A()Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder;
  N  /br/com/legalconnect/dto/AdministradorRequestDTO
    =br/com/legalconnect/entity/Administrador$AdministradorBuilder S  E(Ljava/lang/String;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;
  ^
   c  H(Ljava/time/LocalDate;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;
   5  ()Ljava/util/List; 8 ¡ ¢ £ toEntitySet !(Ljava/util/List;)Ljava/util/Set;
  ¥ ? ¦ B(Ljava/util/Set;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;
  n
  © r 
  B
  ¬ K ¦
  ® $ ¯ *()Lbr/com/legalconnect/dto/UserRequestDTO; ' ±  ² K(Lbr/com/legalconnect/dto/UserRequestDTO;)Lbr/com/legalconnect/entity/User;
  ´ / µ T(Lbr/com/legalconnect/entity/User;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;
  · ¸ P 	getStatus
  º » ¼ status S(Ljava/lang/String;)Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder;
  ¾ { ¿ ,()Lbr/com/legalconnect/entity/Administrador; dto 1Lbr/com/legalconnect/dto/AdministradorRequestDTO; 
administrador ?Lbr/com/legalconnect/entity/Administrador$AdministradorBuilder; set1 CLbr/com/legalconnect/entity/Administrador$AdministradorBuilder<**>; ^(Lbr/com/legalconnect/entity/Administrador;)Lbr/com/legalconnect/dto/AdministradorResponseDTO;
 È Ê É 0br/com/legalconnect/dto/AdministradorResponseDTO  Ë T()Lbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder;
  ·
 Î Ð Ï Pbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder » Ñ f(Ljava/lang/String;)Lbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder;
  N
 Î R
  V
 Î Z
  ^
 Î b
  4
 Î >
  f
 Î j
  n
 Î q
  B
 Î J
  t
 Î w
  #
 Î .
 Î å { æ 4()Lbr/com/legalconnect/dto/AdministradorResponseDTO; *Lbr/com/legalconnect/entity/Administrador; administradorResponseDTO RLbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder; VLbr/com/legalconnect/dto/AdministradorResponseDTO$AdministradorResponseDTOBuilder<**>; 
SourceFile AdministradorMapperImpl.java *Lorg/springframework/stereotype/Component; InnerClasses AdministradorResponseDTOBuilder PessoaResponseDTOBuilder AdministradorBuilder ó /br/com/legalconnect/entity/Pessoa$PessoaBuilder 
PessoaBuilder !          	     
       	     
     
      /     *· ±                              -     +Ç °¸ M,*´ +¶  ¹ & ¶ +W,*´ 1+¶ 3¹ 7 ¶ =W+¶ AN-Æ ,» DY-· F¶ IW,+¶ M¶ QW,+¶ U¶ YW,+¶ ]¶ aW,+¶ e¶ iW,+¶ m¶ pW,+¶ s¶ vW,¶ y°       >        ! 
 #  $ . % 3 & 7 ' D ) M * V + _ , h - q . z 0    *            } ~  
 u    3 L         
 u    3 L        ý = ,      }              m+Ç °¸ M,+¶ ¶ W,+¶ ¶ W,*´ 1+¶ ¹   ¶ ¤W,+¶ §¶ ¨W+¶ ªN-Æ ,» DY-· F¶ «W,*´ +¶ ­¹ ° ¶ ³W,+¶ ¶¶ ¹W,¶ ½°       6 
   5  6  9 
 ;  <  = . > 7 ? < @ @ A M C _ D h F    *    m       m À Á  
 c Â Ã  < 1 Ä        
 c Â Å  < 1 Ä       ý F       À     Æ    :     +Ç °¸ ÇM,+¶ Ì¶ ÍW,+¶ Ò¶ ÓW,+¶ Ô¶ ÕW,+¶ Ö¶ ×W,*´ 1+¶ Ø¹ 7 ¶ ÙW,+¶ Ú¶ ÛW,+¶ Ü¶ ÝW+¶ ÞN-Æ ,» DY-· F¶ ßW,+¶ à¶ áW,*´ +¶ â¹ & ¶ ãW,¶ ä°       B    K  L  O 
 Q  R  S % T . U @ V I W R X W Y [ Z h \ q ]  _    *            } ç  
 ~ è é  W 1         
 ~ è ê  W 1        ý a Î      }    ë    ì 	     í   î   "  Î È ï	 ,  ð	   ñ	 ò ! ô	
```
```java
Êþº¾   = 0  (br/com/legalconnect/mapper/ClienteMapper  java/lang/Object  'br/com/legalconnect/mapper/PessoaMapper INSTANCE *Lbr/com/legalconnect/mapper/ClienteMapper; <clinit> ()V Code
 
   org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable toEntity Q(Lbr/com/legalconnect/dto/ClienteRequestDTO;)Lbr/com/legalconnect/entity/Cliente; dto MethodParameters 
toResponseDTO R(Lbr/com/legalconnect/entity/Cliente;)Lbr/com/legalconnect/dto/ClienteResponseDTO; RuntimeInvisibleAnnotations Lorg/mapstruct/Mappings; value Lorg/mapstruct/Mapping; source status target tipo ignore    entity 
SourceFile ClienteMapper.java Lorg/mapstruct/Mapper; componentModel spring uses )Lbr/com/legalconnect/mapper/PessoaMapper; +Lbr/com/legalconnect/mapper/EnderecoMapper; 'Lbr/com/legalconnect/mapper/UserMapper;             	 
     ,      ¸ À ³ ±                                  )    [ @    s ! "s !@   "s # $Z %     &    '    (      )  *s + ,[ c -c .c /
```
```java
Êþº¾   = õ  ,br/com/legalconnect/mapper/ClienteMapperImpl  java/lang/Object  (br/com/legalconnect/mapper/ClienteMapper enderecoMapper +Lbr/com/legalconnect/mapper/EnderecoMapper; RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; 
userMapper 'Lbr/com/legalconnect/mapper/UserMapper; <init> ()V Code
   
  LineNumberTable LocalVariableTable this .Lbr/com/legalconnect/mapper/ClienteMapperImpl; 
toResponseDTO P(Lbr/com/legalconnect/entity/Pessoa;)Lbr/com/legalconnect/dto/PessoaResponseDTO;
    )br/com/legalconnect/dto/PessoaResponseDTO   builder F()Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;	    
 ! # " !br/com/legalconnect/entity/Pessoa $ % 
getUsuario #()Lbr/com/legalconnect/entity/User; ' ) ( %br/com/legalconnect/mapper/UserMapper  * L(Lbr/com/legalconnect/entity/User;)Lbr/com/legalconnect/dto/UserResponseDTO;
 , . - Bbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder / 0 usuario o(Lbr/com/legalconnect/dto/UserResponseDTO;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;	  2  
 ! 4 5 6 getEnderecos ()Ljava/util/Set; 8 : 9 )br/com/legalconnect/mapper/EnderecoMapper ; < toResponseDTOList !(Ljava/util/Set;)Ljava/util/List;
 , > ? @ 	enderecos V(Ljava/util/List;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! B C 6 getTelefones E java/util/LinkedHashSet
 D G 
 H (Ljava/util/Collection;)V
 , J K L 	telefones U(Ljava/util/Set;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! N O P getCpf ()Ljava/lang/String;
 , R S T cpf X(Ljava/lang/String;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! V W X getCreatedAt ()Ljava/time/LocalDateTime;
 , Z [ \ 	createdAt _(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! ^ _ ` getDataNascimento ()Ljava/time/LocalDate;
 , b c d dataNascimento [(Ljava/time/LocalDate;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! f g h getId ()Ljava/util/UUID;
 , j k l id V(Ljava/util/UUID;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! n o P getNomeCompleto
 , q r T nomeCompleto
 ! t u X getUpdatedAt
 , w x \ 	updatedAt
 , z { | build -()Lbr/com/legalconnect/dto/PessoaResponseDTO; entity #Lbr/com/legalconnect/entity/Pessoa; pessoaResponseDTO DLbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; set Ljava/util/Set; LocalVariableTypeTable HLbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder<**>; #Ljava/util/Set<Ljava/lang/String;>; 
StackMapTable  
java/util/Set MethodParameters toEntity Q(Lbr/com/legalconnect/dto/ClienteRequestDTO;)Lbr/com/legalconnect/entity/Cliente;
    "br/com/legalconnect/entity/Cliente   5()Lbr/com/legalconnect/entity/Cliente$ClienteBuilder;
  N  )br/com/legalconnect/dto/ClienteRequestDTO
    1br/com/legalconnect/entity/Cliente$ClienteBuilder S  E(Ljava/lang/String;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;
  ^
   c  H(Ljava/time/LocalDate;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;
   5  ()Ljava/util/List; 8 ¡ ¢ £ toEntitySet !(Ljava/util/List;)Ljava/util/Set;
  ¥ ? ¦ B(Ljava/util/Set;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;
  n
  © r 
  B
  ¬ K ¦
  ® $ ¯ *()Lbr/com/legalconnect/dto/UserRequestDTO; ' ±  ² K(Lbr/com/legalconnect/dto/UserRequestDTO;)Lbr/com/legalconnect/entity/User;
  ´ / µ T(Lbr/com/legalconnect/entity/User;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;
  · ¸ P 	getStatus
  º » ¼ status G(Ljava/lang/String;)Lbr/com/legalconnect/entity/Cliente$ClienteBuilder;
  ¾ { ¿ &()Lbr/com/legalconnect/entity/Cliente; dto +Lbr/com/legalconnect/dto/ClienteRequestDTO; cliente 3Lbr/com/legalconnect/entity/Cliente$ClienteBuilder; set1 7Lbr/com/legalconnect/entity/Cliente$ClienteBuilder<**>; R(Lbr/com/legalconnect/entity/Cliente;)Lbr/com/legalconnect/dto/ClienteResponseDTO;
 È Ê É *br/com/legalconnect/dto/ClienteResponseDTO  Ë H()Lbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder;
  ·
 Î Ð Ï Dbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder » Ñ Z(Ljava/lang/String;)Lbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder;
  N
 Î R
  V
 Î Z
  ^
 Î b
  4
 Î >
  f
 Î j
  n
 Î q
  B
 Î J
  t
 Î w
  #
 Î .
 Î å { æ .()Lbr/com/legalconnect/dto/ClienteResponseDTO; $Lbr/com/legalconnect/entity/Cliente; clienteResponseDTO FLbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder; JLbr/com/legalconnect/dto/ClienteResponseDTO$ClienteResponseDTOBuilder<**>; 
SourceFile ClienteMapperImpl.java *Lorg/springframework/stereotype/Component; InnerClasses ClienteResponseDTOBuilder PessoaResponseDTOBuilder ClienteBuilder ó /br/com/legalconnect/entity/Pessoa$PessoaBuilder 
PessoaBuilder !          	     
       	     
     
      /     *· ±                              -     +Ç °¸ M,*´ +¶  ¹ & ¶ +W,*´ 1+¶ 3¹ 7 ¶ =W+¶ AN-Æ ,» DY-· F¶ IW,+¶ M¶ QW,+¶ U¶ YW,+¶ ]¶ aW,+¶ e¶ iW,+¶ m¶ pW,+¶ s¶ vW,¶ y°       >        ! 
 #  $ . % 3 & 7 ' D ) M * V + _ , h - q . z 0    *            } ~  
 u    3 L         
 u    3 L        ý = ,      }              m+Ç °¸ M,+¶ ¶ W,+¶ ¶ W,*´ 1+¶ ¹   ¶ ¤W,+¶ §¶ ¨W+¶ ªN-Æ ,» DY-· F¶ «W,*´ +¶ ­¹ ° ¶ ³W,+¶ ¶¶ ¹W,¶ ½°       6 
   5  6  9 
 ;  <  = . > 7 ? < @ @ A M C _ D h F    *    m       m À Á  
 c Â Ã  < 1 Ä        
 c Â Å  < 1 Ä       ý F       À     Æ    :     +Ç °¸ ÇM,+¶ Ì¶ ÍW,+¶ Ò¶ ÓW,+¶ Ô¶ ÕW,+¶ Ö¶ ×W,*´ 1+¶ Ø¹ 7 ¶ ÙW,+¶ Ú¶ ÛW,+¶ Ü¶ ÝW+¶ ÞN-Æ ,» DY-· F¶ ßW,+¶ à¶ áW,*´ +¶ â¹ & ¶ ãW,¶ ä°       B    K  L  O 
 Q  R  S % T . U @ V I W R X W Y [ Z h \ q ]  _    *            } ç  
 ~ è é  W 1         
 ~ è ê  W 1        ý a Î      }    ë    ì 	     í   î   "  Î È ï	 ,  ð	   ñ	 ò ! ô	
```
```java
Êþº¾   = /  (br/com/legalconnect/mapper/EmpresaMapper  java/lang/Object INSTANCE *Lbr/com/legalconnect/mapper/EmpresaMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable toEntity Q(Lbr/com/legalconnect/dto/EmpresaRequestDTO;)Lbr/com/legalconnect/entity/Empresa; RuntimeInvisibleAnnotations Lorg/mapstruct/Mappings; value Lorg/mapstruct/Mapping; target id ignore    	createdAt 	updatedAt source 	enderecos 	telefones dto MethodParameters 
toResponseDTO R(Lbr/com/legalconnect/entity/Empresa;)Lbr/com/legalconnect/dto/EmpresaResponseDTO; entity 
SourceFile EmpresaMapper.java Lorg/mapstruct/Mapper; componentModel spring uses +Lbr/com/legalconnect/mapper/EnderecoMapper;                	   ,      ¸ 
À ³ ±                        V    [ @   s  Z @   s  Z @   s  Z @    s ! s !@    s " s " $    #   % &     )    [ @    s ! s !@    s " s " $    '    (    )      *  +s , -[ c .
```
```java
Êþº¾   = ®  ,br/com/legalconnect/mapper/EmpresaMapperImpl  java/lang/Object  (br/com/legalconnect/mapper/EmpresaMapper enderecoMapper +Lbr/com/legalconnect/mapper/EnderecoMapper; RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; <init> ()V Code
     LineNumberTable LocalVariableTable this .Lbr/com/legalconnect/mapper/EmpresaMapperImpl; toEntity Q(Lbr/com/legalconnect/dto/EmpresaRequestDTO;)Lbr/com/legalconnect/entity/Empresa;
    "br/com/legalconnect/entity/Empresa   builder 5()Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder;	    
  !   )br/com/legalconnect/dto/EmpresaRequestDTO " # getEnderecos ()Ljava/util/List; % ' & )br/com/legalconnect/mapper/EnderecoMapper ( ) toEntitySet !(Ljava/util/List;)Ljava/util/Set;
 + - , 1br/com/legalconnect/entity/Empresa$EmpresaBuilder . / 	enderecos D(Ljava/util/Set;)Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder;
  1 2 3 getTelefones ()Ljava/util/Set; 5 java/util/LinkedHashSet
 4 7  8 (Ljava/util/Collection;)V
 + : ; / 	telefones
  = > ? getCnpj ()Ljava/lang/String;
 + A B C cnpj G(Ljava/lang/String;)Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder;
  E F ? getEmailContato
 + H I C emailContato
  K L ? getNomeFantasia
 + N O C nomeFantasia
  Q R ? getRazaoSocial
 + T U C razaoSocial
 + W X Y build &()Lbr/com/legalconnect/entity/Empresa; dto +Lbr/com/legalconnect/dto/EmpresaRequestDTO; empresa 3Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder; set1 Ljava/util/Set; LocalVariableTypeTable 7Lbr/com/legalconnect/entity/Empresa$EmpresaBuilder<**>; #Ljava/util/Set<Ljava/lang/String;>; 
StackMapTable e 
java/util/Set MethodParameters 
toResponseDTO R(Lbr/com/legalconnect/entity/Empresa;)Lbr/com/legalconnect/dto/EmpresaResponseDTO;
 j l k *br/com/legalconnect/dto/EmpresaResponseDTO  m H()Lbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder;
  o " 3 % q r s toResponseDTOList !(Ljava/util/Set;)Ljava/util/List;
 u w v Dbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder . x X(Ljava/util/List;)Lbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder;
  1
 u { ; | W(Ljava/util/Set;)Lbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder;
  =
 u  B  Z(Ljava/lang/String;)Lbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder;
     getCreatedAt ()Ljava/time/LocalDateTime;
 u    	createdAt a(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder;
  E
 u  I 
     getId ()Ljava/util/UUID;
 u    id X(Ljava/util/UUID;)Lbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder;
  K
 u  O 
  Q
 u  U 
     getUpdatedAt
 u    	updatedAt
 u ¡ X ¢ .()Lbr/com/legalconnect/dto/EmpresaResponseDTO; entity $Lbr/com/legalconnect/entity/Empresa; empresaResponseDTO FLbr/com/legalconnect/dto/EmpresaResponseDTO$EmpresaResponseDTOBuilder; set 
SourceFile EmpresaMapperImpl.java *Lorg/springframework/stereotype/Component; InnerClasses EmpresaResponseDTOBuilder EmpresaBuilder !          	     
        
   /     *· ±                            
   ý     [+Ç °¸ M,*´ +¶ ¹ $ ¶ *W+¶ 0N-Æ ,» 4Y-· 6¶ 9W,+¶ <¶ @W,+¶ D¶ GW,+¶ J¶ MW,+¶ P¶ SW,¶ V°       2         
     ! ! % " 2 $ ; % D & M ' V )    *    [       [ Z [  
 Q \ ]  ! : ^ _  `     
 Q \ a  ! : ^ b  c    ý + + d f    Z    g h  
       v+Ç °¸ iM,*´ +¶ n¹ p ¶ tW+¶ yN-Æ ,» 4Y-· 6¶ zW,+¶ }¶ ~W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,¶  °       >    .  /  2 
 4  5 ! 6 % 7 2 9 ; : D ; M < V = _ > h ? q A    *    v       v £ ¤  
 l ¥ ¦  ! U § _  `     ! U § b  c    ý + u d f    £    ¨    © 	     ª   «     u j ¬ 	 +  ­	
```
```java
Êþº¾   = 5  )br/com/legalconnect/mapper/EnderecoMapper  java/lang/Object INSTANCE +Lbr/com/legalconnect/mapper/EnderecoMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable toEntity S(Lbr/com/legalconnect/dto/EnderecoRequestDTO;)Lbr/com/legalconnect/entity/Endereco; RuntimeInvisibleAnnotations Lorg/mapstruct/Mappings; value Lorg/mapstruct/Mapping; target id ignore    	createdAt 	updatedAt pessoa empresa dto MethodParameters 
toResponseDTO T(Lbr/com/legalconnect/entity/Endereco;)Lbr/com/legalconnect/dto/EnderecoResponseDTO; entity toEntitySet !(Ljava/util/List;)Ljava/util/Set; 	Signature v(Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>;)Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>; dtoList toResponseDTOList !(Ljava/util/Set;)Ljava/util/List; w(Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>;)Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>; 	entitySet 
SourceFile EnderecoMapper.java Lorg/mapstruct/Mapper; componentModel spring                	   ,      ¸ 
À ³ ±                        V    [ @   s  Z @   s  Z @   s  Z @   s   Z @   s ! Z  #    "   $ %  #    &   ' (  )    * #    +   , -  )    . #    /    0    1      2  3s 4
```
```java
Êþº¾   = ð  -br/com/legalconnect/mapper/EnderecoMapperImpl  java/lang/Object  )br/com/legalconnect/mapper/EnderecoMapper <init> ()V Code
     LineNumberTable LocalVariableTable this /Lbr/com/legalconnect/mapper/EnderecoMapperImpl; toEntity S(Lbr/com/legalconnect/dto/EnderecoRequestDTO;)Lbr/com/legalconnect/entity/Endereco;
    #br/com/legalconnect/entity/Endereco   builder 7()Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder;
    *br/com/legalconnect/dto/EnderecoRequestDTO   	getBairro ()Ljava/lang/String;
  !   3br/com/legalconnect/entity/Endereco$EnderecoBuilder " # bairro I(Ljava/lang/String;)Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder;
  % &  getCep
  ( ) # cep
  + ,  	getCidade
  . / # cidade
  1 2  getComplemento
  4 5 # complemento
  7 8  	getEstado
  : ; # estado
  = >  
getLogradouro
  @ A # 
logradouro
  C D  	getNumero
  F G # numero
  I J  getPais
  L M # pais
  O P Q getTipoEndereco 4()Lbr/com/legalconnect/entity/Endereco$TipoEndereco;
  S T U tipoEndereco i(Lbr/com/legalconnect/entity/Endereco$TipoEndereco;)Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder;
  W X Y build '()Lbr/com/legalconnect/entity/Endereco; dto ,Lbr/com/legalconnect/dto/EnderecoRequestDTO; endereco 5Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder; LocalVariableTypeTable 9Lbr/com/legalconnect/entity/Endereco$EnderecoBuilder<**>; 
StackMapTable MethodParameters 
toResponseDTO T(Lbr/com/legalconnect/entity/Endereco;)Lbr/com/legalconnect/dto/EnderecoResponseDTO;
 e g f +br/com/legalconnect/dto/EnderecoResponseDTO  h J()Lbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder;
  
 k m l Fbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder " n \(Ljava/lang/String;)Lbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder;
  %
 k q ) n
  +
 k t / n
  1
 k w 5 n
  y z { getCreatedAt ()Ljava/time/LocalDateTime;
 k } ~  	createdAt c(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder;
  7
 k  ; n
     getId ()Ljava/util/UUID;
 k    id Z(Ljava/util/UUID;)Lbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder;
  =
 k  A n
  C
 k  G n
  I
 k  M n
  O
 k  T  |(Lbr/com/legalconnect/entity/Endereco$TipoEndereco;)Lbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder;
    { getUpdatedAt
 k    	updatedAt
 k  X   /()Lbr/com/legalconnect/dto/EnderecoResponseDTO; entity %Lbr/com/legalconnect/entity/Endereco; enderecoResponseDTO HLbr/com/legalconnect/dto/EnderecoResponseDTO$EnderecoResponseDTOBuilder; toEntitySet !(Ljava/util/List;)Ljava/util/Set; 	Signature v(Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>;)Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>; ª java/util/LinkedHashSet ¬ ® ­ java/util/List ¯ ° size ()I?@  
 ³ µ ´ java/lang/Math ¶ · max (II)I
 © ¹  º (I)V ¬ ¼ ½ ¾ iterator ()Ljava/util/Iterator; À Â Á java/util/Iterator Ã Ä next ()Ljava/lang/Object;
  Æ   È Ê É 
java/util/Set Ë Ì add (Ljava/lang/Object;)Z À Î Ï Ð hasNext ()Z dtoList Ljava/util/List; set Ljava/util/Set; enderecoRequestDTO >Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoRequestDTO;>; 6Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>; toResponseDTOList !(Ljava/util/Set;)Ljava/util/List; w(Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>;)Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>; Ü java/util/ArrayList È ®
 Û ¹ È ¼
  á b c ¬ Ê 	entitySet list ?Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>; 
SourceFile EnderecoMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; InnerClasses EnderecoResponseDTOBuilder EnderecoBuilder î 0br/com/legalconnect/entity/Endereco$TipoEndereco TipoEndereco !            	   /     *· 
±            
                	   é     `+Ç °¸ M,+¶ ¶ W,+¶ $¶ 'W,+¶ *¶ -W,+¶ 0¶ 3W,+¶ 6¶ 9W,+¶ <¶ ?W,+¶ B¶ EW,+¶ H¶ KW,+¶ N¶ RW,¶ V°       6 
        
      %   . ! 7 " @ # I $ R % [ ' 
        `       ` Z [  
 V \ ]  ^     
 V \ _  `     a    Z    b c  	   þ     {+Ç °¸ dM,+¶ i¶ jW,+¶ o¶ pW,+¶ r¶ sW,+¶ u¶ vW,+¶ x¶ |W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,+¶ ¶ W,¶ °       B    ,  -  0 
 2  3  4 % 5 . 6 7 7 @ 8 I 9 R : [ ; d < m = v ? 
        {       { ¡ ¢  
 q £ ¤  `     a    ¡    ¥ ¦  §    ¨ 	   è     N+Ç °» ©Y+¹ « ±n`¸ ²· ¸M+¹ » :§ ¹ ¿ À N,*-¶ Å¹ Ç W¹ Í ÿâ,°           D  E  H   I 6 J B I L M 
   *    N       N Ñ Ò    . Ó Ô  6  Õ [  ^       N Ñ Ö    . Ó ×  `    ÿ $   ¬ È  À   a    Ñ    Ø Ù  §    Ú 	   Ü     B+Ç °» ÛY+¹ Ý · ÞM+¹ ß :§ ¹ ¿ À N,*-¶ à¹ â W¹ Í ÿâ,°           R  S  V  W * X 6 W @ [ 
   *    B       B ã Ô   . ä Ò  *  \ ¢  ^       B ã ×   . ä å  `    ÿ    È ¬  À   a    ã    æ    ç è     é   ê     k e ë 	   ì	 í  ï@
```
```java
Êþº¾   = )  'br/com/legalconnect/mapper/PessoaMapper  java/lang/Object INSTANCE )Lbr/com/legalconnect/mapper/PessoaMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable 
toResponseDTO P(Lbr/com/legalconnect/entity/Pessoa;)Lbr/com/legalconnect/dto/PessoaResponseDTO; RuntimeInvisibleAnnotations Lorg/mapstruct/Mappings; value Lorg/mapstruct/Mapping; source usuario target 	enderecos 	telefones entity MethodParameters 
SourceFile PessoaMapper.java Lorg/mapstruct/Mapper; componentModel spring uses 'Lbr/com/legalconnect/mapper/UserMapper; +Lbr/com/legalconnect/mapper/EnderecoMapper;                	   ,      ¸ 
À ³ ±                        8    [ @   s  s @   s  s @   s  s           !    "      #  $s % &[ c 'c (
```
```java
Êþº¾   =   +br/com/legalconnect/mapper/PessoaMapperImpl  java/lang/Object  'br/com/legalconnect/mapper/PessoaMapper 
userMapper 'Lbr/com/legalconnect/mapper/UserMapper; RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; enderecoMapper +Lbr/com/legalconnect/mapper/EnderecoMapper; <init> ()V Code
   
  LineNumberTable LocalVariableTable this -Lbr/com/legalconnect/mapper/PessoaMapperImpl; 
toResponseDTO P(Lbr/com/legalconnect/entity/Pessoa;)Lbr/com/legalconnect/dto/PessoaResponseDTO;
    )br/com/legalconnect/dto/PessoaResponseDTO   builder F()Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;	    
 ! # " !br/com/legalconnect/entity/Pessoa $ % 
getUsuario #()Lbr/com/legalconnect/entity/User; ' ) ( %br/com/legalconnect/mapper/UserMapper  * L(Lbr/com/legalconnect/entity/User;)Lbr/com/legalconnect/dto/UserResponseDTO;
 , . - Bbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder / 0 usuario o(Lbr/com/legalconnect/dto/UserResponseDTO;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;	  2  
 ! 4 5 6 getEnderecos ()Ljava/util/Set; 8 : 9 )br/com/legalconnect/mapper/EnderecoMapper ; < toResponseDTOList !(Ljava/util/Set;)Ljava/util/List;
 , > ? @ 	enderecos V(Ljava/util/List;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! B C 6 getTelefones E java/util/LinkedHashSet
 D G 
 H (Ljava/util/Collection;)V
 , J K L 	telefones U(Ljava/util/Set;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! N O P getCpf ()Ljava/lang/String;
 , R S T cpf X(Ljava/lang/String;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! V W X getCreatedAt ()Ljava/time/LocalDateTime;
 , Z [ \ 	createdAt _(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! ^ _ ` getDataNascimento ()Ljava/time/LocalDate;
 , b c d dataNascimento [(Ljava/time/LocalDate;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! f g h getId ()Ljava/util/UUID;
 , j k l id V(Ljava/util/UUID;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 ! n o P getNomeCompleto
 , q r T nomeCompleto
 ! t u X getUpdatedAt
 , w x \ 	updatedAt
 , z { | build -()Lbr/com/legalconnect/dto/PessoaResponseDTO; entity #Lbr/com/legalconnect/entity/Pessoa; pessoaResponseDTO DLbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; set Ljava/util/Set; LocalVariableTypeTable HLbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder<**>; #Ljava/util/Set<Ljava/lang/String;>; 
StackMapTable  
java/util/Set MethodParameters 
SourceFile PessoaMapperImpl.java *Lorg/springframework/stereotype/Component; InnerClasses PessoaResponseDTOBuilder !          	     
       	     
     
      /     *· ±                              -     +Ç °¸ M,*´ +¶  ¹ & ¶ +W,*´ 1+¶ 3¹ 7 ¶ =W+¶ AN-Æ ,» DY-· F¶ IW,+¶ M¶ QW,+¶ U¶ YW,+¶ ]¶ aW,+¶ e¶ iW,+¶ m¶ pW,+¶ s¶ vW,¶ y°       >         
    ! . " 3 # 7 $ D & M ' V ( _ ) h * q + z -    *            } ~  
 u    3 L         
 u    3 L        ý = ,      }         	           
  ,  	
```
```java
Êþº¾   = 4  -br/com/legalconnect/mapper/ProfissionalMapper  java/lang/Object  'br/com/legalconnect/mapper/PessoaMapper INSTANCE /Lbr/com/legalconnect/mapper/ProfissionalMapper; <clinit> ()V Code
 
   org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable toEntity [(Lbr/com/legalconnect/dto/ProfissionalRequestDTO;)Lbr/com/legalconnect/entity/Profissional; RuntimeInvisibleAnnotations Lorg/mapstruct/Mappings; value Lorg/mapstruct/Mapping; target empresa ignore    plano roleProfissionals dto MethodParameters 
toResponseDTO \(Lbr/com/legalconnect/entity/Profissional;)Lbr/com/legalconnect/dto/ProfissionalResponseDTO; source entity toPlanoResponseDTO N(Lbr/com/legalconnect/entity/Plano;)Lbr/com/legalconnect/dto/PlanoResponseDTO; 
SourceFile ProfissionalMapper.java Lorg/mapstruct/Mapper; componentModel spring uses )Lbr/com/legalconnect/mapper/PessoaMapper; +Lbr/com/legalconnect/mapper/EnderecoMapper; 'Lbr/com/legalconnect/mapper/UserMapper; *Lbr/com/legalconnect/mapper/EmpresaMapper;             	 
     ,      ¸ À ³ ±                        8    [ @   s  Z @   s   Z @   s ! Z  #    "   $ %     )    [ @   &s  s @   &s   s   #    '   ( )  #         *    +      ,  -s . /[ c 0c 1c 2c 3
```
```java
Êþº¾   =  1br/com/legalconnect/mapper/ProfissionalMapperImpl  java/lang/Object  -br/com/legalconnect/mapper/ProfissionalMapper enderecoMapper +Lbr/com/legalconnect/mapper/EnderecoMapper; RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; 
userMapper 'Lbr/com/legalconnect/mapper/UserMapper; 
empresaMapper *Lbr/com/legalconnect/mapper/EmpresaMapper; <init> ()V Code
     LineNumberTable LocalVariableTable this 3Lbr/com/legalconnect/mapper/ProfissionalMapperImpl; 
toResponseDTO P(Lbr/com/legalconnect/entity/Pessoa;)Lbr/com/legalconnect/dto/PessoaResponseDTO;
    )br/com/legalconnect/dto/PessoaResponseDTO   builder F()Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;	  !  
 # % $ !br/com/legalconnect/entity/Pessoa & ' 
getUsuario #()Lbr/com/legalconnect/entity/User; ) + * %br/com/legalconnect/mapper/UserMapper  , L(Lbr/com/legalconnect/entity/User;)Lbr/com/legalconnect/dto/UserResponseDTO;
 . 0 / Bbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder 1 2 usuario o(Lbr/com/legalconnect/dto/UserResponseDTO;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;	  4  
 # 6 7 8 getEnderecos ()Ljava/util/Set; : < ; )br/com/legalconnect/mapper/EnderecoMapper = > toResponseDTOList !(Ljava/util/Set;)Ljava/util/List;
 . @ A B 	enderecos V(Ljava/util/List;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 # D E 8 getTelefones G java/util/LinkedHashSet
 F I  J (Ljava/util/Collection;)V
 . L M N 	telefones U(Ljava/util/Set;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 # P Q R getCpf ()Ljava/lang/String;
 . T U V cpf X(Ljava/lang/String;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 # X Y Z getCreatedAt ()Ljava/time/LocalDateTime;
 . \ ] ^ 	createdAt _(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 # ` a b getDataNascimento ()Ljava/time/LocalDate;
 . d e f dataNascimento [(Ljava/time/LocalDate;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 # h i j getId ()Ljava/util/UUID;
 . l m n id V(Ljava/util/UUID;)Lbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder;
 # p q R getNomeCompleto
 . s t V nomeCompleto
 # v w Z getUpdatedAt
 . y z ^ 	updatedAt
 . | } ~ build -()Lbr/com/legalconnect/dto/PessoaResponseDTO; entity #Lbr/com/legalconnect/entity/Pessoa; pessoaResponseDTO DLbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder; set Ljava/util/Set; LocalVariableTypeTable HLbr/com/legalconnect/dto/PessoaResponseDTO$PessoaResponseDTOBuilder<**>; #Ljava/util/Set<Ljava/lang/String;>; 
StackMapTable  
java/util/Set MethodParameters toEntity [(Lbr/com/legalconnect/dto/ProfissionalRequestDTO;)Lbr/com/legalconnect/entity/Profissional;
    'br/com/legalconnect/entity/Profissional   ?()Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder;
  P  .br/com/legalconnect/dto/ProfissionalRequestDTO
    ;br/com/legalconnect/entity/Profissional$ProfissionalBuilder U  E(Ljava/lang/String;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;
  `
   e  H(Ljava/time/LocalDate;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;
    7 ¡ ()Ljava/util/List; : £ ¤ ¥ toEntitySet !(Ljava/util/List;)Ljava/util/Set;
  § A ¨ B(Ljava/util/Set;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;
  p
  « t 
  D
  ® M ¨
  ° & ± *()Lbr/com/legalconnect/dto/UserRequestDTO; ) ³  ´ K(Lbr/com/legalconnect/dto/UserRequestDTO;)Lbr/com/legalconnect/entity/User;
  ¶ 1 · T(Lbr/com/legalconnect/entity/User;)Lbr/com/legalconnect/entity/Pessoa$PessoaBuilder;
  ¹ º » getFazParteDePlano ()Ljava/lang/Boolean;
  ½ ¾ ¿ fazParteDePlano R(Ljava/lang/Boolean;)Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder;
  Á Â R getNumeroOab
  Ä Å Æ 	numeroOab Q(Ljava/lang/String;)Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder;
  È É Ê getStatusProfissional >()Lbr/com/legalconnect/entity/Profissional$StatusProfissional;
  Ì Í Î statusProfissional {(Lbr/com/legalconnect/entity/Profissional$StatusProfissional;)Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder;
  Ð Ñ » getUsaMarketplace
  Ó Ô ¿ usaMarketplace
  Ö } × +()Lbr/com/legalconnect/entity/Profissional; dto 0Lbr/com/legalconnect/dto/ProfissionalRequestDTO; profissional =Lbr/com/legalconnect/entity/Profissional$ProfissionalBuilder; set1 ALbr/com/legalconnect/entity/Profissional$ProfissionalBuilder<**>; \(Lbr/com/legalconnect/entity/Profissional;)Lbr/com/legalconnect/dto/ProfissionalResponseDTO;
 à â á /br/com/legalconnect/dto/ProfissionalResponseDTO  ã R()Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;	  å 
 
  ç è é 
getEmpresa &()Lbr/com/legalconnect/entity/Empresa; ë í ì (br/com/legalconnect/mapper/EmpresaMapper  î R(Lbr/com/legalconnect/entity/Empresa;)Lbr/com/legalconnect/dto/EmpresaResponseDTO;
 ð ò ñ Nbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder ó ô empresa ~(Lbr/com/legalconnect/dto/EmpresaResponseDTO;)Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;
  ö ÷ ø getPlano $()Lbr/com/legalconnect/entity/Plano;
  ú û ü toPlanoResponseDTO N(Lbr/com/legalconnect/entity/Plano;)Lbr/com/legalconnect/dto/PlanoResponseDTO;
 ð þ ÿ  plano |(Lbr/com/legalconnect/dto/PlanoResponseDTO;)Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;
  P
 ð T
  X
 ð \
  `
 ð d
  6
 ð @
  h
 ð l
  p
 ð s
  D
 ð L
  v
 ð y
  %
 ð 0
  ¹
 ð ¾ e(Ljava/lang/Boolean;)Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;
  Á
 ð Å d(Ljava/lang/String;)Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;
  È
 ð Í (Lbr/com/legalconnect/entity/Profissional$StatusProfissional;)Lbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder;
  Ð
 ð! Ô
 ð# }$ 3()Lbr/com/legalconnect/dto/ProfissionalResponseDTO; )Lbr/com/legalconnect/entity/Profissional; profissionalResponseDTO PLbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder; TLbr/com/legalconnect/dto/ProfissionalResponseDTO$ProfissionalResponseDTOBuilder<**>;
*,+ (br/com/legalconnect/dto/PlanoResponseDTO - D()Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;
/10  br/com/legalconnect/entity/Plano2 » getAcessoRelatoriosAvancados
465 @br/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder78 acessoRelatoriosAvancados W(Ljava/lang/Boolean;)Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;
/ X
4; ]< ](Ljava/time/LocalDateTime;)Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;
/>? R getDescricao
4ABC 	descricao V(Ljava/lang/String;)Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;
/ h
4F mG T(Ljava/util/UUID;)Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;
/IJ » getIsDefault
4LM8 	isDefault
/OPQ getLimiteServicosAgendaveis ()Ljava/lang/Integer;
4STU limiteServicosAgendaveis W(Ljava/lang/Integer;)Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;
/WX R getNome
4Z[C nome
/]^Q getPeriodoTesteDias
4`aU periodoTesteDias
/cd » getPermitePedidosOrcamento
4fg8 permitePedidosOrcamento
/ijk 
getPrecoAnual ()Ljava/math/BigDecimal;
4mno 
precoAnual Z(Ljava/math/BigDecimal;)Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;
/qrk getPrecoMensal
4tuo precoMensal
/ v
4x z<
/z{| getVisibilidadeDestaque 9()Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;
4~ visibilidadeDestaque {(Lbr/com/legalconnect/entity/Plano$VisibilidadeDestaque;)Lbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder;
4 } ,()Lbr/com/legalconnect/dto/PlanoResponseDTO; "Lbr/com/legalconnect/entity/Plano; planoResponseDTO BLbr/com/legalconnect/dto/PlanoResponseDTO$PlanoResponseDTOBuilder; 
SourceFile ProfissionalMapperImpl.java *Lorg/springframework/stereotype/Component; InnerClasses PessoaResponseDTOBuilder PlanoResponseDTOBuilder ProfissionalResponseDTOBuilder /br/com/legalconnect/entity/Pessoa$PessoaBuilder 
PessoaBuilder 5br/com/legalconnect/entity/Plano$VisibilidadeDestaque VisibilidadeDestaque ProfissionalBuilder :br/com/legalconnect/entity/Profissional$StatusProfissional StatusProfissional !          	     
       	     
    
   	     
           /     *· ±                              -     +Ç °¸ M,*´  +¶ "¹ ( ¶ -W,*´ 3+¶ 5¹ 9 ¶ ?W+¶ CN-Æ ,» FY-· H¶ KW,+¶ O¶ SW,+¶ W¶ [W,+¶ _¶ cW,+¶ g¶ kW,+¶ o¶ rW,+¶ u¶ xW,¶ {°       >    !  "  % 
 '  ( . ) 3 * 7 + D - M . V / _ 0 h 1 q 2 z 4    *               
 u    3 L         
 u    3 L        ý = .               :     +Ç °¸ M,+¶ ¶ W,+¶ ¶ W,*´ 3+¶ ¹ ¢ ¶ ¦W,+¶ ©¶ ªW+¶ ¬N-Æ ,» FY-· H¶ ­W,*´  +¶ ¯¹ ² ¶ µW,+¶ ¸¶ ¼W,+¶ À¶ ÃW,+¶ Ç¶ ËW,+¶ Ï¶ ÒW,¶ Õ°       B    9  :  = 
 ?  @  A . B 7 C < D @ E M G _ H h I q J z K  M    *            Ø Ù  
 ~ Ú Û  < L Ü        
 ~ Ú Ý  < L Ü       ý F       Ø     Þ         Â+Ç °¸ ßM,*´ ä+¶ æ¹ ê ¶ ïW,*+¶ õ¶ ù¶ ýW,+¶¶W,+¶¶W,+¶¶W,*´ 3+¶¹ 9 ¶W,+¶	¶
W,+¶¶W+¶
N-Æ ,» FY-· H¶W,+¶¶W,*´  +¶¹ ( ¶W,+¶¶W,+¶¶W,+¶¶W,+¶¶ W,¶"°       V    R  S  V 
 X  Y ) Z 2 [ ; \ D ] V ^ _ _ h ` m a q b ~ d  e  f ¢ g « h ´ i ½ k    *    Â       Â %  
 ¸&'  m U         
 ¸&(  m U        ý w ð          û ü         +Ç °¸)M,+¶.¶3W,+¶9¶:W,+¶=¶@W,+¶D¶EW,+¶H¶KW,+¶N¶RW,+¶V¶YW,+¶\¶_W,+¶b¶eW,+¶h¶lW,+¶p¶sW,+¶v¶wW,+¶y¶}W,¶°       F    p  q  t 
 v  w  x % y . z 7 { @ | I } R ~ [  d  m  v                    ÿ  
 z           ÿ       	         :  . 	4* 	 ð à	 #	/@  	 @
```
```java
Êþº¾   = 0  %br/com/legalconnect/mapper/UserMapper  java/lang/Object INSTANCE 'Lbr/com/legalconnect/mapper/UserMapper; <clinit> ()V Code
  
  org/mapstruct/factory/Mappers   	getMapper %(Ljava/lang/Class;)Ljava/lang/Object;	     LineNumberTable LocalVariableTable toEntity K(Lbr/com/legalconnect/dto/UserRequestDTO;)Lbr/com/legalconnect/entity/User; RuntimeInvisibleAnnotations Lorg/mapstruct/Mappings; value Lorg/mapstruct/Mapping; target id ignore    	createdAt 	updatedAt nomeCompleto cpf telefone fotoUrl dto MethodParameters 
toResponseDTO L(Lbr/com/legalconnect/entity/User;)Lbr/com/legalconnect/dto/UserResponseDTO; email source entity 
SourceFile UserMapper.java Lorg/mapstruct/Mapper; componentModel spring                	   ,      ¸ 
À ³ ±                        t    [ @   s  Z @   s  Z @   s  Z @   s   Z @   s ! Z @   s " Z @   s # Z  %    $   & '         s ( )s ( %    *    +    ,      -  .s /
```
```java
Êþº¾   = a  )br/com/legalconnect/mapper/UserMapperImpl  java/lang/Object  %br/com/legalconnect/mapper/UserMapper <init> ()V Code
     LineNumberTable LocalVariableTable this +Lbr/com/legalconnect/mapper/UserMapperImpl; toEntity K(Lbr/com/legalconnect/dto/UserRequestDTO;)Lbr/com/legalconnect/entity/User;
    br/com/legalconnect/entity/User   builder /()Lbr/com/legalconnect/entity/User$UserBuilder;
    &br/com/legalconnect/dto/UserRequestDTO   getEmail ()Ljava/lang/String;
  !   +br/com/legalconnect/entity/User$UserBuilder " # email A(Ljava/lang/String;)Lbr/com/legalconnect/entity/User$UserBuilder;
  % & ' build #()Lbr/com/legalconnect/entity/User; dto (Lbr/com/legalconnect/dto/UserRequestDTO; user -Lbr/com/legalconnect/entity/User$UserBuilder; LocalVariableTypeTable 1Lbr/com/legalconnect/entity/User$UserBuilder<**>; 
StackMapTable MethodParameters 
toResponseDTO L(Lbr/com/legalconnect/entity/User;)Lbr/com/legalconnect/dto/UserResponseDTO;
 3 5 4 'br/com/legalconnect/dto/UserResponseDTO  6 B()Lbr/com/legalconnect/dto/UserResponseDTO$UserResponseDTOBuilder;
  
 9 ; : >br/com/legalconnect/dto/UserResponseDTO$UserResponseDTOBuilder " < T(Ljava/lang/String;)Lbr/com/legalconnect/dto/UserResponseDTO$UserResponseDTOBuilder;
  > ? @ getCreatedAt ()Ljava/time/LocalDateTime;
 9 B C D 	createdAt [(Ljava/time/LocalDateTime;)Lbr/com/legalconnect/dto/UserResponseDTO$UserResponseDTOBuilder;
  F G H getId ()Ljava/util/UUID;
 9 J K L id R(Ljava/util/UUID;)Lbr/com/legalconnect/dto/UserResponseDTO$UserResponseDTOBuilder;
  N O @ getUpdatedAt
 9 Q R D 	updatedAt
 9 T & U +()Lbr/com/legalconnect/dto/UserResponseDTO; entity !Lbr/com/legalconnect/entity/User; userResponseDTO @Lbr/com/legalconnect/dto/UserResponseDTO$UserResponseDTOBuilder; 
SourceFile UserMapperImpl.java RuntimeVisibleAnnotations *Lorg/springframework/stereotype/Component; InnerClasses UserResponseDTOBuilder UserBuilder !            	   /     *· 
±            
                	        +Ç °¸ M,+¶ ¶ W,¶ $°                
    
                ( )  
  * +  ,     
  * -  .     /    (    0 1  	        3+Ç °¸ 2M,+¶ 7¶ 8W,+¶ =¶ AW,+¶ E¶ IW,+¶ M¶ PW,¶ S°       "       !  $ 
 &  '  ( % ) . + 
        3       3 V W  
 ) X Y  .     /    V    Z    [ \     ]   ^     9 3 _ 	   `	
```
```java
Êþº¾   =   7br/com/legalconnect/repository/RepositorioAdministrador  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository 	findByCpf ((Ljava/lang/String;)Ljava/util/Optional; 	Signature T(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/entity/Administrador;>; cpf MethodParameters findAll R(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page; ~(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page<Lbr/com/legalconnect/entity/Administrador;>; pageable 
SourceFile RepositorioAdministrador.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/entity/Administrador;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
   	                  	            
```
```java
Êþº¾   =   1br/com/legalconnect/repository/RepositorioCliente  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository 	findByCpf ((Ljava/lang/String;)Ljava/util/Optional; 	Signature N(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/entity/Cliente;>; cpf MethodParameters findAll R(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page; x(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page<Lbr/com/legalconnect/entity/Cliente;>; pageable 
SourceFile RepositorioCliente.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/entity/Cliente;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
   	                  	            
```
```java
Êþº¾   =   1br/com/legalconnect/repository/RepositorioEmpresa  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository 
findByCnpj ((Ljava/lang/String;)Ljava/util/Optional; 	Signature N(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/entity/Empresa;>; cnpj MethodParameters findAll R(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page; x(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page<Lbr/com/legalconnect/entity/Empresa;>; pageable 
SourceFile RepositorioEmpresa.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/entity/Empresa;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
   	                  	            
```
```java
Êþº¾   = 
  2br/com/legalconnect/repository/RepositorioEndereco  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository 
SourceFile RepositorioEndereco.java 	Signature Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/entity/Endereco;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;               	    
        
```
```java
Êþº¾   =   0br/com/legalconnect/repository/RepositorioPessoa  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository 	findByCpf ((Ljava/lang/String;)Ljava/util/Optional; 	Signature M(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/entity/Pessoa;>; cpf MethodParameters 
SourceFile RepositorioPessoa.java ~Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/entity/Pessoa;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
         
     	            
```
```java
Êþº¾   =   /br/com/legalconnect/repository/RepositorioPlano  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository 
findByNome ((Ljava/lang/String;)Ljava/util/Optional; 	Signature L(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/entity/Plano;>; nome MethodParameters 
SourceFile RepositorioPlano.java }Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/entity/Plano;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
         
     	            
```
```java
Êþº¾   =   :br/com/legalconnect/repository/RepositorioRoleProfissional  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository 
findByNome ((Ljava/lang/String;)Ljava/util/Optional; 	Signature W(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/entity/RoleProfissional;>; nome MethodParameters 
SourceFile  RepositorioRoleProfissional.java Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/entity/RoleProfissional;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
         
     	            
```
```java
Êþº¾   =   .br/com/legalconnect/repository/RepositorioUser  java/lang/Object  5org/springframework/data/jpa/repository/JpaRepository findByEmail ((Ljava/lang/String;)Ljava/util/Optional; 	Signature K(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/entity/User;>; email MethodParameters 	findByCpf cpf 
SourceFile RepositorioUser.java |Ljava/lang/Object;Lorg/springframework/data/jpa/repository/JpaRepository<Lbr/com/legalconnect/entity/User;Ljava/util/UUID;>; RuntimeVisibleAnnotations +Lorg/springframework/stereotype/Repository;           	    
        
   	    
              	            
```
```java
Êþº¾   =r  0br/com/legalconnect/service/ServicoAdministrador  java/lang/Object repositorioAdministrador 9Lbr/com/legalconnect/repository/RepositorioAdministrador; repositorioUser 0Lbr/com/legalconnect/repository/RepositorioUser; administradorMapper 0Lbr/com/legalconnect/mapper/AdministradorMapper; enderecoMapper +Lbr/com/legalconnect/mapper/EnderecoMapper; cadastrarAdministrador e(Lbr/com/legalconnect/dto/AdministradorRequestDTO;)Lbr/com/legalconnect/dto/AdministradorResponseDTO; RuntimeVisibleAnnotations :Lorg/springframework/transaction/annotation/Transactional; Code
    /br/com/legalconnect/dto/AdministradorRequestDTO   
getUsuario *()Lbr/com/legalconnect/dto/UserRequestDTO;
    &br/com/legalconnect/dto/UserRequestDTO   getId ()Ljava/util/UUID;	     ! # " .br/com/legalconnect/repository/RepositorioUser $ % findById ((Ljava/lang/Object;)Ljava/util/Optional;   ' ( ) get /(Ljava/util/UUID;)Ljava/util/function/Supplier;
 + - , java/util/Optional . / orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; 1 br/com/legalconnect/entity/User	  3  
  5 6 7 getCpf ()Ljava/lang/String; 9 ; : 7br/com/legalconnect/repository/RepositorioAdministrador < = 	findByCpf ((Ljava/lang/String;)Ljava/util/Optional;
 + ? @ A 	isPresent ()Z C 6br/com/legalconnect/common/exception/BusinessException	 E G F .br/com/legalconnect/common/exception/ErrorCode H I INVALID_CPF 0Lbr/com/legalconnect/common/exception/ErrorCode; K java/lang/String M ,CPF jÃ¡ cadastrado para outro administrador.
 B O P Q <init> F(Lbr/com/legalconnect/common/exception/ErrorCode;[Ljava/lang/String;)V	  S 	 
 U W V .br/com/legalconnect/mapper/AdministradorMapper X Y toEntity ](Lbr/com/legalconnect/dto/AdministradorRequestDTO;)Lbr/com/legalconnect/entity/Administrador;
 [ ] \ (br/com/legalconnect/entity/Administrador ^ _ 
setUsuario $(Lbr/com/legalconnect/entity/User;)V
  a b c getEnderecos ()Ljava/util/List; e g f java/util/List h i stream ()Ljava/util/stream/Stream;  k l m apply {(Lbr/com/legalconnect/service/ServicoAdministrador;Lbr/com/legalconnect/entity/Administrador;)Ljava/util/function/Function; o q p java/util/stream/Stream r s map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 u w v java/util/stream/Collectors x y toSet ()Ljava/util/stream/Collector; o { | } collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object;  
java/util/Set
 [    setEnderecos (Ljava/util/Set;)V 9    save &(Ljava/lang/Object;)Ljava/lang/Object; U    
toResponseDTO ^(Lbr/com/legalconnect/entity/Administrador;)Lbr/com/legalconnect/dto/AdministradorResponseDTO; LineNumberTable LocalVariableTable this 2Lbr/com/legalconnect/service/ServicoAdministrador; 
requestDTO 1Lbr/com/legalconnect/dto/AdministradorRequestDTO; userId Ljava/util/UUID; user !Lbr/com/legalconnect/entity/User; 
administrador *Lbr/com/legalconnect/entity/Administrador; 	enderecos Ljava/util/Set; savedAdministrador LocalVariableTypeTable 6Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>; 
StackMapTable  java/util/UUID MethodParameters buscarAdministradorPorId D(Ljava/util/UUID;)Lbr/com/legalconnect/dto/AdministradorResponseDTO; readOnly    9 #  ' id listarAdministradores R(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page; 	Signature (Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page<Lbr/com/legalconnect/dto/AdministradorResponseDTO;>; 9 ­ ® © findAll
  ° ± ² getClass ()Ljava/lang/Class;  ´ l µ O(Lbr/com/legalconnect/mapper/AdministradorMapper;)Ljava/util/function/Function; · ¹ ¸ $org/springframework/data/domain/Page r º E(Ljava/util/function/Function;)Lorg/springframework/data/domain/Page; pageable *Lorg/springframework/data/domain/Pageable; atualizarAdministrador u(Ljava/util/UUID;Lbr/com/legalconnect/dto/AdministradorRequestDTO;)Lbr/com/legalconnect/dto/AdministradorResponseDTO;  '
 [ 5
 J Â Ã Ä equals (Ljava/lang/Object;)Z Æ 1Novo CPF jÃ¡ cadastrado para outro administrador.
  È É 7 getNomeCompleto
 [ Ë Ì Í setNomeCompleto (Ljava/lang/String;)V
 [ Ï Ð Í setCpf
  Ò Ó Ô getDataNascimento ()Ljava/time/LocalDate;
 [ Ö × Ø setDataNascimento (Ljava/time/LocalDate;)V
  Ú Û 7 	getStatus
 [ Ý Þ Í 	setStatus
 [ à b á ()Ljava/util/Set; ~ ã ä å clear ()V  ç è é accept {(Lbr/com/legalconnect/service/ServicoAdministrador;Lbr/com/legalconnect/entity/Administrador;)Ljava/util/function/Consumer; e ë ì í forEach  (Ljava/util/function/Consumer;)V
 [ ï ð á getTelefones
  ï ~ ó ô õ addAll (Ljava/util/Collection;)Z existingAdministrador updatedAdministrador excluirAdministrador (Ljava/util/UUID;)V 9 û ü Ä 
existsById	 E þ ÿ I RESOURCE_NOT_FOUND
 J valueOf &(Ljava/lang/Object;)Ljava/lang/String;  makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String; 9	
 
deleteById (Ljava/lang/Object;)V Ç(Lbr/com/legalconnect/repository/RepositorioAdministrador;Lbr/com/legalconnect/repository/RepositorioUser;Lbr/com/legalconnect/mapper/AdministradorMapper;Lbr/com/legalconnect/mapper/EnderecoMapper;)V RuntimeInvisibleAnnotations Llombok/Generated;
  P å	    lambda$0 J(Ljava/util/UUID;)Lbr/com/legalconnect/common/exception/BusinessException;	 E I USER_NOT_FOUND  lambda$1 }(Lbr/com/legalconnect/entity/Administrador;Lbr/com/legalconnect/dto/EnderecoRequestDTO;)Lbr/com/legalconnect/entity/Endereco; )br/com/legalconnect/mapper/EnderecoMapper X S(Lbr/com/legalconnect/dto/EnderecoRequestDTO;)Lbr/com/legalconnect/entity/Endereco;
!#" #br/com/legalconnect/entity/Endereco$% 	setPessoa &(Lbr/com/legalconnect/entity/Pessoa;)V enderecoDTO ,Lbr/com/legalconnect/dto/EnderecoRequestDTO; endereco %Lbr/com/legalconnect/entity/Endereco; lambda$2  lambda$4 	 lambda$5 Y(Lbr/com/legalconnect/entity/Administrador;Lbr/com/legalconnect/dto/EnderecoRequestDTO;)V ~12 Ä add newEndereco 
SourceFile ServicoAdministrador.java (Lorg/springframework/stereotype/Service; BootstrapMethods
9;: "java/lang/invoke/LambdaMetafactory<= metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;8 ()Ljava/lang/Object;?
 BA :()Lbr/com/legalconnect/common/exception/BusinessException;D 
 HG?
 M*LD 	  ?
 U,TD
 Z./Y /(Lbr/com/legalconnect/dto/EnderecoRequestDTO;)V\
_a` $java/lang/invoke/StringConcatFactoryb (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;^e 6Administrador com ID  nÃ£o encontrado para exclusÃ£o.g ,UsuÃ¡rio associado com ID  nÃ£o encontrado.i 'Administrador com ID  nÃ£o encontrado.k :Administrador com ID  nÃ£o encontrado para atualizaÃ§Ã£o. InnerClassesn %java/lang/invoke/MethodHandles$Lookupp java/lang/invoke/MethodHandles Lookup !                 	 
          
             _     +¶ ¶ M*´ ,¹   ,º &  ¶ *À 0N*´ 2+¶ 4¹ 8 ¶ > » BY² D½ JYLS· N¿*´ R+¹ T :-¶ Z+¶ `¹ d *º j  ¹ n ¸ t¹ z À ~:¶ *´ 2¹  À [:*´ R¹  °       >    3  4  5  4  9 2 : F > R ? X B a C n H y B { I  L  O    H                         R L    { #              { #        ý F  0          ¡ ¢         £Z ¤    l     "*´ 2+¹ ¥ +º ¦  ¶ *À [M*´ R,¹  °           Z 
 [  Z  ]         "       " §             §    ¨ ©  ª    «        £Z ¤    Z     *´ 2+¹ ¬ *´ RY¶ ¯Wº ³  ¹ ¶ °           g 
 h  g                » ¼       »    ½ ¾            a     ¾*´ 2+¹ ¥ +º ¿  ¶ *À [N-¶ À,¶ 4¶ Á **´ 2,¶ 4¹ 8 ¶ > » BY² D½ JYÅS· N¿-,¶ Ç¶ Ê-,¶ 4¶ Î-,¶ Ñ¶ Õ-,¶ Ù¶ Ü-¶ ß¹ â ,¶ `*-º æ  ¹ ê -¶ î¹ â ,¶ ñÆ -¶ î,¶ ñ¹ ò W*´ 2-¹  À [:*´ R¹  °       F    u 
 v  u  z % { 8 | L  T  \  d  l  u        £  ²     4    ¾       ¾ §     ¾     § ö   ²  ÷       ü L [û V     	 §       ø ù                  3*´ 2+¹ ú  » BY² ý½ JY+¸ º  S· N¿*´ 2+¹ ±           £ 
 ¤  ¥ # ¤ ( © 2 ª        3       3 §       (      §    P 
          l     *·*+µ 2*,µ *-µ R*µ±           !    4                        	 
                 	   
     G     » BY²½ JY*¸ º  S· N°           5 
 6  5  6           X     *´,¹ N-+¶ -°           D  E  F                &'   () 
*     G     » BY² ý½ JY*¸ º+  S· N°           [ 
 \  [  \      
,     G     » BY² ý½ JY*¸ º-  S· N°           v 
 w  v  w      ./     f     *´,¹ N-+¶ +¶ ß-¹0 W±                                 &'   3)  4   5     6  7   V 
> @CE> FIJ> KNO> PQR> SVW> X[]c dc fc hc jl   
 moq 
```
```java
Êþº¾   =r  *br/com/legalconnect/service/ServicoCliente  java/lang/Object repositorioCliente 3Lbr/com/legalconnect/repository/RepositorioCliente; repositorioUser 0Lbr/com/legalconnect/repository/RepositorioUser; 
clienteMapper *Lbr/com/legalconnect/mapper/ClienteMapper; enderecoMapper +Lbr/com/legalconnect/mapper/EnderecoMapper; cadastrarCliente Y(Lbr/com/legalconnect/dto/ClienteRequestDTO;)Lbr/com/legalconnect/dto/ClienteResponseDTO; RuntimeVisibleAnnotations :Lorg/springframework/transaction/annotation/Transactional; Code
    )br/com/legalconnect/dto/ClienteRequestDTO   
getUsuario *()Lbr/com/legalconnect/dto/UserRequestDTO;
    &br/com/legalconnect/dto/UserRequestDTO   getId ()Ljava/util/UUID;	     ! # " .br/com/legalconnect/repository/RepositorioUser $ % findById ((Ljava/lang/Object;)Ljava/util/Optional;   ' ( ) get /(Ljava/util/UUID;)Ljava/util/function/Supplier;
 + - , java/util/Optional . / orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; 1 br/com/legalconnect/entity/User	  3  
  5 6 7 getCpf ()Ljava/lang/String; 9 ; : 1br/com/legalconnect/repository/RepositorioCliente < = 	findByCpf ((Ljava/lang/String;)Ljava/util/Optional;
 + ? @ A 	isPresent ()Z C 6br/com/legalconnect/common/exception/BusinessException	 E G F .br/com/legalconnect/common/exception/ErrorCode H I INVALID_CPF 0Lbr/com/legalconnect/common/exception/ErrorCode; K java/lang/String M &CPF jÃ¡ cadastrado para outro cliente.
 B O P Q <init> F(Lbr/com/legalconnect/common/exception/ErrorCode;[Ljava/lang/String;)V	  S 	 
 U W V (br/com/legalconnect/mapper/ClienteMapper X Y toEntity Q(Lbr/com/legalconnect/dto/ClienteRequestDTO;)Lbr/com/legalconnect/entity/Cliente;
 [ ] \ "br/com/legalconnect/entity/Cliente ^ _ 
setUsuario $(Lbr/com/legalconnect/entity/User;)V
  a b c getEnderecos ()Ljava/util/List; e g f java/util/List h i stream ()Ljava/util/stream/Stream;  k l m apply o(Lbr/com/legalconnect/service/ServicoCliente;Lbr/com/legalconnect/entity/Cliente;)Ljava/util/function/Function; o q p java/util/stream/Stream r s map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 u w v java/util/stream/Collectors x y toSet ()Ljava/util/stream/Collector; o { | } collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object;  
java/util/Set
 [    setEnderecos (Ljava/util/Set;)V 9    save &(Ljava/lang/Object;)Ljava/lang/Object; U    
toResponseDTO R(Lbr/com/legalconnect/entity/Cliente;)Lbr/com/legalconnect/dto/ClienteResponseDTO; LineNumberTable LocalVariableTable this ,Lbr/com/legalconnect/service/ServicoCliente; 
requestDTO +Lbr/com/legalconnect/dto/ClienteRequestDTO; userId Ljava/util/UUID; user !Lbr/com/legalconnect/entity/User; cliente $Lbr/com/legalconnect/entity/Cliente; 	enderecos Ljava/util/Set; savedCliente LocalVariableTypeTable 6Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>; 
StackMapTable  java/util/UUID MethodParameters buscarClientePorId >(Ljava/util/UUID;)Lbr/com/legalconnect/dto/ClienteResponseDTO; readOnly    9 #  ' id listarClientes R(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page; 	Signature (Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page<Lbr/com/legalconnect/dto/ClienteResponseDTO;>; 9 ­ ® © findAll
  ° ± ² getClass ()Ljava/lang/Class;  ´ l µ I(Lbr/com/legalconnect/mapper/ClienteMapper;)Ljava/util/function/Function; · ¹ ¸ $org/springframework/data/domain/Page r º E(Ljava/util/function/Function;)Lorg/springframework/data/domain/Page; pageable *Lorg/springframework/data/domain/Pageable; atualizarCliente i(Ljava/util/UUID;Lbr/com/legalconnect/dto/ClienteRequestDTO;)Lbr/com/legalconnect/dto/ClienteResponseDTO;  '
 [ 5
 J Â Ã Ä equals (Ljava/lang/Object;)Z Æ +Novo CPF jÃ¡ cadastrado para outro cliente.
  È É 7 getNomeCompleto
 [ Ë Ì Í setNomeCompleto (Ljava/lang/String;)V
 [ Ï Ð Í setCpf
  Ò Ó Ô getDataNascimento ()Ljava/time/LocalDate;
 [ Ö × Ø setDataNascimento (Ljava/time/LocalDate;)V
  Ú Û 7 	getStatus
 [ Ý Þ Í 	setStatus
 [ à b á ()Ljava/util/Set; ~ ã ä å clear ()V  ç è é accept o(Lbr/com/legalconnect/service/ServicoCliente;Lbr/com/legalconnect/entity/Cliente;)Ljava/util/function/Consumer; e ë ì í forEach  (Ljava/util/function/Consumer;)V
 [ ï ð á getTelefones
  ï ~ ó ô õ addAll (Ljava/util/Collection;)Z existingCliente updatedCliente excluirCliente (Ljava/util/UUID;)V 9 û ü Ä 
existsById	 E þ ÿ I RESOURCE_NOT_FOUND
 J valueOf &(Ljava/lang/Object;)Ljava/lang/String;  makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String; 9	
 
deleteById (Ljava/lang/Object;)V »(Lbr/com/legalconnect/repository/RepositorioCliente;Lbr/com/legalconnect/repository/RepositorioUser;Lbr/com/legalconnect/mapper/ClienteMapper;Lbr/com/legalconnect/mapper/EnderecoMapper;)V RuntimeInvisibleAnnotations Llombok/Generated;
  P å	    lambda$0 J(Ljava/util/UUID;)Lbr/com/legalconnect/common/exception/BusinessException;	 E I USER_NOT_FOUND  lambda$1 w(Lbr/com/legalconnect/entity/Cliente;Lbr/com/legalconnect/dto/EnderecoRequestDTO;)Lbr/com/legalconnect/entity/Endereco; )br/com/legalconnect/mapper/EnderecoMapper X S(Lbr/com/legalconnect/dto/EnderecoRequestDTO;)Lbr/com/legalconnect/entity/Endereco;
!#" #br/com/legalconnect/entity/Endereco$% 	setPessoa &(Lbr/com/legalconnect/entity/Pessoa;)V enderecoDTO ,Lbr/com/legalconnect/dto/EnderecoRequestDTO; endereco %Lbr/com/legalconnect/entity/Endereco; lambda$2  lambda$4 	 lambda$5 S(Lbr/com/legalconnect/entity/Cliente;Lbr/com/legalconnect/dto/EnderecoRequestDTO;)V ~12 Ä add newEndereco 
SourceFile ServicoCliente.java (Lorg/springframework/stereotype/Service; BootstrapMethods
9;: "java/lang/invoke/LambdaMetafactory<= metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;8 ()Ljava/lang/Object;?
 BA :()Lbr/com/legalconnect/common/exception/BusinessException;D 
 HG?
 M*LD 	  ?
 U,TD
 Z./Y /(Lbr/com/legalconnect/dto/EnderecoRequestDTO;)V\
_a` $java/lang/invoke/StringConcatFactoryb (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;^e 0Cliente com ID  nÃ£o encontrado para exclusÃ£o.g ,UsuÃ¡rio associado com ID  nÃ£o encontrado.i !Cliente com ID  nÃ£o encontrado.k 4Cliente com ID  nÃ£o encontrado para atualizaÃ§Ã£o. InnerClassesn %java/lang/invoke/MethodHandles$Lookupp java/lang/invoke/MethodHandles Lookup !                 	 
          
             _     +¶ ¶ M*´ ,¹   ,º &  ¶ *À 0N*´ 2+¶ 4¹ 8 ¶ > » BY² D½ JYLS· N¿*´ R+¹ T :-¶ Z+¶ `¹ d *º j  ¹ n ¸ t¹ z À ~:¶ *´ 2¹  À [:*´ R¹  °       >    2  3  4  3  9 2 : F > R ? X B a C n H y B { I  L  O    H                         R L    { #              { #        ý F  0          ¡ ¢         £Z ¤    l     "*´ 2+¹ ¥ +º ¦  ¶ *À [M*´ R,¹  °           Z 
 [  Z  ]         "       " §             §    ¨ ©  ª    «        £Z ¤    Z     *´ 2+¹ ¬ *´ RY¶ ¯Wº ³  ¹ ¶ °           g 
 h  g                » ¼       »    ½ ¾            a     ¾*´ 2+¹ ¥ +º ¿  ¶ *À [N-¶ À,¶ 4¶ Á **´ 2,¶ 4¹ 8 ¶ > » BY² D½ JYÅS· N¿-,¶ Ç¶ Ê-,¶ 4¶ Î-,¶ Ñ¶ Õ-,¶ Ù¶ Ü-¶ ß¹ â ,¶ `*-º æ  ¹ ê -¶ î¹ â ,¶ ñÆ -¶ î,¶ ñ¹ ò W*´ 2-¹  À [:*´ R¹  °       F    u 
 v  u  z % { 8 | L  T  \  d  l  u        £  ²     4    ¾       ¾ §     ¾     § ö   ²  ÷       ü L [û V     	 §       ø ù                  3*´ 2+¹ ú  » BY² ý½ JY+¸ º  S· N¿*´ 2+¹ ±           ¢ 
 £  ¤ # £ ( ¨ 2 ©        3       3 §       (      §    P 
          l     *·*+µ 2*,µ *-µ R*µ±                4                        	 
                 	   
     G     » BY²½ JY*¸ º  S· N°           4 
 5  4  5           X     *´,¹ N-+¶ -°           D  E  F                &'   () 
*     G     » BY² ý½ JY*¸ º+  S· N°           [ 
 \  [  \      
,     G     » BY² ý½ JY*¸ º-  S· N°           v 
 w  v  w      ./     f     *´,¹ N-+¶ +¶ ß-¹0 W±                                 &'   3)  4   5     6  7   V 
> @CE> FIJ> KNO> PQR> SVW> X[]c dc fc hc jl   
 moq 
```
```java
Êþº¾   =S  *br/com/legalconnect/service/ServicoEmpresa  java/lang/Object repositorioEmpresa 3Lbr/com/legalconnect/repository/RepositorioEmpresa; 
empresaMapper *Lbr/com/legalconnect/mapper/EmpresaMapper; enderecoMapper +Lbr/com/legalconnect/mapper/EnderecoMapper; cadastrarEmpresa Y(Lbr/com/legalconnect/dto/EmpresaRequestDTO;)Lbr/com/legalconnect/dto/EmpresaResponseDTO; RuntimeVisibleAnnotations :Lorg/springframework/transaction/annotation/Transactional; Code	    
    )br/com/legalconnect/dto/EmpresaRequestDTO   getCnpj ()Ljava/lang/String;    1br/com/legalconnect/repository/RepositorioEmpresa   
findByCnpj ((Ljava/lang/String;)Ljava/util/Optional;
  !   java/util/Optional " # 	isPresent ()Z % 6br/com/legalconnect/common/exception/BusinessException	 ' ) ( .br/com/legalconnect/common/exception/ErrorCode * + INVALID_CNPJ 0Lbr/com/legalconnect/common/exception/ErrorCode; - java/lang/String / 'CNPJ jÃ¡ cadastrado para outra empresa.
 $ 1 2 3 <init> F(Lbr/com/legalconnect/common/exception/ErrorCode;[Ljava/lang/String;)V	  5   7 9 8 (br/com/legalconnect/mapper/EmpresaMapper : ; toEntity Q(Lbr/com/legalconnect/dto/EmpresaRequestDTO;)Lbr/com/legalconnect/entity/Empresa;
  = > ? getEnderecos ()Ljava/util/List; A C B java/util/List D E stream ()Ljava/util/stream/Stream;   G H I apply o(Lbr/com/legalconnect/service/ServicoEmpresa;Lbr/com/legalconnect/entity/Empresa;)Ljava/util/function/Function; K M L java/util/stream/Stream N O map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 Q S R java/util/stream/Collectors T U toSet ()Ljava/util/stream/Collector; K W X Y collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; [ 
java/util/Set
 ] _ ^ "br/com/legalconnect/entity/Empresa ` a setEnderecos (Ljava/util/Set;)V  c d e save &(Ljava/lang/Object;)Ljava/lang/Object; 7 g h i 
toResponseDTO R(Lbr/com/legalconnect/entity/Empresa;)Lbr/com/legalconnect/dto/EmpresaResponseDTO; LineNumberTable LocalVariableTable this ,Lbr/com/legalconnect/service/ServicoEmpresa; 
requestDTO +Lbr/com/legalconnect/dto/EmpresaRequestDTO; empresa $Lbr/com/legalconnect/entity/Empresa; 	enderecos Ljava/util/Set; savedEmpresa LocalVariableTypeTable 6Ljava/util/Set<Lbr/com/legalconnect/entity/Endereco;>; 
StackMapTable MethodParameters buscarEmpresaPorId >(Ljava/util/UUID;)Lbr/com/legalconnect/dto/EmpresaResponseDTO; readOnly     ~   findById ((Ljava/lang/Object;)Ljava/util/Optional;     get /(Ljava/util/UUID;)Ljava/util/function/Supplier;
     orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; id Ljava/util/UUID; listarEmpresas R(Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page; 	Signature (Lorg/springframework/data/domain/Pageable;)Lorg/springframework/data/domain/Page<Lbr/com/legalconnect/dto/EmpresaResponseDTO;>;     findAll
     getClass ()Ljava/lang/Class;   H  I(Lbr/com/legalconnect/mapper/EmpresaMapper;)Ljava/util/function/Function;    $org/springframework/data/domain/Page N  E(Ljava/util/function/Function;)Lorg/springframework/data/domain/Page; pageable *Lorg/springframework/data/domain/Pageable; atualizarEmpresa i(Ljava/util/UUID;Lbr/com/legalconnect/dto/EmpresaRequestDTO;)Lbr/com/legalconnect/dto/EmpresaResponseDTO;  
 ] 
 , ¥ ¦ § equals (Ljava/lang/Object;)Z © ,Novo CNPJ jÃ¡ cadastrado para outra empresa.
  « ¬  getNomeFantasia
 ] ® ¯ ° setNomeFantasia (Ljava/lang/String;)V
  ² ³  getRazaoSocial
 ] µ ¶ ° setRazaoSocial
 ] ¸ ¹ ° setCnpj
  » ¼  getEmailContato
 ] ¾ ¿ ° setEmailContato
 ] Á > Â ()Ljava/util/Set; Z Ä Å Æ clear ()V  È É Ê accept o(Lbr/com/legalconnect/service/ServicoEmpresa;Lbr/com/legalconnect/entity/Empresa;)Ljava/util/function/Consumer; A Ì Í Î forEach  (Ljava/util/function/Consumer;)V
 ] Ð Ñ Â getTelefones
  Ð Z Ô Õ Ö addAll (Ljava/util/Collection;)Z existingEmpresa updatedEmpresa excluirEmpresa (Ljava/util/UUID;)V  
 ] Ý Þ Â getProfissionais Z à á # isEmpty	 ' ã ä + RESOURCE_NOT_FOUND æ EEmpresa nÃ£o pode ser excluÃ­da pois possui profissionais associados.  è é ê delete (Ljava/lang/Object;)V (Lbr/com/legalconnect/repository/RepositorioEmpresa;Lbr/com/legalconnect/mapper/EmpresaMapper;Lbr/com/legalconnect/mapper/EnderecoMapper;)V RuntimeInvisibleAnnotations Llombok/Generated;
  ï 2 Æ	  ñ 	 
 lambda$0 w(Lbr/com/legalconnect/entity/Empresa;Lbr/com/legalconnect/dto/EnderecoRequestDTO;)Lbr/com/legalconnect/entity/Endereco; õ ÷ ö )br/com/legalconnect/mapper/EnderecoMapper : ø S(Lbr/com/legalconnect/dto/EnderecoRequestDTO;)Lbr/com/legalconnect/entity/Endereco;
 ú ü û #br/com/legalconnect/entity/Endereco ý þ 
setEmpresa '(Lbr/com/legalconnect/entity/Empresa;)V enderecoDTO ,Lbr/com/legalconnect/dto/EnderecoRequestDTO; endereco %Lbr/com/legalconnect/entity/Endereco; lambda$1 J(Ljava/util/UUID;)Lbr/com/legalconnect/common/exception/BusinessException;
 , valueOf &(Ljava/lang/Object;)Ljava/lang/String; 
 makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String; lambda$3 
 lambda$4 S(Lbr/com/legalconnect/entity/Empresa;Lbr/com/legalconnect/dto/EnderecoRequestDTO;)V Z § add newEndereco lambda$5 
 
SourceFile ServicoEmpresa.java (Lorg/springframework/stereotype/Service; BootstrapMethods
 "java/lang/invoke/LambdaMetafactory  metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; e
 $ ò ó# ø ()Ljava/lang/Object;'
 *) :()Lbr/com/legalconnect/common/exception/BusinessException;, e	 f i'
 3
2, ê
 87 /(Lbr/com/legalconnect/dto/EnderecoRequestDTO;)V:'
 >=,
BDC $java/lang/invoke/StringConcatFactoryE (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;AH !Empresa com ID  nÃ£o encontrada.J 4Empresa com ID  nÃ£o encontrada para atualizaÃ§Ã£o.L 0Empresa com ID  nÃ£o encontrada para exclusÃ£o. InnerClassesO %java/lang/invoke/MethodHandles$LookupQ java/lang/invoke/MethodHandles Lookup !                 	 
        
               s*´ +¶ ¹  ¶  » $Y² &½ ,Y.S· 0¿*´ 4+¹ 6 M+¶ <¹ @ *,º F  ¹ J ¸ P¹ V À ZN,-¶ \*´ ,¹ b À ]:*´ 4¹ f °    j   * 
   /  0 ' 4 2 7 ; 8 G > R 7 S ? X B g E k   4    s l m     s n o  2 A p q  S   r s  g  t q  u     S   r v  w    ' x    n    y z  
       {Z |    l     "*´ +¹ } +º   ¶ À ]M*´ 4,¹ f °    j       P 
 Q  P  S k        " l m     "      p q  x                
       {Z |    Z     *´ +¹  *´ 4Y¶ Wº   ¹  °    j       ] 
 ^  ] k        l m         x          ¡  
          a     ¾*´ +¹ } +º ¢  ¶ À ]N-¶ £,¶ ¶ ¤ **´ ,¶ ¹  ¶  » $Y² &½ ,Y¨S· 0¿-,¶ ª¶ ­-,¶ ±¶ ´-,¶ ¶ ·-,¶ º¶ ½-¶ À¹ Ã ,¶ <*-º Ç  ¹ Ë -¶ Ï¹ Ã ,¶ ÒÆ -¶ Ï,¶ Ò¹ Ó W*´ -¹ b À ]:*´ 4¹ f °    j   F    k 
 l  k  p % q 8 r L w T x \ y d z l } u ~       £  ²  k   4    ¾ l m     ¾      ¾ n o   § × q  ²  Ø q  w    ü L ]û V x   	    n    Ù Ú  
           ®     B*´ +¹ } +º Û  ¶ À ]M,¶ Ü¹ ß  » $Y² â½ ,YåS· 0¿*´ ,¹ ç ±    j   & 	    
      #  0  2  7 £ A ¤ k        B l m     B     + p q  w    ü 7 ] x        2 ë  ì     í      \     *· î*+µ *,µ 4*-µ ð±    j        k   *     l m                  	 
  x   
     	  ò ó     X     *´ ð,¹ ô N-+¶ ù-°    j       :  ;  < k         l m      ÿ     
     G     » $Y² â½ ,Y*¸º	  S· 0°    j       Q 
 R  Q  R k     

     G     » $Y² â½ ,Y*¸º  S· 0°    j       l 
 m  l  m k          f     *´ ð,¹ ô N-+¶ ù+¶ À-¹ W±    j              k         l m      ÿ     
     G     » $Y² â½ ,Y*¸º  S· 0°    j        
      k          
         P 	! "%&! (+-! ./0! 145! 69;! <?@F GF IF KM   
 NPR 
```
```java
Êþº¾   =  +br/com/legalconnect/service/ServicoEndereco  java/lang/Object repositorioEndereco 4Lbr/com/legalconnect/repository/RepositorioEndereco; enderecoMapper +Lbr/com/legalconnect/mapper/EnderecoMapper; cadastrarEndereco [(Lbr/com/legalconnect/dto/EnderecoRequestDTO;)Lbr/com/legalconnect/dto/EnderecoResponseDTO; RuntimeVisibleAnnotations :Lorg/springframework/transaction/annotation/Transactional; Code	        )br/com/legalconnect/mapper/EnderecoMapper   toEntity S(Lbr/com/legalconnect/dto/EnderecoRequestDTO;)Lbr/com/legalconnect/entity/Endereco;	        2br/com/legalconnect/repository/RepositorioEndereco   save &(Ljava/lang/Object;)Ljava/lang/Object;  #br/com/legalconnect/entity/Endereco  ! " # 
toResponseDTO T(Lbr/com/legalconnect/entity/Endereco;)Lbr/com/legalconnect/dto/EnderecoResponseDTO; LineNumberTable LocalVariableTable this -Lbr/com/legalconnect/service/ServicoEndereco; 
requestDTO ,Lbr/com/legalconnect/dto/EnderecoRequestDTO; endereco %Lbr/com/legalconnect/entity/Endereco; 
savedEndereco MethodParameters buscarEnderecoPorId ?(Ljava/util/UUID;)Lbr/com/legalconnect/dto/EnderecoResponseDTO; readOnly     3 4 5 findById ((Ljava/lang/Object;)Ljava/util/Optional;   7 8 9 get /(Ljava/util/UUID;)Ljava/util/function/Supplier;
 ; = < java/util/Optional > ? orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; id Ljava/util/UUID; listarEnderecos ()Ljava/util/List; 	Signature A()Ljava/util/List<Lbr/com/legalconnect/dto/EnderecoResponseDTO;>;  G H C findAll J L K java/util/List M N stream ()Ljava/util/stream/Stream;
  P Q R getClass ()Ljava/lang/Class;  T U V apply J(Lbr/com/legalconnect/mapper/EnderecoMapper;)Ljava/util/function/Function; X Z Y java/util/stream/Stream [ \ map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 ^ ` _ java/util/stream/Collectors a b toList ()Ljava/util/stream/Collector; X d e f collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; atualizarEndereco k(Ljava/util/UUID;Lbr/com/legalconnect/dto/EnderecoRequestDTO;)Lbr/com/legalconnect/dto/EnderecoResponseDTO;  7
 k m l *br/com/legalconnect/dto/EnderecoRequestDTO n o 
getLogradouro ()Ljava/lang/String;
  q r s 
setLogradouro (Ljava/lang/String;)V
 k u v o 	getNumero
  x y s 	setNumero
 k { | o getComplemento
  ~  s setComplemento
 k   o 	getBairro
    s 	setBairro
 k   o 	getCidade
    s 	setCidade
 k   o 	getEstado
    s 	setEstado
 k   o getCep
    s setCep
 k   o getPais
    s setPais
 k    ¡ getTipoEndereco 4()Lbr/com/legalconnect/entity/Endereco$TipoEndereco;
  £ ¤ ¥ setTipoEndereco 5(Lbr/com/legalconnect/entity/Endereco$TipoEndereco;)V existingEndereco updatedEndereco excluirEndereco (Ljava/util/UUID;)V  « ¬ ­ 
existsById (Ljava/lang/Object;)Z ¯ 6br/com/legalconnect/common/exception/BusinessException	 ± ³ ² .br/com/legalconnect/common/exception/ErrorCode ´ µ RESOURCE_NOT_FOUND 0Lbr/com/legalconnect/common/exception/ErrorCode; · java/lang/String
 ¶ ¹ º » valueOf &(Ljava/lang/Object;)Ljava/lang/String;  ½ ¾ ¿ makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String;
 ® Á Â Ã <init> F(Lbr/com/legalconnect/common/exception/ErrorCode;[Ljava/lang/String;)V  Å Æ Ç 
deleteById (Ljava/lang/Object;)V 
StackMapTable b(Lbr/com/legalconnect/repository/RepositorioEndereco;Lbr/com/legalconnect/mapper/EnderecoMapper;)V RuntimeInvisibleAnnotations Llombok/Generated;
  Í Â Î ()V lambda$0 J(Ljava/util/UUID;)Lbr/com/legalconnect/common/exception/BusinessException;  ½ lambda$2  ½ 
SourceFile ServicoEndereco.java (Lorg/springframework/stereotype/Service; BootstrapMethods
 Ù Û Ú "java/lang/invoke/LambdaMetafactory Ü Ý metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; Ø ()Ljava/lang/Object; ß
  â Ï Ð á :()Lbr/com/legalconnect/common/exception/BusinessException; ä 	   # ß
  ë Ò Ð ê ä
 ï ñ ð $java/lang/invoke/StringConcatFactory ¾ ò (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; î õ 2EndereÃ§o com ID  nÃ£o encontrado para exclusÃ£o. ÷ #EndereÃ§o com ID  nÃ£o encontrado. ù 6EndereÃ§o com ID  nÃ£o encontrado para atualizaÃ§Ã£o. InnerClasses ü 0br/com/legalconnect/entity/Endereco$TipoEndereco TipoEndereco ÿ %java/lang/invoke/MethodHandles$Lookup java/lang/invoke/MethodHandles Lookup !                  	 
          
   t     $*´ +¹  M*´ ,¹  À N*´ -¹   °    $       (  )  * %   *    $ & '     $ ( )    * +    , +  -    (    . /         0Z 1 
   l     "*´ +¹ 2 +º 6  ¶ :À M*´ ,¹   °    $       5 
 6  5  8 %        " & '     " @ A    * +  -    @    B C  D    E        0Z 1 
   c     -*´ ¹ F ¹ I *´ Y¶ OWº S  ¹ W ¸ ]¹ c À J°    $       A  B ! C , A %       - & '    g h          
        z*´ +¹ 2 +º i  ¶ :À N-,¶ j¶ p-,¶ t¶ w-,¶ z¶ }-,¶ ¶ -,¶ ¶ -,¶ ¶ -,¶ ¶ -,¶ ¶ -,¶ ¶ ¢*´ -¹  À :*´ ¹   °    $   :    O 
 P  O  T  U ' V / W 7 X ? Y G Z O [ W \ _ ^ n _ %   4    z & '     z @ A    z ( )   c ¦ +  n  § +  -   	 @   (    ¨ ©          
        3*´ +¹ ª  » ®Y² °½ ¶Y+¸ ¸º ¼  S· À¿*´ +¹ Ä ±    $       i 
 j  k # j ( m 2 n %       3 & '     3 @ A  È    ( -    @    Â É  Ê     Ë   
   M     *· Ì*+µ *,µ ±    $        %         & '               -   	    
 Ï Ð  
   G     » ®Y² °½ ¶Y*¸ ¸º Ñ  S· À°    $       6 
 7  6  7 %     
 Ò Ð  
   G     » ®Y² °½ ¶Y*¸ ¸º Ó  S· À°    $       P 
 Q  P  Q %       Ô    Õ      Ö   ×   2  Þ  à ã å Þ  æ ç è Þ  é ì í ó  ô ó  ö ó  ø ú     û  ý@ þ  
```
```java
Êþº¾   = ­  )br/com/legalconnect/service/ServicoPessoa  java/lang/Object repositorioPessoa 2Lbr/com/legalconnect/repository/RepositorioPessoa; pessoaMapper )Lbr/com/legalconnect/mapper/PessoaMapper; <init> ^(Lbr/com/legalconnect/repository/RepositorioPessoa;Lbr/com/legalconnect/mapper/PessoaMapper;)V RuntimeVisibleAnnotations 8Lorg/springframework/beans/factory/annotation/Autowired; "RuntimeVisibleParameterAnnotations 8Lorg/springframework/beans/factory/annotation/Qualifier; value pessoaMapperImpl Code
   	  ()V	    	     LineNumberTable LocalVariableTable this +Lbr/com/legalconnect/service/ServicoPessoa; MethodParameters buscarPessoaPorId =(Ljava/util/UUID;)Lbr/com/legalconnect/dto/PessoaResponseDTO; :Lorg/springframework/transaction/annotation/Transactional; readOnly    $ & % 0br/com/legalconnect/repository/RepositorioPessoa ' ( findById ((Ljava/lang/Object;)Ljava/util/Optional;   * + , get /(Ljava/util/UUID;)Ljava/util/function/Supplier;
 . 0 / java/util/Optional 1 2 orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; 4 !br/com/legalconnect/entity/Pessoa 6 8 7 'br/com/legalconnect/mapper/PessoaMapper 9 : 
toResponseDTO P(Lbr/com/legalconnect/entity/Pessoa;)Lbr/com/legalconnect/dto/PessoaResponseDTO; id Ljava/util/UUID; pessoa #Lbr/com/legalconnect/entity/Pessoa; listarTodasPessoas ()Ljava/util/List; 	Signature ?()Ljava/util/List<Lbr/com/legalconnect/dto/PessoaResponseDTO;>; $ D E @ findAll G I H java/util/List J K stream ()Ljava/util/stream/Stream;
  M N O getClass ()Ljava/lang/Class;  Q R S apply H(Lbr/com/legalconnect/mapper/PessoaMapper;)Ljava/util/function/Function; U W V java/util/stream/Stream X Y map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 [ ] \ java/util/stream/Collectors ^ _ toList ()Ljava/util/stream/Collector; U a b c collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; 
excluirPessoa (Ljava/util/UUID;)V $ g h i 
existsById (Ljava/lang/Object;)Z k 6br/com/legalconnect/common/exception/BusinessException	 m o n .br/com/legalconnect/common/exception/ErrorCode p q RESOURCE_NOT_FOUND 0Lbr/com/legalconnect/common/exception/ErrorCode; s java/lang/String
 r u v w valueOf &(Ljava/lang/Object;)Ljava/lang/String;  y z { makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String;
 j } 	 ~ F(Lbr/com/legalconnect/common/exception/ErrorCode;[Ljava/lang/String;)V $    
deleteById (Ljava/lang/Object;)V 
StackMapTable lambda$0 J(Ljava/util/UUID;)Lbr/com/legalconnect/common/exception/BusinessException;  y 
SourceFile ServicoPessoa.java (Lorg/springframework/stereotype/Service; BootstrapMethods
    "java/lang/invoke/LambdaMetafactory   metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;  ()Ljava/lang/Object; 
      :()Lbr/com/legalconnect/common/exception/BusinessException;  &(Ljava/lang/Object;)Ljava/lang/Object; 	 5 :
     $java/lang/invoke/StringConcatFactory z ¡ (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;  ¤ /Pessoa com ID  nÃ£o encontrada para exclusÃ£o. ¦  Pessoa com ID  nÃ£o encontrada. InnerClasses © %java/lang/invoke/MethodHandles$Lookup « java/lang/invoke/MethodHandles Lookup !                  	 
          
         s     Y     *· *+µ *,µ ±           %  ' 	 (  )                             	                   !Z "    l     "*´ +¹ # +º )  ¶ -À 3M*´ ,¹ 5 °           3 
 4  3  6         "       " ; <    = >      ;    ? @  A    B         !Z "    c     -*´ ¹ C ¹ F *´ Y¶ LWº P  ¹ T ¸ Z¹ ` À G°           ?  @ ! A , ?        -      d e                   3*´ +¹ f  » jY² l½ rY+¸ tº x  S· |¿*´ +¹  ±           Q 
 R  S # R ( U 2 V        3       3 ; <      (     ;  
       G     » jY² l½ rY*¸ tº   S· |°           4 
 5  4  5                        "            ¢  £ ¢  ¥ §   
  ¨ ª ¬ 
```
```java
Êþº¾   =   (br/com/legalconnect/service/ServicoPlano  java/lang/Object repositorioPlano 1Lbr/com/legalconnect/repository/RepositorioPlano; profissionalMapper /Lbr/com/legalconnect/mapper/ProfissionalMapper; buscarPlanoPorId <(Ljava/util/UUID;)Lbr/com/legalconnect/dto/PlanoResponseDTO; RuntimeVisibleAnnotations :Lorg/springframework/transaction/annotation/Transactional; readOnly    Code	        /br/com/legalconnect/repository/RepositorioPlano   findById ((Ljava/lang/Object;)Ljava/util/Optional;      get /(Ljava/util/UUID;)Ljava/util/function/Supplier;
    java/util/Optional   ! orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; #  br/com/legalconnect/entity/Plano	  %   ' ) ( -br/com/legalconnect/mapper/ProfissionalMapper * + toPlanoResponseDTO N(Lbr/com/legalconnect/entity/Plano;)Lbr/com/legalconnect/dto/PlanoResponseDTO; LineNumberTable LocalVariableTable this *Lbr/com/legalconnect/service/ServicoPlano; id Ljava/util/UUID; plano "Lbr/com/legalconnect/entity/Plano; MethodParameters listarTodosPlanos ()Ljava/util/List; 	Signature >()Ljava/util/List<Lbr/com/legalconnect/dto/PlanoResponseDTO;>;  : ; 6 findAll = ? > java/util/List @ A stream ()Ljava/util/stream/Stream;
  C D E getClass ()Ljava/lang/Class;  G H I apply N(Lbr/com/legalconnect/mapper/ProfissionalMapper;)Ljava/util/function/Function; K M L java/util/stream/Stream N O map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 Q S R java/util/stream/Collectors T U toList ()Ljava/util/stream/Collector; K W X Y collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; <init> c(Lbr/com/legalconnect/repository/RepositorioPlano;Lbr/com/legalconnect/mapper/ProfissionalMapper;)V RuntimeInvisibleAnnotations Llombok/Generated;
  _ Z ` ()V lambda$0 J(Ljava/util/UUID;)Lbr/com/legalconnect/common/exception/BusinessException; d 6br/com/legalconnect/common/exception/BusinessException	 f h g .br/com/legalconnect/common/exception/ErrorCode i j RESOURCE_NOT_FOUND 0Lbr/com/legalconnect/common/exception/ErrorCode; l java/lang/String
 k n o p valueOf &(Ljava/lang/Object;)Ljava/lang/String;  r s t makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String;
 c v Z w F(Lbr/com/legalconnect/common/exception/ErrorCode;[Ljava/lang/String;)V 
SourceFile ServicoPlano.java (Lorg/springframework/stereotype/Service; BootstrapMethods
 }  ~ "java/lang/invoke/LambdaMetafactory   metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite; | ()Ljava/lang/Object; 
   a b  :()Lbr/com/legalconnect/common/exception/BusinessException;  &(Ljava/lang/Object;)Ljava/lang/Object; 	 & +
    $java/lang/invoke/StringConcatFactory s  (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;   Plano com ID  nÃ£o encontrado. InnerClasses  %java/lang/invoke/MethodHandles$Lookup  java/lang/invoke/MethodHandles Lookup !                  	 
         
Z     l     "*´ +¹  +º   ¶ À "M*´ $,¹ & °    ,       + 
 ,  +  . -        " . /     " 0 1    2 3  4    0    5 6  7    8        
Z     c     -*´ ¹ 9 ¹ < *´ $Y¶ BWº F  ¹ J ¸ P¹ V À =°    ,       7  8 ! 9 , 7 -       - . /    Z [  \     ]      M     *· ^*+µ *,µ $±    ,        -         . /               4   	    
 a b     G     » cY² e½ kY*¸ mº q  S· u°    ,       , 
 -  ,  - -       x    y      z   {                     
     
```
```java
Êþº¾   = ­  'br/com/legalconnect/service/ServicoUser  java/lang/Object repositorioUser 0Lbr/com/legalconnect/repository/RepositorioUser; 
userMapper 'Lbr/com/legalconnect/mapper/UserMapper; buscarUserPorId ;(Ljava/util/UUID;)Lbr/com/legalconnect/dto/UserResponseDTO; RuntimeVisibleAnnotations :Lorg/springframework/transaction/annotation/Transactional; readOnly    Code	        .br/com/legalconnect/repository/RepositorioUser   findById ((Ljava/lang/Object;)Ljava/util/Optional;      get /(Ljava/util/UUID;)Ljava/util/function/Supplier;
    java/util/Optional   ! orElseThrow 1(Ljava/util/function/Supplier;)Ljava/lang/Object; # br/com/legalconnect/entity/User	  %   ' ) ( %br/com/legalconnect/mapper/UserMapper * + 
toResponseDTO L(Lbr/com/legalconnect/entity/User;)Lbr/com/legalconnect/dto/UserResponseDTO; LineNumberTable LocalVariableTable this )Lbr/com/legalconnect/service/ServicoUser; id Ljava/util/UUID; user !Lbr/com/legalconnect/entity/User; MethodParameters listarTodosUsers ()Ljava/util/List; 	Signature =()Ljava/util/List<Lbr/com/legalconnect/dto/UserResponseDTO;>;  : ; 6 findAll = ? > java/util/List @ A stream ()Ljava/util/stream/Stream;
  C D E getClass ()Ljava/lang/Class;  G H I apply F(Lbr/com/legalconnect/mapper/UserMapper;)Ljava/util/function/Function; K M L java/util/stream/Stream N O map 8(Ljava/util/function/Function;)Ljava/util/stream/Stream;
 Q S R java/util/stream/Collectors T U toList ()Ljava/util/stream/Collector; K W X Y collect 0(Ljava/util/stream/Collector;)Ljava/lang/Object; 
userExiste (Ljava/util/UUID;)Z  ] ^ _ 
existsById (Ljava/lang/Object;)Z buscarUserPorCpf ((Ljava/lang/String;)Ljava/util/Optional; S(Ljava/lang/String;)Ljava/util/Optional<Lbr/com/legalconnect/dto/UserResponseDTO;>;  d e a 	findByCpf
  g N h 3(Ljava/util/function/Function;)Ljava/util/Optional; cpf Ljava/lang/String; <init> Z(Lbr/com/legalconnect/repository/RepositorioUser;Lbr/com/legalconnect/mapper/UserMapper;)V RuntimeInvisibleAnnotations Llombok/Generated;
  p k q ()V lambda$0 J(Ljava/util/UUID;)Lbr/com/legalconnect/common/exception/BusinessException; u 6br/com/legalconnect/common/exception/BusinessException	 w y x .br/com/legalconnect/common/exception/ErrorCode z { USER_NOT_FOUND 0Lbr/com/legalconnect/common/exception/ErrorCode; } java/lang/String
 |    valueOf &(Ljava/lang/Object;)Ljava/lang/String;     makeConcatWithConstants &(Ljava/lang/String;)Ljava/lang/String;
 t  k  F(Lbr/com/legalconnect/common/exception/ErrorCode;[Ljava/lang/String;)V 
SourceFile ServicoUser.java (Lorg/springframework/stereotype/Service; BootstrapMethods
    "java/lang/invoke/LambdaMetafactory   metafactory Ì(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;  ()Ljava/lang/Object; 
   r s  :()Lbr/com/legalconnect/common/exception/BusinessException;  &(Ljava/lang/Object;)Ljava/lang/Object; 	 & +
   ¢ ¡ $java/lang/invoke/StringConcatFactory  £ (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;  ¦ "UsuÃ¡rio com ID  nÃ£o encontrado. InnerClasses © %java/lang/invoke/MethodHandles$Lookup « java/lang/invoke/MethodHandles Lookup !                  	 
         
Z     l     "*´ +¹  +º   ¶ À "M*´ $,¹ & °    ,       , 
 -  ,  / -        " . /     " 0 1    2 3  4    0    5 6  7    8        
Z     c     -*´ ¹ 9 ¹ < *´ $Y¶ BWº F  ¹ J ¸ P¹ V À =°    ,       8  9 ! : , 8 -       - . /    Z [         
Z     ?     *´ +¹ \ ¬    ,       D -        . /      0 1  4    0    ` a  7    b        
Z     X     *´ +¹ c *´ $Y¶ BWº F  ¶ f°    ,       N 
 O  N -        . /      i j  4    i    k l  m     n      M     *· o*+µ *,µ $±    ,        -         . /               4   	    
 r s     G     » tY² v½ |Y*¸ ~º   S· °    ,       - 
 .  -  . -                                   ¤  ¥ §   
  ¨ ª ¬ 
```
```java
<!DOCTYPE html>
<html lang="pt-BR" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title th:text="${subject}">Bem-vindo!</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f4f4f4;
        margin: 0;
        padding: 20px;
      }
      .container {
        max-width: 600px;
        margin: 0 auto;
        background: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }
      .header {
        text-align: center;
        padding-bottom: 20px;
        border-bottom: 1px solid #eee;
      }
      .header h1 {
        color: #007bff;
      }
      .content {
        padding: 20px 0;
      }
      .footer {
        text-align: center;
        padding-top: 20px;
        border-top: 1px solid #eee;
        font-size: 0.9em;
        color: #777;
      }
      .button {
        display: inline-block;
        background-color: #007bff;
        color: #ffffff;
        padding: 10px 20px;
        text-decoration: none;
        border-radius: 5px;
        margin-top: 20px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1 th:text="${title}">Olá!</h1>
      </div>
      <div class="content">
        <p>
          Prezado(a) <strong th:text="${userName}">Nome do Usuário</strong>,
        </p>
        <p>
          É com grande prazer que confirmamos seu cadastro em nossa plataforma.
        </p>
        <p>
          Seu e-mail de acesso é:
          <strong th:text="${userEmail}">email@example.com</strong>
        </p>
        <p th:text="${message}">
          Aproveite todas as funcionalidades que oferecemos!
        </p>

        <p style="text-align: center">
          <a
            th:href="${callToActionLink}"
            class="button"
            th:text="${callToActionText}"
            >Acessar Plataforma</a
          >
        </p>
      </div>
      <div class="footer">
        <p>
          Este é um e-mail de notificação automático. Por favor, não responda.
        </p>
        <p>
          &copy; <span th:text="${currentYear}">2025</span> Sua Empresa. Todos
          os direitos reservados.
        </p>
      </div>
    </div>
  </body>
</html>

```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.AdministradorRequestDTO;
import br.com.legalconnect.dto.AdministradorResponseDTO;
import br.com.legalconnect.dto.PessoaResponseDTO;
import br.com.legalconnect.entity.Administrador;
import br.com.legalconnect.entity.Pessoa;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:42:13-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class AdministradorMapperImpl implements AdministradorMapper {

    @Autowired
    private EnderecoMapper enderecoMapper;
    @Autowired
    private UserMapper userMapper;

    @Override
    public PessoaResponseDTO toResponseDTO(Pessoa entity) {
        if ( entity == null ) {
            return null;
        }

        PessoaResponseDTO.PessoaResponseDTOBuilder<?, ?> pessoaResponseDTO = PessoaResponseDTO.builder();

        pessoaResponseDTO.usuario( userMapper.toResponseDTO( entity.getUsuario() ) );
        pessoaResponseDTO.enderecos( enderecoMapper.toResponseDTOList( entity.getEnderecos() ) );
        Set<String> set = entity.getTelefones();
        if ( set != null ) {
            pessoaResponseDTO.telefones( new LinkedHashSet<String>( set ) );
        }
        pessoaResponseDTO.cpf( entity.getCpf() );
        pessoaResponseDTO.createdAt( entity.getCreatedAt() );
        pessoaResponseDTO.dataNascimento( entity.getDataNascimento() );
        pessoaResponseDTO.id( entity.getId() );
        pessoaResponseDTO.nomeCompleto( entity.getNomeCompleto() );
        pessoaResponseDTO.updatedAt( entity.getUpdatedAt() );

        return pessoaResponseDTO.build();
    }

    @Override
    public Administrador toEntity(AdministradorRequestDTO dto) {
        if ( dto == null ) {
            return null;
        }

        Administrador.AdministradorBuilder<?, ?> administrador = Administrador.builder();

        administrador.cpf( dto.getCpf() );
        administrador.dataNascimento( dto.getDataNascimento() );
        administrador.enderecos( enderecoMapper.toEntitySet( dto.getEnderecos() ) );
        administrador.nomeCompleto( dto.getNomeCompleto() );
        Set<String> set1 = dto.getTelefones();
        if ( set1 != null ) {
            administrador.telefones( new LinkedHashSet<String>( set1 ) );
        }
        administrador.usuario( userMapper.toEntity( dto.getUsuario() ) );
        administrador.status( dto.getStatus() );

        return administrador.build();
    }

    @Override
    public AdministradorResponseDTO toResponseDTO(Administrador entity) {
        if ( entity == null ) {
            return null;
        }

        AdministradorResponseDTO.AdministradorResponseDTOBuilder<?, ?> administradorResponseDTO = AdministradorResponseDTO.builder();

        administradorResponseDTO.status( entity.getStatus() );
        administradorResponseDTO.cpf( entity.getCpf() );
        administradorResponseDTO.createdAt( entity.getCreatedAt() );
        administradorResponseDTO.dataNascimento( entity.getDataNascimento() );
        administradorResponseDTO.enderecos( enderecoMapper.toResponseDTOList( entity.getEnderecos() ) );
        administradorResponseDTO.id( entity.getId() );
        administradorResponseDTO.nomeCompleto( entity.getNomeCompleto() );
        Set<String> set = entity.getTelefones();
        if ( set != null ) {
            administradorResponseDTO.telefones( new LinkedHashSet<String>( set ) );
        }
        administradorResponseDTO.updatedAt( entity.getUpdatedAt() );
        administradorResponseDTO.usuario( userMapper.toResponseDTO( entity.getUsuario() ) );

        return administradorResponseDTO.build();
    }
}

```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.ClienteRequestDTO;
import br.com.legalconnect.dto.ClienteResponseDTO;
import br.com.legalconnect.dto.PessoaResponseDTO;
import br.com.legalconnect.entity.Cliente;
import br.com.legalconnect.entity.Pessoa;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:42:13-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class ClienteMapperImpl implements ClienteMapper {

    @Autowired
    private EnderecoMapper enderecoMapper;
    @Autowired
    private UserMapper userMapper;

    @Override
    public PessoaResponseDTO toResponseDTO(Pessoa entity) {
        if ( entity == null ) {
            return null;
        }

        PessoaResponseDTO.PessoaResponseDTOBuilder<?, ?> pessoaResponseDTO = PessoaResponseDTO.builder();

        pessoaResponseDTO.usuario( userMapper.toResponseDTO( entity.getUsuario() ) );
        pessoaResponseDTO.enderecos( enderecoMapper.toResponseDTOList( entity.getEnderecos() ) );
        Set<String> set = entity.getTelefones();
        if ( set != null ) {
            pessoaResponseDTO.telefones( new LinkedHashSet<String>( set ) );
        }
        pessoaResponseDTO.cpf( entity.getCpf() );
        pessoaResponseDTO.createdAt( entity.getCreatedAt() );
        pessoaResponseDTO.dataNascimento( entity.getDataNascimento() );
        pessoaResponseDTO.id( entity.getId() );
        pessoaResponseDTO.nomeCompleto( entity.getNomeCompleto() );
        pessoaResponseDTO.updatedAt( entity.getUpdatedAt() );

        return pessoaResponseDTO.build();
    }

    @Override
    public Cliente toEntity(ClienteRequestDTO dto) {
        if ( dto == null ) {
            return null;
        }

        Cliente.ClienteBuilder<?, ?> cliente = Cliente.builder();

        cliente.cpf( dto.getCpf() );
        cliente.dataNascimento( dto.getDataNascimento() );
        cliente.enderecos( enderecoMapper.toEntitySet( dto.getEnderecos() ) );
        cliente.nomeCompleto( dto.getNomeCompleto() );
        Set<String> set1 = dto.getTelefones();
        if ( set1 != null ) {
            cliente.telefones( new LinkedHashSet<String>( set1 ) );
        }
        cliente.usuario( userMapper.toEntity( dto.getUsuario() ) );
        cliente.status( dto.getStatus() );

        return cliente.build();
    }

    @Override
    public ClienteResponseDTO toResponseDTO(Cliente entity) {
        if ( entity == null ) {
            return null;
        }

        ClienteResponseDTO.ClienteResponseDTOBuilder<?, ?> clienteResponseDTO = ClienteResponseDTO.builder();

        clienteResponseDTO.status( entity.getStatus() );
        clienteResponseDTO.cpf( entity.getCpf() );
        clienteResponseDTO.createdAt( entity.getCreatedAt() );
        clienteResponseDTO.dataNascimento( entity.getDataNascimento() );
        clienteResponseDTO.enderecos( enderecoMapper.toResponseDTOList( entity.getEnderecos() ) );
        clienteResponseDTO.id( entity.getId() );
        clienteResponseDTO.nomeCompleto( entity.getNomeCompleto() );
        Set<String> set = entity.getTelefones();
        if ( set != null ) {
            clienteResponseDTO.telefones( new LinkedHashSet<String>( set ) );
        }
        clienteResponseDTO.updatedAt( entity.getUpdatedAt() );
        clienteResponseDTO.usuario( userMapper.toResponseDTO( entity.getUsuario() ) );

        return clienteResponseDTO.build();
    }
}

```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.EmpresaRequestDTO;
import br.com.legalconnect.dto.EmpresaResponseDTO;
import br.com.legalconnect.entity.Empresa;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:42:12-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class EmpresaMapperImpl implements EmpresaMapper {

    @Autowired
    private EnderecoMapper enderecoMapper;

    @Override
    public Empresa toEntity(EmpresaRequestDTO dto) {
        if ( dto == null ) {
            return null;
        }

        Empresa.EmpresaBuilder<?, ?> empresa = Empresa.builder();

        empresa.enderecos( enderecoMapper.toEntitySet( dto.getEnderecos() ) );
        Set<String> set1 = dto.getTelefones();
        if ( set1 != null ) {
            empresa.telefones( new LinkedHashSet<String>( set1 ) );
        }
        empresa.cnpj( dto.getCnpj() );
        empresa.emailContato( dto.getEmailContato() );
        empresa.nomeFantasia( dto.getNomeFantasia() );
        empresa.razaoSocial( dto.getRazaoSocial() );

        return empresa.build();
    }

    @Override
    public EmpresaResponseDTO toResponseDTO(Empresa entity) {
        if ( entity == null ) {
            return null;
        }

        EmpresaResponseDTO.EmpresaResponseDTOBuilder empresaResponseDTO = EmpresaResponseDTO.builder();

        empresaResponseDTO.enderecos( enderecoMapper.toResponseDTOList( entity.getEnderecos() ) );
        Set<String> set = entity.getTelefones();
        if ( set != null ) {
            empresaResponseDTO.telefones( new LinkedHashSet<String>( set ) );
        }
        empresaResponseDTO.cnpj( entity.getCnpj() );
        empresaResponseDTO.createdAt( entity.getCreatedAt() );
        empresaResponseDTO.emailContato( entity.getEmailContato() );
        empresaResponseDTO.id( entity.getId() );
        empresaResponseDTO.nomeFantasia( entity.getNomeFantasia() );
        empresaResponseDTO.razaoSocial( entity.getRazaoSocial() );
        empresaResponseDTO.updatedAt( entity.getUpdatedAt() );

        return empresaResponseDTO.build();
    }
}

```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.EnderecoRequestDTO;
import br.com.legalconnect.dto.EnderecoResponseDTO;
import br.com.legalconnect.entity.Endereco;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:42:12-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class EnderecoMapperImpl implements EnderecoMapper {

    @Override
    public Endereco toEntity(EnderecoRequestDTO dto) {
        if ( dto == null ) {
            return null;
        }

        Endereco.EnderecoBuilder<?, ?> endereco = Endereco.builder();

        endereco.bairro( dto.getBairro() );
        endereco.cep( dto.getCep() );
        endereco.cidade( dto.getCidade() );
        endereco.complemento( dto.getComplemento() );
        endereco.estado( dto.getEstado() );
        endereco.logradouro( dto.getLogradouro() );
        endereco.numero( dto.getNumero() );
        endereco.pais( dto.getPais() );
        endereco.tipoEndereco( dto.getTipoEndereco() );

        return endereco.build();
    }

    @Override
    public EnderecoResponseDTO toResponseDTO(Endereco entity) {
        if ( entity == null ) {
            return null;
        }

        EnderecoResponseDTO.EnderecoResponseDTOBuilder enderecoResponseDTO = EnderecoResponseDTO.builder();

        enderecoResponseDTO.bairro( entity.getBairro() );
        enderecoResponseDTO.cep( entity.getCep() );
        enderecoResponseDTO.cidade( entity.getCidade() );
        enderecoResponseDTO.complemento( entity.getComplemento() );
        enderecoResponseDTO.createdAt( entity.getCreatedAt() );
        enderecoResponseDTO.estado( entity.getEstado() );
        enderecoResponseDTO.id( entity.getId() );
        enderecoResponseDTO.logradouro( entity.getLogradouro() );
        enderecoResponseDTO.numero( entity.getNumero() );
        enderecoResponseDTO.pais( entity.getPais() );
        enderecoResponseDTO.tipoEndereco( entity.getTipoEndereco() );
        enderecoResponseDTO.updatedAt( entity.getUpdatedAt() );

        return enderecoResponseDTO.build();
    }

    @Override
    public Set<Endereco> toEntitySet(List<EnderecoRequestDTO> dtoList) {
        if ( dtoList == null ) {
            return null;
        }

        Set<Endereco> set = new LinkedHashSet<Endereco>( Math.max( (int) ( dtoList.size() / .75f ) + 1, 16 ) );
        for ( EnderecoRequestDTO enderecoRequestDTO : dtoList ) {
            set.add( toEntity( enderecoRequestDTO ) );
        }

        return set;
    }

    @Override
    public List<EnderecoResponseDTO> toResponseDTOList(Set<Endereco> entitySet) {
        if ( entitySet == null ) {
            return null;
        }

        List<EnderecoResponseDTO> list = new ArrayList<EnderecoResponseDTO>( entitySet.size() );
        for ( Endereco endereco : entitySet ) {
            list.add( toResponseDTO( endereco ) );
        }

        return list;
    }
}

```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.PessoaResponseDTO;
import br.com.legalconnect.entity.Pessoa;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:42:12-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class PessoaMapperImpl implements PessoaMapper {

    @Autowired
    private UserMapper userMapper;
    @Autowired
    private EnderecoMapper enderecoMapper;

    @Override
    public PessoaResponseDTO toResponseDTO(Pessoa entity) {
        if ( entity == null ) {
            return null;
        }

        PessoaResponseDTO.PessoaResponseDTOBuilder<?, ?> pessoaResponseDTO = PessoaResponseDTO.builder();

        pessoaResponseDTO.usuario( userMapper.toResponseDTO( entity.getUsuario() ) );
        pessoaResponseDTO.enderecos( enderecoMapper.toResponseDTOList( entity.getEnderecos() ) );
        Set<String> set = entity.getTelefones();
        if ( set != null ) {
            pessoaResponseDTO.telefones( new LinkedHashSet<String>( set ) );
        }
        pessoaResponseDTO.cpf( entity.getCpf() );
        pessoaResponseDTO.createdAt( entity.getCreatedAt() );
        pessoaResponseDTO.dataNascimento( entity.getDataNascimento() );
        pessoaResponseDTO.id( entity.getId() );
        pessoaResponseDTO.nomeCompleto( entity.getNomeCompleto() );
        pessoaResponseDTO.updatedAt( entity.getUpdatedAt() );

        return pessoaResponseDTO.build();
    }
}

```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.PessoaResponseDTO;
import br.com.legalconnect.dto.PlanoResponseDTO;
import br.com.legalconnect.dto.ProfissionalRequestDTO;
import br.com.legalconnect.dto.ProfissionalResponseDTO;
import br.com.legalconnect.entity.Pessoa;
import br.com.legalconnect.entity.Plano;
import br.com.legalconnect.entity.Profissional;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:42:12-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class ProfissionalMapperImpl implements ProfissionalMapper {

    @Autowired
    private EnderecoMapper enderecoMapper;
    @Autowired
    private UserMapper userMapper;
    @Autowired
    private EmpresaMapper empresaMapper;

    @Override
    public PessoaResponseDTO toResponseDTO(Pessoa entity) {
        if ( entity == null ) {
            return null;
        }

        PessoaResponseDTO.PessoaResponseDTOBuilder<?, ?> pessoaResponseDTO = PessoaResponseDTO.builder();

        pessoaResponseDTO.usuario( userMapper.toResponseDTO( entity.getUsuario() ) );
        pessoaResponseDTO.enderecos( enderecoMapper.toResponseDTOList( entity.getEnderecos() ) );
        Set<String> set = entity.getTelefones();
        if ( set != null ) {
            pessoaResponseDTO.telefones( new LinkedHashSet<String>( set ) );
        }
        pessoaResponseDTO.cpf( entity.getCpf() );
        pessoaResponseDTO.createdAt( entity.getCreatedAt() );
        pessoaResponseDTO.dataNascimento( entity.getDataNascimento() );
        pessoaResponseDTO.id( entity.getId() );
        pessoaResponseDTO.nomeCompleto( entity.getNomeCompleto() );
        pessoaResponseDTO.updatedAt( entity.getUpdatedAt() );

        return pessoaResponseDTO.build();
    }

    @Override
    public Profissional toEntity(ProfissionalRequestDTO dto) {
        if ( dto == null ) {
            return null;
        }

        Profissional.ProfissionalBuilder<?, ?> profissional = Profissional.builder();

        profissional.cpf( dto.getCpf() );
        profissional.dataNascimento( dto.getDataNascimento() );
        profissional.enderecos( enderecoMapper.toEntitySet( dto.getEnderecos() ) );
        profissional.nomeCompleto( dto.getNomeCompleto() );
        Set<String> set1 = dto.getTelefones();
        if ( set1 != null ) {
            profissional.telefones( new LinkedHashSet<String>( set1 ) );
        }
        profissional.usuario( userMapper.toEntity( dto.getUsuario() ) );
        profissional.fazParteDePlano( dto.getFazParteDePlano() );
        profissional.numeroOab( dto.getNumeroOab() );
        profissional.statusProfissional( dto.getStatusProfissional() );
        profissional.usaMarketplace( dto.getUsaMarketplace() );

        return profissional.build();
    }

    @Override
    public ProfissionalResponseDTO toResponseDTO(Profissional entity) {
        if ( entity == null ) {
            return null;
        }

        ProfissionalResponseDTO.ProfissionalResponseDTOBuilder<?, ?> profissionalResponseDTO = ProfissionalResponseDTO.builder();

        profissionalResponseDTO.empresa( empresaMapper.toResponseDTO( entity.getEmpresa() ) );
        profissionalResponseDTO.plano( toPlanoResponseDTO( entity.getPlano() ) );
        profissionalResponseDTO.cpf( entity.getCpf() );
        profissionalResponseDTO.createdAt( entity.getCreatedAt() );
        profissionalResponseDTO.dataNascimento( entity.getDataNascimento() );
        profissionalResponseDTO.enderecos( enderecoMapper.toResponseDTOList( entity.getEnderecos() ) );
        profissionalResponseDTO.id( entity.getId() );
        profissionalResponseDTO.nomeCompleto( entity.getNomeCompleto() );
        Set<String> set = entity.getTelefones();
        if ( set != null ) {
            profissionalResponseDTO.telefones( new LinkedHashSet<String>( set ) );
        }
        profissionalResponseDTO.updatedAt( entity.getUpdatedAt() );
        profissionalResponseDTO.usuario( userMapper.toResponseDTO( entity.getUsuario() ) );
        profissionalResponseDTO.fazParteDePlano( entity.getFazParteDePlano() );
        profissionalResponseDTO.numeroOab( entity.getNumeroOab() );
        profissionalResponseDTO.statusProfissional( entity.getStatusProfissional() );
        profissionalResponseDTO.usaMarketplace( entity.getUsaMarketplace() );

        return profissionalResponseDTO.build();
    }

    @Override
    public PlanoResponseDTO toPlanoResponseDTO(Plano plano) {
        if ( plano == null ) {
            return null;
        }

        PlanoResponseDTO.PlanoResponseDTOBuilder planoResponseDTO = PlanoResponseDTO.builder();

        planoResponseDTO.acessoRelatoriosAvancados( plano.getAcessoRelatoriosAvancados() );
        planoResponseDTO.createdAt( plano.getCreatedAt() );
        planoResponseDTO.descricao( plano.getDescricao() );
        planoResponseDTO.id( plano.getId() );
        planoResponseDTO.isDefault( plano.getIsDefault() );
        planoResponseDTO.limiteServicosAgendaveis( plano.getLimiteServicosAgendaveis() );
        planoResponseDTO.nome( plano.getNome() );
        planoResponseDTO.periodoTesteDias( plano.getPeriodoTesteDias() );
        planoResponseDTO.permitePedidosOrcamento( plano.getPermitePedidosOrcamento() );
        planoResponseDTO.precoAnual( plano.getPrecoAnual() );
        planoResponseDTO.precoMensal( plano.getPrecoMensal() );
        planoResponseDTO.updatedAt( plano.getUpdatedAt() );
        planoResponseDTO.visibilidadeDestaque( plano.getVisibilidadeDestaque() );

        return planoResponseDTO.build();
    }
}

```
```java
package br.com.legalconnect.mapper;

import br.com.legalconnect.dto.UserRequestDTO;
import br.com.legalconnect.dto.UserResponseDTO;
import br.com.legalconnect.entity.User;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-07-25T19:42:13-0300",
    comments = "version: 1.5.5.Final, compiler: Eclipse JDT (IDE) 3.42.50.v20250628-1110, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class UserMapperImpl implements UserMapper {

    @Override
    public User toEntity(UserRequestDTO dto) {
        if ( dto == null ) {
            return null;
        }

        User.UserBuilder<?, ?> user = User.builder();

        user.email( dto.getEmail() );

        return user.build();
    }

    @Override
    public UserResponseDTO toResponseDTO(User entity) {
        if ( entity == null ) {
            return null;
        }

        UserResponseDTO.UserResponseDTOBuilder userResponseDTO = UserResponseDTO.builder();

        userResponseDTO.email( entity.getEmail() );
        userResponseDTO.createdAt( entity.getCreatedAt() );
        userResponseDTO.id( entity.getId() );
        userResponseDTO.updatedAt( entity.getUpdatedAt() );

        return userResponseDTO.build();
    }
}

```
```java
Êþº¾   =   Abr/com/legalconnect/auth/auth_service/AuthServiceApplicationTests  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this CLbr/com/legalconnect/auth/auth_service/AuthServiceApplicationTests; contextLoads RuntimeVisibleAnnotations Lorg/junit/jupiter/api/Test; 
SourceFile  AuthServiceApplicationTests.java 6Lorg/springframework/boot/test/context/SpringBootTest;                  /     *· ±    
                 
                   +      ±    
                 
                
```
```java
/mvnw text eol=lf
*.cmd text eol=crlf

```
```java
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

```
```java
# Read Me First
The following was discovered as part of building this project:

* The original package name 'br.com.legalconnect.common.common-lib' is invalid and this project uses 'br.com.legalconnect.common.common_lib' instead.

# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.5.3/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.5.3/maven-plugin/build-image.html)
* [Flyway Migration](https://docs.spring.io/spring-boot/3.5.3/how-to/data-initialization.html#howto.data-initialization.migration-tool.flyway)
* [Spring Boot DevTools](https://docs.spring.io/spring-boot/3.5.3/reference/using/devtools.html)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.


```
```java
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

```
```java
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

```
```java
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.5</version> <!-- Versão estável do Spring Boot 3 -->
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>br.com.legalconnect</groupId>
	<artifactId>eureka-server</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>legalconnect-eureka-server</name>
	<description>Eureka Server for LegalConnect Microservices</description>

	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2023.0.1</spring-cloud.version> <!-- Versão compatível com Spring Boot
		3.2.x -->
	</properties>

	<dependencies>
		<!-- Spring Boot Starter para aplicações web (necessário para o Eureka Server) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- Spring Cloud Eureka Server para habilitar a funcionalidade de servidor de descoberta -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>
		<!-- Lombok para reduzir boilerplate code (getters, setters, construtores, etc.) -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<!-- Spring Boot Starter para testes -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
```
```java
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip

```
```java
{
  "configurations": [
    {
      "type": "java",
      "name": "Spring Boot-EurekaServerApplication<eureka-server>",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "mainClass": "br.com.legalconnect.eurekaserver.EurekaServerApplication",
      "projectName": "eureka-server",
      "args": "",
      "envFile": "${workspaceFolder}/.env"
    }
  ]
}

```
```java
package br.com.legalconnect.eurekaserver;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

/**
 * Classe principal da aplicação Spring Boot para o Eureka Server.
 * <p>
 * Anotada com {@code @SpringBootApplication} para habilitar a configuração
 * automática do Spring Boot,
 * varredura de componentes e configurações de beans.
 * <p>
 * Anotada com {@code @EnableEurekaServer} para habilitar este microsserviço
 * como um servidor de descoberta
 * de serviços Eureka. Ele será responsável por registrar e fornecer informações
 * sobre outros microsserviços
 * que se conectarem a ele.
 */
@SpringBootApplication
@EnableEurekaServer
public class EurekaServerApplication {

    /**
     * Método principal que inicia a aplicação Spring Boot do Eureka Server.
     *
     * @param args Argumentos de linha de comando passados para a aplicação.
     */
    public static void main(String[] args) {
        SpringApplication.run(EurekaServerApplication.class, args);
    }

}

```
```java
# Configurações do Servidor
server.port=8761

# Nome da aplicação Spring Boot, usado para registro no Eureka.
spring.application.name=eureka-server

# Configurações do Eureka Server
# Desabilita o registro do próprio Eureka Server como cliente (ele é o servidor).
eureka.client.register-with-eureka=false
# Desabilita a busca de outros serviços pelo próprio Eureka Server (ele não precisa de outros).
eureka.client.fetch-registry=false
# Define a URL do serviço Eureka (aponta para si mesmo).
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/

# Configurações de instância do Eureka Server
# Define o hostname da instância do Eureka Server.
eureka.instance.hostname=localhost
# Desabilita a funcionalidade de renovação de aluguéis para o próprio servidor Eureka.
eureka.server.enable-self-preservation=false
# Define o tempo de expiração do cache de renovação de aluguéis.
eureka.server.eviction-interval-timer-in-ms=10000

eureka.client.registerWithEureka=false
eureka.client.fetchRegistry=false 
```
```java
package br.com.legalconnect.common.common_lib;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class CommonLibApplicationTests {

	@Test
	void contextLoads() {
	}

}

```
```java
# Configurações do Servidor
server.port=8761

# Nome da aplicação Spring Boot, usado para registro no Eureka.
spring.application.name=eureka-server

# Configurações do Eureka Server
# Desabilita o registro do próprio Eureka Server como cliente (ele é o servidor).
eureka.client.register-with-eureka=false
# Desabilita a busca de outros serviços pelo próprio Eureka Server (ele não precisa de outros).
eureka.client.fetch-registry=false
# Define a URL do serviço Eureka (aponta para si mesmo).
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/

# Configurações de instância do Eureka Server
# Define o hostname da instância do Eureka Server.
eureka.instance.hostname=localhost
# Desabilita a funcionalidade de renovação de aluguéis para o próprio servidor Eureka.
eureka.server.enable-self-preservation=false
# Define o tempo de expiração do cache de renovação de aluguéis.
eureka.server.eviction-interval-timer-in-ms=10000

eureka.client.registerWithEureka=false
eureka.client.fetchRegistry=false 
```
```java
Êþº¾   =   8br/com/legalconnect/eurekaserver/EurekaServerApplication  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this :Lbr/com/legalconnect/eurekaserver/EurekaServerApplication; main ([Ljava/lang/String;)V
    *org/springframework/boot/SpringApplication   run b(Ljava/lang/Class;[Ljava/lang/String;)Lorg/springframework/context/ConfigurableApplicationContext; args [Ljava/lang/String; MethodParameters 
SourceFile EurekaServerApplication.java RuntimeVisibleAnnotations >Lorg/springframework/boot/autoconfigure/SpringBootApplication; DLorg/springframework/cloud/netflix/eureka/server/EnableEurekaServer; !               /     *· ±    
                 
   	       6     *¸ W±    
   
                                   
       
```
```java
Êþº¾   =   ?br/com/legalconnect/common/common_lib/CommonLibApplicationTests  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this ALbr/com/legalconnect/common/common_lib/CommonLibApplicationTests; contextLoads RuntimeVisibleAnnotations Lorg/junit/jupiter/api/Test; 
SourceFile CommonLibApplicationTests.java 6Lorg/springframework/boot/test/context/SpringBootTest;                  /     *· ±    
                 
                   +      ±    
                 
                
```
```java
/mvnw text eol=lf
*.cmd text eol=crlf

```
```java
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

```
```java
# Read Me First
The following was discovered as part of building this project:

* The original package name 'br.com.legalconnect.common.common-lib' is invalid and this project uses 'br.com.legalconnect.common.common_lib' instead.

# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.5.3/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.5.3/maven-plugin/build-image.html)
* [Flyway Migration](https://docs.spring.io/spring-boot/3.5.3/how-to/data-initialization.html#howto.data-initialization.migration-tool.flyway)
* [Spring Boot DevTools](https://docs.spring.io/spring-boot/3.5.3/reference/using/devtools.html)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.


```
```java
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"

```
```java
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"

```
```java
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.0</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>br.com.legalconnect</groupId>
	<artifactId>shared-configs</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>shared-configs</name>
	<description>Módulo de configurações compartilhadas para microsserviços LegalConnect</description>
	<packaging>jar</packaging> <!-- Define como um módulo JAR, não uma aplicação executável -->

	<properties>
		<java.version>17</java.version>
		<springdoc.version>2.1.0</springdoc.version> <!-- Versão do Springdoc OpenAPI -->
	</properties>

	<dependencies>
		<!-- Spring Boot Starter para funcionalidades básicas do Spring (necessário para
		@Configuration, @Bean) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<!-- Spring Boot Starter Web para funcionalidades web (necessário para CORS e
		WebMvcConfigurer) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- Springdoc OpenAPI Starter WebMVC UI para documentação Swagger/OpenAPI -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${springdoc.version}</version>
		</dependency>

		<!-- Lombok para reduzir boilerplate code (Getters, Setters, etc.) -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Spring Boot Test para testes (opcional para um módulo de configuração, mas boa prática) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Plugin Maven para compilação -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<!-- Não incluir spring-boot-maven-plugin aqui, pois não é uma aplicação executável -->
		</plugins>
	</build>

</project>
```
```java
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip

```
```java
package br.com.legalconnect.common.common_lib;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SharedConfigsApplication {

	public static void main(String[] args) {
		SpringApplication.run(SharedConfigsApplication.class, args);
	}

}

```
```java

// shared-configs/src/main/java/br/com/legalconnect/common/config/OpenApiConfig.java
package br.com.legalconnect.common.config;

import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.servers.Server;

/**
 * @class OpenApiConfig
 * @brief Configuração do OpenAPI (Swagger) para documentação da API.
 *
 *        Esta classe define os metadados da API, como título, descrição,
 *        versão,
 *        informações de contato e licença. Também configura os servidores para
 *        a documentação, o que é útil em ambientes com API Gateways como Nginx.
 *
 *        A documentação estará disponível em:
 *        - Swagger UI: /swagger-ui.html
 *        - OpenAPI JSON: /v3/api-docs
 */
@Configuration
public class OpenApiConfig {

    /**
     * @brief Configura o bean principal do OpenAPI.
     * @return Uma instância de OpenAPI com as informações da API.
     */
    @Bean
    public OpenAPI myOpenAPI() {
        // Configuração do servidor de desenvolvimento
        Server devServer = new Server();
        devServer.setUrl("http://localhost:8080"); // URL para ambiente de desenvolvimento
        devServer.setDescription("URL do Servidor de Desenvolvimento");

        // Configuração do servidor de produção (exemplo, ajuste conforme seu
        // Nginx/domínio)
        Server prodServer = new Server();
        // Em um cenário real com Nginx, esta seria a URL do seu API Gateway
        prodServer.setUrl("https://api.legalconnect.com.br");
        prodServer.setDescription("URL do Servidor de Produção (via Nginx API Gateway)");

        // Informações de contato
        Contact contact = new Contact();
        contact.setEmail("contato@legalconnect.com.br");
        contact.setName("LegalConnect Suporte");
        contact.setUrl("https://www.legalconnect.com.br");

        // Informações de licença
        License mitLicense = new License().name("MIT License").url("https://choosealicense.com/licenses/mit/");

        // Informações gerais da API
        Info info = new Info()
                .title("LegalConnect - Microsserviço de Autenticação API")
                .version("1.0")
                .contact(contact)
                .description(
                        "Documentação da API do microsserviço de autenticação e autorização da plataforma LegalConnect.")
                .termsOfService("https://www.legalconnect.com.br/terms")
                .license(mitLicense);

        // Retorna o objeto OpenAPI completo com informações e servidores
        return new OpenAPI()
                .info(info)
                .servers(List.of(devServer, prodServer)); // Adiciona múltiplos servidores
    }
}
```
```java

// shared-configs/src/main/java/br/com/legalconnect/common/config/WebConfig.java
package br.com.legalconnect.common.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

/**
 * @class WebConfig
 * @brief Configuração global de CORS (Cross-Origin Resource Sharing) para a
 *        aplicação.
 *
 *        Esta classe implementa `WebMvcConfigurer` para personalizar o
 *        comportamento
 *        do Spring MVC, especificamente para permitir requisições CORS de
 *        origens
 *        configuradas. Em um ambiente de produção com Nginx como API Gateway,
 *        o CORS pode ser configurado tanto no Nginx quanto na aplicação.
 *        É uma boa prática ter uma camada de CORS na aplicação também, como
 *        fallback ou para desenvolvimento.
 */
@Configuration
@EnableWebMvc // Habilita a configuração do Spring MVC via Java
public class WebConfig implements WebMvcConfigurer {

    /**
     * @brief Configura as regras de CORS.
     *
     *        Permite requisições de origens específicas, com métodos HTTP
     *        permitidos,
     *        cabeçalhos e credenciais.
     *
     * @param registry O CorsRegistry para adicionar as configurações de CORS.
     */
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**") // Aplica a configuração a todos os endpoints
                .allowedOrigins(
                        "http://localhost:3000", // Exemplo: Frontend em desenvolvimento
                        "http://localhost:4200", // Exemplo: Outro frontend em desenvolvimento
                        "https://app.legalconnect.com.br", // Exemplo: Frontend em produção
                        "https://admin.legalconnect.com.br" // Exemplo: Painel administrativo em produção
                ) // Permite requisições destas origens
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD") // Métodos HTTP permitidos
                .allowedHeaders("*") // Permite todos os cabeçalhos
                .allowCredentials(true) // Permite o envio de cookies e cabeçalhos de autorização
                .maxAge(3600); // Tempo máximo em segundos que as informações de preflight CORS podem ser
                               // cacheadas
    }
}
```
```java
spring.application.name=common-lib

```
```java
package br.com.legalconnect.common.common_lib;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class CommonLibApplicationTests {

	@Test
	void contextLoads() {
	}

}

```
```java
spring.application.name=common-lib

```
```java
Êþº¾   =   ,br/com/legalconnect/SharedConfigsApplication  java/lang/Object <init> ()V Code 	 java/lang/Error  Unresolved compilation problem: 
	The declared package "br.com.legalconnect.common.common_lib" does not match the expected package "br.com.legalconnect"

  
   (Ljava/lang/String;)V LineNumberTable LocalVariableTable this .Lbr/com/legalconnect/SharedConfigsApplication; main ([Ljava/lang/String;)V  !Unresolved compilation problem: 
 args MethodParameters 
SourceFile SharedConfigsApplication.java RuntimeVisibleAnnotations >Lorg/springframework/boot/autoconfigure/SpringBootApplication; !               4     
» Y
· ¿                   
     	       *     
» Y· ¿           	                           
```
```java
Êþº¾   = }  /br/com/legalconnect/common/config/OpenApiConfig  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this 1Lbr/com/legalconnect/common/config/OpenApiConfig; 	myOpenAPI $()Lio/swagger/v3/oas/models/OpenAPI; RuntimeVisibleAnnotations -Lorg/springframework/context/annotation/Bean;  'io/swagger/v3/oas/models/servers/Server
  	  http://localhost:8080
     setUrl (Ljava/lang/String;)V  "URL do Servidor de Desenvolvimento
     setDescription ! https://api.legalconnect.com.br # 5URL do Servidor de ProduÃ§Ã£o (via Nginx API Gateway) % %io/swagger/v3/oas/models/info/Contact
 $ 	 ( contato@legalconnect.com.br
 $ * +  setEmail - LegalConnect Suporte
 $ / 0  setName 2 https://www.legalconnect.com.br
 $  5 %io/swagger/v3/oas/models/info/License
 4 	 8 MIT License
 4 : ; < name ;(Ljava/lang/String;)Lio/swagger/v3/oas/models/info/License; > (https://choosealicense.com/licenses/mit/
 4 @ A < url C "io/swagger/v3/oas/models/info/Info
 B 	 F 3LegalConnect - MicrosserviÃ§o de AutenticaÃ§Ã£o API
 B H I J title 8(Ljava/lang/String;)Lio/swagger/v3/oas/models/info/Info; L 1.0
 B N O J version
 B Q R S contact M(Lio/swagger/v3/oas/models/info/Contact;)Lio/swagger/v3/oas/models/info/Info; U eDocumentaÃ§Ã£o da API do microsserviÃ§o de autenticaÃ§Ã£o e autorizaÃ§Ã£o da plataforma LegalConnect.
 B W X J description Z %https://www.legalconnect.com.br/terms
 B \ ] J termsOfService
 B _ ` a license M(Lio/swagger/v3/oas/models/info/License;)Lio/swagger/v3/oas/models/info/Info; c  io/swagger/v3/oas/models/OpenAPI
 b 	
 b f g h info H(Lio/swagger/v3/oas/models/info/Info;)Lio/swagger/v3/oas/models/OpenAPI; j l k java/util/List m n of 6(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/List;
 b p q r servers 4(Ljava/util/List;)Lio/swagger/v3/oas/models/OpenAPI; 	devServer )Lio/swagger/v3/oas/models/servers/Server; 
prodServer 'Lio/swagger/v3/oas/models/info/Contact; 
mitLicense 'Lio/swagger/v3/oas/models/info/License; $Lio/swagger/v3/oas/models/info/Info; 
SourceFile OpenApiConfig.java 6Lorg/springframework/context/annotation/Configuration; !               /     *· ±    
                 
                 H     » Y· L+¶ +¶ » Y· M, ¶ ,"¶ » $Y· &N-'¶ )-,¶ .-1¶ 3» 4Y· 67¶ 9=¶ ?:» BY· DE¶ GK¶ M-¶ PT¶ VY¶ [¶ ^:» bY· d¶ e+,¸ i¶ o°    
   b    '  (  )  -  / " 0 ( 3 0 4 6 5 < 6 B 9 U < \ = a > f ? j A l @ o B t C y < { F  G  H  F    >      
     s t   t u t  0 ` R v  U ; w x  {  g y   z    {      |  
```
```java
Êþº¾   = P  +br/com/legalconnect/common/config/WebConfig  java/lang/Object  Borg/springframework/web/servlet/config/annotation/WebMvcConfigurer <init> ()V Code
     LineNumberTable LocalVariableTable this -Lbr/com/legalconnect/common/config/WebConfig; addCorsMappings C(Lorg/springframework/web/servlet/config/annotation/CorsRegistry;)V  /**
    >org/springframework/web/servlet/config/annotation/CorsRegistry   
addMapping X(Ljava/lang/String;)Lorg/springframework/web/servlet/config/annotation/CorsRegistration;  java/lang/String  http://localhost:3000  http://localhost:4200 ! https://app.legalconnect.com.br # !https://admin.legalconnect.com.br
 % ' & Borg/springframework/web/servlet/config/annotation/CorsRegistration ( ) allowedOrigins Y([Ljava/lang/String;)Lorg/springframework/web/servlet/config/annotation/CorsRegistration; + GET - POST / PUT 1 DELETE 3 OPTIONS 5 HEAD
 % 7 8 ) allowedMethods : *
 % < = ) allowedHeaders
 % ? @ A allowCredentials G(Z)Lorg/springframework/web/servlet/config/annotation/CorsRegistration;      
 % E F G maxAge G(J)Lorg/springframework/web/servlet/config/annotation/CorsRegistration; registry @Lorg/springframework/web/servlet/config/annotation/CorsRegistry; MethodParameters 
SourceFile WebConfig.java RuntimeVisibleAnnotations 6Lorg/springframework/context/annotation/Configuration; @Lorg/springframework/web/servlet/config/annotation/EnableWebMvc; !            	   /     *· 
±            
                	   »     _+¶ ½ YSYSY SY"S¶ $½ Y*SY,SY.SY0SY2SY4S¶ 6½ Y9S¶ ;¶ > B¶ DW±       .    '  )  *  +  ,  ( ( . M / S 0 W 1 ^ 3 
       _       _ H I  J    H    K    L M   
  N   O  
```
```java
Êþº¾   =   ?br/com/legalconnect/common/common_lib/CommonLibApplicationTests  java/lang/Object <init> ()V Code
  	   LineNumberTable LocalVariableTable this ALbr/com/legalconnect/common/common_lib/CommonLibApplicationTests; contextLoads RuntimeVisibleAnnotations Lorg/junit/jupiter/api/Test; 
SourceFile CommonLibApplicationTests.java 6Lorg/springframework/boot/test/context/SpringBootTest;                  /     *· ±    
                 
                   +      ±    
                 
                
```