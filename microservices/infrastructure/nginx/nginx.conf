user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ==================== OTIMIZAÇÕES GLOBAIS ====================
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 75s;
    server_tokens off;
    client_max_body_size 20M;
    
    # Cache de arquivos abertos
    open_file_cache max=2000 inactive=20s;
    open_file_cache_valid 60s;
    open_file_cache_min_uses 5;
    open_file_cache_errors off;

    # ==================== COMPRESSÃO ====================
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 256;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/x-javascript
        application/xml
        font/opentype
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # ==================== CORS (ADAPTADO PARA AMBIENTE LOCAL) ====================
    # Permite origens locais (ex: localhost:3000, 127.0.0.1:8080)
    map $http_origin $cors_origin {
        default "";
        "~^https?://([a-z0-9-]+\.)?legalconnect\.com\.br(:[0-9]+)?$" $http_origin; # Manter para compatibilidade se precisar testar com domínio real
        "~^https?://localhost(:[0-9]+)?$" $http_origin;
        "~^https?://127\.0\.0\.1(:[0-9]+)?$" $http_origin; # Adicionado para 127.0.0.1
        "~^https?://0\.0\.0\.0(:[0-9]+)?$" $http_origin; # Adicionado para 0.0.0.0
    }

    # ==================== UPSTREAMS (ADAPTADO PARA SERVIÇOS LOCAIS) ====================
    # Assumindo que seus microsserviços estão rodando em localhost com portas diferentes
    upstream auth_service { server 127.0.0.1:8082; keepalive 32; }
    upstream user_profile_service { server 127.0.0.1:8083; keepalive 32; }
    upstream lawyer_profile_service { server 127.0.0.1:8084; keepalive 32; }
    upstream service_scheduling_service { server 127.0.0.1:8085; keepalive 32; }
    upstream payment_subscription_service { server 127.0.0.1:8086; keepalive 32; }
    upstream communication_lead_service { server 127.0.0.1:8087; keepalive 32; }
    upstream review_visit_service { server 127.0.0.1:8088; keepalive 32; }
    upstream admin_platform_service { server 127.0.0.1:8089; keepalive 32; }
    upstream public_api_gateway { server 127.0.0.1:8090; keepalive 32; } # Exemplo, ajuste a porta se o gateway não for 8090
    
    # Se você quiser que o Nginx sirva na porta 80, e os serviços na 80xx:
    # upstream auth_service { server localhost:8082; keepalive 32; }
    # ... e assim por diante.

    # ==================== SERVIDOR HTTP (PARA DEBUG LOCAL MAIS SIMPLES) ====================
    # Para simplificar o debug local, é mais comum rodar em HTTP.
    # Você pode manter o HTTPS se tiver um certificado autoassinado, mas para debug, HTTP é suficiente.
    server {
        listen 80; # Usar a porta 80 para facilitar o acesso local
        listen [::]:80;
        server_name localhost 127.0.0.1; # Adicionar localhost e 127.0.0.1

        # Nginx não emitirá HTTPS localmente, então removemos as configurações SSL
        # Caso queira HTTPS localmente, você precisará gerar certificados autoassinados
        # e ajustar os caminhos e configurações ssl_*.

        # ==================== HEADERS DE SEGURANÇA (MANTIDOS) ====================
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        add_header Permissions-Policy "geolocation=(), camera=(), microphone=()";

        # ==================== CONFIGURAÇÃO CORS ====================
        # O $cors_origin agora permite localhost e 127.0.0.1
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, put, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Tenant-ID, X-Requested-With' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Disposition' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        location / {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Se você tiver uma interface web que precise ser servida pelo Nginx localmente,
            # ajuste o root para o diretório dos seus arquivos estáticos.
            # Se o Nginx for apenas um proxy para APIs, pode remover ou deixar como está.
            root /usr/share/nginx/html; 
            index index.html;
            try_files $uri $uri/ =404;
        }

        # ==================== CONFIGURAÇÃO DOS MICROSSERVIÇOS ====================
        # A lógica para direcionar os microsserviços permanece a mesma,
        # mas agora eles apontam para 127.0.0.1 nas portas especificadas nos upstreams.
        location ~ ^/(auth|users|lawyers|services|payments|admin|communications|reviews)/ {
            proxy_pass http://${service}_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # ==================== SWAGGER UI CONFIGURADO PROFISSIONALMENTE ====================
        location ~ ^/(?<service>auth|user|lawyer|scheduling|payment|communication|review|admin)-docs/?$ {
            # O proxy_pass apontará para localhost:PORTA do seu serviço
            proxy_pass http://${service}-service/swagger-ui/; 
            proxy_set_header Host $host;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Fix para recursos estáticos do Swagger
            sub_filter_once off;
            sub_filter_types *;
            sub_filter '/swagger-ui/' '/$service-docs/';
            sub_filter 'url: "' 'url: "/$service-api"';
        }

        location ~ ^/(?<service>auth|user|lawyer|scheduling|payment|communication|review|admin)-api$ {
            # O proxy_pass apontará para localhost:PORTA do seu serviço
            proxy_pass http://${service}-service/v3/api-docs;
            proxy_set_header Host $host;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # ==================== HEALTH CHECKS ====================
        location /health {
            access_log off;
            add_header Content-Type application/json;
            return 200 '{"status":"healthy"}';
        }

        # ==================== MONITORAMENTO ====================
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }

        # ==================== PÁGINAS DE ERRO ====================
        error_page 400 401 403 404 /error-page.html;
        error_page 500 502 503 504 /error-server.html;
        
        location = /error-page.html {
            root /usr/share/nginx/html/errors;
            internal;
        }
        
        location = /error-server.html {
            root /usr/share/nginx/html/errors;
            internal;
        }
    }

    # ==================== REDIRECIONAMENTO HTTP → HTTPS (REMOVIDO PARA DEBUG LOCAL) ====================
    # Para debug local, geralmente não precisamos redirecionar para HTTPS,
    # pois a porta 80 já é a principal de acesso.
    # Se você quiser simular HTTPS localmente, precisará de certificados autoassinados
    # e um servidor HTTPS configurado.
    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name api.legalconnect.com.br;
    #     return 301 https://$host$request_uri;
    # }
}