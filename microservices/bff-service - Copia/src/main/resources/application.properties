# ===================================================================
# Configurações Gerais da Aplicação Spring Boot
# ===================================================================

# Nome da aplicação (usado em logs e monitoramento)
spring.application.name=bff-service

# Porta em que a aplicação BFF será executada
server.port=8080

# ===================================================================
# Configurações de Segurança (JWT)
# ===================================================================

# Chave secreta para assinar e verificar os JWTs.
# IMPORTANTE: Esta chave deve ser a MESMA utilizada no auth-service.
# Em produção, armazene-a de forma segura (ex: variáveis de ambiente, HashiCorp Vault).
application.security.jwt.secret-key=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Tempo de expiração do JWT em milissegundos (deve ser o mesmo do auth-service)
application.security.jwt.expiration=3600000

# Tempo de expiração do Refresh Token em milissegundos (deve ser o mesmo do auth-service)
application.security.jwt.refresh-expiration=604800000

# ===================================================================
# Configurações para Feign Clients (Comunicação entre Microsserviços)
# ===================================================================

# URLs dos microsserviços de backend que o BFF irá consumir
# Ajuste as portas e hosts conforme a sua topologia de deploy
feign.client.config.auth-service.url=http://localhost:8082
feign.client.config.user-service.url=http://localhost:8083

# Habilita o cliente HTTP do Feign (padrão é HttpURLConnection, mas pode ser OkHttp, Apache HttpClient)
# feign.httpclient.enabled=true # ou feign.okhttp.enabled=true

# ===================================================================
# Configurações de Logging (Logback)
# ===================================================================

# Nível de log padrão para a aplicação BFF
logging.level.br.com.legalconnect.bffpessoas=INFO
# Nível de log para o Spring Framework
logging.level.org.springframework=WARN
# Nível de log para OpenFeign (para depurar chamadas entre serviços)
logging.level.feign.okhttp.OkHttpClient=DEBUG # Se estiver usando OkHttp
logging.level.feign.Request=DEBUG
logging.level.feign.Response=DEBUG
logging.level.feign.codec.ErrorDecoder=DEBUG

# Nível de log para o MDC (Mapped Diagnostic Context)
logging.pattern.level=%5p [${spring.application.name},%X{traceId:-},%X{spanId:-},%X{userId:-},%X{tenantId:-}]

# ===================================================================
# Configurações do JPA e Hibernate (Apenas para Spring Security UserDetailsService)
# ===================================================================

# O BFF não possui um banco de dados próprio para entidades de negócio.
# No entanto, o Spring Security UserDetailsService pode precisar de um UserRepository.
# Se o UserDetailsService do BFF for "dummy" ou usar um client para buscar o usuário,
# estas configurações podem ser mínimas ou desnecessárias.
# Para este blueprint, assumimos que ele precisa de um DataSource mínimo para compilar
# com o UserRepository da common-lib.
spring.datasource.url=jdbc:h2:mem:bffdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.hibernate.ddl-auto=none # O BFF NÃO deve criar tabelas
spring.jpa.show-sql=false
spring.flyway.enabled=false
# ===================================================================
# Configurações do SpringDoc OpenAPI (Swagger UI)
# ===================================================================

springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packages-to-scan=br.com.legalconnect.bffpessoas.controller
springdoc.paths-to-match=/api/bff/v1/**

# ===================================================================
# Configurações de CORS (Cross-Origin Resource Sharing)
# ===================================================================

# Configuração de CORS global. Ajuste para os domínios do seu frontend em produção.
spring.web.cors.allowed-origins=* # Exemplo para desenvolvimento. Mudar para domínios específicos em produção.
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=false
spring.web.cors.max-age=3600

# ===================================================================
# Configurações para Proxy Reverso (Nginx, etc.)
# ===================================================================

# Habilita o processamento dos cabeçalhos X-Forwarded-* enviados por proxies.
server.forward-headers-strategy=FRAMEWORK

# Permite sobrescrever a definição de beans (útil em testes ou cenários específicos)
spring.main.allow-bean-definition-overriding=true
