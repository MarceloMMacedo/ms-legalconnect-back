<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.12</version> <!-- Mantém a versão do Spring Boot -->
        <relativePath /> <!-- lookup parent from repository -->
    </parent>

    <groupId>br.com.legalconnect.common</groupId>
    <artifactId>common-lib</artifactId>
    <version>1.0.1</version>
    <name>LegalConnect Common Library</name>
    <description>Common utilities, entities, and configurations for LegalConnect microservices</description>
    <packaging>jar</packaging> <!-- Define como um JAR de biblioteca -->

    <properties>
        <java.version>17</java.version> <!-- Defina a versão do Java que você está usando -->
        <lombok.version>1.18.30</lombok.version> <!-- Versão explícita para Lombok -->
        <org.mapstruct.version>1.5.5.Final</org.mapstruct.version> <!-- Versão explícita para
        MapStruct -->
        <!-- Removido springdoc.version e flyway.version pois são configurações mais específicas de
        aplicação -->
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Validation para anotações de validação em DTOs, útil em qualquer
        camada -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Spring Boot Starter Data JPA para BaseEntity e classes de persistência/multitenancy -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <!-- Excluí HikariCP, pois a aplicação pode fornecer sua própria implementação ou o
            default é OK -->
            <exclusions>
                <exclusion>
                    <groupId>com.zaxxer</groupId>
                    <artifactId>HikariCP</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Spring Context para anotações como @Configuration, @Component, etc., fundamental para
        uma lib Spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>

        <!-- Spring Security Core para GrantedAuthority (usado em UserDetails, por exemplo) em
        Roles.java -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
        </dependency>

        <!-- Spring Boot Starter JDBC, geralmente uma dependência transitória do JPA, mas explícito
        é bom -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>

        <!-- Jakarta Servlet API, necessário para WebRequest em GlobalExceptionHandler.
             Definido como 'provided' pois o container (Tomcat, Jetty) da aplicação cliente deve fornecê-lo. -->
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>6.0.0</version> <!-- Mantenha a versão compatível com seu Spring Boot -->
            <scope>provided</scope>
        </dependency>

        <!-- Adicionando spring-boot-starter-web para incluir as classes HTTP do Spring (como
        HttpStatus)
             e também o Jackson (com.fasterxml.jackson) transitivamente. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <!-- Excluir Tomcat se a lib não precisar de um servidor web embutido para testes ou
                bootstrap.
                     Se a lib for apenas um conjunto de classes utilitárias e não uma API com endpoints,
                     você pode mantê-lo excluído. Para uma lib que pode conter GlobalExceptionHandler,
                     ter o web starter é geralmente útil. -->
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Removida a dependência explícita do jackson-databind, pois spring-boot-starter-web a
        traz transitivamente. -->

        <!-- Lombok para reduzir boilerplate (getters, setters, construtores, builder) -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope> <!-- Apenas em tempo de compilação/desenvolvimento -->
        </dependency>

        <!-- MapStruct para mappers de DTOs, se a lib contiver mappers genéricos -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>

        <!-- Dependência para logging, usada em BaseEntity e GlobalExceptionHandler -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.13</version> <!-- Use uma versão compatível ou deixe o Spring Boot gerenciar -->
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${org.mapstruct.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>0.2.0</version> <!-- Mantenha esta versão para compatibilidade -->
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>