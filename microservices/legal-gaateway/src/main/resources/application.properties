# Configurações do Servidor
server.port=8080

# Configurações do Eureka Client
# URL do servidor Eureka onde o Gateway irá se registrar e descobrir serviços.
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
# Nome da instância do Gateway no Eureka.
eureka.instance.hostname=localhost
eureka.instance.instance-id=${spring.application.name}:${instanceId:${random.value}}
# Nome da aplicação Spring Boot, usado para registro no Eureka.
spring.application.name=api-gateway

# Configurações JWT
# A chave secreta para validação de JWTs. DEVE SER A MESMA USADA PELO AUTH-SERVICE.
# Em ambiente de produção, utilize uma chave forte e segura, preferencialmente via variáveis de ambiente.
jwt.secret=LegalConnectSecretKeyForJwtValidationAndMultiTenancyFeatures!

# Caminhos públicos que NÃO exigem autenticação JWT.
# Requisições para estes caminhos serão permitidas sem um token JWT válido.
# Ex: Endpoints de login, registro de usuário, documentação Swagger.
jwt.public.paths=/auth/**,/users/register,/swagger-ui.html/**,/v3/api-docs/**,/webjars/**

# Configurações de Rotas do Spring Cloud Gateway
# As rotas são definidas usando o nome do serviço registrado no Eureka (lb://SERVICE-ID).

# Rota para o auth-service
spring.cloud.gateway.routes[0].id=auth-service
spring.cloud.gateway.routes[0].uri=lb://AUTH-SERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/auth/**

# Rota para o user-service
spring.cloud.gateway.routes[1].id=user-service
spring.cloud.gateway.routes[1].uri=lb://USER-SERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/users/**
# Opcional: Adiciona um predicate para rotear também o swagger-ui do user-service via gateway.
# Isso permite acessar a documentação do microsserviço através do gateway (ex: /users/swagger-ui.html).
spring.cloud.gateway.routes[1].predicates[1]=Path=/users/swagger-ui/**

# Rota para o product-service (exemplo de outro microsserviço)
spring.cloud.gateway.routes[2].id=product-service
spring.cloud.gateway.routes[2].uri=lb://PRODUCT-SERVICE
spring.cloud.gateway.routes[2].predicates[0]=Path=/products/**

# Configurações do SpringDoc OpenAPI
# Habilita o Swagger UI no Gateway.
springdoc.swagger-ui.path=/swagger-ui.html
# Define o caminho para a documentação OpenAPI (JSON/YAML).
springdoc.api-docs.path=/v3/api-docs
# Define os pacotes a serem escaneados pelo SpringDoc para gerar a documentação.
# No caso do Gateway, ele documentará as rotas de proxy e os endpoints do próprio Gateway.
springdoc.packagesToScan=br.com.legalconnect.gateway
# Define os caminhos que o SpringDoc deve considerar para a documentação.
springdoc.pathsToMatch=/**
# Habilita o agrupamento de APIs, útil para organizar a documentação de múltiplos serviços.
springdoc.group-configs[0].group=gateway-api
springdoc.group-configs[0].pathsToMatch=/auth/**,/users/**,/products/**
springdoc.group-configs[0].display-name=Gateway API Routes