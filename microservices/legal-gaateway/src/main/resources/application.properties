# Configurações do Servidor
server.port=8080

# Configurações do Eureka Client
# URL do servidor Eureka onde o Gateway irá se registrar e descobrir serviços.
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
# Nome da instância do Gateway no Eureka.
eureka.instance.hostname=localhost
eureka.instance.instance-id=${spring.application.name}:${instanceId:${random.value}}
# Nome da aplicação Spring Boot, usado para registro no Eureka.
spring.application.name=api-gateway

# Configurações JWT
# A chave secreta para validação de JWTs. DEVE SER A MESMA USADA PELO AUTH-SERVICE.
# Em ambiente de produção, utilize uma chave forte e segura, preferencialmente via variáveis de ambiente.
jwt.secret=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970

# Caminhos públicos que NÃO exigem autenticação JWT.
# Requisições para estes caminhos serão permitidas sem um token JWT válido.
# Ex: Endpoints de login, registro de usuário, documentação Swagger.
 

# Configurações de Rotas do Spring Cloud Gateway
# As rotas são definidas usando o nome do serviço registrado no Eureka (lb://SERVICE-ID).
# Configurações do Servidor
s 
 

# Configurações JWT
# A chave secreta deve ser a mesma utilizada pelo seu auth-service. 

# Caminhos públicos que não exigem autenticação JWT
# Estes caminhos serão ignorados pelo filtro JwtAuthenticationGatewayFilter.
# Inclui os caminhos do Swagger UI do Gateway e as rotas públicas dos microsserviços.
jwt.public.paths=/auth/**,/users/register,/swagger-ui.html/**,/v3/api-docs/**,/webjars/**,/auth/swagger-ui/**,/auth/v3/api-docs/**,/users/swagger-ui/**,/users/v3/api-docs/**
# Configurações do Servidor
 

# Caminhos públicos que não exigem autenticação JWT
# Estes caminhos serão ignorados pelo filtro JwtAuthenticationGatewayFilter.
# Inclui os caminhos do Swagger UI do Gateway e as rotas públicas dos microsserviços.
 
# Configurações de Rotas do Spring Cloud Gateway
# Rotas definidas usando o nome do serviço descoberto via Eureka (lb://SERVICE-ID).

# --- ROTAS PARA AUTH-SERVICE ---
# Rota para os recursos webjars do auth-service (CSS, JS, etc.) - Prioridade alta
spring.cloud.gateway.routes[0].id=auth-service-webjars
spring.cloud.gateway.routes[0].uri=lb://AUTH-SERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/auth/webjars/**
spring.cloud.gateway.routes[0].filters[0]=RewritePath=/auth/(?<remaining>.*), /${remaining}

# Rota para a documentação OpenAPI JSON/YAML do auth-service - Prioridade média
spring.cloud.gateway.routes[1].id=auth-service-api-docs
spring.cloud.gateway.routes[1].uri=lb://AUTH-SERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/auth/v3/api-docs/**
spring.cloud.gateway.routes[1].filters[0]=RewritePath=/auth/(?<remaining>.*), /${remaining}

# Rota para o Swagger UI do auth-service - Prioridade média
spring.cloud.gateway.routes[2].id=auth-service-swagger-ui
spring.cloud.gateway.routes[2].uri=lb://AUTH-SERVICE
spring.cloud.gateway.routes[2].predicates[0]=Path=/auth/swagger-ui/**
spring.cloud.gateway.routes[2].filters[0]=RewritePath=/auth/(?<remaining>.*), /${remaining}

# Rota principal para o auth-service (endpoints de API) - Prioridade baixa
spring.cloud.gateway.routes[3].id=auth-service
spring.cloud.gateway.routes[3].uri=lb://AUTH-SERVICE
spring.cloud.gateway.routes[3].predicates[0]=Path=/auth/**


# --- ROTAS PARA USER-SERVICE ---
# Rota para os recursos webjars do user-service (CSS, JS, etc.) - Prioridade alta
spring.cloud.gateway.routes[4].id=user-service-webjars
spring.cloud.gateway.routes[4].uri=lb://USER-SERVICE
spring.cloud.gateway.routes[4].predicates[0]=Path=/users/webjars/**
spring.cloud.gateway.routes[4].filters[0]=RewritePath=/users/(?<remaining>.*), /${remaining}

# Rota para a documentação OpenAPI JSON/YAML do user-service - Prioridade média
spring.cloud.gateway.routes[5].id=user-service-api-docs
spring.cloud.gateway.routes[5].uri=lb://USER-SERVICE
spring.cloud.gateway.routes[5].predicates[0]=Path=/users/v3/api-docs/**
spring.cloud.gateway.routes[5].filters[0]=RewritePath=/users/(?<remaining>.*), /${remaining}

# Rota para o Swagger UI do user-service - Prioridade média
spring.cloud.gateway.routes[6].id=user-service-swagger-ui
spring.cloud.gateway.routes[6].uri=lb://USER-SERVICE
spring.cloud.gateway.routes[6].predicates[0]=Path=/users/swagger-ui/**
spring.cloud.gateway.routes[6].filters[0]=RewritePath=/users/(?<remaining>.*), /${remaining}

# Rota principal para o user-service (endpoints de API) - Prioridade baixa
spring.cloud.gateway.routes[7].id=user-service
spring.cloud.gateway.routes[7].uri=lb://USER-SERVICE
spring.cloud.gateway.routes[7].predicates[0]=Path=/users/**


# --- ROTAS PARA OUTROS MICROSSERVIÇOS ---
# Rota para o product-service (exemplo de outro microsserviço)
spring.cloud.gateway.routes[8].id=product-service
spring.cloud.gateway.routes[8].uri=lb://PRODUCT-SERVICE
spring.cloud.gateway.routes[8].predicates[0]=Path=/products/**


# Configurações do SpringDoc OpenAPI no Gateway
# O Swagger UI do Gateway agregará as rotas de proxy.
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packagesToScan=br.com.legalconnect.gateway
springdoc.pathsToMatch=/**
# Configurações para agregar as documentações dos microsserviços no Swagger UI do Gateway
springdoc.swagger-ui.urls[0].url=/auth/v3/api-docs
springdoc.swagger-ui.urls[0].name=Auth Service API
springdoc.swagger-ui.urls[1].url=/users/v3/api-docs
springdoc.swagger-ui.urls[1].name=User Service API
springdoc.swagger-ui.urls[2].url=/products/v3/api-docs
springdoc.swagger-ui.urls[2].name=Product Service API