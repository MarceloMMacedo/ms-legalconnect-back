# src/main/resources/application.properties
# Configuração do Servidor
server.port=8080

# Configuração da Aplicação
spring.application.name=legalconnect-gateway

# Configuração de Descoberta do Eureka
# URL do servidor Eureka. Agora lida por variável de ambiente.
eureka.client.service-url.defaultZone=${EUREKA_CLIENT_SERVICE_URL:http://localhost:8761/eureka}
# Habilita a busca do registro de serviços do Eureka.
eureka.client.fetch-registry=true
# Habilita o registro deste serviço no Eureka.
eureka.client.register-with-eureka=true
# Prefere o endereço IP ao invés do hostname para registro no Eureka.
eureka.instance.prefer-ip-address=true

# Gateway Discovery Configuration
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Swagger configuration
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.packagesToScan=br.com.legalconnect
spring.mvc.favicon.enabled=false

# Configuração do Actuator
# Inclui endpoints do Actuator para monitoramento de saúde e informações.
management.endpoints.web.exposure.include=health,info

# Configuração das rotas do Gateway
spring.cloud.gateway.routes[1].id=auth-service-route
spring.cloud.gateway.routes[1].uri=lb://auth-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/v1/auth/**
# spring.cloud.gateway.routes[1].filters[0]=AuthorizationHeaderFilter
# spring.cloud.gateway.global-filters[1].DedupeResponseHeader.strategy=RETAIN_LAST

# Configuração das rotas do Gateway
spring.cloud.gateway.routes[3].id=auth-service-route-private
spring.cloud.gateway.routes[3].uri=lb://auth-service
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/v1/privado/auth/**
spring.cloud.gateway.routes[3].filters[0]=AuthFilter
spring.cloud.gateway.global-filters[3].DedupeResponseHeader.strategy=RETAIN_LAST

spring.cloud.gateway.routes[0].id=clientes-route
spring.cloud.gateway.routes[0].uri=lb://legalconnect-usuario-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/v1/usuarios/**
spring.cloud.gateway.routes[0].filters[0]=AuthFilter
spring.cloud.gateway.global-filters[0].DedupeResponseHeader.strategy=RETAIN_LAST

spring.cloud.gateway.routes[2].id=advogados-route
spring.cloud.gateway.routes[2].uri=lb://legalconnect-advogados
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/v1/advogados/**
spring.cloud.gateway.routes[2].filters[0]=AuthFilter
spring.cloud.gateway.global-filters[2].DedupeResponseHeader.strategy=RETAIN_LAST

# Chave secreta JWT. Agora lida por variável de ambiente.
application.security.jwt.secret-key=${JWT_SECRET_KEY:404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970}

# Rotas públicas
application.security.public-paths=/auth/**,/swagger-ui/**,/v3/api-docs/**,/api/usuarios/swagger-ui.html,/api/usuarios/webjars/**,/api/usuarios/v3/api-docs/**

# Configurações específicas para a rota de clientes
application.security.routes.clientes.required-role=CLIENT
application.security.routes.clientes.required-scopes=client.read,client.write
# Desabilite o tratamento de erro padrão do Spring
spring.webflux.auto-configure-error=false
# spring.cloud.refresh.enabled=false

